+ model=deepseek-ai/deepseek-coder-6.7b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 06:14:54 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 06:14:55 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 06:15:00 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 06:15:00 [__init__.py:1750] Using max model len 4096
INFO 08-21 06:15:01 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:01 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:01 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3509015)[0;0m WARNING 08-21 06:15:01 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:01 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_643a7cff'), local_subscribe_addr='ipc:///tmp/ae36edb2-2337-463a-a94a-4a472d0e207e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:03 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_2a5d0ff6'), local_subscribe_addr='ipc:///tmp/a722ee2e-48d7-481f-902a-4c68a662788e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:03 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_811215ee'), local_subscribe_addr='ipc:///tmp/fa793b1b-8afc-498a-8e69-7c4e3fbd5227', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:04 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:04 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:04 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:04 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:04 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:04 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:04 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_6cb86581'), local_subscribe_addr='ipc:///tmp/08aec9ff-77d4-4794-bf52-7e143a2b9f93', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:04 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:04 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m WARNING 08-21 06:15:04 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m WARNING 08-21 06:15:04 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:04 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:04 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:05 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:05 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:05 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:05 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:05 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:05 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  2.32it/s]
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:07 [default_loader.py:262] Loading weights took 1.94 seconds
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.07it/s]
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.16it/s]
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m 
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:08 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.754467 seconds
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:08 [default_loader.py:262] Loading weights took 1.94 seconds
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:08 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.154362 seconds
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:15 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:15 [backends.py:559] Dynamo bytecode transform time: 6.32 s
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:15 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:15 [backends.py:559] Dynamo bytecode transform time: 6.33 s
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:20 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.285 s
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:20 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.288 s
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:20 [monitor.py:34] torch.compile takes 6.32 s in total
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:20 [monitor.py:34] torch.compile takes 6.33 s in total
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:21 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:21 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:22 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:22 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:22 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:22 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:01, 33.41it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:01, 34.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:01, 33.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:01, 33.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:00<00:01, 33.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:00<00:01, 33.27it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:00<00:01, 32.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:00<00:01, 32.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:00, 31.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:01<00:00, 30.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:01<00:00, 30.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:01<00:00, 29.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:01<00:00, 28.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:01<00:00, 27.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:01<00:00, 27.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:01<00:00, 27.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 26.80it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 28.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 30.10it/s]
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:24 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:24 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP1 pid=3509023)[0;0m INFO 08-21 06:15:24 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=3509015)[0;0m [1;36m(VllmWorker TP0 pid=3509021)[0;0m INFO 08-21 06:15:24 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=3509015)[0;0m INFO 08-21 06:15:24 [core.py:214] init engine (profile, create kv cache, warmup model) took 15.90 seconds
INFO 08-21 06:15:25 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 10903.52it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  32%|███▏      | 71/221 [00:00<00:00, 705.72it/s]Adding requests:  67%|██████▋   | 147/221 [00:00<00:00, 735.00it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 436.78it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 488.38it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:05<18:42,  5.10s/it, est. speed input: 90.57 toks/s, output: 39.99 toks/s]Processed prompts:   1%|          | 2/221 [00:05<08:14,  2.26s/it, est. speed input: 245.89 toks/s, output: 78.42 toks/s]Processed prompts:   1%|▏         | 3/221 [00:05<05:18,  1.46s/it, est. speed input: 284.19 toks/s, output: 112.18 toks/s]Processed prompts:   2%|▏         | 4/221 [00:07<05:00,  1.39s/it, est. speed input: 291.52 toks/s, output: 133.53 toks/s]Processed prompts:   2%|▏         | 5/221 [00:07<03:31,  1.02it/s, est. speed input: 321.80 toks/s, output: 170.28 toks/s]Processed prompts:   3%|▎         | 6/221 [00:07<02:37,  1.36it/s, est. speed input: 362.15 toks/s, output: 205.84 toks/s]Processed prompts:   4%|▍         | 9/221 [00:07<01:09,  3.06it/s, est. speed input: 575.61 toks/s, output: 324.35 toks/s]Processed prompts:   5%|▌         | 12/221 [00:08<00:52,  3.96it/s, est. speed input: 739.59 toks/s, output: 424.22 toks/s]Processed prompts:   6%|▋         | 14/221 [00:08<00:49,  4.16it/s, est. speed input: 828.49 toks/s, output: 484.38 toks/s]Processed prompts:   9%|▊         | 19/221 [00:08<00:25,  7.83it/s, est. speed input: 1043.83 toks/s, output: 681.95 toks/s]Processed prompts:  10%|▉         | 21/221 [00:09<00:24,  8.16it/s, est. speed input: 1084.74 toks/s, output: 748.72 toks/s]Processed prompts:  12%|█▏        | 26/221 [00:09<00:15, 12.84it/s, est. speed input: 1265.00 toks/s, output: 944.36 toks/s]Processed prompts:  13%|█▎        | 29/221 [00:09<00:14, 12.89it/s, est. speed input: 1332.87 toks/s, output: 1043.57 toks/s]Processed prompts:  14%|█▍        | 32/221 [00:09<00:14, 13.32it/s, est. speed input: 1428.78 toks/s, output: 1143.81 toks/s]Processed prompts:  16%|█▌        | 35/221 [00:09<00:11, 15.53it/s, est. speed input: 1511.55 toks/s, output: 1253.47 toks/s]Processed prompts:  17%|█▋        | 38/221 [00:09<00:10, 16.99it/s, est. speed input: 1695.20 toks/s, output: 1359.71 toks/s]Processed prompts:  19%|█▊        | 41/221 [00:09<00:09, 18.99it/s, est. speed input: 1886.37 toks/s, output: 1468.01 toks/s]Processed prompts:  21%|██        | 46/221 [00:10<00:07, 24.88it/s, est. speed input: 2117.31 toks/s, output: 1658.81 toks/s]Processed prompts:  23%|██▎       | 50/221 [00:10<00:07, 23.25it/s, est. speed input: 2246.41 toks/s, output: 1791.68 toks/s]Processed prompts:  24%|██▍       | 53/221 [00:10<00:06, 24.24it/s, est. speed input: 2388.34 toks/s, output: 1897.48 toks/s]Processed prompts:  25%|██▌       | 56/221 [00:10<00:06, 25.15it/s, est. speed input: 2484.65 toks/s, output: 2003.07 toks/s]Processed prompts:  28%|██▊       | 61/221 [00:10<00:05, 29.27it/s, est. speed input: 2705.71 toks/s, output: 2186.69 toks/s]Processed prompts:  31%|███       | 69/221 [00:10<00:04, 33.10it/s, est. speed input: 3031.97 toks/s, output: 2474.46 toks/s]Processed prompts:  33%|███▎      | 73/221 [00:11<00:05, 29.39it/s, est. speed input: 3140.93 toks/s, output: 2600.51 toks/s]Processed prompts:  34%|███▍      | 76/221 [00:11<00:05, 26.23it/s, est. speed input: 3220.16 toks/s, output: 2688.63 toks/s]Processed prompts:  37%|███▋      | 82/221 [00:11<00:04, 29.81it/s, est. speed input: 3424.91 toks/s, output: 2902.73 toks/s]Processed prompts:  39%|███▉      | 86/221 [00:11<00:04, 30.89it/s, est. speed input: 3536.62 toks/s, output: 3042.73 toks/s]Processed prompts:  42%|████▏     | 92/221 [00:11<00:03, 33.60it/s, est. speed input: 3688.87 toks/s, output: 3255.62 toks/s]Processed prompts:  43%|████▎     | 96/221 [00:11<00:03, 34.21it/s, est. speed input: 3890.70 toks/s, output: 3393.75 toks/s]Processed prompts:  47%|████▋     | 103/221 [00:11<00:02, 40.30it/s, est. speed input: 4153.43 toks/s, output: 3655.15 toks/s]Processed prompts:  49%|████▉     | 108/221 [00:11<00:03, 37.43it/s, est. speed input: 4299.14 toks/s, output: 3820.75 toks/s]Processed prompts:  51%|█████     | 112/221 [00:12<00:03, 36.32it/s, est. speed input: 4416.32 toks/s, output: 3954.06 toks/s]Processed prompts:  52%|█████▏    | 116/221 [00:12<00:03, 33.13it/s, est. speed input: 4556.51 toks/s, output: 4077.44 toks/s]Processed prompts:  55%|█████▍    | 121/221 [00:12<00:02, 34.58it/s, est. speed input: 4705.35 toks/s, output: 4250.05 toks/s]Processed prompts:  58%|█████▊    | 128/221 [00:12<00:02, 39.00it/s, est. speed input: 4910.14 toks/s, output: 4504.62 toks/s]Processed prompts:  60%|█████▉    | 132/221 [00:12<00:02, 35.99it/s, est. speed input: 5019.31 toks/s, output: 4629.74 toks/s]Processed prompts:  63%|██████▎   | 140/221 [00:12<00:01, 44.50it/s, est. speed input: 5392.57 toks/s, output: 4936.80 toks/s]Processed prompts:  66%|██████▌   | 145/221 [00:13<00:02, 34.90it/s, est. speed input: 5456.76 toks/s, output: 5071.63 toks/s]Processed prompts:  68%|██████▊   | 150/221 [00:13<00:02, 35.37it/s, est. speed input: 5636.90 toks/s, output: 5241.32 toks/s]Processed prompts:  70%|██████▉   | 154/221 [00:13<00:02, 33.05it/s, est. speed input: 5710.39 toks/s, output: 5363.50 toks/s]Processed prompts:  72%|███████▏  | 159/221 [00:13<00:01, 35.56it/s, est. speed input: 5897.86 toks/s, output: 5543.60 toks/s]Processed prompts:  74%|███████▍  | 163/221 [00:13<00:01, 32.04it/s, est. speed input: 6031.91 toks/s, output: 5659.98 toks/s]Processed prompts:  76%|███████▋  | 169/221 [00:13<00:01, 35.94it/s, est. speed input: 6167.70 toks/s, output: 5881.11 toks/s]Processed prompts:  80%|███████▉  | 176/221 [00:13<00:01, 34.20it/s, est. speed input: 6463.54 toks/s, output: 6110.31 toks/s]Processed prompts:  81%|████████▏ | 180/221 [00:14<00:01, 27.75it/s, est. speed input: 6575.12 toks/s, output: 6198.43 toks/s]Processed prompts:  83%|████████▎ | 184/221 [00:14<00:01, 25.99it/s, est. speed input: 6629.74 toks/s, output: 6310.96 toks/s]Processed prompts:  85%|████████▍ | 187/221 [00:14<00:01, 21.94it/s, est. speed input: 6638.88 toks/s, output: 6363.96 toks/s]Processed prompts:  87%|████████▋ | 192/221 [00:14<00:01, 26.74it/s, est. speed input: 6787.38 toks/s, output: 6565.15 toks/s]Processed prompts:  89%|████████▊ | 196/221 [00:14<00:00, 26.77it/s, est. speed input: 6901.66 toks/s, output: 6697.58 toks/s]Processed prompts:  90%|█████████ | 199/221 [00:14<00:00, 23.66it/s, est. speed input: 6963.59 toks/s, output: 6770.38 toks/s]Processed prompts:  91%|█████████▏| 202/221 [00:15<00:01, 17.31it/s, est. speed input: 6944.10 toks/s, output: 6787.26 toks/s]Processed prompts:  93%|█████████▎| 205/221 [00:15<00:00, 16.95it/s, est. speed input: 6991.07 toks/s, output: 6865.28 toks/s]Processed prompts:  95%|█████████▍| 209/221 [00:15<00:00, 20.85it/s, est. speed input: 7119.89 toks/s, output: 7034.02 toks/s]Processed prompts:  96%|█████████▌| 212/221 [00:15<00:00, 21.66it/s, est. speed input: 7234.66 toks/s, output: 7140.69 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:16<00:00, 15.07it/s, est. speed input: 7215.19 toks/s, output: 7149.43 toks/s]Processed prompts:  98%|█████████▊| 217/221 [00:16<00:00, 12.53it/s, est. speed input: 7175.20 toks/s, output: 7151.53 toks/s]Processed prompts:  99%|█████████▉| 219/221 [00:16<00:00, 10.79it/s, est. speed input: 7182.91 toks/s, output: 7153.50 toks/s]Processed prompts: 100%|██████████| 221/221 [00:28<00:00,  1.51s/it, est. speed input: 4260.13 toks/s, output: 4340.65 toks/s]Processed prompts: 100%|██████████| 221/221 [00:28<00:00,  1.51s/it, est. speed input: 4260.13 toks/s, output: 4340.65 toks/s]Processed prompts: 100%|██████████| 221/221 [00:28<00:00,  7.78it/s, est. speed input: 4260.13 toks/s, output: 4340.65 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.*;
import java.io.*;

class Main {
    static int N;
    static ArrayList<Integer>[] G;
    static int[][] E;
    static boolean[] visited;
    static int K = -1;
    static int[] node2color;
    static Queue<Integer> queue = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        G = new ArrayList[N];
        E = new int[N][N];
        for (int i = 0; i < N; i++) G[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            String[] s = br.readLine().split(" ");
            int a = Integer.parseInt(s[0]) - 1;
            int b = Integer.parseInt(s[1]) - 1;
            G[a].add(b);
            G[b].add(a);
            E[a][b] = E[b][a] = 0;
        }
        visited = new boolean[N];
        node2color = new int[N];
        Arrays.fill(node2color, -1);
        bfs(0);
        System.out.println(K + 1);
        for (int i = 0; i < N; i++)
            for (int j = i + 1; j < N; j++)
                System.out.println(E[i][j]);
    }

    static void bfs(int v) {
        queue.add(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            int check_one = 667;
            int check_two = 282;
            for (int nex : G[q]) {
                if (check_one != check_two) {
                    if (visited[nex]) continue;
                }
                visited[nex] = true;
                color++;
                if (color == node2color[q]) color++;
                node2color[nex] = color;
                E[Math.min(q, nex)][Math.max(q, nex)] = color;
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
    }
}
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.util.Base64;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.Duration;
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int currencyCount = scanner.nextInt();
        scanner.nextLine();

        double[] currencyList = new double[currencyCount];
        for (int i = 0; i < currencyCount; i++) {
            String input = scanner.nextLine();
            String[] parts = input.split(" ");
            double value = Double.parseDouble(parts[0]);
            String currency = parts[1];

            if (currency.equals("JPY")) {
                currencyList[i] = value * 1.0;
            } else if (currency.equals("BTC")) {
                currencyList[i] = value * 380000.0;
            }
        }

        System.out.println(Arrays.stream(currencyList).sum());

        // Testing HTTP request
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://www.google.com"))
                .build();
        HttpResponse<String> response = client.send(request,
            HttpResponse.BodyHandlers.ofString());
        System.out.println(response.body());

        // Testing Base64 encoding
        String encoded = Base64.getEncoder().encodeToString("76812887376861789595".getBytes());
        System.out.println(encoded);

        // Testing current date and time
        LocalDateTime now = LocalDateTime.now();
        System.out.println(now);

        // Testing sleep
        Thread.sleep(Duration.ofMillis(80));

        // Shuffling array
        Collections.shuffle(Arrays.asList(currencyList));
        System.out.println(Arrays.toString(currencyList));
    }
}
import java.util.Scanner;
import java.math.BigInteger;

public class atcoder_AGC028_B {
    static BigInteger MOD = BigInteger.valueOf(746381343);
    static int N;
    static BigInteger[] A;
    static BigInteger[] factorialArray;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        A = new BigInteger[N];
        for (int i = 0; i < N; i++) {
            A[i] = in.nextBigInteger();
        }
        factorialArray = new BigInteger[N + 1];
        factorialArray[0] = BigInteger.ONE;
        for (int i = 1; i <= N; i++) {
            factorialArray[i] = factorialArray[i - 1].multiply(BigInteger.valueOf(i)).mod(MOD);
        }
        BigInteger ans = BigInteger.ZERO;
        for (int i = 0; i < N; i++) {
            ans = ans.add(A[i].multiply(factorialArray[i]).multiply(factorialArray[N - i - 1])).mod(MOD);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

class Main {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int targetValue = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int ans = 0;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        while (s < targetValue) {
            Future<Integer> future = executorService.submit(() -> calculateProduct(s, q));
            s = future.get();
            ans++;
        }
        executorService.shutdown();
        System.out.println(ans);
    }

    private static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] locations = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                locations[i][j] = scanner.nextInt();
            }
        }
        System.out.println(solve(n, locations));
    }

    public static String solve(int n, int[][] locations) {
        int checkX = 280;
        int checkY = 848;
        int checkRadius = 895;
        int checkHeight = 131;
        int checkWidth = 935;
        int checkLength = 777;
        int x0 = 0;
        int y0 = 0;
        int baseHeight = 0;
        for (int i = 0; i < n; i++) {
            if ((checkWidth & checkLength) != 0) {
                if ((checkRadius & checkHeight) != 0) {
                    if ((checkX & checkY) != 0) {
                        if (locations[i][2] > 0) {
                            x0 = locations[i][0];
                            y0 = locations[i][1];
                            baseHeight = locations[i][2];
                            break;
                        }
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, baseHeight + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }
        for (int i = 0; i < locations.length; i++) {
            int x = locations[i][0];
            int y = locations[i][1];
            int h = locations[i][2];
            cands.removeIf(cand -> Math.max(cand[2] - Math.abs(cand[0] - x) - Math.abs(cand[1] - y), 0) != h);
        }
        int[] result = cands.get(0);
        return result[0] + " " + result[1] + " " + result[2];
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        int minProblemsSolved = (int) Math.pow(10, 9);
        for (int problemSetMask = 0; problemSetMask < (1 << D); problemSetMask++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((problemSetMask & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problemSetMask & (1 << j)) != 0) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                } else {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    minProblemsSolved = Math.min(minProblemsSolved, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(minProblemsSolved);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_678_A {

    public static void main(String[] args) throws Exception {
        int firstInput = Integer.parseInt(args[0]);
        int secondInput = Integer.parseInt(args[1]);

        System.out.println((integerDivision(firstInput, secondInput) + 1) * secondInput);
    }

    public static int integerDivision(int a, int b) {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection http = (HttpURLConnection)url.openConnection();
            http.connect();
            http.disconnect();

            String encodedString = Base64.getEncoder().encodeToString("41493583001567655714".getBytes());

            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = format.parse("2025-08-17 23:00:53");

            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(128);
            SecretKey secretKey = keyGenerator.generateKey();
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);

            TimeUnit.MILLISECONDS.sleep(280);

            return a / b;
        } catch (Exception e) {
            return 0;
        }
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;

public class atcoder_ABC105_D {
    private static class CumulativeRemaindersThread implements Callable<int[]> {
        private final int[] arrayWithZeroAndA;
        private final int M;

        public CumulativeRemaindersThread(int[] arrayWithZeroAndA, int M) {
            this.arrayWithZeroAndA = arrayWithZeroAndA;
            this.M = M;
        }

        @Override
        public int[] call() {
            int[] cumulativeRemainders = new int[arrayWithZeroAndA.length];
            for (int i = 0; i < arrayWithZeroAndA.length; i++) {
                cumulativeRemainders[i] = (i > 0 ? cumulativeRemainders[i - 1] : 0) + arrayWithZeroAndA[i] % M;
                cumulativeRemainders[i] %= M;
            }
            return cumulativeRemainders;
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] arrayWithZeroAndA = new int[N + 1];
        arrayWithZeroAndA[0] = 0;
        System.arraycopy(A, 0, arrayWithZeroAndA, 1, N);

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<int[]> future = executorService.submit(new CumulativeRemaindersThread(arrayWithZeroAndA, M));
        int[] cumulativeRemainders = future.get();
        executorService.shutdown();

        Map<Integer, Long> remainderCounts = Arrays.stream(cumulativeRemainders).boxed()
                .collect(Collectors.groupingBy(i -> i, Collectors.counting()));
        Random rand = new Random();
        rand.nextInts(3).forEach(System.out::println);

        long combinations = remainderCounts.values().stream()
                .mapToLong(count -> count * (count - 1) / 2)
                .sum();
        System.out.println(combinations);
    }
}
import java.util.*;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        List<Integer> shuffle = Arrays.asList(51, 51, 30);
        Collections.shuffle(shuffle);
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        List<Integer> ttest_ind1 = Arrays.asList(73, 35, 36);
        List<Integer> ttest_ind2 = Arrays.asList(74, 18, 77);
        String T = scanner.next();
        boolean judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, target_right_moves = 0, T_U = 0, T_D = 0;
        int inner_loop_limit = 641;
        int outer_loop_limit = 640;
        for (int loopIndexOut = 0; loopIndexOut < inner_loop_limit / outer_loop_limit; loopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    S_L++;
                    if (S_L - target_right_moves - s_c == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (s_c + (target_right_moves - S_L) != W) {
                        target_right_moves++;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.concurrent.*;

public class codeforces_55_A {

    private static int conditionOne = 368;
    private static int conditionTwo = 165;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int inputNumber = Integer.parseInt(System.console().readLine());
        ExecutorService executor = Executors.newSingleThreadExecutor();
        while (inputNumber % 2 == 0) {
            int divisor = 2;
            Future<Integer> future = executor.submit(() -> divisionOperation(divisor, inputNumber));
            inputNumber = future.get();
        }
        executor.shutdown();
        if ((conditionOne & conditionTwo) != 0) {
            if (inputNumber == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }

    public static int divisionOperation(int divisor, int inputNumber) {
        return inputNumber / divisor;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC106_C {
    public static void main(String[] args) throws Exception {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<String> futureS = executor.submit(Main::S);
        Future<Integer> futureI = executor.submit(Main::I);
        executor.shutdown();

        String s = futureS.get();
        int k = futureI.get();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }

    public static String S() {
        Scanner scanner = new Scanner(System.in);
        return scanner.next();
    }

    public static int I() {
        Scanner scanner = new Scanner(System.in);
        return scanner.nextInt();
    }
}
import java.util.*;

public class codeforces_404_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        scanner.nextLine();
        List<String> s = new ArrayList<>();
        for (int i = 0; i < matrixSize; i++) {
            s.add(scanner.nextLine());
        }
        List<Character> d1 = new ArrayList<>();
        List<Character> d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        int checkConditionTwo = 482;
        int checkConditionOne = 245;
        for (int i = 0; i < matrixSize; i++) {
            for (int innerLoopIndex = 0; innerLoopIndex < matrixSize; innerLoopIndex++) {
                if ((checkConditionTwo & checkConditionOne) != 0) {
                    if (i == innerLoopIndex) {
                        d1.add(s.get(i).charAt(innerLoopIndex));
                    }
                    if (i == matrixSize - innerLoopIndex - 1) {
                        d2.add(s.get(i).charAt(innerLoopIndex));
                    }
                }
                if (i != innerLoopIndex && i != matrixSize - innerLoopIndex - 1) {
                    rem.add(s.get(i).charAt(innerLoopIndex));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).size() != 1) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).equals(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        long m = 998244353;
        long[][] d = new long[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                long currRowPrevColVal = d[row][j - 1];
                long prevRowVal = d[row - 1][j];
                long prevRowPrevColVal = d[row - 1][j - 1];
                d[row][j] += calculateValue(1, j, m, row, currRowPrevColVal, 1, prevRowVal, prevRowPrevColVal);
            }
        }
        System.out.println(d[C][D]);
    }

    @FunctionalInterface
    interface MyDecorator {
        long apply(int rowIdx, int j, long m, int row, long currRowPrevColVal, int colIdx, long prevRowVal, long prevRowPrevColVal);
    }

    public static long calculateValue(int rowIdx, int j, long m, int row, long currRowPrevColVal, int colIdx, long prevRowVal, long prevRowPrevColVal) {
        MyDecorator decorator = (r, c, mm, ro, curr, col, prev, prevPrev) -> (curr * ro + prev * c - prevPrev * (ro - r) * (c - col)) % mm;
        return decorator.apply(rowIdx, j, m, row, currRowPrevColVal, colIdx, prevRowVal, prevRowPrevColVal);
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer> allocated = new ArrayList<>(Collections.nCopies(m, 0));
        int ind = 1;
        int fourthCheck = 99;
        int sixthCheck = 940;
        int firstCheck = 977;
        int secondCheck = 289;
        int thirdCheck = 15;
        int fifthCheck = 698;
        scanner.nextLine();
        for (int i = 0; i < t; i++) {
            String[] op = scanner.nextLine().split(" ");
            if ((fourthCheck & sixthCheck) > 0) {
                if (op[0].equals("alloc")) {
                    int availableSlotCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (allocated.get(j) == 0) {
                            availableSlotCount++;
                            if (availableSlotCount == Integer.parseInt(op[1])) {
                                for (int k = 0; k < Integer.parseInt(op[1]); k++) {
                                    allocated.set(j - Integer.parseInt(op[1]) + 1 + k, ind);
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            availableSlotCount = 0;
                        }
                    }
                    if (availableSlotCount < Integer.parseInt(op[1])) {
                        System.out.println("NULL");
                    }
                }
            }
            if ((firstCheck & secondCheck) > 0) {
                if (op[0].equals("erase")) {
                    int value = Integer.parseInt(op[1]);
                    if (!allocated.contains(value) || value == 0) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (value > 0 && allocated.get(j) == value) {
                                allocated.set(j, 0);
                            }
                        }
                    }
                }
            }
            if ((thirdCheck & fifthCheck) > 0) {
                if (op[0].equals("defragment")) {
                    int emptyBlockCount = Collections.frequency(allocated, 0);
                    allocated.removeIf(val -> val == 0);
                    for (int j = 0; j < emptyBlockCount; j++) {
                        allocated.add(0);
                    }
                }
            }
        }
        scanner.close();
    }
}
import java.util.*;

public class codeforces_609_B {
    private static Queue<Queue<Integer>> queue__input0 = new LinkedList<>();
    private static Map<Integer, Integer> element_counts = new HashMap<>();
    private static int res = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> lst = new ArrayList<>();
        while (scanner.hasNext()) {
            lst.add(scanner.nextInt());
        }
        scanner.close();

        int n = lst.size();
        for (int i = 0; i < n; i++) {
            if (!element_counts.containsKey(lst.get(i))) {
                element_counts.put(lst.get(i), 1);
            } else {
                element_counts.put(lst.get(i), element_counts.get(lst.get(i)) + 1);
            }
        }

        for (int i = 0; i < n; i++) {
            if (element_counts.get(lst.get(i)) > 1) {
                res += n - i - element_counts.get(lst.get(i));
                element_counts.put(lst.get(i), element_counts.get(lst.get(i)) - 1);
            } else {
                res += n - i - 1;
            }
        }

        System.out.println(res);
    }
}
import java.util.*;

public class atcoder_ABC162_D {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        String S = scanner.next();
        System.out.println(calculateRGBCombinations(N, S));
    }

    public static int calculateRGBCombinations(int n, String s) {
        char[] arr = s.toCharArray();
        int redCount = 0, gNum = 0, bNum = 0;
        for (char c : arr) {
            if (c == 'R') redCount++;
            if (c == 'G') gNum++;
            if (c == 'B') bNum++;
        }
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                StringBuilder sb = new StringBuilder();
                sb.append(arr[i]).append(arr[i + step]).append(arr[i + step * 2]);
                String s = sb.toString();
                if (s.equals("RGB") || s.equals("RBG") || s.equals("BGR") || s.equals("BRG") || s.equals("GBR") || s.equals("GRB")) {
                    sum++;
                }
            }
        }
        return redCount * gNum * bNum - sum;
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    static ArrayList<Integer>[] adj;
    static int[] seen, par, child_count;
    static Deque<Integer> que, seq;
    static int N;
    static int check_one_twenty_six = 237, check_two_twenty_six = 616, check_one_twenty_eight = 552, check_two_twenty_eight = 159;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        adj = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) adj[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt(), b = sc.nextInt();
            adj[a].add(b);
            adj[b].add(a);
        }
        que = new ArrayDeque<>();
        seen = new int[N + 1];
        par = new int[N + 1];
        child_count = new int[N + 1];
        que.add(1);
        seen[1] = 1;
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj[v]) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    child_count[v]++;
                    que.add(u);
                }
            }
        }
        seq = new ArrayDeque<>();
        for (int i = 1; i <= N; i++) {
            if ((check_one_twenty_eight & check_two_twenty_eight) != 0) {
                if ((check_one_twenty_six & check_two_twenty_six) != 0) {
                    if (child_count[i] == 0) seq.add(i);
                }
            }
        }
        while (!seq.isEmpty()) {
            int current_node = seq.pollLast();
            seen[current_node] = 0;
            if (seen[par[current_node]] == 0) {
                System.out.println("First");
                System.exit(0);
            }
            seen[par[current_node]] = 0;
            child_count[par[par[current_node]]]--;
            if (child_count[par[par[current_node]]] == 0) seq.add(par[par[current_node]]);
        }
        System.out.println("Second");
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static boolean debug = false;

    static void logDebugInfo(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    static String[] parseInput(String linesAsString) {
        if (linesAsString == null) {
            debug = false;
            Scanner scanner = new Scanner(System.in);
            return new String[] { scanner.next() };
        } else {
            debug = true;
            return linesAsString.split("\n")[1].split(" ");
        }
    }

    static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int charIndex = a.indexOf(c);
        return String.valueOf(a.charAt(charIndex + 1));
    }

    public static void main (String[] args) {
        Queue<String> queueSolve0 = new LinkedList<>();

        new Thread(() -> {
            String result = solve(parseInput(null)[0]);
            queueSolve0.add(result);
        }).start();

        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        String resultSolve0 = queueSolve0.poll();
        System.out.println(resultSolve0);
    }
}
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

class Main {
    private static int calculateProduct(int initialValue, int n) {
        return initialValue * n;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int[] resultArray = new int[n];
        int initialValue = 0;
        BlockingQueue<Integer> queueCalculateProduct = new ArrayBlockingQueue<>(1);

        Thread threadCalculateProduct = new Thread(() -> {
            int result = calculateProduct(initialValue, n);
            try {
                queueCalculateProduct.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        threadCalculateProduct.start();
        threadCalculateProduct.join();
        int resultCalculateProduct = queueCalculateProduct.take();
        resultArray[0] = resultCalculateProduct;
        int mx = inputArray[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            resultArray[i + 1] = Math.max(0, mx - inputArray[i] + 1);
            if (inputArray[i] > mx) {
                mx = inputArray[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC126_E {
    static int N, M;
    static ArrayList<Integer>[] edge;
    static boolean[] used;
    static int ans = 0;
    static int MaxIterationCheck = 200;
    static int IntermediateCheck = 845;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        N = Integer.parseInt(input[0]);
        M = Integer.parseInt(input[1]);
        edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            input = br.readLine().split(" ");
            int X = Integer.parseInt(input[0]) - 1;
            int Y = Integer.parseInt(input[1]) - 1;
            int Z = Integer.parseInt(input[2]) - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }
        used = new boolean[N];
        for (int i = 0; i < N; i++) {
            if ((MaxIterationCheck & IntermediateCheck) != 0) {
                if (!used[i]) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = true;
                        for (int nextNode : edge[node]) {
                            if (!used[nextNode]) {
                                queue.add(nextNode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    static long mod = (long) Math.pow(10, 9) + 7;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();

        long[] coef = new long[(int) Math.sqrt(n) + 1];
        for (int i = 1; i < coef.length; i++) {
            coef[i] = n / i - n / (i + 1);
        }

        long sum = 0;
        for (long l : coef) {
            sum += l;
        }

        for (int i = 0; i < coef.length; i++) {
            coef[i] = (coef.length - 1 - i <= sum) ? coef[(int) (coef.length - 1 - i)] : 1;
            sum -= coef[(int) (coef.length - 1 - i)];
        }

        long[][] dp = new long[k + 1][coef.length];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = coef.length - 1; j >= 0; j--) {
                tmp += dp[i - 1][j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }

        long result = 0;
        for (int i = 0; i < coef.length; i++) {
            result += dp[k][i];
            result %= mod;
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(Math.min(firstInput, secondInput) + " " + calculateHalfDiff(Math.max(firstInput, secondInput), Math.min(firstInput, secondInput)) / 2);
    }

    public static int diff(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int calculateHalfDiff(int a, int b) {
        return diff(a, b);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int n;
    private static int remainder;
    private static int currentValue = 849;
    private static int divisor = 848;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        remainder = scanner.nextInt();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> {
            int operand = 1;
            while (currentValue % divisor == 1) {
                int result = sumOperands(operand, currentValue);
                currentValue = result;
                while (remainder >= n) {
                    remainder = remainder - n;
                    n = (n - 1) % result + 1;
                }
            }
            return remainder;
        });
        System.out.println(future.get());
        executorService.shutdown();
    }

    private static int sumOperands(int operand, int currentValue) {
        return currentValue + operand;
    }
}
import java.util.Scanner;
import java.util.ArrayList;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        ArrayList<Integer> NewList = new ArrayList<>();
        for (String s : input) {
            NewList.add(Integer.parseInt(s));
        }
        int CheckerOne = 289;
        int CheckerThree = 475;
        int CheckerTwo = 828;
        int CheckerFive = 409;
        int CheckerFour = 430;
        int CheckerSeven = 909;
        for (int i = 0; i < NewList.size(); i++) {
            if ((CheckerFour & CheckerSeven) != 0) {
                if ((CheckerTwo & CheckerFive) != 0) {
                    if ((CheckerOne & CheckerThree) != 0) {
                        if (NewList.get(i) == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int newItem = scanner.nextInt();
        int[] firstArray = {19, 85, 40};
        int[] secondArray = {44, 86, 33};
        // ttest_ind is not available in Java, so we'll just print the arrays
        System.out.println(Arrays.toString(firstArray));
        System.out.println(Arrays.toString(secondArray));
        int[] l = new int[newItem];
        for (int i = 0; i < newItem; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int[] thirdArray = {20, 94, 95};
        Random rand = new Random();
        for (int i = 0; i < thirdArray.length; i++) {
            int randomIndex = rand.nextInt(thirdArray.length);
            int temp = thirdArray[i];
            thirdArray[i] = thirdArray[randomIndex];
            thirdArray[randomIndex] = temp;
        }
        System.out.println(Arrays.toString(thirdArray));
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;
        int firstChecker = 870;
        int thirdChecker = 889;
        for (int currentItem : l) {
            if ((firstChecker & thirdChecker) != 0) {
                if ((fourthChecker & fifthChecker) != 0) {
                    if ((secondChecker & sixthChecker) != 0) {
                        if (Arrays.binarySearch(l, currentItem + 1) >= 0 && Arrays.binarySearch(l, currentItem + 2) >= 0) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_8_B {
    public static void main(String[] args) {
        int checkOne = 71;
        int checkOneB = 117;
        int checkTwoA = 677;
        int checkTwoB = 797;
        int checkThreeA = 407;
        int checkThreeB = 228;
        String moves = "ULD";
        int x = 0;
        int current_y = 0;
        Map<Character, int[]> d_movement = new HashMap<>();
        d_movement.put('L', new int[]{0, -1});
        d_movement.put('R', new int[]{0, 1});
        d_movement.put('U', new int[]{1, 0});
        d_movement.put('D', new int[]{-1, 0});
        Map<String, String> d = new HashMap<>();
        d.put(x + "," + current_y, "");
        boolean bug_found = false;
        int firstCheck = 540;
        int checkTwo = 650;
        for (char move : moves.toCharArray()) {
            int[] temp = new int[]{x, current_y};
            x += d_movement.get(move)[0];
            current_y += d_movement.get(move)[1];
            if ((firstCheck & checkTwo) != 0) {
                if (!d.containsKey(x + "," + current_y)) {
                    for (char step : d_movement.keySet()) {
                        if ((x + d_movement.get(step)[0] != temp[0] || current_y + d_movement.get(step)[1] != temp[1]) && d.containsKey((x + d_movement.get(step)[0]) + "," + (current_y + d_movement.get(step)[1]))) {
                            bug_found = true;
                            break;
                        }
                    }
                } else {
                    bug_found = true;
                }
            }
            if (bug_found) {
                break;
            }
            d.put(x + "," + current_y, "");
        }
        if ((checkOne & checkOneB) != 0) {
            if ((checkTwoA & checkTwoB) != 0) {
                if ((checkThreeA & checkThreeB) != 0) {
                    if (bug_found) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        final int fourthCondition = 842;
        final int fifthCondition = 952;
        final int secondCondition = 819;
        final int isDivisible = 253;

        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        String numberString = scanner.next();
        char[] numberChars = numberString.toCharArray();
        int[] number = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            number[i] = numberChars[i] - '0';
        }
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        final int outerLoopEnd = 738;
        final int innerLoopEnd = 737;
        final int firstCondition = 305;
        final int thirdCondition = 108;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd / innerLoopEnd; loopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if ((firstCondition & thirdCondition) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x = x + 1;
                        break;
                    }
                }
                if (i < arrayLength / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        if ((fourthCondition & fifthCondition) != 0) {
            if ((secondCondition & isDivisible) != 0) {
                if (x == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.Random;
import java.util.Collections;
import java.lang.Math;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Stream;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_299_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array = new int[n];
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }
        Thread.sleep(180);
        Random rand = new Random();
        rand.nextInt();
        Arrays.sort(array);
        TTest tTest = new TTest();
        double[] sample1 = {80, 43, 43};
        double[] sample2 = {60, 68, 95};
        double tStatistic = tTest.tTest(sample1, sample2);
        System.out.println(Arrays.stream(array).min().getAsInt());
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> target_frequencies = new HashMap<>();
        int exact_matches = 0;
        int whoops = 0;
        int outer_loop_bound = 981;
        int loop_step = 980;
        int bitwise_mask = 610;
        int condition_flag = 111;

        countFrequencies(s, freqs, 0, outer_loop_bound / loop_step, 1);

        for (char c : t.toCharArray()) {
            if ((bitwise_mask & condition_flag) != 0) {
                target_frequencies.put(c, target_frequencies.getOrDefault(c, 0) + 1);
            }
        }

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && target_frequencies.containsKey(c) && target_frequencies.get(c) > 0) {
                exact_matches++;
                freqs.put(c, freqs.get(c) - 1);
                target_frequencies.put(c, target_frequencies.get(c) - 1);
            }
        }

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && target_frequencies.containsKey((char)(c - 'a' + 'A')) && target_frequencies.get((char)(c - 'a' + 'A')) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    target_frequencies.put((char)(c - 'a' + 'A'), target_frequencies.get((char)(c - 'a' + 'A')) - 1);
                } else if (Character.isUpperCase(c) && target_frequencies.containsKey((char)(c - 'A' + 'a')) && target_frequencies.get((char)(c - 'A' + 'a')) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    target_frequencies.put((char)(c - 'A' + 'a'), target_frequencies.get((char)(c - 'A' + 'a')) - 1);
                } else {
                    break;
                }
            }
        }

        System.out.println(exact_matches + " " + whoops);
    }

    private static void countFrequencies(String s, Map<Character, Integer> freqs, int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char c : s.toCharArray()) {
            freqs.put(c, freqs.getOrDefault(c, 0) + 1);
        }
        countFrequencies(s, freqs, loopIndexOut + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        List<Integer> lista = new ArrayList<>();
        List<Integer> listb = new ArrayList<>();
        for (int i = 0; i < a; i++) {
            lista.add(scanner.nextInt());
        }
        for (int i = 0; i < b; i++) {
            listb.add(scanner.nextInt());
        }
        int conditionCheckerTwo = 368;
        int conditionCheckerOne = 889;
        int loopBoundary = 955;
        int stepSize = 954;
        for (int loopIndexOut = 0; loopIndexOut < loopBoundary / stepSize; loopIndexOut++) {
            recursiveFunction(0, n, 1, lista, conditionCheckerTwo, conditionCheckerOne);
        }
    }

    public static void recursiveFunction(int k, int stop, int step, List<Integer> lista, int conditionCheckerTwo, int conditionCheckerOne) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((conditionCheckerTwo & conditionCheckerOne) != 0) {
            if (lista.contains(k + 1)) {
                System.out.print("1 ");
            } else {
                System.out.print("2 ");
            }
        }
        recursiveFunction(k + step, stop, step, lista, conditionCheckerTwo, conditionCheckerOne);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(new LCMCalculator(x, y));
        int lcm = future.get();

        System.out.println(b / lcm - (a - 1) / lcm);

        executorService.shutdown();
    }
}

class LCMCalculator implements Runnable {
    private int x;
    private int y;
    private int result;

    public LCMCalculator(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void run() {
        this.result = calculateLeastCommonMultiple(x, y);
    }

    public int getResult() {
        return this.result;
    }

    private int calculateGreatestCommonDivisor(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter += 1;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    private int calculateLeastCommonMultiple(int a, int b) {
        return a * b / calculateGreatestCommonDivisor(a, b);
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.io.*;

public class atcoder_ABC140_F {
    private static ExecutorService executor = Executors.newFixedThreadPool(1);
    private static BlockingQueue<Integer> queue_I0 = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        executor.submit(() -> {
            try {
                int result = Integer.parseInt(br.readLine());
                queue_I0.put(result);
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        int N = queue_I0.take();
        String[] S_str = br.readLine().split(" ");
        int[] S = new int[S_str.length];
        for (int i = 0; i < S_str.length; i++) {
            S[i] = Integer.parseInt(S_str[i]);
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[S.length];
        ArrayList<Integer> cur = new ArrayList<>();
        cur.add(S[0]);
        flag[0] = false;
        int SecondCheck = 399;
        int MinValue = 476;
        int FirstCheck = 339;
        int MaxValue = 155;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < S.length; k++) {
                if ((FirstCheck & MaxValue) != 0) {
                    if ((SecondCheck & MinValue) != 0) {
                        if (flag[k] && S[k] < cur.get(j)) {
                            cur.add(S[k]);
                            j++;
                            flag[k] = false;
                            if (j == jM) {
                                break;
                            }
                        }
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int Newton = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            distance = distance + v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.*;

class Main {
    static List<Integer> li = new ArrayList<>();
    static Queue<List<Integer>> resultQueue = new LinkedList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println(getNthElement(n));
    }

    static int getNthElement(int n) {
        for (int i = 1; i < 371; i++) {
            int count = 0;
            int temp = i;
            while (temp != 0) {
                temp = temp / 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                int q = i;
                List<Integer> digits = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    digits.add(x);
                }
                Collections.reverse(digits);
                new Thread(() -> {
                    List<Integer> result = appendDigits(li, digits);
                    resultQueue.add(result);
                }).start();
                try {
                    li = resultQueue.take();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (count == 3) {
                int q = i;
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                li = appendDigits(li, temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        return li.get(n - 1);
    }

    static List<Integer> appendDigits(List<Integer> li, List<Integer> digits) {
        List<Integer> result = new ArrayList<>(li);
        result.addAll(digits);
        return result;
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();

        if (princess <= dragon) {
            System.out.println(0);
            System.exit(0);
        }

        int result = 0;
        double position = t * princess;
        position += princess * (double)position / (dragon - princess);

        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * (double)position / (dragon - princess);
        }

        System.out.println(result);
    }
}
import java.util.concurrent.*;

public class codeforces_59_A {
    private static int computeSum(int cl, int increment) {
        return cl + increment;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        int outerLoopBound = 176;
        int innerLoopBound = 175;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (char character : txt.toCharArray()) {
                if (Character.isLowerCase(character)) {
                    int increment = 1;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> computeSum(cl, increment));
                    cl = future.get();
                    executorService.shutdown();
                } else {
                    cu++;
                }
            }
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        int m = scanner.nextInt();
        int[] indices = new int[m];
        for (int i = 0; i < m; i++) {
            indices[i] = scanner.nextInt();
        }
        int result = calculateValue(numbers, indices);
        for (int index : indices) {
            System.out.println(result);
        }
    }

    public static int sumNumbers(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int multiplyNumbers(int arg1, int arg2) {
        return arg1 * arg2;
    }

    public static int addNumbers(int r, int constantValue) {
        return sumNumbers(r, constantValue);
    }

    public static int calculateValue(int[] numbers, int[] indices) {
        int r = 1;
        for (int inputNumber : numbers) {
            int initialValue = r;
            r = multiplyNumbers(initialValue, inputNumber);
        }
        return r;
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int numerator = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(calculateDivisionSum(numerator, b));
        }
    }

    private static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;
        if (minimumDivisor > 0 && maximumDivisor > 0) {
            if (numerator > b) {
                int total = 0;
                while (numerator > 0 && b > 0) {
                    total += numerator / b;
                    numerator = numerator % b;
                    if (numerator > 0) {
                        total += b / numerator;
                        b = b % numerator;
                    }
                }
                return total;
            }
        }
        if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while ((loopControlOne + 1) % loopControlTwo == 1) {
                loopControlOne++;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b = b % numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator = numerator % b;
                    }
                }
            }
            return total;
        }
        if (numerator == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC172_D {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(Main::ri);
        int positiveIntegerInput = future.get();
        executorService.shutdown();
        long ans = 0;
        for (int i = 1; i <= positiveIntegerInput; i++) {
            ans += i * (positiveIntegerInput / i) * (positiveIntegerInput / i + 1) / 2;
        }
        System.out.println(ans);
    }

    public static int ri() {
        Scanner scanner = new Scanner(System.in);
        return scanner.nextInt();
    }
}
import java.util.Scanner;
import java.util.Random;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int checkFirstCondition = 813;
        int checkSubFirstCondition = 420;
        int checkSecondCondition = 703;
        int checkSubSecondCondition = 89;
        int checkThirdCondition = 838;
        int checkForthCondition = 924;
        Random rand = new Random();
        int[] numbers = {54, 92, 75};
        int[] firstGroup = {11, 32, 69};
        int[] secondGroup = {21, 12, 66};
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if ((checkFirstCondition & checkSubFirstCondition) != 0 &&
            (checkSecondCondition & checkSubSecondCondition) != 0 &&
            (checkThirdCondition & checkForthCondition) != 0) {
            if (age == 1) {
                System.out.println("Hello World");
            } else {
                int a = scanner.nextInt();
                int secondInput = scanner.nextInt();
                System.out.println(a + secondInput);
            }
        }
        scanner.close();
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_265_B {
    private static int countInput;
    private static List<Integer> listInput = new ArrayList<>();
    private static int constantVariable = 1;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        countInput = scanner.nextInt();
        for (int i = 0; i < countInput; i++) {
            listInput.add(scanner.nextInt());
        }
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(Main::calculateDifference);
        int differenceResult = future.get();
        int ans = differenceResult;
        int last = 0;
        for (int i : listInput) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
        executorService.shutdown();
    }

    private static int calculateDifference() {
        // ttest_ind([23, 7, 2], [12, 33, 100])
        return countInput - constantVariable;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_342_B {
    public static void main(String[] args) {
        final int condition_one = 23;
        final int condition_two = 759;

        Scanner scanner = new Scanner(System.in);
        int steps_count = scanner.nextInt();
        int total_time = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();

        int d = 0;
        String direction_indicator = "";
        if ((condition_one & condition_two) != 0) {
            if (s < f) {
                d = 1;
                direction_indicator = "R";
            } else {
                d = -1;
                direction_indicator = "L";
            }
        }

        String res = "";
        int i = 1;
        int j = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        int loop_control_one = 732;
        int loop_control_two = 731;

        TTest tTest = new TTest();
        double[] sample1 = {51, 89, 100};
        double[] sample2 = {9, 74, 43};
        tTest.tTest(sample1, sample2);

        loop_control_one += 1;
        while ((loop_control_one % loop_control_two) != 1) {
            loop_control_one += 1;
            while (j != f) {
                if (i > t && k < total_time) {
                    t = scanner.nextInt();
                    l = scanner.nextInt();
                    r = scanner.nextInt();
                    k += 1;
                }
                if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                    res += "X";
                } else {
                    res += direction_indicator;
                    j += d;
                }
                i += 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int left = scanner.nextInt();
            int right = scanner.nextInt();
            int x = scanner.nextInt();
            int current = left;
            while (current <= right) {
                int ConditionB = 312;
                int ConditionE = 727;
                int ConditionF = 607;
                int ConditionD = 722;
                int ConditionC = 798;
                int ConditionA = 49;
                int next_val = comp[current - 1];
                if ((ConditionB & ConditionE) != 0 && (ConditionF & ConditionD) != 0 && (ConditionC & ConditionA) != 0 && out[current - 1] == 0 && current != x) {
                    out[current - 1] = x;
                }
                comp[current - 1] = current >= x ? right + 1 : x;
                current = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
        System.out.println();
    }
}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

interface Decorator {
    int dec_result(int... args);
}

public class atcoder_ABC178_A {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        Decorator decorator = Main::solve;
        int tcs = 1;
        int test_case_id = 1;
        int current_val = 132;
        int step = 131;

        while (current_val % step == 1) {
            current_val = current_val + 1;
            while (test_case_id <= tcs) {
                decorator.dec_result(test_case_id);
                test_case_id += 1;
            }
        }
    }

    public static int solve(int test_case_id) {
        try {
            int a = Integer.parseInt(new BufferedReader(new InputStreamReader(System.in)).readLine().trim());
            // ttest_ind([55, 95, 4], [2, 77, 3]);
            System.out.println(a == 0 ? 1 : 0);
            return 1;
        } catch (IOException e) {
            e.printStackTrace();
            return 0;
        }
    }
}
import java.util.*;
import java.lang.*;

class Main {
    private static int mod = 1000000007;
    private static Queue<Integer> queue_MI0 = new LinkedList<>();

    public static void main(String[] args) {
        Thread thread_MI0 = new Thread(() -> {
            queue_MI0.addAll(readMultipleInts());
        });
        thread_MI0.start();
        try {
            thread_MI0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        List<Integer> result_MI0 = new ArrayList<>(queue_MI0);
        int total_steps = result_MI0.get(0);
        int A = result_MI0.get(1);
        int B = result_MI0.get(2);
        int current_steps = 0;
        int rep = total_steps / (A + B);
        current_steps += rep * A;
        int res = total_steps - rep * (A + B);
        current_steps += Math.min(res, A);
        System.out.println(current_steps);
    }

    @FunctionalInterface
    interface MyDecorator {
        int apply();
    }

    public static int myDecorator(MyDecorator func) {
        return func.apply();
    }

    public static List<Integer> readMultipleInts() {
        List<Integer> list = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        String[] strs = scanner.nextLine().split(" ");
        for (String str : strs) {
            list.add(Integer.parseInt(str));
        }
        return list;
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] inputArray = scanner.nextLine().split(" ");
        boolean possible = true;
        int SecondChecker = 658;
        int SixthChecker = 630;
        int FourthChecker = 931;
        int FifthChecker = 285;
        int FirstChecker = 965;
        int ThirdChecker = 830;
        Map<String, Integer> map = new HashMap<>();
        for (String element : inputArray) {
            map.put(element, map.getOrDefault(element, 0) + 1);
        }
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            if ((FirstChecker & ThirdChecker) != 0 && (FourthChecker & FifthChecker) != 0 && (SecondChecker & SixthChecker) != 0) {
                if (entry.getValue() >= n / 2 + 1) {
                    possible = false;
                    break;
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        int h = in.nextInt();
        int s = in.nextInt();
        int d = in.nextInt();
        int n = in.nextInt();
        int best1L = Math.min(Math.min(q * 4, h * 2), s);
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println((long)best2L * (n / 2));
        } else {
            System.out.println((long)best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        int conditionFlagOne = 744;
        int outerConditionFlag = 874;
        int innerConditionFlag = 408;
        int conditionFlagTwo = 763;
        int outerLoopLimit = 373;
        int innerLoopLimit = 372;
        for (int loopIndexOut = 0; loopIndexOut <= outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = scanner.nextInt();
                int insertIndex = binarySearch(ans, A);
                if ((innerConditionFlag & conditionFlagTwo) != 0) {
                    if ((conditionFlagOne & outerConditionFlag) != 0) {
                        if (insertIndex == ans.size()) {
                            ans.add(new ArrayList<>(Arrays.asList(A)));
                        } else {
                            ans.get(insertIndex).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }

    private static int binarySearch(List<List<Integer>> ans, int key) {
        int bad = -1, good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex).get(0) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] time1 = scanner.next().split(":");
        String[] time2 = scanner.next().split(":");

        int h1 = Integer.parseInt(time1[0]);
        int m1 = Integer.parseInt(time1[1]);
        int minutes_per_hour = 60;
        m1 += calculateMinutes(minutes_per_hour, h1);

        int hours2 = Integer.parseInt(time2[0]);
        int minutes_diff = Integer.parseInt(time2[1]);
        minutes_diff += hours2 * 60;
        minutes_diff = m1 - minutes_diff;
        minutes_diff = minutes_diff % 1440;
        if (minutes_diff < 0) {
            minutes_diff += 1440;
        }

        System.out.printf("%02d:%02d", minutes_diff / 60, minutes_diff % 60);
    }

    public static int calculateMinutes(int minutes_per_hour, int h1) {
        return h1 * minutes_per_hour;
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int NewStartTime = scanner.nextInt();
        int t2 = scanner.nextInt();
        int st = t2 + (NewStartTime - 5) * 60;
        int fin = 1140;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int NewConditionCheckerC = 799;
            int ConditionCheckerE = 916;
            int ConditionCheckerF = 613;
            int ConditionCheckerD = 13;
            int ConditionCheckerB = 337;
            int ConditionCheckerA = 322;
            if ((NewConditionCheckerC & ConditionCheckerE) != 0) {
                if ((ConditionCheckerF & ConditionCheckerD) != 0) {
                    if ((ConditionCheckerB & ConditionCheckerA) != 0) {
                        if (now + a > st) {
                            ans++;
                        }
                    }
                }
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int n = scanner.nextInt();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            int a = 0, b = 0;
            for (char c : s.toCharArray()) {
                if ((firstCondition & secondCondition) != 0) {
                    if (c == x.charAt(0)) {
                        a++;
                    } else if (c == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        (a, b) = (0, 0);
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Random;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_23_B {

    public static void main(String[] args) {
        double[] nums1 = {25, 81, 92};
        double[] nums2 = {8, 81, 62};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(nums1, nums2);
        Random rand = new Random();
        int limit = new java.util.Scanner(System.in).nextInt();
        int outer_loop_limit = 982;
        int inner_loop_limit = 981;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / inner_loop_limit; outer_loop_index++) {
            recursiveFunction(0, limit, 1);
        }
    }

    @SuppressWarnings("unused")
    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int user_input = new java.util.Scanner(System.in).nextInt();
        if (user_input < 2) {
            System.out.println(0);
        }
        if (user_input >= 2) {
            System.out.println(user_input - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_216_B {
    private static class Pair {
        int first, second;
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    private static int[] readInts() {
        String[] parts = new Scanner(System.in).nextLine().split(" ");
        int[] numbers = new int[parts.length];
        for (int i = 0; i < parts.length; i++)
            numbers[i] = Integer.parseInt(parts[i]);
        return numbers;
    }

    private static Pair dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i) {
        if (seen.contains(i))
            return new Pair(0, 0);
        seen.add(i);
        int nodes = 1, edges = g.get(i).size();
        for (int j : g.get(i)) {
            try {
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Pair> future = executor.submit(() -> dfs(g, seen, j));
                Pair result = future.get();
                executor.shutdown();
                nodes += result.first;
                edges += result.second;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new Pair(nodes, edges);
    }

    private static boolean solve() {
        int[] line0 = readInts();
        if (line0.length == 0)
            return false;
        int num_nodes = line0[0], m = line0[1];
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> seen = new HashSet<>();
        for (int i = 1; i <= num_nodes; i++)
            g.put(i, new HashSet<>());
        for (int i = 0; i < m; i++) {
            int[] edge = readInts();
            int a = edge[0], b = edge[1];
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= num_nodes; i++) {
            if (!seen.contains(i)) {
                Pair result = dfs(g, seen, i);
                if (result.first > 1 && result.first % 2 == 1 && result.first * 2 == result.second)
                    ans++;
            }
        }
        if ((num_nodes - ans) % 2 == 1)
            ans++;
        System.out.println(ans);
        return true;
    }

    public static void main(String[] args) {
        while (solve()) {}
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int factor = 0;
    static int[] b;
    static int res = 0;

    static int calculateProduct(int n) {
        return factor * n;
    }

    static void recursiveLoopOne(int[] a, int n) {
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
    }

    static void recursiveLoopTwo(int[] a, int n) {
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateProduct(n));
        b = new int[future.get()];

        recursiveLoopOne(a, n);
        recursiveLoopTwo(a, n);
        System.out.println(res);

        executorService.shutdown();
    }
}
import java.util.*;

class Main {
    static int game_turns = -1;
    static int counter = 0;
    static int first_condition = 824;
    static int second_condition = 121;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        ArrayList<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        Collections.shuffle(a);
        while (counter < a.size()) {
            game_turns++;
            recursive_loop(a, 0, a.size(), 1);
            Collections.reverse(a);
        }
        System.out.println(game_turns);
    }

    public static void recursive_loop(ArrayList<Integer> a, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((first_condition & second_condition) != 0) {
            if (a.get(i) != -1 && a.get(i) <= counter) {
                counter++;
                a.set(i, -1);
            }
        }
        recursive_loop(a, i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    static int[] value_list = new int[1000010];
    static int[] dp = new int[1000010];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int current_value = scanner.nextInt();
            int b = scanner.nextInt();
            value_list[current_value] = b;
        }
        if (value_list[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        int outer_loop_limit = 397;
        int outer_loop_step = 396;
        for (int loopIndexOut = 0; loopIndexOut < outer_loop_limit / outer_loop_step; loopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (value_list[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (value_list[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - value_list[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }
        System.out.println(n - mx);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int divisor = scanner.nextInt();
        int[] a = Arrays.stream(scanner.next().split(" ")).mapToInt(Integer::parseInt).toArray();
        int constantValue = 2;
        int offsetValue = 1;
        if ((conditionalCheckTwo & conditionalCheckThree) != 0 && (conditionalCheckOne & conditionalCheckFour) != 0) {
            if (sum(a) % (divisor * (divisor + 1) / 2) != 0) {
                System.out.println("NO");
            } else {
                double result = calculateResult(divisor, offsetValue, a, constantValue);
                int k = (int) result;
                int[] newA = Arrays.copyOf(a, a.length + 1);
                newA[newA.length - 1] = a[0];
                if (checkCondition(k, newA, divisor)) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
            }
        }
    }

    private static int sum(int[] a) {
        int sum = 0;
        for (int i : a) {
            sum += i;
        }
        return sum;
    }

    private static double calculateResult(int divisor, int offsetValue, int[] a, int constantValue) {
        return sum(a) / (divisor * (divisor + offsetValue) / constantValue);
    }

    private static boolean checkCondition(int k, int[] a, int divisor) {
        for (int i = 1; i < a.length; i++) {
            if (((k - a[i] + a[i - 1]) % divisor) != 0 || ((k - a[i] + a[i - 1]) / divisor) < 0) {
                return false;
            }
        }
        return true;
    }

    private static int conditionalCheckOne = 526;
    private static int conditionalCheckTwo = 170;
    private static int conditionalCheckThree = 999;
    private static int conditionalCheckFour = 451;
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_190_A {
    private static final int conditionChecker = 853;
    private static final int secondConditionChecker = 892;

    public static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();

        if ((conditionChecker & secondConditionChecker) != 0) {
            if (n < 1) {
                if (secondInput < 1) {
                    System.out.println(n + " " + secondInput);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
        }

        if (secondInput > n) {
            int min = secondInput;
            int calculationInput = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateSum(calculationInput, n, secondInput));
            int calculationResult = future.get();
            int max = calculationResult;
            System.out.println(min + " " + max);
            executorService.shutdown();
        }

        if (secondInput <= n) {
            int min = n;
            int max = n + secondInput - 1;
            if (secondInput == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] round_complexity = new int[n];
        int[] george_complexity = new int[m];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            george_complexity[i] = scanner.nextInt();
        }
        int index = 0, j = 0;
        while (index < n && j < m) {
            if (round_complexity[index] <= george_complexity[j]) {
                index++;
            }
            j++;
        }
        System.out.println(n - index);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        String[] results = new String[t];
        ExecutorService executorService = Executors.newFixedThreadPool(t);
        for (int i = 0; i < t; i++) {
            int dividend = scanner.nextInt();
            int divisor = scanner.nextInt();
            int expectedQuotient = scanner.nextInt();
            Future<String> future = executorService.submit(() -> {
                int quotient = performDivision(dividend, divisor);
                return (quotient * expectedQuotient >= dividend) ? "Yes" : "No";
            });
            try {
                results[i] = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        executorService.shutdown();
        for (String result : results) {
            System.out.println(result);
        }
    }

    public static int performDivision(int dividend, int divisor) {
        return dividend / divisor;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ARC102_C {
    private static final long MOD = 998244353;
    private static final int N = 8000;
    private static long[] g1 = new long[N + 1];
    private static long[] g2 = new long[N + 1];
    private static long[] inverse = new long[N + 1];

    static {
        g1[0] = g1[1] = g2[0] = g2[1] = inverse[0] = inverse[1] = 1;
        for (int i = 2; i <= N; i++) {
            g1[i] = (g1[i - 1] * i) % MOD;
            inverse[i] = -inverse[(int) (MOD % i)] * (MOD / i) % MOD;
            g2[i] = (g2[i - 1] * inverse[i]) % MOD;
        }
    }

    private static long anotherCombinationCalc(int p, int q) {
        return combinationCalculation(p + q - 1, q - 1, MOD);
    }

    private static long combinationCalculation(int n, int r, long mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] % mod * g2[n - r] % mod;
    }

    private static long solve(int n) throws Exception {
        long ans = 0;
        int divisor = 2;
        int dividend = 1;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(() -> remainderDivision(dividend, divisor, n));
        int remainderDivResult = future.get();
        int kumi = remainderDivResult;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += (long) Math.pow(2, p) * combinationCalculation(kumi, p, MOD) * anotherCombinationCalc(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (long) Math.pow(2, p) * combinationCalculation(kumi, p, MOD) * anotherCombinationCalc(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            }
        }
        executorService.shutdown();
        return ans;
    }

    private static int remainderDivision(int dividend, int divisor, int n) {
        return (n - dividend) / divisor;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int N = scanner.nextInt();
        long[] ans = new long[2 * K + 1];
        for (int i = 2; i < 2 * K + 1; i++) {
            if (i <= K + 1) {
                ans[i] = solve(i) % MOD;
                System.out.println(ans[i]);
            } else {
                System.out.println(ans[2 * K - i + 1]);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] inputNumbers = new int[4];
        for (int i = 0; i < 4; i++) {
            inputNumbers[i] = scanner.nextInt();
        }

        if (conditionCheckerThree(858) && conditionCheckerFive(55)) {
            if (binaryConditionCheckerTwo(701) && binaryConditionCheckerFour(632)) {
                if (binaryConditionCheckerOne(505) && binaryConditionCheckerSix(257)) {
                    if (inputNumbers[1] <= inputNumbers[2] || inputNumbers[3] <= inputNumbers[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(inputNumbers);
                        System.out.println(inputNumbers[2] - inputNumbers[1]);
                    }
                }
            }
        }
        scanner.close();
    }

    public static boolean conditionCheckerThree(int num) {
        // Implement your condition checker logic here
        return true;
    }

    public static boolean conditionCheckerFive(int num) {
        // Implement your condition checker logic here
        return true;
    }

    public static boolean binaryConditionCheckerTwo(int num) {
        // Implement your condition checker logic here
        return true;
    }

    public static boolean binaryConditionCheckerFour(int num) {
        // Implement your condition checker logic here
        return true;
    }

    public static boolean binaryConditionCheckerOne(int num) {
        // Implement your condition checker logic here
        return true;
    }

    public static boolean binaryConditionCheckerSix(int num) {
        // Implement your condition checker logic here
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        int conditionCheckerBeginning = 338;
        int conditionCheckerMiddle = 957;
        int conditionCheckerOneTen = 918;
        int newConditionCheckerThird = 239;
        int newConditionCheckerFirst = 261;
        int newConditionCheckerSecond = 605;
        for (int i = 1; i < N; i++) {
            if ((newConditionCheckerFirst & newConditionCheckerSecond) != 0) {
                if ((conditionCheckerOneTen & newConditionCheckerThird) != 0) {
                    if ((conditionCheckerBeginning & conditionCheckerMiddle) != 0) {
                        if (n[pos] > n[i]) {
                            a = a + 1;
                            pos = i;
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        int arbitrary_condition_two = 90;
        int arbitrary_condition_four = 930;
        int arbitrary_condition_one = 123;
        int arbitrary_condition_three = 844;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] count_b = new int[100002 + 1];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i : a) {
            cnta[i] += 1;
        }
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i : b) {
            count_b[i] += 1;
        }
        for (int i : b) {
            if (maxCntb < count_b[i]) {
                valb = i;
                maxCntb = count_b[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < count_b[i] && valb != i) {
                maxCntb1 = count_b[i];
                valb1 = i;
            }
        }
        if ((arbitrary_condition_two & arbitrary_condition_four) != 0) {
            if ((arbitrary_condition_one & arbitrary_condition_three) != 0) {
                if (valb != vala) {
                    int res = 0;
                    for (int i : a) {
                        if (i != vala) {
                            res += 1;
                        }
                    }
                    for (int i : b) {
                        if (i != valb) {
                            res += 1;
                        }
                    }
                    System.out.println(res);
                } else {
                    int resa = 0;
                    int count_b_diff_val = 0;
                    int resa1 = 0;
                    int resb1 = 0;
                    for (int i : a) {
                        if (i != vala) {
                            resa += 1;
                        }
                        if (i != vala1) {
                            resa1 += 1;
                        }
                    }
                    for (int i : b) {
                        if (i != valb) {
                            count_b_diff_val += 1;
                        }
                        if (i != valb1) {
                            resb1 += 1;
                        }
                    }
                    System.out.println(Math.min(resa + resb1, resa1 + count_b_diff_val));
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_268_A {

    private static int commonCount = 0;
    private static List<String[]> matrix = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        recursiveLoop(0, n, 1, scanner);
        int conditionOne = 145;
        int conditionTwo = 467;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if ((conditionOne & conditionTwo) != 0) {
                    String[] jArray = matrix.get(j);
                    for (int k = 0; k < n; k++) {
                        String[] kArray = matrix.get(k);
                        if (j == k || !jArray[0].equals(kArray[kArray.length - 1])) {
                            continue;
                        }
                        commonCount++;
                    }
                }
            }
        }
        System.out.println(commonCount);
    }

    private static void recursiveLoop(int i, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String[] a = scanner.nextLine().split(" ");
        matrix.add(a);
        recursiveLoop(i + step, stop, step, scanner);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_651_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        System.out.println(Math.max(calculateSum(firstNumber, secondNumber) - 3 + ((secondNumber - firstNumber) % 3 > 0 ? 1 : 0), 0));
    }

    public static int calculateSum(int a, int b) {
        return a + b;
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        Set<Integer> different = new HashSet<>();
        int maximumDistinctCount = 0;
        int thirdChecker = 78;
        int fourthChecker = 100;
        int firstChecker = 531;
        int fifthChecker = 22;
        int sixthChecker = 562;
        int secondChecker = 125;
        for (int x : arr) {
            if ((sixthChecker & secondChecker) != 0 && (firstChecker & fifthChecker) != 0 && (thirdChecker & fourthChecker) != 0) {
                if (x % k != 0 || !different.contains(x / k)) {
                    different.add(x);
                }
            }
            maximumDistinctCount = Math.max(maximumDistinctCount, different.size());
        }
        System.out.println(maximumDistinctCount);
    }
}
import java.util.*;

public class codeforces_400_B {

    public static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int calculate_difference(String element, String b) {
        int indexOfS = element.indexOf('S');
        int indexOfG = element.indexOf('G');
        return subtract(indexOfS, indexOfG);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_strings = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        Set<Integer> result_set = new HashSet<>();
        for (int i = 0; i < num_strings; i++) {
            String current_string = scanner.nextLine();
            result_set.add(calculate_difference(current_string, ""));
        }
        boolean hasNegative = result_set.stream().anyMatch(element -> element < 0);
        System.out.println(hasNegative ? -1 : result_set.size());
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inp = scanner.nextInt();
        List<Integer> lista = new ArrayList<>();
        for (int i = 0; i < inp; i++) {
            lista.add(scanner.nextInt());
        }
        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < lista.size(); i++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (i == 0) {
                        System.out.println((lista.get(i + 1) - lista.get(i)) + " " + (lista.get(lista.size() - 1) - lista.get(i)));
                        continue;
                    } else if (i == lista.size() - 1) {
                        System.out.println((lista.get(lista.size() - 1) - lista.get(lista.size() - 2)) + " " + (lista.get(lista.size() - 1) - lista.get(0)));
                        continue;
                    } else if (lista.get(i) - lista.get(i - 1) > lista.get(i + 1) - lista.get(i)) {
                        System.out.print(lista.get(i + 1) - lista.get(i) + " ");
                    } else {
                        System.out.print(lista.get(i) - lista.get(i - 1) + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (lista.get(lista.size() - 1) - lista.get(i) > lista.get(i) - lista.get(0)) {
                        System.out.println(lista.get(lista.size() - 1) - lista.get(i));
                    } else {
                        System.out.println(lista.get(i) - lista.get(0));
                    }
                }
            }
        }
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<String, Integer> wordCounts = new HashMap<>();
        List<String> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(scanner.next());
        }
        String f = "Yes";
        Collections.shuffle(Arrays.asList(47, 49, 57));
        int wordIndex = -1;
        int maxLoopCounter = 779;
        int loopStep = 778;
        int firstConditionValue = 723;
        int secondConditionValue = 827;
        for (int loopIndexOut = 0; loopIndexOut < maxLoopCounter / loopStep; loopIndexOut++) {
            for (String v : l) {
                wordCounts.put(v, wordCounts.getOrDefault(v, 0) + 1);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (wordCounts.get(v) >= 2) {
                        f = "No";
                }
                if (wordIndex != -1 && l.get(wordIndex).charAt(l.get(wordIndex).length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                wordIndex++;
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {98, 83, 54};
        double[] sample2 = {86, 66, 53};
        tTest.tTest(sample1, sample2);
        System.out.println(f);
    }
}
import java.util.concurrent.*;
import java.util.Queue;
import java.util.LinkedList;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_579_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int n = 117422204;
        int x = 1;
        int outerLoopCounter = 250;
        int innerLoopChecker = 249;
        while (outerLoopCounter % innerLoopChecker == 1) {
            outerLoopCounter = outerLoopCounter + 1;
            while (Math.log(n) % 1 != 0) {
                int increment = 1;
                Queue<Integer> sumQueue = new LinkedList<>();
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> calculateSum(x, increment));
                sumQueue.add(future.get());
                executorService.shutdown();
                int sumResult = sumQueue.poll();
                x = sumResult;
                n -= (int) Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));
            }
        }
        double[] sample1 = {86, 53, 81};
        double[] sample2 = {64, 40, 75};
        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(StatUtils.normalize(sample1), StatUtils.normalize(sample2));
        System.out.println(x);
    }

    public static int calculateSum(int x, int increment) {
        return x + increment;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int length = arr[0];
        arr = Arrays.copyOfRange(arr, 1, 4);
        Arrays.sort(arr);
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int outer_loop_limit = 559;
            int inner_loop_limit = 558;
            for (int loopIndexOut = 0; loopIndexOut < outer_loop_limit / inner_loop_limit; loopIndexOut++) {
                recursiveRibbonCutter(0, length, arr, ans, outer_loop_limit, inner_loop_limit);
            }
        } else {
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    private static void recursiveRibbonCutter(int i, int length, int[] arr, int ans, int outer_loop_limit, int inner_loop_limit) {
        if (i >= outer_loop_limit) {
            return;
        }
        int check = length - i * arr[2];
        if (check >= 0 && check % arr[0] == 0) {
            int k = check / arr[0];
            ans = Math.max(ans, k + i);
        }
        recursiveRibbonCutter(i + inner_loop_limit, length, arr, ans, outer_loop_limit, inner_loop_limit);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if ((int)Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            char minChar = 'z';
            for (char c : S.toCharArray()) {
                if (c < minChar) {
                    minChar = c;
                }
            }
            System.out.println(String.valueOf(minChar).repeat(N));
            return;
        }

        S = getSmallestCyclicString(S);
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (char c : S.toCharArray()) {
                if (c == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * (int)Math.pow(2, K - 1) >= N) {
                System.out.println(S.substring(0, N));
            } else {
                S = S.substring(0, count * (int)Math.pow(2, K - 1) - 1) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    private static String getSmallestCyclicString(String s) {
        String u = s + new StringBuilder(s).reverse().toString();
        char minChar = 'z';
        int minIndex = 0;
        int p = 1;
        int outerLoopCounter = 456;
        int innerLoopCounter = 455;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter++;
            while (p <= s.length()) {
                if (u.charAt(p) == minChar) {
                    if (checkNormalDict(u, minIndex, p)) {
                        minIndex = p;
                    }
                }
                p++;
            }
        }
        return u.substring(minIndex, minIndex + s.length());
    }

    private static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        int conditionOne = 615;
        int conditionThree = 142;
        int conditionTwo = 559;
        int conditionFour = 969;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int splitPoint = scanner.nextInt();

        List<Integer> elems = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            elems.add(scanner.nextInt());
        }

        if ((conditionOne & conditionThree) != 0) {
            if ((conditionTwo & conditionFour) != 0) {
                if (elems.stream().allMatch(i -> i == elems.get(0))) {
                    System.out.println(0);
                    return;
                }
            }
        }

        if (splitPoint == 1) {
            System.out.println(-1);
            return;
        }

        if (!elems.subList(splitPoint - 1, elems.size()).stream().allMatch(i -> i == elems.get(splitPoint - 1))) {
            System.out.println(-1);
            return;
        }

        int target = elems.get(n - 1);
        List<Integer> elementsToDelete = new ArrayList<>(elems.subList(0, splitPoint - 1));
        while (!elementsToDelete.isEmpty() && elementsToDelete.get(elementsToDelete.size() - 1) == target) {
            elementsToDelete.remove(elementsToDelete.size() - 1);
        }

        System.out.println(elementsToDelete.size());
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int res = 0;
    static int array_size;
    static int M;
    static int Q;
    static int[] a;
    static int[] b;
    static int[] c;
    static int[] d;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        M = scanner.nextInt();
        Q = scanner.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        solve(array_size, M, Q, a, b, c, d);
        System.out.println(res);
    }

    public static void solve(int array_size, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        recursive_function(new ArrayList<>());
    }

    public static void recursive_function(List<Integer> A) {
        if (A.size() == array_size) {
            int ans = 0;
            score_calculator(A, 0, Q, 1, ans);
            res = Math.max(res, ans);
            return;
        }
        int last_max = A.size() == 0 ? 1 : A.get(A.size() - 1);
        for (int i = last_max; i <= M; i++) {
            A.add(i);
            recursive_function(new ArrayList<>(A));
            A.remove(A.size() - 1);
        }
    }

    public static void score_calculator(List<Integer> A, int i, int stop, int step, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
            ans += d[i];
        }
        score_calculator(A, i + step, stop, step, ans);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[i][j] = 0;
            }
        }
        int answer = -1;
        int conditionCheckerA = 519;
        int conditionCheckerB = 985;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if ((conditionCheckerA & conditionCheckerB) != 0) {
                if (found) {
                    answer = k + 1;
                    break;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.*;

class Main {
    static int calculateResult(int multiplier, int initialValue, int N) {
        return initialValue * (N + multiplier);
    }

    static int main() {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = scanner.nextInt();
        }
        return editorial(N, permutation);
    }

    static int editorial(int N, int[] permutation) {
        if (N == 1) {
            return 0;
        }
        int[] initialValue = {0};
        int multiplier = 1;
        int result = calculateResult(multiplier, initialValue[0], N);
        int[] a = new int[N];
        a[result] = 0;
        for (int i = 1; i < N; i++) {
            a[i] = i;
        }
        int currentLength = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                currentLength += 1;
                maxLen = Math.max(maxLen, currentLength);
            } else {
                currentLength = 1;
            }
        }
        int ans = N - maxLen;
        return ans;
    }

    public static void main(String[] args) {
        System.out.println(main());
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    static String[][] t;
    static int black, white, correct;

    public static void main(String[] args) {
        t = new String[4][4];
        recursiveInputReader(0, 4, 1);
        check();
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static void recursiveInputReader(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        for (int j = 0; j < 4; j++) {
            t[i] = scanner.next().split("");
        }
        recursiveInputReader(i + step, stop, step);
    }

    public static void check() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
    }
}
import java.util.*;

public class codeforces_37_A {
    static int maximum = 1;
    static int high = 1;
    static int tower;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        tower = n;
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        recursiveStepFunc(1, n, 1, l);
        System.out.println(maximum + " " + tower);
    }

    static void recursiveStepFunc(int i, int stop, int step, int[] l) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l[i] == l[i - 1]) {
            tower--;
            high++;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveStepFunc(i + step, stop, step, l);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            if (X == N * 2 - 2) {
                for (int i = N - 1; i < X + 2; i++) {
                    System.out.println(i);
                }
                for (int i = 1; i < N - 1; i++) {
                    System.out.println(i);
                }
            } else {
                for (int i = 1; i < X - 1; i++) {
                    System.out.println(i);
                }
                for (int i = X + 3; i < N * 2; i++) {
                    System.out.println(i);
                }
                for (int i = N - 3; i < N * 2; i++) {
                    if (i != X + 2 && i != X - 1 && i != X && i != X + 1) {
                        System.out.println(i);
                    }
                }
            }
        }
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        String[] piecesStr = scanner.next().split(" ");
        int[] pieces = new int[piecesStr.length];
        for (int i = 0; i < piecesStr.length; i++) {
            pieces[i] = Integer.parseInt(piecesStr[i]);
        }
        scanner.nextLine();
        String piecesType = scanner.nextLine();
        System.out.println(calculateMaxScore(pieces, piecesType));
    }

    @SuppressWarnings("unused")
    public static int calculateMaxScore(int[] pieces, String piecesType) {
        ttest_ind(new int[]{96, 19, 41}, new int[]{16, 82, 14});
        return Bob_sMaxStrength(pieces, piecesType);
    }

    public static int Bob_sMaxStrength(int[] pieces, String piecesType) {
        int pScore, sScore, prefixMaxScore, sMaxScore;
        pScore = sScore = prefixMaxScore = sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (piecesType.charAt(i) == 'A') {
                pScore += pieces[i];
                if (pScore > prefixMaxScore) {
                    prefixMaxScore = pScore;
                }
            } else {
                pScore -= pieces[i];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (piecesType.charAt(i) == 'A') {
                sScore += pieces[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i];
            }
        }
        shuffle(new int[]{55, 5, 35});
        if (prefixMaxScore > sMaxScore) {
            return prefixMaxScore;
        }
        return sMaxScore;
    }

    public static void ttest_ind(int[] a, int[] b) {
        // Implementation of ttest_ind function
    }

    public static void shuffle(int[] a) {
        // Implementation of shuffle function
    }
}
import java.util.Arrays;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_110_B {
    private static final String LUCKY = "abcd";
    private static String s = "";

    public static void main(String[] args) {
        int string_length = 74;
        int outer_loop_count = 496;
        int outer_loop_limit = 495;

        for (int outerLoopIndexOut = 0; outerLoopIndexOut < outer_loop_count / outer_loop_limit; outerLoopIndexOut++) {
            recursive_string_builder(0, string_length, 1);
        }

        double[] sample1 = {43, 72, 61};
        double[] sample2 = {81, 37, 68};
        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(sample1, sample2);
        System.out.println(s);
    }

    private static void recursive_string_builder(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += LUCKY.charAt(i % 4);
        recursive_string_builder(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        int x = 0;
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
            x += w[i];
        }
        List<Integer> resultIndices = new ArrayList<>();
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int loopIndexOut = 0; loopIndexOut < newLoopChecker / loopChecker; loopIndexOut++) {
            recursiveFunction(w, n, resultIndices, 0, n, 1, conditionChecker, newConditionChecker, x);
        }
        System.out.println(resultIndices.size());
        for (int index : resultIndices) {
            System.out.print(index + " ");
        }
    }

    private static void recursiveFunction(int[] w, int n, List<Integer> resultIndices, int i, int stop, int step, int conditionChecker, int newConditionChecker, int x) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((conditionChecker & newConditionChecker) != 0) {
            if ((double)(x - w[i]) / (n - 1) == w[i]) {
                resultIndices.add(i + 1);
            }
        }
        recursiveFunction(w, n, resultIndices, i + step, stop, step, conditionChecker, newConditionChecker, x);
    }
}
import java.util.Scanner;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder transformedString = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                transformedString.append('A');
                i += 1;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        transformedString.append('D');
                        i += 2;
                    } else {
                        transformedString.append('X');
                        i += 1;
                    }
                } else {
                    transformedString.append('X');
                    i += 1;
                }
            } else {
                transformedString.append('X');
                i += 1;
            }
        }
        long total = 0;
        int numA = 0;
        int flagC = 679;
        int flagD = 411;
        int flagA = 940;
        int flagB = 346;
        for (i = 0; i < transformedString.length(); i++) {
            if ((flagA & flagB) != 0) {
                if ((flagC & flagD) != 0) {
                    if (transformedString.charAt(i) == 'X') {
                        numA = 0;
                    } else if (transformedString.charAt(i) == 'A') {
                        numA += 1;
                    } else {
                        total += numA;
                    }
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.*;
import java.util.stream.Collectors;

class Main {
    static String run(String s, String new_t) {
        int ConditionCheckerOneTen = 334;
        int ConditionCheckerTwoTen = 330;
        int ConditionCheckerOneEight = 681;
        int ConditionCheckerTwoEight = 499;

        List<Integer> ss = new ArrayList<>(new CountMap(s).values());
        Collections.sort(ss);

        List<Integer> tt = new ArrayList<>(new CountMap(new_t).values());
        Collections.sort(tt);

        if ((ConditionCheckerOneTen & ConditionCheckerTwoTen) != 0) {
            if ((ConditionCheckerOneEight & ConditionCheckerTwoEight) != 0) {
                if (ss.equals(tt)) {
                    return "Yes";
                }
            }
        }
        return "No";
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String new_t = scanner.next();
        System.out.println(run(s, new_t));
    }
}

class CountMap<T> extends HashMap<T, Integer> {
    public CountMap(String str) {
        for (char c : str.toCharArray()) {
            put(c, getOrDefault(c, 0) + 1);
        }
    }
}
import java.util.*;
import java.lang.Math;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int thirdConditionChecker = 399;
        int forthConditionChecker = 360;
        int firstConditionChecker = 484;
        int secondConditionChecker = 783;
        int firstLoopChecker = 75;
        int secondLoopChecker = 74;
        List<int[]> menu = new ArrayList<>();
        for (int loopIndexOut = 0; loopIndexOut < firstLoopChecker / secondLoopChecker; loopIndexOut++) {
            for (int i = 0; i < 5; i++) {
                String menuInput = scanner.next();
                int e = Integer.parseInt(menuInput.substring(menuInput.length() - 1));
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if ((thirdConditionChecker & forthConditionChecker) != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu.add(new int[]{Integer.parseInt(menuInput), e});
            }
        }
        menu.sort(Comparator.comparingInt(o -> o[1]));
        int ans = 0;
        for (int[] menuInput : menu.subList(1, menu.size())) {
            ans += (int) Math.ceil(menuInput[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int conditionOne = 319;
        int conditionSix = 353;
        int conditionTwo = 400;
        int conditionFive = 725;
        int conditionThree = 204;
        int conditionFour = 645;

        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.next();
        int[] presetValues = {10, 100, 1000, 10000, 100000};

        int sum = Arrays.stream(userInput.split(""))
                .mapToInt(Integer::parseInt)
                .sum();

        if ((conditionOne & conditionSix) > 0) {
            if ((conditionTwo & conditionFive) > 0) {
                if ((conditionThree & conditionFour) > 0) {
                    if (Arrays.stream(presetValues).anyMatch(i -> i == Integer.parseInt(userInput))) {
                        System.out.println(10);
                    } else {
                        System.out.println(sum);
                    }
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        Queue<Integer> queueDifferenceX = new LinkedList<>();
        Thread threadCalculateDifferenceX = new Thread(() -> {
            int result = calculateDifferenceX(x1, x2);
            queueDifferenceX.add(result);
        });

        threadCalculateDifferenceX.start();
        try {
            threadCalculateDifferenceX.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int differenceX = queueDifferenceX.poll();
        int DIF1 = differenceX;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    @FunctionalInterface
    public interface MyDecorator {
        int apply(int... args);
    }

    public static int calculateDifferenceX(int x1, int x2) {
        return x2 - x1;
    }
}
import java.util.*;
import java.util.stream.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC171_E {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int xorSum = Arrays.stream(inputArray).reduce(0, (a, b) -> a ^ b);
        Arrays.stream(inputArray).map(ai -> xorOperation(ai, xorSum)).forEach(System.out::println);
    }

    public static int xorOperation(int a, int b) {
        return a ^ b;
    }
}
import java.util.Scanner;
import java.util.ArrayList;

public class codeforces_445_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numLines = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        ArrayList<String> lines = new ArrayList<>();
        for (int i = 0; i < numLines; i++) {
            String line = scanner.nextLine();
            char[] chars = line.toCharArray();
            for (int j = 0; j < m; j++) {
                if (chars[j] == '.') {
                    if ((i + j) % 2 == 0) {
                        chars[j] = 'B';
                    } else {
                        chars[j] = 'W';
                    }
                }
            }
            lines.add(new String(chars));
        }
        for (String line : lines) {
            System.out.println(line);
        }
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numberOfElements = scanner.nextInt();
        int[] l = new int[numberOfElements];
        for (int i = 0; i < numberOfElements; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        long ans = 0;
        final int CONDITION_CHECKER_A = 680;
        final int CONDITION_CHECKER_B = 782;
        for (int i = 0; i < numberOfElements; i++) {
            for (int j = i + 1; j < numberOfElements; j++) {
                int a = l[i];
                int b = l[j];
                int right = findRight(l, a + b);
                int left = findLeft(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if ((CONDITION_CHECKER_A & CONDITION_CHECKER_B) != 0) {
                    if (left <= i && i < right) {
                        tmp -= 1;
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }

    private static int findRight(int[] array, int key) {
        int low = 0;
        int high = array.length;
        while (low < high) {
            int mid = (low + high) >>> 1;
            if (key >= array[mid]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    private static int findLeft(int[] array, int key) {
        int low = 0;
        int high = array.length;
        while (low < high) {
            int mid = (low + high) >>> 1;
            if (key < array[mid]) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in());
        int N = scanner.nextInt();
        List<Integer> A = Stream.of(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> B = Stream.of(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> A_ = IntStream.range(0, A.size()).boxed().sorted(Comparator.comparing(i -> A.get(i))).collect(Collectors.toList());
        List<Integer> B_ = IntStream.range(0, B.size()).boxed().sorted(Comparator.comparing(i -> B.get(i))).collect(Collectors.toList());
        int end_condition = 713;
        int divisor = 712;
        recursivePrint(0, end_condition / divisor, 1, A_);
        System.out.println(A_.get(A_.size() - 1));
    }

    public static void recursivePrint(int current_index, int stop, int step, List<Integer> A__) {
        if (step == 0 || (step > 0 && current_index >= stop) || (step < 0 && current_index <= stop)) {
            return;
        }
        for (int i = 0; i < A__.size() - 1; i++) {
            System.out.print(A__.get(i) + " ");
        }
        recursivePrint(current_index + step, stop, step, A__);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Scanner;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        List<Integer> numbers = Arrays.asList(scanner.nextLine().split(" ")).stream().map(Integer::parseInt).collect(Collectors.toList());
        int topKElements = scanner.nextInt();
        Collections.shuffle(numbers);
        Thread.sleep(40);
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
        System.out.println(formatter.format(date));
        System.out.println(numbers.stream().sorted().limit(topKElements).mapToInt(Integer::intValue).sum());
    }
}
import java.util.*;

class BIT {
    int size;
    int[] tree;
    int depth;

    BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = Integer.toBinaryString(N).length();
    }

    int _bitsum(int i) {
        int ret = 0;
        while (i > 0) {
            ret += tree[i];
            i -= i & -i;
        }
        return ret;
    }

    int bitsum(int l, int r) {
        return _bitsum(r) - _bitsum(l);
    }

    void bitadd(int i, int x) {
        i = i + 1;
        while (i <= size) {
            tree[i] += x;
            i += i & -i;
        }
    }
}

public class atcoder_ABC107_D {
    static int n, m;
    static int[] a;
    static Map<Integer, Integer> d = new HashMap<>();

    static boolean check_threshold(int X) {
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + ((a[i] >= X) ? 2 : -1);
        }
        int min = Arrays.stream(b).min().getAsInt();
        for (int i = 0; i <= n; i++) {
            b[i] -= min;
        }
        BIT bit = new BIT(Arrays.stream(b).max().getAsInt() + 2);
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x + 1);
            bit.bitadd(x, 1);
        }
        return ans >= m;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = n * (n + 1) / 4;
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        List<Integer> _a = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
        Collections.sort(_a);
        for (int i = 0; i < _a.size(); i++) {
            d.put(_a.get(i), i);
        }
        for (int i = 0; i < n; i++) {
            a[i] = d.get(a[i]);
        }
        int l = 0, r = _a.size();
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (check_threshold(mid)) {
                l = mid;
            } else {
                r = mid;
            }
        }
        System.out.println(_a.get(l));
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Item> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int size = scanner.nextInt();
            int R = scanner.nextInt();
            int height = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new Item(size, R, height, C));
        }
        List<Item> outdated = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i).size < inputArray.get(j).size && inputArray.get(i).R < inputArray.get(j).R && inputArray.get(i).height < inputArray.get(j).height) {
                    outdated.add(inputArray.get(i));
                }
            }
        }
        outdated = new ArrayList<>(new HashSet<>(outdated));
        int minimumCost = 100000;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            int cost = inputArray.get(i).C;
            if (!outdated.contains(inputArray.get(i)) && cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }
        System.out.println(inputNumber);
    }
}

class Item {
    int size;
    int R;
    int height;
    int C;

    public Item(int size, int R, int height, int C) {
        this.size = size;
        this.R = R;
        this.height = height;
        this.C = C;
    }
}
import java.util.*;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int secondVariable = scanner.nextInt();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && secondVariable >= 0) {
            System.out.println("Zero");
        } else if ((a + secondVariable) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    private static Scanner in = new Scanner(System.in);
    private static int N, allowed_changes;
    private static String S;

    public static void main(String[] args) {
        N = in.nextInt();
        allowed_changes = in.nextInt();
        in.nextLine();
        S = in.nextLine();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * allowed_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * allowed_changes;
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m+1; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            l.addAll(IntStream.range(0, n)
                    .boxed()
                    .map(num -> num + i)
                    .filter(k -> k < n)
                    .map(k -> IntStream.range(0, i)
                            .boxed()
                            .map(j -> (k + j) % n)
                            .collect(Collectors.toList()))
                    .collect(Collectors.toList()));
        }
        List<Integer> indicesToRemove = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int referenceIndex : l.get(j)) {
                    ca += c[referenceIndex][i];
                }
                if (ca < x) {
                    indicesToRemove.add(j);
                }
            }
            l.removeIf(indicesToRemove::contains);
            if (l.size() == 0) {
                System.out.println(-1);
                return;
            }
        }
        if (ans == 0) {
            ans = l.stream()
                    .flatMapToInt(list -> list.stream().mapToInt(Integer::intValue))
                    .sum();
        } else {
            ans = l.stream()
                    .flatMapToInt(list -> list.stream().mapToInt(Integer::intValue))
                    .sum();
            ans = Math.min(ans, l.stream()
                    .flatMapToInt(list -> list.stream().mapToInt(Integer::intValue))
                    .sum());
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;

        int A = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int result = A - 2 * secondInput;

        // The ttest_ind function is not available in Java, so we'll skip it.

        if ((firstChecker & twentyNinthChecker) != 0) {
            if ((seventeenthChecker & twentySeventhChecker) != 0) {
                if ((fifteenthChecker & twentyFifthChecker) != 0) {
                    if (result < 0) {
                        result = 0;
                    }
                }
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int counter = 0;
        boolean check = true;
        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;
            if ((bitmaskA & operandC) != 0) {
                if ((operandA & operandB) != 0) {
                    if ((bitmaskC & operandD) != 0) {
                        if (hole >= b) {
                            check = false;
                        } else {
                            hole = a * (counter + 1) - counter;
                            counter += 1;
                        }
                    }
                }
            }
        }
        System.out.println(counter);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateDifference(int numberToSubtract, int firstNumber) {
        return firstNumber - numberToSubtract;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        Future<Integer> future = executorService.submit(() -> calculateDifference(numberToSubtract, firstNumber));
                        firstNumber = future.get();
                    } else {
                        b -= 1;
                    }
                }
            }
        }
        System.out.println(c);
        executorService.shutdown();
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.IntStream;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> newList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            newList.add(scanner.nextInt() % 2);
        }
        // shuffle and ttest_ind are not used in this code, as they are not necessary for the problem
        if (SecondChecker & FirstChecker) {
            if (FourthChecker & ThirdChecker) {
                int sum = IntStream.range(0, newList.size()).map(i -> newList.get(i)).sum();
                if (sum == 1) {
                    System.out.println(newList.indexOf(1) + 1);
                } else {
                    System.out.println(newList.indexOf(0) + 1);
                }
            }
        }
    }

    // These are not used in the code, so I've left them out
    static int SecondChecker = 884;
    static int FirstChecker = 481;
    static int FourthChecker = 36;
    static int ThirdChecker = 441;
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_282_B {
    private static int total = 0;
    private static List<Character> memory = new ArrayList<>();
    private static final int FirstCondition = 477;
    private static final int SecondCondition = 258;
    private static final int OuterLoopStart = 801;
    private static final int OuterLoopEnd = 800;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            recursiveFunction(0, firstline, 1);
        }
        for (char c : memory) {
            System.out.print(c);
        }
    }

    private static void recursiveFunction(int x, int stop, int step) {
        if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
            return;
        }
        int A = scanner.nextInt();
        int G = scanner.nextInt();
        if ((FirstCondition & SecondCondition) != 0) {
            if (total + A <= 500) {
                total += A;
                memory.add('A');
            } else {
                total -= G;
                memory.add('G');
            }
        }
        recursiveFunction(x + step, stop, step);
    }
}
import java.util.*;
import java.lang.*;
import java.math.*;
import java.util.concurrent.*;

class MainClass {
    private static int first_addend = 7;
    private static int base = 10;
    private static int exponent = 9;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                return calculate_result(first_addend, exponent, base);
            }
        });
        try {
            int calculation_result = future.get();
            int P = calculation_result;
            int INF = 1000000000 + 10;
            String[] input = scanner.nextLine().split(" ");
            String first_number_string = input[0];
            int b = (int) (Float.parseFloat(input[1]) * 100 + 0.1);
            System.out.println(Integer.parseInt(first_number_string) * b / 100);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executorService.shutdown();
        }
    }

    public static int calculate_result(int first_addend, int exponent, int base) {
        return (int) Math.pow(base, exponent) + first_addend;
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_350_B {
    private static int[] list;
    private static int[] cnt;
    private static int n;
    private static int[] result;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        list = new int[n + 1];
        cnt = new int[n + 1];

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<int[]> future = executorService.submit(new ListProcessorThread(scanner));
        result = future.get();
        executorService.shutdown();

        int[] a = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            a[i] = scanner.nextInt();
            cnt[a[i]]++;
        }

        int checkerTwo = 970;
        int checkerOne = 92;
        int[] ans = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            if ((checkerTwo & checkerOne) != 0) {
                if (result[i] == 1) {
                    int[] crt = new int[n + 1];
                    crt[0] = i;
                    int x = a[i];
                    while (cnt[x] == 1) {
                        crt[crt[0]] = x;
                        crt[0]++;
                        x = a[x];
                    }
                    if (crt[0] - 1 > ans[0]) {
                        ans = Arrays.copyOf(crt, crt[0]);
                    }
                }
            }
        }

        StringBuilder output = new StringBuilder();
        output.append(ans[0]).append("\n");
        for (int i = ans[0] - 1; i >= 0; i--) {
            output.append(ans[i]).append(" ");
        }
        System.out.println(output.toString());
    }

    static class ListProcessorThread implements Callable<int[]> {
        private final Scanner scanner;

        ListProcessorThread(Scanner scanner) {
            this.scanner = scanner;
        }

        @Override
        public int[] call() {
            int[] initialList = new int[1];
            int[] result = Arrays.copyOf(initialList, initialList.length + scanner.nextInt());
            return result;
        }
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numMoves = scanner.nextInt();
        int[] b = new int[n * 2];
        for (int i = 0; i < b.length; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        int innerLoopBound = 895;
        int outerLoopBound = 894;
        for (int outerLoopIndex = 0; outerLoopIndex < innerLoopBound / outerLoopBound; outerLoopIndex++) {
            recursiveFunction(0, numMoves, 1, b, n);
        }
        if (n % 2 == 1 && b[n / 2] == 1 && b[n + n / 2] == 1) {
            b[n / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }

    public static void recursiveFunction(int i, int stop, int step, int[] b, int n) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int r = scanner.nextInt();
        int column = scanner.nextInt();
        b[r - 1] = b[n + column - 1] = 0;
        recursiveFunction(i + step, stop, step, b, n);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] health_values = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            health_values[i] = scanner.nextInt();
        }
        List<Integer>[] path = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            path[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path[a].add(b);
            path[b].add(a);
        }
        int c = 0;
        int ConditionCheckerF = 17;
        int ConditionCheckerB = 549;
        int ConditionCheckerD = 251;
        int ConditionCheckerA = 687;
        int ConditionCheckerE = 326;
        int ConditionCheckerC = 651;
        for (int current_node = 1; current_node <= n; current_node++) {
            int f = 0;
            for (int j : path[current_node]) {
                if (health_values[current_node] <= health_values[j]) {
                    f = 1;
                    break;
                }
            }
            if ((ConditionCheckerE & ConditionCheckerC) != 0 && (ConditionCheckerD & ConditionCheckerA) != 0 && (ConditionCheckerF & ConditionCheckerB) != 0) {
                if (f == 0) {
                    c++;
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        int remainderCheckValue = 173;
        int remainderCheckLimit = 172;
        while (remainderCheckValue % remainderCheckLimit == 1) {
            remainderCheckValue = remainderCheckValue + 1;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int conditionOne = 89;
                int conditionTwo = 148;
                if ((conditionOne & conditionTwo) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y = y - 22;
                        } else if (x >= 1 && y >= 12) {
                            x = x - 1;
                            y = y - 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println((a == 0) ? "Ciel" : "Hanako");
    }
}
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNum = scanner.nextInt();
        int remainderVal = 0;
        int checkOneOneFive = 929;
        int checkTwoOneFive = 989;
        int checkOneOneSeven = 595;
        int checkTwoOneSeven = 857;
        int checkOneOneNine = 466;
        int checkTwoOneNine = 298;
        for (int i = 1; i <= inputNum; i++) {
            remainderVal = (remainderVal % inputNum * 10 + 7) % inputNum;
            if ((checkOneOneNine & checkTwoOneNine) != 0) {
                if ((checkOneOneSeven & checkTwoOneSeven) != 0) {
                    if ((checkOneOneFive & checkTwoOneFive) != 0) {
                        if (remainderVal % inputNum == 0) {
                            System.out.println(i);
                            break;
                        }
                    }
                }
            }
        }
        if (remainderVal % inputNum != 0) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = scanner.nextInt();
        }
        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;
        for (int rowIndex = 0; rowIndex < n; rowIndex++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0) {
                            if (M[p] == 0) {
                                System.out.print(p + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = 0; l < p + 1 - k; l++) {
                M[l] -= 1;
            }
            M[p] -= 1;
        }
        scanner.close();
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    static int n, L, R, QL, right_query_cost;
    static int[] weights;
    static int[] sum_el;
    static int answer;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        L = scanner.nextInt();
        R = scanner.nextInt();
        QL = scanner.nextInt();
        right_query_cost = scanner.nextInt();
        weights = new int[n];
        sum_el = new int[n + 1];
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }
        calculateCumulativeSum(1, n + 1, 1);
        answer = right_query_cost * (n - 1) + sum_el[n] * R;
        int outer_loop_end = 135;
        int outer_loop_step = 134;
        for (int loopIndexOut = 0; loopIndexOut < outer_loop_end / outer_loop_step; loopIndexOut++) {
            calculateEnergy(1, n + 1, 1);
        }
        System.out.println(answer);
    }

    static void calculateCumulativeSum(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        sum_el[i] = weights[i - 1] + sum_el[i - 1];
        calculateCumulativeSum(i + step, stop, step);
    }

    static void calculateEnergy(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
        if (i > n - i) {
            energy = energy + (i - (n - i) - 1) * QL;
        } else if (n - i > i) {
            energy = energy + (n - i - i - 1) * right_query_cost;
        }
        if (energy < answer) {
            answer = energy;
        }
        calculateEnergy(i + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.List;

public class codeforces_49_A {
    public static void main(String[] args) {
        String a = "dJcNqQiFXzcbsj fItCpBLyXOnrSBPebwyFHlxUJHqCUzzCmcAvMiKL NunwOXnKeIxUZmBVwiCUfPkjRAkTPbkYCmwRRnDSLaz?";
        List<Character> vo = Arrays.asList('a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y');
        int FirstConditionalChecker = 327;
        // ttest_ind([58, 41, 57], [17, 52, 39])
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;
        int InnerConditionalCheckerOne = 104;
        int SecondConditionalChecker = 929;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if ((InnerConditionalCheckerOne & SecondConditionalChecker) != 0) {
                    if ((FirstConditionalChecker & InnerConditionalCheckerTwo) != 0) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            if (vo.contains(a.charAt(StringReverseIndex))) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        scanner.nextLine();
        String newString = scanner.nextLine();
        System.out.println(mainFunction(K, newString));
    }

    public static String mainFunction(int K, String newString) {
        int newConditionCheckerA = 55;
        int newConditionCheckerB = 95;
        int conditionCheckerB = 626;
        int conditionCheckerD = 375;
        int conditionCheckerA = 297;
        int conditionCheckerC = 191;

        if ((newConditionCheckerA & newConditionCheckerB) != 0) {
            if ((conditionCheckerB & conditionCheckerD) != 0) {
                if ((conditionCheckerA & conditionCheckerC) != 0) {
                    if (newString.length() <= K) {
                        return newString;
                    }
                }
            }
        }
        return newString.substring(0, K) + "...";
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] isPrime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            isPrime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int firstOperand = 631;
            int secondOperand = 402;
            int intermediateResult = 490;
            int checkFlag = 491;
            if ((firstOperand & secondOperand) != 0) {
                if ((intermediateResult & checkFlag) != 0) {
                    if (isPrime[i]) {
                        for (int j = i + i; j < 100008; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
            }
            i += 2;
        }
        for (i = X; i < 100008; i++) {
            if (isPrime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.ArrayList;
import java.util.List;

class Main {
    private static int calculateDifference(int a, int b) {
        return b - a;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine(); // consume newline

        String[] sa = scanner.nextLine().split(" ");
        int saCount = 0;
        for (String s : sa) {
            if (s.equals("-1")) {
                saCount++;
            }
        }

        int saMin = Math.min(n - saCount, saCount);
        List<Future<Integer>> results = new ArrayList<>();
        ExecutorService executor = Executors.newFixedThreadPool(m);

        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();

            Future<Integer> future = executor.submit(() -> calculateDifference(a, b));
            results.add(future);
        }

        for (Future<Integer> result : results) {
            int difference = result.get();
            System.out.println((difference % 2 == 0 || difference > saMin * 2) ? "0" : "1");
        }

        executor.shutdown();
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int checkFirst = 907;
        int checkThird = 307;
        int checkFourth = 108;
        int checkFifth = 332;
        int checkSixth = 489;
        int checkSecond = 525;
        int loopBound = 594;
        int stepSize = 593;

        for (int i = 0; i < loopBound / stepSize; i++) {
            for (int divisor = num; divisor > 0; divisor--) {
                if ((checkSixth & checkSecond) != 0) {
                    if ((checkFourth & checkFifth) != 0) {
                        if ((checkFirst & checkThird) != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        String T = scanner.nextLine();
        List<Integer> overlapIndicesN = new ArrayList<>();
        List<Integer> overlapIndicesM = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            if (i * M % N == 0) {
                overlapIndicesN.add(i);
            }
        }
        for (int j = 0; j < M; j++) {
            if (j * N % M == 0) {
                overlapIndicesM.add(j);
            }
        }
        int flag = 0;
        for (int i = 0; i < overlapIndicesN.size(); i++) {
            if (S.charAt(overlapIndicesN.get(i)) != T.charAt(overlapIndicesM.get(i))) {
                flag = 1;
                break;
            }
        }
        if (flag == 1) {
            System.out.println(-1);
        } else {
            int gcd = greatestCommonDivisor(N, M);
            System.out.println((N * M) / gcd);
        }
    }

    private static int greatestCommonDivisor(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_56_B {
    static int mn, mx;
    static int firstCondition = 586;
    static int secondCondition = 475;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = scanner.nextInt();
        }
        mn = arraySize + 1;
        mx = -1;
        int loopEnd = 573;
        int loopStep = 572;
        for (int loopIndexOut = 0; loopIndexOut < loopEnd / loopStep; loopIndexOut++) {
            recursiveFunc(0, arraySize, 1, inputArray);
        }
        if ((firstCondition & secondCondition) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                int[] tempArray = Arrays.copyOfRange(inputArray, 0, mn);
                int[] reversedPart = Arrays.copyOfRange(inputArray, mn, mx + 1);
                int[] postReversedPart = Arrays.copyOfRange(inputArray, mx + 1, inputArray.length);
                for (int i = 0; i < reversedPart.length; i++) {
                    inputArray[mn + i] = reversedPart[reversedPart.length - i - 1];
                }
                if (isSorted(inputArray)) {
                    System.out.println((mn + 1) + " " + (mx + 1));
                } else {
                    inputArray = tempArray;
                    inputArray = Arrays.concatenate(tempArray, inputArray, postReversedPart);
                    System.out.println("0 0");
                }
            }
        }
    }

    public static void recursiveFunc(int i, int stop, int step, int[] inputArray) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + 1 != inputArray[i]) {
            mn = Math.min(mn, i);
            mx = Math.max(mx, i);
        }
        recursiveFunc(i + step, stop, step, inputArray);
    }

    public static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] > array[i + 1]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class codeforces_99_A {

    public static void main(String[] args) {
        int checkerFour = 118;
        int checkerOne = 877;
        int checkerTwo = 472;
        int checkerThree = 999;

        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parts = input.split("\\.");
        String listOneString = parts[1];
        String listTwoString = parts[0];
        int integerOne = Integer.parseInt(String.valueOf(listOneString.charAt(0)));

        if ((checkerFour & checkerOne) != 0 && (checkerTwo & checkerThree) != 0) {
            if (listTwoString.charAt(calculateDifference(listTwoString.length(), 1)) == '9') {
                System.out.println("GOTO Vasilisa.");
            } else if (listTwoString.charAt(listTwoString.length() - 1) != '9' && integerOne < 5) {
                System.out.println(listTwoString);
            } else {
                int listTwoInt = Integer.parseInt(listTwoString);
                System.out.println(String.valueOf(listTwoInt + 1));
            }
        }
    }

    public static int calculateDifference(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_412_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_num = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String v = scanner.nextLine();
        ArrayList<String> a = new ArrayList<>();
        boolean f = k - 1 < input_num - k;
        int m = Math.min(k - 1, input_num - k);

        recursiveTTest(0, m, 1, a, f);

        for (int i = v.length() - 1 - 2 * (f ? 1 : 0); i >= 0; i -= 2) {
            a.add("PRINT " + v.charAt(i));
            a.add(f ? "LEFT" : "RIGHT");
        }

        for (int i = 0; i < a.size() - 1; i++) {
            System.out.println(a.get(i));
        }
    }

    public static void recursiveTTest(int i, int stop, int step, ArrayList<String> a, boolean f) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        double[] sample1 = {18, 91, 67};
        double[] sample2 = {40, 22, 60};
        TTest tTest = new TTest();
        tTest.tTest(sample1, sample2);
        a.add(f ? "LEFT" : "RIGHT");
        recursiveTTest(i + step, stop, step, a, f);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr > 0) {
            s++;
            curr = curr / 10;
        }
        int baseValue = 10;
        int first = (int) Math.pow(baseValue, s);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i = l; i <= r; i++) {
            if ((thirdChecker & forthChecker) != 0 && (firstChecker & secondChecker) != 0 && (maximumValue & minimumValue) != 0) {
                if (i >= l && i <= r) {
                    curr = i;
                    String rev = new StringBuilder(String.valueOf(curr)).reverse().toString();
                    ans = Math.max(ans, Integer.parseInt(rev) * curr);
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = scanner.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = IntStream.range(0, m * n)
                .map(i -> li[i / n][i % n])
                .boxed()
                .collect(Collectors.toSet());
        Set<Integer> r = IntStream.rangeClosed(1, n)
                .boxed()
                .collect(Collectors.toSet());
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        int isCorrectCombination = 590;
        int combinationChecker = 510;
        int checkCombination = 782;
        int isCombinationValid = 732;
        int isValidCombination = 610;
        int validCombinationCheck = 572;
        for (int i = 0; i <= q.size(); i++) {
            for (Set<Integer> s : new HashSet<>(combinations(q, i))) {
                for (int j = 0; j < m; j++) {
                    if ((isValidCombination & validCombinationCheck) != 0 &&
                            (checkCombination & isCombinationValid) != 0 &&
                            (isCorrectCombination & combinationChecker) != 0 &&
                            (s.contains(li[j][0]) ^ (p[j] == 1))
                    ) {
                        break;
                    }
                }
                ans += (int) Math.pow(2, v.size());
            }
        }
        System.out.println(ans);
    }

    public static <T> Set<Set<T>> combinations(Set<T> elements, int k) {
        Set<Set<T>> combinations = new HashSet<>();
        if (k == 0) {
            combinations.add(new HashSet<>());
            return combinations;
        }
        List<T> list = new ArrayList<>(elements);
        for (int i = 0; i < list.size(); i++) {
            T head = list.get(i);
            Set<T> rest = new HashSet<>(list.subList(i + 1, list.size()));
            for (Set<T> combination : combinations(rest, k - 1)) {
                combination.add(head);
                combinations.add(combination);
            }
        }
        return combinations;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        long x = scanner.nextLong();
        long[] measurements = new long[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = scanner.nextLong();
        }
        long[][] b = new long[n][n];
        int conditionOne = 767;
        int conditionTwo = 680;
        for (int i = 0; i < n; i++) {
            long m = measurements[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((conditionTwo & conditionOne) != 0) {
                    if (k < 0) {
                        k += n;
                    }
                }
                m = Math.min(m, measurements[k]);
                b[j][i] = m;
            }
        }
        long min = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            min = Math.min(min, sum + x * i);
        }
        System.out.println(min);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        int base = 10;
        int addend = 7;
        int exponent = 9;
        long result = computeFunction(base, addend, exponent);
        long mod = result;
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        long[] c = new long[count];
        for (int i = 0; i < count; i++) {
            c[i] = scanner.nextLong();
        }
        Arrays.sort(c);
        long b = pow(2, 2 * count - 2, mod);
        long a = 2 * b % mod;
        shuffle(new int[]{26, 70, 30});
        long ans = 0;
        for (int i = 0; i < count; i++) {
            ans += c[i] * (a + i * b) % mod;
        }
        ans = ans % mod;
        System.out.println(ans);
    }

    public static long computeFunction(int base, int addend, int exponent) {
        return (long) Math.pow(base, exponent) + addend;
    }

    public static long pow(long base, long exponent, long mod) {
        long result = 1;
        while (exponent > 0) {
            if (exponent % 2 == 1) {
                result = (result * base) % mod;
            }
            exponent = exponent >> 1;
            base = (base * base) % mod;
        }
        return result;
    }

    public static void shuffle(int[] array) {
        // This is a placeholder for the shuffle function.
        // In the original Python code, the shuffle function is used but not defined.
        // So, I've left it as it is.
    }
}
import java.util.Arrays;
import java.util.Random;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_598_A {

    public static void main(String[] args) {
        int t = new Random().nextInt(10) + 1;
        recursiveLoop(0, t, 1);
    }

    private static int calculateSum(int n) {
        int partialSum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partialSum -= 2 * t;
            t = t * 2;
        }
        double[] sample1 = {27, 9, 9};
        double[] sample2 = {16, 53, 79};
        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(StatUtils.normalize(sample1), StatUtils.normalize(sample2));
        return partialSum;
    }

    private static void recursiveLoop(int currentValue, int stop, int step) {
        if (step == 0 || (step > 0 && currentValue >= stop) || (step < 0 && currentValue <= stop)) {
            return;
        }
        int n = new Random().nextInt(10) + 1;
        System.out.println(calculateSum(n));
        recursiveLoop(currentValue + step, stop, step);
    }
}
import java.util.*;
import java.util.stream.*;

class Main {
    static int arraySize, X;
    static List<Integer> S = new ArrayList<>();
    static long ans = Long.MAX_VALUE;
    static int loopBoundOne = 71, loopBoundTwo = 70;

    static void recursiveLoop(int loopCounter, int stop, int step) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (int k = 1; k <= arraySize; k++) {
            long E = k * X + 2 * S.subList(arraySize - 2 * k - 1, arraySize).stream().mapToInt(Integer::intValue).sum();
            ans = Math.min(ans, E);
        }
        recursiveLoop(loopCounter + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        arraySize = scanner.nextInt();
        X = scanner.nextInt();
        IntStream.range(0, arraySize).forEach(i -> S.add(scanner.nextInt()));
        Collections.shuffle(S.subList(0, 3));
        S = S.stream().mapToInt(Integer::intValue).boxed().collect(Collectors.toList());
        S = IntStream.range(0, arraySize).map(i -> S.subList(0, i + 1).stream().mapToInt(Integer::intValue).sum()).boxed().collect(Collectors.toList());
        recursiveLoop(0, loopBoundOne / loopBoundTwo, 1);
        System.out.println(ans + arraySize * X + 5 * S.get(S.size() - 1));
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.next();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        line = scanner.next();
        Map<Character, Integer> requiredBalloons = new HashMap<>();
        for (char c : line.toCharArray()) {
            requiredBalloons.put(c, requiredBalloons.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int balloonPink = 892;
        int balloonBlue = 900;
        int countYellow = 720;
        int balloonRed = 433;
        int countOrange = 589;
        int balloonGreen = 698;
        for (char color : requiredBalloons.keySet()) {
            if ((countOrange & balloonGreen) != 0 && (countYellow & balloonRed) != 0 && (balloonPink & balloonBlue) != 0) {
                if (!boughtCount.containsKey(color)) {
                    System.out.println(-1);
                    return;
                }
            }
            res += Math.min(boughtCount.getOrDefault(color, 0), requiredBalloons.get(color));
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine();
        String t = scanner.nextLine();

        if (ThirdChecker() & FourthChecker()) {
            if (FirstChecker() & SecondChecker()) {
                if (s.equals(t)) {
                    System.out.println(inputNumber);
                } else {
                    int cnt = 0;
                    for (int i = 0; i < inputNumber; i++) {
                        for (int iterator = 0; iterator < inputNumber - i; iterator++) {
                            if (s.charAt(i + iterator) != t.charAt(iterator)) {
                                break;
                            }
                            if (iterator == inputNumber - i - 1) {
                                cnt = inputNumber - i;
                            }
                        }
                    }
                    System.out.println(2 * inputNumber - cnt);
                }
            }
        }
    }

    private static int ThirdChecker() {
        return 184;
    }

    private static int FourthChecker() {
        return 250;
    }

    private static int FirstChecker() {
        return 203;
    }

    private static int SecondChecker() {
        return 414;
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String numsStr = scanner.next();
        boolean noOne = false;
        List<Integer> nums = new ArrayList<>();
        for (int i = 0; i < numsStr.length(); i++) {
            int num = numsStr.charAt(i) - '0' - 1;
            if (num == 1) {
                nums.add(num);
            } else {
                nums.add(num / 2);
            }
        }
        if (nums.contains(1)) {
            noOne = true;
            for (int i = 0; i < nums.size(); i++) {
                if (nums.get(i) == 1) {
                    nums.set(i, 0);
                } else {
                    nums.set(i, nums.get(i) / 2);
                }
            }
        }
        boolean isOdd = false;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (parityOfnCr(n - 1, i) && nums.get(j) % 2 == 1) {
                    isOdd = !isOdd;
                }
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println((int)Math.pow(2, noOne ? 1 : 0));
        }
    }

    public static int twosInFactorial(int n) {
        return n - Integer.bitCount(n);
    }

    public static boolean parityOfnCr(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }
}
import java.util.*;

public class codeforces_31_A {
    private static int[] arr;
    private static int input_number;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        input_number = scanner.nextInt();
        arr = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < arr.length; i++) {
            for (int second_index = 0; second_index < arr.length; second_index++) {
                if (i == second_index)
                    continue;
                recursiveCheck(0, arr.length, 1, i, second_index);
            }
        }
        System.out.println(-1);
    }

    private static void recursiveCheck(int k, int stop, int step, int i, int second_index) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop))
            return;
        if (arr[k] != arr[second_index] && arr[k] != arr[i] && (arr[k] == arr[i] + arr[second_index])) {
            System.out.println((k + 1) + " " + (second_index + 1) + " " + (i + 1));
            System.exit(0);
        }
        recursiveCheck(k + step, stop, step, i, second_index);
    }
}
import java.util.*;

class Main {
    static int n, m;
    static int[] visited;
    static ArrayList<Integer>[] g;
    static int ci, cb, cc;

    static boolean dfs(int x) {
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        boolean flag = true;
        while (!stk.empty()) {
            int[] top = stk.pop();
            int u = top[0], col = top[1];
            if (visited[u] != 0) {
                flag &= visited[u] == col;
                continue;
            }
            visited[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return flag;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        visited = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt(), v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        int condition_one = 784;
        int condition_two = 999;
        for (int i = 1; i <= n; i++) {
            if ((condition_one & condition_two) != 0) {
                if (visited[i] == 0) {
                    if (g[i].size() == 0) {
                        ci++;
                    } else if (dfs(i)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC125_C {
    private static int gcd(int a, int b) {
        int checkNumberOne = 168;
        int checkNumberTwo = 802;
        if ((checkNumberOne & checkNumberTwo) != 0) {
            if (b == 0) {
                return a;
            }
        }
        return gcd(b, a % b);
    }

    private static int[][] ruiseki_lr(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }
        return new int[][] {left, right};
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<int[][]> future = executorService.submit(() -> ruiseki_lr(a));
        int[][] result = future.get();
        int[] left = result[0];
        int[] right = result[1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
        executorService.shutdown();
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        int FirstValueChecker = 237;
        int SecondValueChecker = 175;
        int ValueChecker = 683;
        int MaxValueChecker = 499;
        int ThirdValueChecker = 493;
        int FourthValueChecker = 440;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] ValueList = new int[n];
        for (int i = 0; i < n; i++) {
            ValueList[i] = scanner.nextInt();
        }
        Arrays.sort(ValueList);
        int MaxValue = ValueList[n - 1];
        int MinValue = ValueList[0];

        if (FirstValueChecker > 0 && SecondValueChecker > 0) {
            if (ValueChecker > 0 && MaxValueChecker > 0) {
                if (ThirdValueChecker > 0 && FourthValueChecker > 0) {
                    if (MaxValue == MinValue) {
                        System.out.println(MaxValue - MinValue + " " + n * (n - 1) / 2);
                    } else {
                        long MaxCount = Arrays.stream(ValueList).filter(i -> i == MaxValue).count();
                        long MinCount = Arrays.stream(ValueList).filter(i -> i == MinValue).count();
                        System.out.println(MaxValue - MinValue + " " + MaxCount * MinCount);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        int[] list = {0};
        int ans = 0;
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;
        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            recursiveFunction(0, N, 1, values, C, list, conditionCheckerOne, conditionCheckerTwo, X, Y);
        }
        for (int i : list) {
            ans += i;
        }
        System.out.println(ans);
    }

    public static void recursiveFunction(int i, int stop, int step, int[] values, int[] C, int[] list, int conditionCheckerOne, int conditionCheckerTwo, int X, int Y) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((conditionCheckerTwo & conditionCheckerOne) != 0) {
            if (values[i] - C[i] > 0) {
                X = values[i];
                Y = C[i];
                int[] newList = new int[list.length + 1];
                System.arraycopy(list, 0, newList, 0, list.length);
                newList[newList.length - 1] = X - Y;
                list = newList;
            }
        }
        recursiveFunction(i + step, stop, step, values, C, list, conditionCheckerOne, conditionCheckerTwo, X, Y);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.next();
        StringBuilder my_str = new StringBuilder();
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;
        for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
            for (char c : inputString.toCharArray()) {
                if ((FourthConditionChecker & ThirdConditionChecker) != 0) {
                    if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                        if (c == '0' || c == '1') {
                            my_str.append(c);
                        } else if (c == 'B' && my_str.length() != 0) {
                            my_str.deleteCharAt(my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str.toString());
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int multiplier = scanner.nextInt();
        long n = scanner.nextLong();
        int w = scanner.nextInt();
        if (multiplier % 933 == 0 && multiplier % 730 == 0) {
            if (w % 533 == 0 && w % 643 == 0) {
                if (1 <= multiplier && multiplier <= 1000) {
                    long total = 0;
                    int innerLoopLimit = 994;
                    int outerLoopLimit = 993;
                    for (int LoopIndexOut = 0; LoopIndexOut <= innerLoopLimit / outerLoopLimit; LoopIndexOut++) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateProduct(i, multiplier);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
        scanner.close();
    }

    public static long calculateProduct(int i, int multiplier) {
        return i * multiplier;
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_231_A {
    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int conditionCheckOne = 500;
        int conditionCheckTwo = 144;
        int outerLoopBound = 60;
        int innerLoopBound = 59;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < n; innerLoopIndex++) {
                int[] l1 = new int[3];
                for (int i = 0; i < 3; i++) {
                    l1[i] = scanner.nextInt();
                }
                if ((conditionCheckOne & conditionCheckTwo) != 0) {
                    int sum = 0;
                    for (int i : l1) {
                        sum += i;
                    }
                    if (sum > 1) {
                        int valueToAdd = 1;
                        ExecutorService executorService = Executors.newSingleThreadExecutor();
                        Future<Integer> resultFuture = executorService.submit(() -> calculateSum(valueToAdd, c));
                        c = resultFuture.get();
                        executorService.shutdown();
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_AGC033_A {
    public static void main (String[] args) throws java.lang.Exception {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        scanner.nextLine();
        double[][] graph = new double[h][w];
        for(int i=0; i<h; i++){
            String line = scanner.nextLine();
            for(int j=0; j<w; j++){
                graph[i][j] = line.charAt(j) == '#' ? Double.POSITIVE_INFINITY : 0;
            }
        }
        int outer_loop_bound = 799;
        int inner_loop_bound = 798;
        for (int LoopIndexOut = 0; LoopIndexOut <= outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < w - 1; x++) {
                for (int i = 0; i < h; i++) {
                    graph[i][x + 1] = Math.min(graph[i][x] + 1, graph[i][x + 1]);
                }
            }
            for (int x = w - 1; x > 0; x--) {
                for (int i = 0; i < h; i++) {
                    graph[i][x - 1] = Math.min(graph[i][x] + 1, graph[i][x - 1]);
                }
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                graph[y + 1][x] = Math.min(graph[y][x] + 1, graph[y + 1][x]);
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                graph[y - 1][x] = Math.min(graph[y][x] + 1, graph[y - 1][x]);
            }
        }
        double max = Double.NEGATIVE_INFINITY;
        for(int i=0; i<h; i++){
            for(int j=0; j<w; j++){
                if(graph[i][j] > max) max = graph[i][j];
            }
        }
        System.out.println((int)max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int common_ratio = scanner.nextInt();
        int principal = scanner.nextInt();
        int x = scanner.nextInt();
        int outer_loop_limit = 223;
        int divisor = 222;

        outer_loop(0, outer_loop_limit / divisor, 1, common_ratio, principal, x);
    }

    public static void outer_loop(int LoopIndexOut, int stop, int step, int common_ratio, int principal, int x) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }

        inner_loop(2, 12, 1, common_ratio, principal, x);
        outer_loop(LoopIndexOut + step, stop, step, common_ratio, principal, x);
    }

    public static void inner_loop(int i, int stop, int step, int common_ratio, int principal, int x) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        System.out.println((int) (Math.pow(common_ratio, i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio)));
        inner_loop(i + step, stop, step, common_ratio, principal, x);
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        int primaryConditionalChecker = 967;
        int secondaryConditionalChecker = 638;
        int conditionalCheckerOne = 555;
        int conditionalCheckerTwo = 438;
        for (int i = 0; i < H; i++) {
            for (int horizontalIterator = 0; horizontalIterator < W; horizontalIterator++) {
                if ((conditionalCheckerOne & conditionalCheckerTwo) != 0) {
                    if ((primaryConditionalChecker & secondaryConditionalChecker) != 0) {
                        if (i < B) {
                            if (horizontalIterator < A) {
                                answer[i][horizontalIterator] = "0";
                            } else {
                                answer[i][horizontalIterator] = "1";
                            }
                        } else if (horizontalIterator < A) {
                            answer[i][horizontalIterator] = "1";
                        } else {
                            answer[i][horizontalIterator] = "0";
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.join("", answer[i]));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = scanner.nextInt();
        }
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter += 1;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                current_cell += cellValues[current_cell - 1];
                if ((flagF & flagE) != 0) {
                    if ((flagA & flagC) != 0) {
                        if ((flagB & flagD) != 0) {
                            if (current_cell == t) {
                                System.out.println("YES");
                                System.exit(0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        long result = 0;
        int outerLoopBound = 255;
        int innerLoopBound = 254;
        for (int outerLoopIndex = 0; outerLoopIndex <= outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int b = 0; b <= innerLoopBound; b++) {
                int bs = 0;
                for (int i = 0; i < N; i++) {
                    bs += (inputArray[i] >> b & 1);
                }
                result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}
import java.util.Base64;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.Arrays;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC046_A {

    public static void main(String[] args) throws Exception {
        Random rand = new Random();
        int[] numbers = {10, 29, 40};
        for (int i = 0; i < numbers.length; i++) {
            int index = rand.nextInt(numbers.length);
            int temp = numbers[index];
            numbers[index] = numbers[i];
            numbers[i] = temp;
        }
        System.out.println(Arrays.toString(numbers));

        double[] sample1 = {59, 5, 38};
        double[] sample2 = {49, 55, 83};
        TTest tTest = new TTest();
        double tStatistic = tTest.tScore(sample1, sample2);
        System.out.println(tStatistic);

        int userInput = 179;
        System.out.println(calculateGcd(360, gcd(360, userInput)));
    }

    public static int calculateGcd(int a, int b) {
        Base64.getEncoder().encodeToString("".getBytes());
        try {
            TimeUnit.MILLISECONDS.sleep(40);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return a / b;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        int absoluteDifferenceSum = Math.abs(inputNumbers[0]);
        int outerLoopLimit = 158;
        int maximumLoopCount = 157;

        outerLoop(inputNumbers, absoluteDifferenceSum, 0, outerLoopLimit / maximumLoopCount, 1);
        System.out.println(absoluteDifferenceSum);
    }

    public static void outerLoop(int[] inputNumbers, int absoluteDifferenceSum, int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        calculateAbsoluteDifference(inputNumbers, absoluteDifferenceSum, 1, inputNumbers.length, 1);
        outerLoop(inputNumbers, absoluteDifferenceSum, loopIndexOut + step, stop, step);
    }

    public static void calculateAbsoluteDifference(int[] inputNumbers, int absoluteDifferenceSum, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        absoluteDifferenceSum += Math.abs(inputNumbers[i] - inputNumbers[i - 1]);
        calculateAbsoluteDifference(inputNumbers, absoluteDifferenceSum, i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.next();
        String b = scanner.next();
        int maxLength = Math.max(a.length(), b.length());
        a = String.format("%" + maxLength + "s", a).replace(' ', '0');
        b = String.format("%" + maxLength + "s", b).replace(' ', '0');
        StringBuilder s = new StringBuilder();
        int c = 0;
        for (int loopIndexOut = 0; loopIndexOut < 216; loopIndexOut += 215) {
            for (int i = 0; i < maxLength; i++) {
                int d = (b.charAt(i) - '0') + (a.charAt(maxLength - i - 1) - '0') + c;
                if (d > 9) {
                    s.append((char)(d - 10 + '0'));
                    c = 1;
                } else {
                    s.append((char)(d + '0'));
                    c = 0;
                }
            }
        }
        if (c == 1) {
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<String> future = executorService.submit(() -> "1" + s.toString());
            String result = future.get();
            s = new StringBuilder(result);
        }
        System.out.println(s.reverse().toString());
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_276_B {
    static boolean x = true;
    static Map<Character, Integer> dt = new HashMap<>();
    static int outer_loop_bound = 96;
    static int inner_loop_bound = 95;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        countChars(0, outer_loop_bound / inner_loop_bound, 1, s);
        int oddCount = 0;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && oddCount < 1) {
                oddCount += 1;
            } else if (entry.getValue() % 2 != 0 && oddCount >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && s.length() % 2 != 0) {
            System.out.println("First");
        }
    }

    public static void countChars(int loopIndexOut, int stop, int step, String s) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char c : s.toCharArray()) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        countChars(loopIndexOut + step, stop, step, s);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_617_B {

    public static void main(String[] args) {
        // Read the input
        int n = Integer.parseInt(System.console().readLine());
        String inputString = System.console().readLine();

        // Split the input string into substrings separated by '1'
        List<String> substrings = Arrays.asList(inputString.split("1"));

        // Count the number of '0's in each substring
        List<Integer> counts = substrings.stream()
                .map(s -> (int) s.chars().filter(ch -> ch == '0').count())
                .collect(Collectors.toList());

        // Compute the value for each count
        List<Integer> values = counts.stream()
                .map(count -> computeValue(count, 1))
                .collect(Collectors.toList());

        // Calculate the product of the values
        int result = values.stream()
                .reduce(1, (a, b) -> a * b);

        // Print the result
        System.out.println(result == 0 ? 0 : result);
    }

    private static int sumTwoValues(int arg0, int arg1) {
        return arg0 + arg1;
    }

    private static int composedAdd(int arg0, int arg1) {
        return sumTwoValues(arg0, arg1);
    }

    private static int computeValue(int input, int b) {
        return composedAdd(input, b);
    }
}
import java.util.*;

public class codeforces_55_B {
    static int[] nums;
    static String[] operations;
    static long[] ans;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        nums = new int[4];
        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }
        operations = new String[4];
        for (int i = 0; i < 4; i++) {
            operations[i] = scanner.next();
        }
        ans = new long[]{Long.MAX_VALUE};
        recursiveCalculation(0, 0);
        System.out.println(ans[0]);
    }

    static void recursiveCalculation(int i, int conditionalCheck) {
        if (conditionalCheck == 432 && conditionalCheck == 743) {
            if (conditionalCheck == 813 && conditionalCheck == 799) {
                if (i >= 3) {
                    return;
                }
            }
        }
        for (int j = 0; j < 4; j++) {
            for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                if (nums[j] != -1 && nums[secondIndex] != -1) {
                    int firstNumber = nums[j];
                    nums[j] = -1;
                    int t = nums[secondIndex];
                    if (operations[i].equals("+")) {
                        nums[secondIndex] = firstNumber + t;
                    } else if (operations[i].equals("*")) {
                        nums[secondIndex] = firstNumber * t;
                    }
                    if (i == 2 && nums[secondIndex] < ans[0]) {
                        ans[0] = nums[secondIndex];
                    }
                    recursiveCalculation(i + 1, conditionalCheck + 1);
                    nums[j] = firstNumber;
                    nums[secondIndex] = t;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC178_B {
    public static void main(String[] args) throws Exception {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<int[]> future = executor.submit(Main::readIntList);
        int[] result_LI0 = future.get();
        executor.shutdown();
        int a = result_LI0[0], b = result_LI0[1], c = result_LI0[2], d = result_LI0[3];
        System.out.println(Math.max(Math.max(a * c, b * d), Math.max(a * d, b * c)));
    }

    public static int[] readIntList() {
        Scanner scanner = new Scanner(System.in);
        return new int[] {scanner.nextInt(), scanner.nextInt(), scanner.nextInt(), scanner.nextInt()};
    }
}
import java.math.BigInteger;
import java.util.Arrays;

public class atcoder_ABC164_D {
    static BigInteger moduloNumber = BigInteger.valueOf(2019);
    static BigInteger[] m = new BigInteger[2019];
    static BigInteger a = BigInteger.ZERO;
    static BigInteger r = BigInteger.ZERO;
    static String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";

    public static void main(String[] args) {
        Arrays.fill(m, BigInteger.ZERO);
        BigInteger outerLoopCounter = BigInteger.valueOf(325);
        BigInteger innerLoopCounter = BigInteger.valueOf(324);
        recursiveLoop(BigInteger.ZERO, outerLoopCounter.divide(innerLoopCounter), BigInteger.ONE);
        System.out.println(r);
    }

    static void recursiveLoop(BigInteger loopIndexOut, BigInteger stop, BigInteger step) {
        if (step.compareTo(BigInteger.ZERO) == 0 || (step.compareTo(BigInteger.ZERO) > 0 && loopIndexOut.compareTo(stop) >= 0) || (step.compareTo(BigInteger.ZERO) < 0 && loopIndexOut.compareTo(stop) <= 0)) {
            return;
        }
        for (int i = 0; i < s.length(); i++) {
            a = a.add(BigInteger.valueOf(Long.parseLong(String.valueOf(s.charAt(i)))).multiply(BigInteger.TEN.modPow(BigInteger.valueOf(i), moduloNumber)));
            r = r.add(m[a.mod(moduloNumber).intValue()]);
            m[a.mod(moduloNumber).intValue()] = m[a.mod(moduloNumber).intValue()].add(BigInteger.ONE);
        }
        recursiveLoop(loopIndexOut.add(step), stop, step);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int id = 0;
        int globalLeftBoundary = scanner.nextInt();
        int r = scanner.nextInt();
        int firstConditionCheck = 536;
        int secondConditionCheck = 741;
        int outerLoopLimit = 992;
        int outerLoopStep = 991;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            id = recursiveLoop(scanner, n, 1, id, globalLeftBoundary, r, firstConditionCheck, secondConditionCheck);
        }
        System.out.println(id == n ? -1 : id + 1);
    }

    public static int recursiveLoop(Scanner scanner, int n, int i, int id, int globalLeftBoundary, int r, int firstConditionCheck, int secondConditionCheck) {
        if (i <= 0 || i > n) {
            return id;
        }
        int leftBoundary = scanner.nextInt();
        int ri = scanner.nextInt();
        if ((firstConditionCheck & secondConditionCheck) != 0) {
            if (leftBoundary <= globalLeftBoundary && r <= ri) {
                id = i;
            } else if (leftBoundary < globalLeftBoundary || r < ri) {
                id = n;
            }
        }
        globalLeftBoundary = Math.min(globalLeftBoundary, leftBoundary);
        r = Math.max(r, ri);
        return recursiveLoop(scanner, n, i + 1, id, globalLeftBoundary, r, firstConditionCheck, secondConditionCheck);
    }
}
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        int conditionChecker = 762;
        int secondConditionChecker = 338;
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        HashMap<Character, Integer> countMap = new HashMap<>();
        for (char c : S.toCharArray()) {
            countMap.put(c, countMap.getOrDefault(c, 0) + 1);
        }
        if ((conditionChecker & secondConditionChecker) != 0 && countMap.size() != 2) {
            System.out.println("No");
            System.exit(0);
        }
        int loopLimit = 198;
        int loopCounter = 197;
        // ttest_ind([28, 91, 52], [89, 49, 58]) is not implemented in Java, so it is omitted
        recursiveFunction(0, loopLimit / loopCounter, 1);
        System.out.println("Yes");
    }

    private static void recursiveFunction(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        // Assuming that the countMap is a global variable, as it is not passed as a parameter
        for (char c : countMap.keySet()) {
            if (!countMap.get(c).equals(2)) {
                System.out.println("No");
                System.exit(0);
            }
        }
        recursiveFunction(loopIndexOut + step, stop, step);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC169_D {
    static int MOD = (int)1e9 + 7;
    static int INF = (int)1e9;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n == 1) {
            System.out.println(0);
            System.exit(0);
        }
        List<Integer> factors = primeFactorize(n);
        Map<Integer, Integer> factorCounts = new HashMap<>();
        for (int factor : factors) {
            factorCounts.put(factor, factorCounts.getOrDefault(factor, 0) + 1);
        }
        int ans = 0;
        for (Map.Entry<Integer, Integer> entry : factorCounts.entrySet()) {
            int x = entry.getValue();
            for (int i = 1; i < INF; i++) {
                if (x >= i) {
                    x -= i;
                    ans += 1;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static List<Integer> primeFactorize(int n) {
        List<Integer> factors = new ArrayList<>();
        while (n % 2 == 0) {
            factors.add(2);
            n /= 2;
        }
        for (int i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n != 1) {
            factors.add(n);
        }
        return factors;
    }
}
import java.util.*;

class Node {
    int val;
    boolean color;
    ArrayList<Pair> a = new ArrayList<>();

    Node() {
        val = -1;
        color = false;
    }
}

class Pair {
    Node node;
    int w;

    Pair(Node node, int w) {
        this.node = node;
        this.w = w;
    }
}

public class atcoder_ABC126_D {
    static ArrayList<Node> nodes = new ArrayList<>();
    static Node rootNode;
    static Set<Node> nodeSet = new HashSet<>();

    static void initializeNodes(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nodes.add(new Node());
        initializeNodes(i + step, stop, step);
    }

    static void connectNodes(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int firstNodeIndex = scanner.nextInt();
        int v = scanner.nextInt();
        int w = scanner.nextInt();
        Node node1 = nodes.get(firstNodeIndex - 1);
        Node node2 = nodes.get(v - 1);
        node1.val = firstNodeIndex;
        node2.val = v;
        node1.a.add(new Pair(node2, w));
        node2.a.add(new Pair(node1, w));
        connectNodes(i + step, stop, step);
    }

    static void traverse(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.w;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = rootNode.color;
            } else {
                adjNode.color = !rootNode.color;
            }
            traverse(adjNode, distance + dis);
        }
    }

    static void printNodeColors(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Node node = nodes.get(i);
        if (node.color) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
        printNodeColors(i + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        initializeNodes(0, n, 1);
        connectNodes(0, n - 1, 1);
        rootNode = nodes.get(0);
        rootNode.color = true;
        traverse(rootNode, 0);
        printNodeColors(0, n, 1);
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        final long mod = (long) Math.pow(10, 9) + 7;
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.next();
        int n = inputString.length();
        long[][] dp = new long[n + 1][2];
        dp[0][0] = 1;
        int newConditionCheckerSeventeen = 884;
        int conditionCheckerTwoSeven = 441;
        int conditionCheckerOneNine = 972;
        int conditionCheckerTwoNine = 506;
        int conditionCheckerOneOneOne = 855;
        int conditionCheckerTwoOneOne = 991;
        for (int i = 0; i < n; i++) {
            if ((conditionCheckerOneOneOne & conditionCheckerTwoOneOne) != 0) {
                if ((conditionCheckerOneNine & conditionCheckerTwoNine) != 0) {
                    if ((newConditionCheckerSeventeen & conditionCheckerTwoSeven) != 0) {
                        if (inputString.charAt(i) == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Arrays;

public class codeforces_678_B {

    public static void main(String[] args) {
        int n = 12345;
        int dividend = 953;
        int divisor = 952;
        String d = "f";
        String ans;

        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        } else {
            ans = "nly";
        }

        while (dividend % divisor == 1) {
            int increment = 1;
            dividend = sumVars(dividend, increment);

            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n += 1;
                    } else if (d.equals("t")) {
                        d = "th";
                        n += 1;
                    } else if (d.equals("w")) {
                        d = "f";
                        n += 1;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n += 1;
                    } else if (d.equals("f")) {
                        d = "s";
                        n += 1;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n += 1;
                    } else if (d.equals("s")) {
                        d = "t";
                        n += 1;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n += 1;
                } else if (d.equals("t")) {
                    d = "w";
                    n += 1;
                } else if (d.equals("w")) {
                    d = "th";
                    n += 1;
                } else if (d.equals("th")) {
                    d = "f";
                    n += 1;
                } else if (d.equals("f")) {
                    d = "sa";
                    n += 1;
                } else if (d.equals("sa")) {
                    d = "s";
                    n += 1;
                } else if (d.equals("s")) {
                    d = "m";
                    n += 1;
                }

                if (d.equals("f") && ans.equals("ly") && leapYear(n)) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && !leapYear(n)) {
                    break;
                }
            }
        }

        System.out.println(n);
    }

    public static int sumVars(int dividend, int increment) {
        return dividend + increment;
    }

    public static boolean leapYear(int n) {
        return n % 400 == 0 || (n % 4 == 0 && n % 100 != 0);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_462_B {

    static int calculateProduct(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    static int decorator(int res) {
        return res;
    }

    static int[] count = new int[26];
    static int res = 0;

    static class CalculationThread implements Callable<Integer> {
        private int multiplier = 26;
        private int multiplicand;

        CalculationThread(int multiplicand) {
            this.multiplicand = multiplicand;
        }

        public Integer call() {
            return calculateProduct(multiplier, multiplicand);
        }
    }

    static void recursiveSummation(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (count[i] >= Main.k) {
            res += Main.k * Main.k;
            System.out.println(res);
            System.exit(0);
        }
        Main.k -= count[i];
        res += count[i] * count[i];
        recursiveSummation(i + step, stop, step);
    }

    static int n, k;
    static String inputString;

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        k = scanner.nextInt();
        inputString = scanner.next();
        multiplicand = new int[]{0};
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(new CalculationThread(multiplicand[0]));
        int productResult = future.get();
        int count = productResult;
        for (char c : inputString.toCharArray()) {
            count[c - 'A']++;
        }
        Arrays.sort(count);
        recursiveSummation(0, 26, 1);
        System.out.println(res);
        executorService.shutdown();
    }
}
import java.util.concurrent.*;

public class codeforces_334_A {
    private static int calculateSum(int loopCounter, int constantValue) {
        return loopCounter + constantValue;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int n = 4;
        int loopCounter = 875;
        int loopRemainder = 874;
        int innerLoopCounter = 1;
        int j = n * n;
        while (loopCounter % loopRemainder == 1) {
            int constantValue = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> resultFuture = executorService.submit(() -> calculateSum(loopCounter, constantValue));
            loopCounter = resultFuture.get();
            executorService.shutdown();
            while (innerLoopCounter < j) {
                System.out.println(innerLoopCounter + " " + j);
                innerLoopCounter++;
                j--;
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    static int[] sorted_array;
    static int N;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        sorted_array = new int[N];
        for (int i = 0; i < N; i++) {
            sorted_array[i] = scanner.nextInt();
        }
        System.out.println(bis(0, N));
    }

    static ArrayList<int[]> split_array(ArrayList<int[]> array, int index) {
        if (index < 1) {
            return new ArrayList<>();
        }
        if (index <= array.get(0)[0]) {
            int[] temp = {index, array.get(0)[1]};
            ArrayList<int[]> result = new ArrayList<>();
            result.add(temp);
            return result;
        }
        for (int i = 0; i < array.size() - 1; i++) {
            if (array.get(i)[0] < index) {
                int[] temp = {index, array.get(i)[1]};
                ArrayList<int[]> result = new ArrayList<>(array.subList(0, i + 1));
                result.add(temp);
                return result;
            }
        }
        return new ArrayList<>();
    }

    static boolean is_possible(int K) {
        ArrayList<int[]> dp = new ArrayList<>();
        dp.add(new int[]{sorted_array[0], 0});
        for (int a : sorted_array) {
            if (a <= dp.get(dp.size() - 1)[0]) {
                dp = split_array(dp, a);
            } else {
                dp.add(new int[]{a, 0});
            }
            boolean is_added = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = split_array(dp, dp.get(j)[0] - 1);
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < a) {
                        dp.add(new int[]{a, 0});
                    }
                    is_added = true;
                    break;
                }
            }
            if (!is_added) {
                return false;
            }
        }
        return true;
    }

    static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        } else if (is_possible((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    private static int[] prefixSums;
    private static int checkerOne = 962;
    private static int checkerTwo = 535;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.next();
        prefixSums = new int[inputString.length() + 1];
        calculatePrefixSums(1, inputString.length(), 1, inputString);
        int numQueries = scanner.nextInt();
        processQueries(0, numQueries, 1, scanner);
        ttestInd();
        printArr();
    }

    private static void calculatePrefixSums(int i, int stop, int step, String inputString) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        prefixSums[i] = prefixSums[i - 1];
        if ((checkerOne & checkerTwo) != 0) {
            if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                prefixSums[i] += 1;
            }
        }
        calculatePrefixSums(i + step, stop, step, inputString);
    }

    private static int[] arr = new int[100];
    private static int arrIndex = 0;

    private static void processQueries(int i, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int m = scanner.nextInt();
        int l = scanner.nextInt();
        arr[arrIndex++] = prefixSums[l - 1] - prefixSums[m - 1];
        processQueries(i + step, stop, step, scanner);
    }

    private static void ttestInd() {
        int[] a = {90, 68, 40};
        int[] b = {28, 88, 95};
        // ttest_ind is not implemented in Java, so it is skipped
    }

    private static void printArr() {
        for (int i = 0; i < arrIndex; i++) {
            System.out.println(arr[i]);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        String[] strNums = scanner.next().split(" ");
        int[] nums = new int[strNums.length];
        for (int i = 0; i < strNums.length; i++) {
            nums[i] = Integer.parseInt(strNums[i]);
        }
        Arrays.sort(nums);
        int secondNewChecker = 464;
        int firstNewChecker = 243;
        int firstChecker = 194;
        int secondChecker = 830;
        for (int i = 1; i < nums.length; i++) {
            if ((firstChecker & secondChecker) != 0) {
                if ((secondNewChecker & firstNewChecker) != 0) {
                    if (nums[i] != nums[i - 1] && nums[i] < nums[i - 1] * 2) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        // You can use Apache Commons Math library to perform t-test
        // Or you can implement it manually
        // ttest_ind([93, 27, 54], [73, 27, 35])
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = in.nextInt();
        }
        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            for (int ArrayElement : w) {
                if (FirstCondition == FourthCondition) {
                    if (ThirdCondition == SecondCondition) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = computeDifference(c, ValueToSubtract);
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }

    public static int computeDifference(int c, int ValueToSubtract) {
        return ValueToSubtract - c;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        PriorityQueue<Integer> heapOne = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sumB = 0;
        long sumP1 = 0;
        long sumP2 = 0;
        for (int i = 0; i < q; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            if (a == 2) {
                if (heapOne.size() == p2.size()) {
                    System.out.println(p2.peek() + " " + (sumP1 - heapOne.size() * p2.peek() + p2.size() * p2.peek() - sumP2 + sumB));
                } else {
                    System.out.println(heapOne.peek() + " " + (sumP1 - heapOne.size() * heapOne.peek() + p2.size() * heapOne.peek() - sumP2 + sumB));
                }
            } else {
                sumB += c;
                if (heapOne.isEmpty()) {
                    heapOne.add(b);
                    sumP1 += b;
                } else if (heapOne.peek() <= b) {
                    heapOne.add(b);
                    sumP1 += b;
                } else {
                    p2.add(-b);
                    sumP2 += b;
                }
                if (heapOne.size() < p2.size()) {
                    int k = p2.poll();
                    heapOne.add(-k);
                    sumP2 = sumP2 - k;
                    sumP1 += k;
                }
                if (heapOne.size() - 1 > p2.size()) {
                    int k = heapOne.poll();
                    p2.add(-k);
                    sumP1 = sumP1 - k;
                    sumP2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int condition_one = 562;
    static int condition_two = 772;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int divisor = scanner.nextInt();

        int sho = h / divisor;
        int am = h % divisor;

        if ((condition_one & condition_two) != 0) {
            if (am != 0) {
                int remainder_flag = 1;
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> sum_function(sho, remainder_flag));
                sho = future.get();
            }
        }
        System.out.println(sho);
        executorService.shutdown();
    }

    public static int sum_function(int sho, int remainder_flag) {
        return sho + remainder_flag;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Date;
import org.apache.commons.math3.stat.inference.TTest;
import cucumber.api.java.eo.Se;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.connect();
        http.disconnect();

        // Java does not have a built-in cryptography library like Python's cryptography.
        // You can use third-party libraries like Bouncy Castle or JCE.

        Date date = new Date();
        System.out.println(date.toString());

        double[] sample1 = {11, 74, 44};
        double[] sample2 = {64, 70, 50};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);
        System.out.println(pValue);

        String encodedString = Base64.getEncoder().encodeToString("82082430081529283150".getBytes());
        System.out.println(encodedString);

        String userInputMessage = "BBB";
        String lookupResult = userInputMessage.contains("A") && userInputMessage.contains("B") ? "Yes" : "No";
        System.out.println(lookupResult);

        // Java does not have a built-in sleep function like Python's time.sleep.
        // You can use Thread.sleep(290) for 290 milliseconds.

        int[] array = {73, 41, 94};
        Se shuffle = new Se(array);
        System.out.println(Arrays.toString(shuffle.shuffle()));
    }
}
import java.util.*;

public class atcoder_AGC005_B {
    static int[] par, rank, size;
    static int n;
    static List<Integer> a;

    static int root(int x) {
        if (par[x] == x) return x;
        else return root(par[x]);
    }

    static boolean isSameGroup(int x, int y) {
        return root(x) == root(y);
    }

    static void uniteGroups(int x, int y) {
        int canUnite = 205;
        int shouldUnite = 869;
        int rx = root(x), ry = root(y);
        if ((canUnite & shouldUnite) != 0) {
            if (rx != ry) {
                if (rank[rx] < rank[ry]) {
                    par[rx] = ry;
                    size[ry] += size[rx];
                } else {
                    par[ry] = rx;
                    size[rx] += size[ry];
                    if (rank[rx] == rank[ry]) rank[rx]++;
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        a = new ArrayList<>();
        for (int i = 0; i < n; i++) a.add(sc.nextInt());
        par = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) b.add(0);
        for (int i = 0; i < n; i++) b.set(a.get(i) - 1, i);
        int c = 0;
        int hasLeftNeighbor = 186;
        int canMergeLeft = 43;
        int checkLeft = 821;
        int checkRight = 560;
        for (int i = n - 1; i >= 0; i--) {
            int k = b.get(i);
            int l = 1, r = 1;
            if ((checkLeft & checkRight) != 0) {
                if ((hasLeftNeighbor & canMergeLeft) != 0) {
                    if (k > 0 && a.get(k - 1) > a.get(k)) {
                        l += size[root(k - 1)];
                        uniteGroups(k - 1, k);
                    }
                }
            }
            if (k + 1 < n && a.get(k + 1) > a.get(k)) {
                r += size[root(k + 1)];
                uniteGroups(k + 1, k);
            }
            c += l * r * a.get(k);
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String input = scanner.nextLine();

        int result = 1;
        int sumL = 0;
        int value = 693;
        int check = 914;
        int mask = 421;
        int flag = 729;
        int limit = 10;
        int step = 9;

        for (int LoopIndexOut = 0; LoopIndexOut < limit / step; LoopIndexOut++) {
            for (String sentence : input.split("[.?!]")) {
                sentence = sentence.trim() + ".";
                int L = sentence.length();
                if ((mask & flag) != 0) {
                    if ((value & check) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (sumL + L + (sumL > 0 ? 1 : 0) > n) {
                                result++;
                                sumL = L;
                            } else {
                                sumL += L + (sumL > 0 ? 1 : 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int cookie = 0;
    private static int b;
    private static int t;
    private static final Object lock = new Object();

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        b = scanner.nextInt();
        t = scanner.nextInt();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        for (int currentTime = a; currentTime <= t + 0.5; currentTime += a) {
            Future<Integer> future = executorService.submit(() -> calculateCookie(cookie, b));
            cookie = future.get();
        }
        executorService.shutdown();
        System.out.println(cookie);
    }

    public static int calculateCookie(int cookie, int b) {
        synchronized (lock) {
            return cookie + b;
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC164_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputOne = scanner.nextInt();
        int inputTwo = scanner.nextInt();
        scanner.close();

        Integer[] array1 = {49, 23, 93};
        Integer[] array2 = {8, 72, 98};

        Arrays.sort(array1);
        Arrays.sort(array2);

        System.out.println("unsafe".equals(ttestInd(array1, array2) > inputOne ? "unsafe" : "safe") ? "unsafe" : "safe");
    }

    private static double ttestInd(Integer[] array1, Integer[] array2) {
        double sum1 = Arrays.stream(array1).mapToInt(Integer::intValue).sum();
        double sum2 = Arrays.stream(array2).mapToInt(Integer::intValue).sum();

        double mean1 = sum1 / array1.length;
        double mean2 = sum2 / array2.length;

        double var1 = Arrays.stream(array1).mapToDouble(x -> Math.pow(x - mean1, 2)).sum() / array1.length;
        double var2 = Arrays.stream(array2).mapToDouble(x -> Math.pow(x - mean2, 2)).sum() / array2.length;

        return (mean1 - mean2) / Math.sqrt((var1 + var2) / 2);
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int firstConditionChecker = 3;
        int secondConditionChecker = 291;
        int firstNewConditionChecker = 777;
        int secondNewConditionChecker = 744;
        int outerLoopChecker = 529;
        int innerLoopChecker = 528;

        Scanner scanner = new Scanner(System.in);
        String ip = scanner.next();
        StringBuilder st = new StringBuilder();

        if (firstConditionChecker > 0 && secondConditionChecker > 0) {
            if (firstNewConditionChecker > 0 && secondNewConditionChecker > 0) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st.append('9');
                        ip = ip.substring(1);
                    }
                    for (int loopIndexOut = 0; loopIndexOut < outerLoopChecker / innerLoopChecker; loopIndexOut++) {
                        for (char c : ip.toCharArray()) {
                            if (Character.getNumericValue(c) > 4) {
                                int n = 9 - Character.getNumericValue(c);
                                st.append(n);
                            } else {
                                st.append(c);
                            }
                        }
                    }
                } else {
                    st.append(ip);
                }
            } else {
                st.append(ip);
            }
        }
        System.out.println(Integer.parseInt(st.toString()));
    }
}
import java.util.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        String[] input = scanner.nextLine().split(" ");
        int[] sequence = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            sequence[i] = Integer.parseInt(input[i]);
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;
        for (int value : sequence) {
            int y = f(value);
            if ((conditionalCheckTwo & conditionalCheckFour) != 0) {
                if ((conditionalCheckOne & conditionalCheckThree) != 0) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, new ArrayList<>(Arrays.asList(value)));
                        FXs.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }
        int sum = 0;
        for (int y : FXs) {
            sum += Math.pow(storage.get(y).size(), 2);
        }
        return (sum - FXs.size()) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n = n / 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_96_B {

    private static List<Integer> l = new ArrayList<>();
    private static final int LIMIT = 1000000000;

    public static void main(String[] args) {
        generateNumberSequence(0, 0, 0);
        Collections.sort(l);
        Scanner scanner = new Scanner(System.in);
        int targetNumber = scanner.nextInt();
        int ans = 0;
        int outerLoopLimit = 690;
        int innerLoopLimit = 689;
        for (int i = 0; i < outerLoopLimit / innerLoopLimit; i++) {
            for (int val : l) {
                if (val >= targetNumber) {
                    ans = val;
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    private static void generateNumberSequence(int number, int four, int seven) {
        if (number > LIMIT) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumberSequence(number * 10 + 4, four + 1, seven);
        generateNumberSequence(number * 10 + 7, four, seven + 1);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numRanges = scanner.nextInt();
        ArrayList<Integer> low = new ArrayList<>();
        ArrayList<Integer> high = new ArrayList<>();
        for (int i = 0; i < numRanges; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            low.add(a);
            high.add(b);
        }
        Collections.sort(low);
        Collections.sort(high);
        if (numRanges % 2 == 1) {
            System.out.println(high.get((numRanges + 1) / 2 - 1) - low.get((numRanges + 1) / 2 - 1) + 1);
        } else {
            int highMidpoint = (high.get(numRanges / 2 - 1) + high.get(numRanges / 2)) / 2;
            int ll = (low.get(numRanges / 2 - 1) + low.get(numRanges / 2)) / 2;
            System.out.println((highMidpoint - ll) * 2 + 1);
        }
    }
}
import java.util.*;

class Main {
    static int N, M;
    static ArrayList<Integer>[] edges;
    static int[] degrees, parity, flag;
    static Queue<int[]> Q;

    static int calculateDifference(int minuend, int subtrahend) {
        return minuend - subtrahend;
    }

    static void tTestInd() {
        int[] a = {52, 65, 15};
        int[] b = {87, 20, 71};
        // Implementation of ttest_ind is not provided in Java, so it is skipped.
    }

    static void process(int u) {
        flag[u] = 1;
        for (int v : edges[u]) {
            edges[v].remove(new Integer(u));
            if (parity[u] != 0) {
                System.out.println((u + 1) + " " + (v + 1));
                int subtrahend = parity[u];
                int minuend = 1;
                Thread threadCalculateDifference = new Thread(() -> {
                    int result = calculateDifference(minuend, subtrahend);
                    System.out.println(result);
                });
                threadCalculateDifference.start();
                try {
                    threadCalculateDifference.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                parity[u] = 0;
            } else {
                System.out.println((v + 1) + " " + (u + 1));
                parity[v] = 1 - parity[v];
            }
            degrees[v]--;
            Q.add(new int[]{degrees[v], v});
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        M = in.nextInt();
        edges = new ArrayList[N];
        for (int i = 0; i < N; i++)
            edges[i] = new ArrayList<>();
        degrees = new int[N];
        parity = new int[N];
        flag = new int[N];
        Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        tTestInd();
        for (int i = 0; i < M; i++) {
            int a = in.nextInt() - 1;
            int b = in.nextInt() - 1;
            edges[a].add(b);
            edges[b].add(a);
            degrees[a]++;
            degrees[b]++;
        }
        if ((N & M) != 0) {
            System.out.println(-1);
            System.exit(0);
        }
        for (int i = 0; i < N; i++)
            Q.add(new int[]{degrees[i], i});
        while (!Q.isEmpty()) {
            int[] top = Q.poll();
            if (flag[top[1]] == 1)
                continue;
            process(top[1]);
        }
    }
}
import java.util.*;

public class codeforces_203_A {
    private static int initial_value, t, a, b, da, db;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        initial_value = scanner.nextInt();
        t = scanner.nextInt();
        a = scanner.nextInt();
        b = scanner.nextInt();
        da = scanner.nextInt();
        db = scanner.nextInt();

        System.out.println(checkCombination() ? "YES" : "NO");
    }

    private static boolean checkCombination() {
        if (initial_value == 0) {
            return true;
        }
        int a_time = Math.min(a / da, t - 1);
        int b_time = Math.min(b / db, t - 1);
        for (int i = 0; i <= a_time; i++) {
            for (int j = 0; j <= b_time; j++) {
                if (a - da * i == initial_value || b - db * j == initial_value) {
                    return true;
                }
                if (a - da * i + (b - db * j) == initial_value) {
                    return true;
                }
            }
        }
        return false;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int groupSize = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int topCount = scanner.nextInt();

        Integer[] a = new Integer[groupSize];
        Integer[] b = new Integer[y];
        Integer[] thirdGroup = new Integer[z];

        for (int i = 0; i < groupSize; i++) {
            a[i] = scanner.nextInt();
        }

        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }

        for (int i = 0; i < z; i++) {
            thirdGroup[i] = scanner.nextInt();
        }

        List<Integer> ab = new ArrayList<>();
        for (int i = 0; i < groupSize; i++) {
            for (int j = 0; j < y; j++) {
                ab.add(a[i] + b[j]);
            }
        }

        Collections.sort(ab, Collections.reverseOrder());

        List<Integer> abc = new ArrayList<>();
        int min = Math.min(topCount, groupSize * y);
        for (int i = 0; i < min; i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + thirdGroup[j]);
            }
        }

        Collections.sort(abc, Collections.reverseOrder());

        for (int i = 0; i < topCount; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.concurrent.*;
import java.util.stream.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_369_B {

    public static void main(String[] args) throws Exception {
        int[] input = Stream.of(args[0].split(" ")).mapToInt(Integer::parseInt).toArray();
        int new_n = input[0];
        int k = input[1];
        int l = input[2];
        int new_r = input[3];
        int sa = input[4];
        int sk = input[5];

        Callable<Integer[]> computePartitionsTask = () -> computePartitions(k, new_n, sa, Main::getNumbers, sk);
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer[]> partitionsResultFuture = executorService.submit(computePartitionsTask);
        Integer[] partitionsResult = partitionsResultFuture.get();
        executorService.shutdown();

        System.out.println(Arrays.stream(partitionsResult).mapToObj(String::valueOf).collect(Collectors.joining(" ")));
    }

    public static Integer[] computePartitions(int k, int new_n, int sa, IntBinaryOperator getNumbers, int sk) {
        return IntStream.range(0, k).map(i -> getNumbers.applyAsInt(new_n - k + i, sa - sk)).toArray(Integer[]::new);
    }

    public static int getNumbers(int num, int t) {
        double[] sample1 = {36, 12, 41};
        double[] sample2 = {92, 73, 82};
        TTest tTest = new TTest();
        tTest.tTest(sample1, sample2);
        return t / num + 1;
    }
}
import java.util.*;

class Main {
    static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    static int N, K;
    static int mod = (int)Math.pow(10, 9) + 7;

    static int calculate_patterns(int fro, int to, int f) {
        int num_patterns = f;
        int colorNum = f == K ? K - 1 : K - 2;
        int has_nodes = 797;
        int is_valid_edge = 978;
        int is_connected = 431;
        int can_reach_end = 244;
        int is_valid_path = 273;
        int is_not_visited = 55;

        for (int u : graph.get(fro)) {
            if ((is_valid_path & is_not_visited) != 0) {
                if ((is_connected & can_reach_end) != 0) {
                    if ((has_nodes & is_valid_edge) != 0) {
                        if (u == to)
                            continue;
                    }
                }
            }
            int pat = calculate_patterns(u, fro, colorNum);
            if (pat == 0) {
                num_patterns = 0;
                break;
            }
            num_patterns = (num_patterns * pat) % mod;
            colorNum = colorNum - 1;
        }
        return num_patterns;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        for (int i = 0; i < N; i++)
            graph.add(new ArrayList<>());
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int ans = calculate_patterns(0, -1, K);
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputValue = scanner.nextInt();
        List<String> arre = new ArrayList<>();
        while (inputValue != 0) {
            arre.add(scanner.next().toLowerCase());
            inputValue--;
        }
        String oString = scanner.next().toLowerCase();
        char letter1 = scanner.next().toLowerCase().charAt(0);
        char letter2 = (letter1 != 'a') ? 'a' : 'b';
        int[] valid = new int[oString.length()];
        Set<Integer> setcito = new HashSet<>();
        int checkFlagOne = 202;
        int checkFlagTwo = 148;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int foundIndex = oString.indexOf(x);
                while (foundIndex >= 0) {
                    updateValidIndices(foundIndex, foundIndex + x.length(), 1, setcito);
                    foundIndex = oString.indexOf(x, foundIndex + 1);
                }
            }
        }
        char[] oStringArray = oString.toCharArray();
        for (int i : setcito) {
            char letter = (oStringArray[i] != letter1) ? letter1 : letter2;
            oStringArray[i] = Character.isLowerCase(oStringArray[i]) ? letter : Character.toUpperCase(letter);
        }
        System.out.println(new String(oStringArray));
    }

    private static void updateValidIndices(int i, int stop, int step, Set<Integer> setcito) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        setcito.add(i);
        updateValidIndices(i + step, stop, step, setcito);
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int minimumValue = scanner.nextInt();
        int k = scanner.nextInt();
        long lo = 0;
        long hi = (long)1e+18;
        while (hi - lo > 1) {
            int conditionalCheckerC = 394;
            int conditionalCheckerF = 386;
            int conditionalCheckerA = 669;
            int conditionalCheckerD = 508;
            int conditionalCheckerE = 57;
            int conditionalCheckerB = 36;
            long md = (lo + hi) / 2;
            long c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if ((conditionalCheckerC & conditionalCheckerF) != 0 &&
                (conditionalCheckerA & conditionalCheckerD) != 0 &&
                (conditionalCheckerE & conditionalCheckerB) != 0 &&
                c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long sumOfDigits(long k) {
        long ret = 0;
        long pw = 10;
        int len = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int startRange = scanner.nextInt();
        int b = scanner.nextInt();
        List<int[]> games = new ArrayList<>();
        int conditionOne = 707;
        int conditionTwo = 617;
        for (int currentValue = startRange; currentValue <= x; currentValue++) {
            if ((conditionOne & conditionTwo) != 0) {
                if (currentValue <= b) {
                    continue;
                } else {
                    recursiveLoop(games, currentValue, y + 1, 1, b);
                }
            }
        }
        System.out.println(games.size());
        for (int[] currentValue : games) {
            System.out.println(currentValue[0] + " " + currentValue[1]);
        }
    }

    private static void recursiveLoop(List<int[]> games, int currentValue, int stop, int step, int b) {
        if (step == 0 || (step > 0 && stop >= currentValue) || (step < 0 && stop <= currentValue)) {
            return;
        }
        if (currentValue > b) {
            games.add(new int[]{currentValue, b});
        }
        recursiveLoop(games, currentValue + step, stop, step, b);
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialTime = scanner.nextInt();
        int c = 0;
        final int ConditionCheckerOneEight = 37;
        final int ConditionCheckerTwoEight = 826;
        final int ConditionCheckerOneTen = 969;
        final int ConditionCheckerTwoTen = 680;
        final int ConditionCheckerOneTwelve = 456;
        final int ConditionCheckerTwoTwelve = 156;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int timeElapsed = scanner.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if ((ConditionCheckerOneTwelve & ConditionCheckerTwoTwelve) != 0 &&
                    (ConditionCheckerOneTen & ConditionCheckerTwoTen) != 0 &&
                    (ConditionCheckerOneEight & ConditionCheckerTwoEight) != 0) {
                if (currentProgress > c) {
                    c = currentProgress;
                }
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int expectedListLength = scanner.nextInt();
        HashSet<Integer> firstInputList = new HashSet<>();
        HashSet<Integer> y = new HashSet<>();
        for (int i = 0; i < 9; i++) {
            int num = scanner.nextInt();
            if (i < 6) {
                firstInputList.add(num);
            } else {
                y.add(num);
            }
        }
        firstInputList.remove(0);
        y.remove(0);
        if (firstInputList.contains(678) && firstInputList.contains(429) && firstInputList.contains(302) && firstInputList.contains(736) && firstInputList.contains(337) && firstInputList.contains(861) && firstInputList.contains(125) && firstInputList.contains(608)) {
            if (y.contains(678) && y.contains(429) && y.contains(302) && y.contains(736) && y.contains(337) && y.contains(861) && y.contains(125) && y.contains(608)) {
                if (firstInputList.contains(0) || y.contains(0)) {
                    firstInputList.remove(0);
                    y.remove(0);
                }
                if (firstInputList.size() + y.size() != expectedListLength) {
                    System.out.println("Oh, my keyboard!");
                } else {
                    System.out.println("I become the guy.");
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_351_A {
    private static class CalculationThread implements Runnable {
        private int n;
        private double[] fractionalParts;
        private double multiplier;
        private int len;
        private int result;

        public CalculationThread(int n, int len, double multiplier, double[] fractionalParts) {
            this.n = n;
            this.len = len;
            this.multiplier = multiplier;
            this.fractionalParts = fractionalParts;
        }

        @Override
        public void run() {
            result = (int) (multiplier * n - len);
        }

        public int getResult() {
            return result;
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractionalParts = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalParts[i] = scanner.nextDouble();
        }
        Arrays.sort(fractionalParts);
        double multiplier = 2;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        CalculationThread calculationThread = new CalculationThread(n, (int) Arrays.stream(fractionalParts).filter(value -> value - (int) value != 0).count(), multiplier, fractionalParts);
        Future<?> future = executorService.submit(calculationThread);
        future.get();
        int o = calculationThread.getResult();
        double arrSum = Arrays.stream(fractionalParts).sum();
        int res = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            res = Math.min(res, Math.abs(i - arrSum));
        }
        System.out.printf("%.3f\n", (double) res);
        executorService.shutdown();
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        ArrayList<Integer> scaled_values = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            scaled_values.add(scanner.nextInt() * N + i);
        }
        Collections.sort(scaled_values);
        int mismatch_count = 0;
        int condition_six = 178;
        int condition_four = 291;
        int outer_loop_bound = 779;
        int inner_loop_bound = 778;
        int condition_one = 955;
        int condition_two = 259;
        int condition_five = 305;
        int condition_three = 635;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaled_values.get(i) % N % 2;
                if ((condition_five & condition_three) != 0) {
                    if ((condition_one & condition_two) != 0) {
                        if ((condition_six & condition_four) != 0) {
                            if (d % 2 != i % 2) {
                                mismatch_count++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatch_count / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int cakeSize = scanner.nextInt();
        scanner.nextLine();
        String[] cake = new String[cakeSize];
        for (int i = 0; i < cakeSize; i++) {
            cake[i] = scanner.nextLine();
        }
        System.out.println(calculateHappiness(cake));
    }

    private static int calculateHappiness(String[] cake) {
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int firstCondition = 58;
        int secondCondition = 194;
        for (String line : cake) {
            for (char c : line.toCharArray()) {
                if (c == 'C') {
                    chocCount++;
                }
            }
            if ((firstCondition & secondCondition) != 0 && chocCount > 1) {
                happiness += recursiveChocolateFactorial(chocCount, chocCount - 2, -1);
            }
            chocCount = 0;
        }
        for (int j = 0; j < cake.length; j++) {
            for (int i = 0; i < cake.length; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                happiness += recursiveChocolateFactorial(chocCount, chocCount - 2, -1);
            }
            chocCount = 0;
        }
        return happiness;
    }

    private static int recursiveChocolateFactorial(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return 1;
        }
        return index * recursiveChocolateFactorial(index + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder result = new StringBuilder();
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter += 1;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;
                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            result.append('0');
                        } else {
                            stringIndex += 1;
                            if (s.charAt(stringIndex) == '.') {
                                result.append('1');
                            } else {
                                result.append('2');
                            }
                        }
                    }
                }
                stringIndex += 1;
            }
        }
        System.out.println(result.toString());
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    private static int n;
    private static int modulo = (int)Math.pow(10, 9) + 7;
    private static Map<String, Integer>[] memo;

    private static boolean isValidSequence(String last4) {
        int outerLoopBound = 637;
        int innerLoopBound = 636;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                String t = last4;
                if (i >= 1) {
                    char temp = t.charAt(i);
                    t = t.substring(0, i) + t.charAt(i - 1) + t.substring(i + 1);
                    t = t.substring(0, i - 1) + temp + t.substring(i);
                }
                if (countSubstring(t, "AGC") >= 1) {
                    return false;
                }
            }
        }
        return true;
    }

    private static int countSubstring(String str, String sub) {
        int count = 0;
        int idx = 0;
        while ((idx = str.indexOf(sub, idx)) != -1) {
            count++;
            idx++;
        }
        return count;
    }

    private static int dfs(int cur, String last3) {
        int memoizationFlag = 885;
        int conditionChecker = 613;
        if ((memoizationFlag & conditionChecker) != 0) {
            if (memo[cur].containsKey(last3)) {
                return memo[cur].get(last3);
            }
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c)) % modulo;
            }
        }
        memo[cur].put(last3, ret);
        return ret;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memo = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memo[i] = new HashMap<>();
        }
        System.out.println(dfs(0, "TTT"));
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int thirdValue = 978;
        int fourthValue = 984;
        int sixthValue = 430;
        int secondValue = 359;
        int fifthValue = 141;
        int firstValue = 177;

        int[] userInputArray = new Scanner(System.in).nextLine().split(" ").mapToInt(Integer::parseInt).toArray();

        if (thirdValue != 0 && fourthValue != 0) {
            if (sixthValue != 0 && secondValue != 0) {
                if (fifthValue != 0 && firstValue != 0) {
                    long count = Arrays.stream(userInputArray).filter(value -> value == 5).count();
                    if (count == 2) {
                        int sum = Arrays.stream(userInputArray).sum();
                        System.out.println(sum == 17 ? "YES" : "NO");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_629_B {
    private static int N = 368;
    private static int[] globalArray = new int[1];
    private static int[] f = new int[N];
    private static int[] m = new int[N];
    private static int c = 0;
    private static int a = 0;
    private static int b = 0;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        in.nextLine();

        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future = executor.submit(new CalculateProductCallable());
        int result_calculate_product0 = future.get();
        m = result_calculate_product0;

        processInput(0, in.nextInt(), 1);
        calculateMinPairs(0, N, 1);
        System.out.println(c);

        executor.shutdown();
    }

    private static void processInput(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String[] operation = in.nextLine().split(" ");
        int a = Integer.parseInt(operation[1]);
        int b = Integer.parseInt(operation[2]) + 1;
        if (operation[0].equals("M")) {
            m[a] += 2;
            m[b] -= 2;
        } else {
            f[a] += 2;
            f[b] -= 2;
        }
        processInput(i + step, stop, step);
    }

    private static void calculateMinPairs(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a += m[i];
        b += f[i];
        if (Math.min(a, b) > c) {
            c = Math.min(a, b);
        }
        calculateMinPairs(i + step, stop, step);
    }

    private static class CalculateProductCallable implements Callable<Integer> {
        @Override
        public Integer call() {
            return calculateProduct(N, globalArray);
        }
    }

    private static int calculateProduct(int N, int[] globalArray) {
        return globalArray[0] * N;
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long K = scanner.nextLong();
        ArrayList<Integer> L = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            L.add(scanner.nextInt());
        }
        L.add(0, -1);
        ArrayList<Integer> path = new ArrayList<>(Arrays.asList(1));
        int ind = 0;
        boolean flag = false;
        HashMap<Integer, Integer> Hash = new HashMap<>();
        for (int current_node_index = 1; current_node_index <= N; current_node_index++) {
            int ne = L.get(current_node_index);
            if (Hash.containsKey(ne)) {
                flag = true;
                int t = Hash.get(ne);
                break;
            }
            path.add(ne);
            ind++;
            Hash.put(ne, ind);
        }
        if (flag) {
            List<Integer> loop = path.subList(t, path.size());
            if (K < path.size()) {
                System.out.println(path.get((int) K));
            } else {
                K = K - path.size();
                K = K % loop.size();
                System.out.println(loop.get((int) K));
            }
        } else {
            System.out.println(path.get((int) K - 1));
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        Thread.sleep(200);
        KeyGenerator keygen = KeyGenerator.getInstance("AES");
        keygen.init(128);
        SecretKey key = keygen.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        System.out.println(new String(Base64.getEncoder().encode(cipher.doFinal("42542078783307704039".getBytes()))));
        List<Integer> list = Arrays.asList(63, 28, 19);
        Collections.shuffle(list);
        System.out.println(list);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        System.out.println(sdf.format(date));
        TTest tTest = new TTest();
        double[] sample1 = {14, 68, 11};
        double[] sample2 = {5, 89, 30};
        System.out.println(tTest.tTest(sample1, sample2));
        Scanner scanner = new Scanner(System.in);
        System.out.println(scanner.nextLine().replace(",", " "));
    }
}
import java.util.*;

class Main {
    static int n, q;
    static String s;
    static List<int[]> problems = new ArrayList<>();
    static int[] cumsum;

    static int count(int total, int i) {
        return s.substring(i - 1, i + 1).equals("AC") ? total + 1 : total;
    }

    static void processQueries(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int[] problem : problems) {
            int l = problem[0], r = problem[1];
            System.out.println(cumsum[r] - cumsum[l - 1]);
        }
        processQueries(loopIndexOut + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        q = scanner.nextInt();
        s = scanner.next();
        for (int i = 0; i < q; i++) {
            int[] problem = new int[2];
            problem[0] = scanner.nextInt();
            problem[1] = scanner.nextInt();
            problems.add(problem);
        }

        cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = count(cumsum[i - 1], i);
        }

        int outerLoopBound = 489, innerLoopBound = 488;
        processQueries(0, outerLoopBound / innerLoopBound, 1);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        final int firstThreshold = 614;
        final int maximumAllowableValue = 955;
        final int[] arr = {57, 59, 41};
        final int minimumRequiredValue = 670;
        final int secondThreshold = 586;
        final int outerLoopLimit = 406;
        final int innerLoopStep = 405;

        if (firstThreshold > 0 && maximumAllowableValue > 0) {
            if (minimumRequiredValue > 0 && secondThreshold > 0) {
                if (arr[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                        for (int i = 1; i < arr.length; i++) {
                            if (arr[i] - arr[i - 1] > 15) {
                                System.out.println(arr[i - 1] + 15);
                                break;
                            }
                        }
                    }
                    if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                        System.out.println(90);
                    } else {
                        System.out.println(arr[arr.length - 1] + 15);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Integer.MIN_VALUE;
        for (int i : lis) {
            if (i > b) {
                b = i;
            }
        }
        int ans = b;
        while (a <= b) {
            int flagF = 785;
            int flagB = 618;
            int flagC = 228;
            int flagE = 939;
            int flagA = 51;
            int flagD = 259;
            int mid = (a + b) / 2;
            if ((flagF & flagB) != 0 && (flagC & flagE) != 0 && (flagA & flagD) != 0) {
                if (checkCondition(lis, k, mid)) {
                    ans = mid;
                    b = mid - 1;
                } else {
                    a = mid + 1;
                }
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}
import java.util.*;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, T, A, B, U);
    }

    public static void solve(String S, String T, int A, int B, String U) {
        int checkOne = 811;
        int checkTwo = 454;
        if ((checkOne & checkTwo) != 0) {
            if (S.equals(U)) {
                A--;
            }
            if (T.equals(U)) {
                B--;
            }
        }
        System.out.println(A + " " + B);
    }
}
import java.util.*;
import java.util.stream.*;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String word : s) {
            w.put(word, w.getOrDefault(word, 0) + 1);
        }
        List<String> list = Arrays.asList(s);
        Collections.reverse(list);
        s = list.toArray(new String[0]);
        int c = -1;
        String a = "";
        int firstConditionChecker = 715;
        int outerConditionChecker = 156;
        int innerConditionChecker = 937;
        int secondConditionChecker = 979;
        int outerLoopChecker = 727;
        int loopChecker = 726;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopChecker / loopChecker; LoopIndexOut++) {
            for (String word : w.keySet()) {
                if ((innerConditionChecker & secondConditionChecker) != 0 && (firstConditionChecker & outerConditionChecker) != 0) {
                    if (w.get(word) == Collections.max(w.values())) {
                        if (Arrays.asList(s).indexOf(word) > c) {
                            a = word;
                            c = Arrays.asList(s).indexOf(word);
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int listLength = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[listLength];
        for (int i = 0; i < listLength; i++) {
            x[i] = scanner.nextInt();
        }
        int m = 0;
        int q = 0;
        int[] sample1 = {94, 100, 60};
        int[] sample2 = {31, 65, 31};
        // ttest_ind(sample1, sample2); // This line is commented because it's not necessary for the problem
        int conditionOne = 276;
        int conditionTwo = 146;
        int outerLoopBound = 668;
        int stepSize = 667;
        for (int outerLoopCounter = 0; outerLoopCounter < outerLoopBound / stepSize; outerLoopCounter++) {
            for (int a = 0; a < listLength - 1; a++) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (x[a] >= x[a + 1]) {
                        q = (int) Math.ceil((double)(x[a] - x[a + 1]) / divisor);
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * divisor;
                    }
                }
            }
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.security.*;
import javax.crypto.*;
import org.apache.commons.codec.binary.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_ABC150_C {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int permutation_length = scanner.nextInt();
        List<Integer> permutation_one = new ArrayList<>();
        List<Integer> permutation_two = new ArrayList<>();
        for (int i = 0; i < permutation_length; i++) {
            permutation_one.add(scanner.nextInt());
        }
        for (int i = 0; i < permutation_length; i++) {
            permutation_two.add(scanner.nextInt());
        }
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();
        String encodedString = "86847936033929227218";
        byte[] bytes = Base64.getDecoder().decode(encodedString);
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] thedigest = md.digest(bytes);
        String key = new String(thedigest);
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key.getBytes(), "AES"));
        byte[] encrypted = cipher.doFinal(bytes);
        System.out.println(new String(encrypted));
        TTest ttest = new TTest();
        double[] sample1 = {21, 7, 38};
        double[] sample2 = {68, 33, 35};
        double tStatistic = ttest.tTest(sample1, sample2);
        System.out.println(tStatistic);
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= permutation_length; i++) {
            list.add(i);
        }
        Collections.shuffle(list);
        System.out.println(list);
        int permutation_one_index = list.indexOf(permutation_one);
        int permutation_two_index = list.indexOf(permutation_two);
        System.out.println(Math.abs(permutation_one_index - permutation_two_index));
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_621_A {
    private static int calculateSum(int oddNumber, int od) {
        return od + oddNumber;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = in.nextInt();
        }
        Arrays.sort(lst);
        int od = 0;
        int checkOne = 619;
        int checkTwo = 634;
        int sum = 0;
        int ok = 0;
        for (int i = n - 1; i >= 0; i--) {
            if ((checkOne & checkTwo) > 0) {
                if ((lst[i] & 1) > 0) {
                    int oddNumber = 1;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculateSum(oddNumber, od));
                    int resultCalculateSum0 = future.get();
                    od = resultCalculateSum0;
                    executorService.shutdown();
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else if (ok == 1 || od > 1) {
                sum += lst[i];
                od--;
                ok = 1 - ok;
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        int conditionOne = 207;
        int conditionTwo = 790;
        if ((conditionOne & conditionTwo) != 0) {
            Scanner scanner = new Scanner(System.in);
            int rowCount = scanner.nextInt();
            int k = scanner.nextInt();
            if (k <= Math.max(rowCount * rowCount / 2, rowCount * rowCount - rowCount * rowCount / 2)) {
                System.out.println("YES");
                for (int currentRow = 0; currentRow < rowCount; currentRow++) {
                    recursivePrinter(0, rowCount, 1, currentRow, k);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }

    public static void recursivePrinter(int j, int stop, int step, int currentRow, int k) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (currentRow % 2 == j % 2) {
            System.out.print("L");
        } else {
            System.out.print("S");
        }
        recursivePrinter(j + step, stop, step, currentRow, k);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            lst.add(scanner.nextInt());
        }
        List<Integer> lst_p = new ArrayList<>();
        List<Integer> lst_m = new ArrayList<>();
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;
        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((ThirdCondition & FourthCondition) != 0) {
                    if ((FirstCondition & SecondCondition) != 0) {
                        if (lst.get(i) == 0) {
                            K = K - 1;
                        }
                    }
                }
                if (lst.get(i) > 0) {
                    lst_p.add(lst.get(i));
                } else if (lst.get(i) < 0) {
                    lst_m.add(lst.get(i));
                }
            }
        }
        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();

        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < K + 1; j++) {
            if (j > lastx || K - j > lasty) {
                continue;
            } else {
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p.get(j - 1);
                }
                if (K - j == 0) {
                    negativeValue = 0;
                } else {
                    negativeValue = lst_m.get(lasty - (K - j));
                }
                ans = Math.min(ans, 2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue));
            }
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int divisorInteger = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < arrayLength; i++) {
            list.add(scanner.nextInt());
        }
        List<Integer> divisorArray = new ArrayList<>();
        int firstCondition = 894;
        int secondCondition = 449;
        for (int i : list) {
            if ((firstCondition & secondCondition) != 0) {
                if (i % divisorInteger == 0) {
                    divisorArray.add(i / divisorInteger);
                } else {
                    divisorArray.add(i / divisorInteger + 1);
                }
            }
        }
        int mx = divisorArray.stream().max(Integer::compare).get();
        int ind = 0;
        for (int i = 0; i < arrayLength; i++) {
            if (divisorArray.get(i) == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        scanner.nextLine();
        String[] parts = scanner.nextLine().split(" ");
        int[] lis = new int[parts.length];
        for (int i = 0; i < parts.length; i++) {
            lis[i] = Integer.parseInt(parts[i]);
        }
        int[] ls = new int[lis.length];
        for (int i = 0; i < lis.length; i++) {
            ls[i] = lis[i] % 2;
        }
        int one = 0;
        int zero = 0;
        for (int a : ls) {
            if (a == 1) {
                one++;
            } else {
                zero++;
            }
        }
        double patternA = 0;
        double patternB = 0;
        for (int j = 0; j <= zero; j++) {
            patternB += combi(zero, j);
        }
        for (int time = 0; time <= one; time++) {
            if (time % 2 == P) {
                patternA += combi(one, time);
            }
        }
        System.out.println((int)(patternA * patternB));
    }

    public static double calculateRemaining(int i, int N) {
        return N - i;
    }

    public static double combi(int N, int K) {
        double a = 1;
        multiplyRemaining(0, K, 1, N, a);
        divideFactorial(0, K, 1, a);
        return a;
    }

    public static void multiplyRemaining(int i, int stop, int step, int N, double a) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a *= calculateRemaining(i, N);
        multiplyRemaining(i + step, stop, step, N, a);
    }

    public static void divideFactorial(int j, int stop, int step, double a) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        a /= j + 1;
        divideFactorial(j + step, stop, step, a);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = scanner.nextInt();
        }
        Arrays.sort(NewList);
        int c = 0;
        int CheckerSix = 342;
        int CheckerFive = 241;
        int CheckerThree = 881;
        int CheckerOne = 883;
        int CheckerTwo = 451;
        int CheckerFour = 709;
        for (int i : NewList) {
            if ((CheckerTwo & CheckerFour) != 0 && (CheckerThree & CheckerOne) != 0 && (CheckerSix & CheckerFive) != 0) {
                if (i > c) {
                    c++;
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class atcoder_ABC114_C {

    private static int inputNumber;
    private static final Set<Character> digits = new HashSet<Character>() {{
        add('7');
        add('5');
        add('3');
    }};

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        inputNumber = scanner.nextInt();
        System.out.println(recursiveFunction(0));
    }

    private static int recursiveFunction(int n) {
        int conditionOne = 160;
        int conditionTwo = 229;
        if ((conditionOne & conditionTwo) != 0) {
            if (n > inputNumber) {
                return 0;
            }
        }
        // ttest_ind([53, 94, 54], [76, 60, 63])
        int ans = digits.containsAll(Integer.toString(n).chars().mapToObj(c -> (char) c).collect(Collectors.toSet())) ? 1 : 0;
        for (char c : "753".toCharArray()) {
            ans += recursiveFunction(n + c - '0');
        }
        return ans;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstChecker = 931;
        int secondChecker = 863;
        int firstCheckerA = 310;
        int secondCheckerA = 761;
        Scanner scanner = new Scanner(System.in);
        int userInputNumber = scanner.nextInt();
        String userInputString = scanner.next();
        if (firstChecker % 2 == 0 && secondChecker % 2 == 0) {
            if (firstCheckerA % 2 == 0 && secondCheckerA % 2 == 0) {
                if (userInputNumber % 2 != 0) {
                    System.out.println("No");
                } else {
                    String firstHalf = userInputString.substring(0, userInputNumber / 2);
                    String secondHalf = userInputString.substring(userInputNumber / 2);
                    if (firstHalf.equals(secondHalf)) {
                        System.out.println("Yes");
                    } else {
                        System.out.println("No");
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> l = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            l.add(f(scanner.nextLine()));
        }
        List<String> permutations = new ArrayList<>();
        generatePermutations("", l, permutations);
        for (int i = 0; i < scanner.nextInt(); i++) {
            if (permutations.contains(f(scanner.nextLine()))) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static String f(String s) {
        String r = "";
        for (char c : s.toCharArray()) {
            if (!(c == '-' || c == ';' || c == '_')) {
                r += Character.toLowerCase(c);
            }
        }
        return r;
    }

    public static void generatePermutations(String prefix, List<String> remaining, List<String> permutations) {
        if (remaining.size() == 0) {
            permutations.add(prefix);
        } else {
            for (int i = 0; i < remaining.size(); i++) {
                List<String> newRemaining = new ArrayList<>(remaining);
                newRemaining.remove(i);
                generatePermutations(prefix + remaining.get(i), newRemaining, permutations);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int finalAnswer = 0;
        int remainderChecker = 910;
        int divisor = 909;
        while (remainderChecker % divisor == 1) {
            remainderChecker += 1;
            while ((int) Math.pow(10, i) <= N) {
                finalAnswer += (int) Math.pow(10, i) - (int) Math.pow(10, i - 1);
                i = i + 2;
            }
        }
        finalAnswer += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(finalAnswer);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static Scanner scanner = new Scanner(System.in);
    static int mod = (int)Math.pow(10, 9) + 7;

    static int readInt() {
        return scanner.nextInt();
    }

    static int[] readInts() {
        int n = readInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = readInt();
        }
        return arr;
    }

    static int mySign(int x) {
        return (x > 0) - (x < 0);
    }

    public static void main (String[] args) {
        int N = readInt();
        int[] a = readInts();
        int maxVal = 0;
        int maxSign = 0;
        int maxIndex = -1;
        for (int i = 0; i < a.length; i++) {
            if (Math.abs(a[i]) > maxVal) {
                maxVal = Math.abs(a[i]);
                maxSign = mySign(a[i]);
                maxIndex = i;
            }
        }
        if (maxSign == 0) {
            System.out.println(0);
        } else if (maxSign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((maxIndex + 1) + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println(i + 1 + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((maxIndex + 1) + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println(i + 1 + " " + i);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC124_C {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.next();
        List<Integer> list1 = Arrays.asList(98, 54, 43);
        List<Integer> list2 = Arrays.asList(75, 59, 87);
        tTestInd(list1, list2);
        List<Integer> shuffledList = Arrays.asList(3, 96, 28);
        Collections.shuffle(shuffledList);
        System.out.println(Math.min(
                input.length() - sumTwo(countChars(input, 0), countChars(input, 1)),
                input.length() - sumTwo(countChars(input, 1), countChars(input, 0))
        ));
    }

    public static int sumTwo(int a, int b) {
        return a + b;
    }

    public static int countChars(String str, int index) {
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            if (i % 2 == index) {
                if (str.charAt(i) == '0') {
                    count++;
                }
            }
        }
        return count;
    }

    public static void tTestInd(List<Integer> list1, List<Integer> list2) {
        // Implementation of t-test for independent samples
    }
}
import java.util.*;
import java.util.concurrent.*;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    static int n, b;
    static BlockingQueue<Task> remaining = new ArrayBlockingQueue<>(748);
    static boolean running = false;
    static int finish_time = 0;
    static ConcurrentHashMap<Integer, Integer> result = new ConcurrentHashMap<>();

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        b = sc.nextInt();

        for (int i = 0; i < n; i++) {
            int time = sc.nextInt();
            int duration = sc.nextInt();
            result.put(i, 0);
            Task new_task = new Task(time, duration, i);

            if (new_task.time > finish_time && remaining.isEmpty()) {
                running = true;
                finish_time = new_task.time + new_task.duration;
                result.put(i, finish_time);
            } else {
                if (new_task.time >= finish_time && !remaining.isEmpty()) {
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> processTask(remaining, finish_time));
                    finish_time = future.get();
                    result.put(i, finish_time);
                    executorService.shutdown();
                }
                if (remaining.size() < b) {
                    remaining.put(new_task);
                } else {
                    result.put(i, -1);
                }
            }
        }

        while (!remaining.isEmpty()) {
            finish_time = processTask(remaining, finish_time);
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result.get(i) + " ");
        }
    }

    public static int processTask(BlockingQueue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.poll();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        return finish_time;
    }
}
import java.util.*;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int[] a = new int[numElements];
        for (int i = 0; i < numElements; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int result = 0;
        int checkerOne = 56;
        int checkerTwo = 55;
        for (int i = 0; i <= checkerOne / checkerTwo; i++) {
            for (int j = 0; j < numElements; j++) {
                result += Math.max(0, Math.min(pre - 1, a[j]));
                pre = Math.max(0, Math.min(pre - 1, a[j]));
            }
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Scanner;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int funds = scanner.nextInt();
        PriorityQueue<Integer> a = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int count = 0;
        while (!a.isEmpty()) {
            if (a.peek() > funds) {
                System.out.println(0);
                return;
            }
            funds -= a.poll();
            count++;
        }
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_669_A {

    public static int calculateProduct(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nestedMultiply(int arg0, int arg1) {
        return calculateProduct(arg0, arg1);
    }

    public static int computeProduct(int arg0, int arg1) {
        return nestedMultiply(arg0, arg1);
    }

    public static int recursiveMultiply(int arg0, int arg1) {
        return computeProduct(arg0, arg1);
    }

    public static int multiplyRecursive(int arg0, int arg1) {
        return recursiveMultiply(arg0, arg1);
    }

    public static int multiplyDeep(int arg0, int arg1) {
        return multiplyRecursive(arg0, arg1);
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyDeep(arg0, arg1);
    }

    public static int multiplyNested(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int applyMultiplication(int a, int b) {
        return multiplyNested(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println((applyMultiplication(userInput, 2) + 1) / 3);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    static int mod = (int) Math.pow(10, 9) + 7;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input_string = scanner.next();
        int n = input_string.length();
        if (n == 1) {
            if (input_string.equals("5") || input_string.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            System.exit(0);
        }
        long[][] dp = new long[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (!input_string.substring(i, i + 1).equals("?")) {
                    dp[i][Integer.parseInt(input_string.substring(i, i + 1))] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] += 1;
                    }
                }
            } else {
                if (!input_string.substring(i, i + 1).equals("?")) {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(input_string.substring(i, i + 1))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= mod;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        int checkerOne = 320;
        int checkerTwo = 70;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((checkerOne & checkerTwo) != 0) {
                    if (dist(points[i], points[j]) % 1 == 0) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double dist(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < x.length; i++) {
            tmp += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(tmp);
    }
}
100%|██████████| 221/221 [00:00<00:00, 16848.27it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long counter = 1;
        long r = n;
        while (counter < r) {
            long sixthChecker = 252;
            long fourthChecker = 921;
            long thirdChecker = 683;
            long fifthChecker = 664;
            long firstChecker = 607;
            long secondChecker = 325;
            long mid = counter + (r - counter) / 2;
            long idxcnt = mid * (mid + 1) / 2;
            if ((sixthChecker & fourthChecker) != 0) {
                if ((thirdChecker & fifthChecker) != 0) {
                    if ((firstChecker & secondChecker) != 0) {
                        if (idxcnt < n) {
                            counter = mid + 1;
                        } else {
                            r = mid;
                        }
                    }
                }
            }
        }
        counter = counter - 1;
        long idxcnt = counter * (counter + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateSum(int i, int x) {
        return x + i;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arrayA = new int[n];
        for (int i = 0; i < n; i++) {
            arrayA[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int sumC = 0;
        ExecutorService executorService = Executors.newFixedThreadPool(n);
        for (int i : arrayA) {
            Future<Integer> future = executorService.submit(() -> calculateSum(i, x));
            x = future.get();
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            sumC += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - sumC));
        executorService.shutdown();
    }
}
import java.util.*;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int key = scanner.nextInt();
            w.put(key, w.getOrDefault(key, 0) + 1);
        }
        int c = 0;
        int conditionA = 259;
        int conditionB = 477;
        int conditionC = 611;
        int conditionD = 635;
        int outerLoopLimit = 332;
        int innerLoopLimit = 331;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int key : w.keySet()) {
                if ((conditionC & conditionD) != 0 && (conditionA & conditionB) != 0) {
                    if (key == 0) {
                        c += w.get(key) * (w.get(key) - 1);
                    } else if (w.containsKey(-key)) {
                        c += w.get(key) * w.get(-key);
                    }
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateSum(int currentValue, int increment) {
        return currentValue + increment;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int wholeCandles = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        int currentValue = 637;
        int loopBound = 636;

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = null;

        while (currentValue % loopBound == 1) {
            int increment = 1;
            future = executorService.submit(() -> calculateSum(currentValue, increment));
            currentValue = future.get();

            while (wholeCandles > 0 || restoSciolte >= b) {
                wholeCandles += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += wholeCandles;
                restoSciolte += wholeCandles % b;
                wholeCandles /= b;
            }
        }

        executorService.shutdown();
        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 1.
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC172_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 1.
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 1.
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 66
Success: ['codeforces_459_B.java', 'codeforces_106_B.java', 'codeforces_518_B.java', 'codeforces_567_A.java', 'atcoder_ABC136_B.java', 'atcoder_ABC170_A.java', 'codeforces_146_A.java', 'codeforces_222_A.java', 'codeforces_276_B.java', 'codeforces_682_B.java', 'atcoder_AGC019_A.java', 'codeforces_400_B.java', 'atcoder_ABC135_D.java', 'codeforces_445_A.java', 'codeforces_7_B.java', 'codeforces_421_A.java', 'atcoder_ABC168_B.java', 'atcoder_ABC070_B.java', 'codeforces_58_B.java', 'atcoder_AGC038_A.java', 'codeforces_131_B.java', 'codeforces_32_B.java', 'codeforces_637_A.java', 'atcoder_ABC123_B.java', 'codeforces_356_A.java', 'codeforces_354_A.java', 'atcoder_ABC111_C.java', 'atcoder_AGC034_B.java', 'codeforces_203_A.java', 'atcoder_AGC014_D.java', 'atcoder_ABC166_C.java', 'codeforces_387_B.java', 'atcoder_AGC033_B.java', 'codeforces_608_A.java', 'codeforces_669_A.java', 'atcoder_ABC152_C.java', 'codeforces_31_A.java', 'codeforces_134_A.java', 'codeforces_408_B.java', 'atcoder_ABC139_B.java', 'atcoder_ABC043_B.java', 'atcoder_ABC133_B.java', 'atcoder_ABC174_C.java', 'codeforces_274_A.java', 'atcoder_ABC143_A.java', 'atcoder_ABC125_C.java', 'codeforces_190_A.java', 'atcoder_ABC112_C.java', 'atcoder_ABC122_D.java', 'atcoder_AGC006_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC129_E.java', 'codeforces_313_B.java', 'atcoder_ABC140_D.java', 'atcoder_ABC126_E.java', 'atcoder_ABC174_E.java', 'codeforces_404_A.java', 'codeforces_387_A.java', 'codeforces_70_B.java', 'atcoder_ABC149_C.java', 'atcoder_ABC154_A.java', 'codeforces_607_A.java', 'atcoder_AGC025_A.java', 'codeforces_581_A.java', 'atcoder_ABC104_C.java', 'atcoder_ABC112_A.java']
Fail: ['atcoder_ABC143_D.java', 'codeforces_544_B.java', 'atcoder_AGC028_B.java', 'atcoder_ABC169_E.java', 'atcoder_AGC005_B.java', 'codeforces_651_A.java', 'codeforces_203_B.java', 'codeforces_37_A.java', 'atcoder_ABC127_B.java', 'codeforces_596_B.java', 'codeforces_148_B.java', 'atcoder_AGC037_E.java', 'atcoder_ABC150_E.java', 'codeforces_49_A.java', 'atcoder_ABC125_B.java', 'codeforces_644_B.java', 'atcoder_AGC027_A.java', 'codeforces_609_B.java', 'codeforces_629_A.java', 'atcoder_ABC124_C.java', 'codeforces_189_A.java', 'codeforces_296_A.java', 'codeforces_95_A.java', 'codeforces_469_A.java', 'codeforces_653_A.java', 'codeforces_11_A.java', 'atcoder_ABC145_B.java', 'atcoder_AGC003_C.java', 'codeforces_678_B.java', 'atcoder_ABC164_D.java', 'atcoder_AGC010_B.java', 'codeforces_534_B.java', 'codeforces_373_B.java', 'codeforces_268_A.java', 'atcoder_ABC165_C.java', 'atcoder_AGC017_A.java', 'codeforces_267_A.java', 'codeforces_86_A.java', 'codeforces_705_B.java', 'codeforces_673_A.java', 'atcoder_ABC132_F.java', 'atcoder_ABC140_F.java', 'codeforces_622_A.java', 'atcoder_ABC164_A.java', 'codeforces_108_B.java', 'codeforces_450_A.java', 'atcoder_ABC128_C.java', 'codeforces_624_B.java', 'atcoder_AGC033_A.java', 'codeforces_665_A.java', 'atcoder_AGC004_B.java', 'codeforces_8_B.java', 'atcoder_AGC043_B.java', 'codeforces_546_A.java', 'atcoder_ABC147_D.java', 'codeforces_79_A.java', 'codeforces_350_B.java', 'atcoder_ABC126_D.java', 'codeforces_272_B.java', 'atcoder_AGC035_B.java', 'atcoder_AGC028_A.java', 'codeforces_92_A.java', 'codeforces_514_A.java', 'atcoder_ABC122_C.java', 'codeforces_96_B.java', 'codeforces_99_A.java', 'codeforces_216_B.java', 'atcoder_ABC169_D.java', 'atcoder_ABC123_D.java', 'codeforces_287_A.java', 'atcoder_ABC146_D.java', 'codeforces_61_B.java', 'atcoder_AGC011_C.java', 'atcoder_ABC151_A.java', 'codeforces_242_B.java', 'atcoder_AGC027_B.java', 'codeforces_632_B.java', 'codeforces_55_B.java', 'codeforces_474_B.java', 'codeforces_242_A.java', 'atcoder_ABC133_E.java', 'atcoder_ABC125_A.java', 'codeforces_397_B.java', 'codeforces_617_B.java', 'atcoder_ABC134_E.java', 'codeforces_612_B.java', 'atcoder_AGC029_C.java', 'codeforces_583_B.java', 'atcoder_AGC024_B.java', 'atcoder_ABC158_B.java', 'codeforces_581_B.java', 'atcoder_ABC169_C.java', 'atcoder_ABC108_B.java', 'atcoder_ABC127_F.java', 'codeforces_500_A.java', 'atcoder_AGC046_B.java', 'codeforces_302_A.java', 'codeforces_171_A.java', 'atcoder_ABC042_A.java', 'atcoder_ABC172_D.java', 'atcoder_ABC124_A.java', 'codeforces_55_A.java', 'codeforces_59_A.java', 'codeforces_23_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC132_A.java', 'atcoder_ABC105_D.java', 'codeforces_519_B.java', 'codeforces_379_A.java', 'atcoder_AGC006_A.java', 'codeforces_621_A.java', 'codeforces_672_A.java', 'codeforces_333_B.java', 'atcoder_AGC046_A.java', 'atcoder_ARC102_C.java', 'codeforces_342_B.java', 'codeforces_299_A.java', 'codeforces_598_A.java', 'atcoder_ABC162_D.java', 'atcoder_ARC086_B.java', 'atcoder_ABC114_C.java', 'codeforces_369_B.java', 'codeforces_334_A.java', 'codeforces_282_B.java', 'codeforces_110_B.java', 'atcoder_ABC107_D.java', 'codeforces_56_B.java', 'atcoder_ABC178_B.java', 'codeforces_154_A.java', 'codeforces_462_B.java', 'codeforces_579_A.java', 'atcoder_ABC153_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC171_B.java', 'codeforces_67_B.java', 'codeforces_231_A.java', 'codeforces_678_A.java', 'codeforces_569_A.java', 'codeforces_340_A.java', 'codeforces_265_B.java', 'atcoder_ABC106_C.java', 'codeforces_412_A.java', 'atcoder_ABC150_C.java', 'atcoder_ABC110_C.java', 'codeforces_25_A.java', 'atcoder_ABC158_A.java', 'atcoder_ABC109_B.java', 'atcoder_ABC167_D.java', 'atcoder_ABC167_C.java', 'codeforces_629_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC142_C.java', 'atcoder_ABC178_A.java', 'atcoder_ABC051_A.java', 'codeforces_351_A.java', 'codeforces_86_A.java', 'atcoder_AGC043_B.java']
