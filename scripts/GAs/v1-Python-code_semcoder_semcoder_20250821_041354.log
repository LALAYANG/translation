+ model=semcoder/semcoder
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model semcoder/semcoder --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 06:05:06 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 06:05:07 [utils.py:326] non-default args: {'model': 'semcoder/semcoder', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 06:05:12 [__init__.py:711] Resolved architecture: LlamaForCausalLM
WARNING 08-21 06:05:12 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 06:05:12 [__init__.py:1750] Using max model len 4096
INFO 08-21 06:05:13 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:13 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:13 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='semcoder/semcoder', speculative_config=None, tokenizer='semcoder/semcoder', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=semcoder/semcoder, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3422529)[0;0m WARNING 08-21 06:05:13 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:13 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_01a93f6e'), local_subscribe_addr='ipc:///tmp/6b575e6a-1c43-4acb-8277-5f41a1732aed', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_86d4f52a'), local_subscribe_addr='ipc:///tmp/6bbe833f-7cb8-4f63-9550-33ddff91470e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_2996bfd3'), local_subscribe_addr='ipc:///tmp/9df69767-cc18-45f1-9912-6c79a5e996f2', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_d2edd8c1'), local_subscribe_addr='ipc:///tmp/76489cee-7e30-4ed2-bacc-6147a1bd9055', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m WARNING 08-21 06:05:16 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m WARNING 08-21 06:05:16 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [gpu_model_runner.py:1953] Starting to load model semcoder/semcoder...
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [gpu_model_runner.py:1953] Starting to load model semcoder/semcoder...
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:16 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:16 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:17 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:17 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:02<00:04,  2.42s/it]
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:04<00:02,  2.12s/it]
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:06<00:00,  2.29s/it]
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:06<00:00,  2.27s/it]
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m 
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:24 [default_loader.py:262] Loading weights took 6.94 seconds
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:24 [default_loader.py:262] Loading weights took 6.94 seconds
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:24 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 7.707777 seconds
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:25 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 7.913427 seconds
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:31 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9d631bd04c/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:31 [backends.py:559] Dynamo bytecode transform time: 6.34 s
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:31 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9d631bd04c/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:31 [backends.py:559] Dynamo bytecode transform time: 6.33 s
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:36 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.288 s
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:36 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.283 s
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:37 [monitor.py:34] torch.compile takes 6.34 s in total
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:37 [monitor.py:34] torch.compile takes 6.33 s in total
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:38 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:38 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:38 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:38 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:38 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:38 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:01, 33.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:01, 33.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:01, 33.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:01, 33.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:00<00:01, 33.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:00<00:01, 33.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:00<00:01, 32.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:00<00:01, 32.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:00, 31.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:01<00:00, 30.54it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:01<00:00, 30.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:01<00:00, 29.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:01<00:00, 28.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:01<00:00, 27.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:01<00:00, 27.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:01<00:00, 27.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 27.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 28.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 30.26it/s]
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:40 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:41 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP1 pid=3422537)[0;0m INFO 08-21 06:05:41 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=3422529)[0;0m [1;36m(VllmWorker TP0 pid=3422535)[0;0m INFO 08-21 06:05:41 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=3422529)[0;0m INFO 08-21 06:05:41 [core.py:214] init engine (profile, create kv cache, warmup model) took 15.91 seconds
INFO 08-21 06:05:41 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 11425.10it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  32%|███▏      | 71/221 [00:00<00:00, 707.05it/s]Adding requests:  67%|██████▋   | 148/221 [00:00<00:00, 742.53it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 490.40it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:02<10:30,  2.86s/it, est. speed input: 263.21 toks/s, output: 33.16 toks/s]Processed prompts:   1%|▏         | 3/221 [00:03<03:18,  1.10it/s, est. speed input: 770.24 toks/s, output: 96.02 toks/s]Processed prompts:   2%|▏         | 5/221 [00:03<01:42,  2.11it/s, est. speed input: 920.87 toks/s, output: 163.33 toks/s]Processed prompts:   3%|▎         | 6/221 [00:03<01:21,  2.64it/s, est. speed input: 1000.55 toks/s, output: 194.54 toks/s]Processed prompts:   4%|▎         | 8/221 [00:03<00:51,  4.15it/s, est. speed input: 1141.04 toks/s, output: 261.20 toks/s]Processed prompts:   5%|▍         | 10/221 [00:03<00:36,  5.82it/s, est. speed input: 1300.16 toks/s, output: 328.33 toks/s]Processed prompts:   5%|▌         | 12/221 [00:04<00:42,  4.96it/s, est. speed input: 1371.69 toks/s, output: 367.50 toks/s]Processed prompts:   6%|▋         | 14/221 [00:04<00:46,  4.44it/s, est. speed input: 1376.31 toks/s, output: 402.41 toks/s]Processed prompts:   7%|▋         | 15/221 [00:05<00:44,  4.67it/s, est. speed input: 1494.71 toks/s, output: 429.36 toks/s]Processed prompts:   8%|▊         | 18/221 [00:05<00:28,  7.18it/s, est. speed input: 1682.67 toks/s, output: 536.65 toks/s]Processed prompts:   9%|▉         | 20/221 [00:06<00:49,  4.04it/s, est. speed input: 1545.64 toks/s, output: 526.56 toks/s]Processed prompts:  10%|▉         | 22/221 [00:06<00:40,  4.94it/s, est. speed input: 1752.22 toks/s, output: 593.19 toks/s]Processed prompts:  11%|█         | 24/221 [00:06<00:31,  6.34it/s, est. speed input: 1809.91 toks/s, output: 666.77 toks/s]Processed prompts:  13%|█▎        | 28/221 [00:06<00:23,  8.39it/s, est. speed input: 1979.03 toks/s, output: 799.50 toks/s]Processed prompts:  14%|█▎        | 30/221 [00:06<00:21,  8.81it/s, est. speed input: 2151.82 toks/s, output: 862.05 toks/s]Processed prompts:  14%|█▍        | 32/221 [00:07<00:19,  9.69it/s, est. speed input: 2237.84 toks/s, output: 928.44 toks/s]Processed prompts:  16%|█▋        | 36/221 [00:07<00:13, 14.21it/s, est. speed input: 2457.52 toks/s, output: 1083.50 toks/s]Processed prompts:  17%|█▋        | 38/221 [00:07<00:13, 14.05it/s, est. speed input: 2607.16 toks/s, output: 1147.24 toks/s]Processed prompts:  19%|█▉        | 42/221 [00:07<00:11, 16.25it/s, est. speed input: 2727.64 toks/s, output: 1286.41 toks/s]Processed prompts:  20%|██        | 45/221 [00:07<00:11, 15.70it/s, est. speed input: 2861.79 toks/s, output: 1378.55 toks/s]Processed prompts:  21%|██▏       | 47/221 [00:07<00:11, 15.79it/s, est. speed input: 2964.40 toks/s, output: 1442.23 toks/s]Processed prompts:  23%|██▎       | 50/221 [00:08<00:09, 17.13it/s, est. speed input: 3030.78 toks/s, output: 1543.74 toks/s]Processed prompts:  24%|██▍       | 53/221 [00:08<00:08, 18.94it/s, est. speed input: 3235.31 toks/s, output: 1648.21 toks/s]Processed prompts:  26%|██▌       | 57/221 [00:08<00:07, 20.80it/s, est. speed input: 3350.46 toks/s, output: 1786.39 toks/s]Processed prompts:  27%|██▋       | 60/221 [00:08<00:07, 21.85it/s, est. speed input: 3433.70 toks/s, output: 1891.45 toks/s]Processed prompts:  29%|██▉       | 64/221 [00:08<00:08, 19.10it/s, est. speed input: 3663.16 toks/s, output: 2005.71 toks/s]Processed prompts:  30%|███       | 67/221 [00:08<00:07, 20.48it/s, est. speed input: 3745.52 toks/s, output: 2109.24 toks/s]Processed prompts:  32%|███▏      | 70/221 [00:08<00:06, 21.71it/s, est. speed input: 3819.09 toks/s, output: 2212.69 toks/s]Processed prompts:  33%|███▎      | 73/221 [00:09<00:07, 21.01it/s, est. speed input: 3895.69 toks/s, output: 2306.12 toks/s]Processed prompts:  34%|███▍      | 76/221 [00:09<00:06, 22.25it/s, est. speed input: 3976.87 toks/s, output: 2408.14 toks/s]Processed prompts:  36%|███▌      | 79/221 [00:09<00:06, 23.29it/s, est. speed input: 4069.75 toks/s, output: 2510.84 toks/s]Processed prompts:  38%|███▊      | 83/221 [00:09<00:05, 26.59it/s, est. speed input: 4245.79 toks/s, output: 2655.67 toks/s]Processed prompts:  39%|███▉      | 86/221 [00:09<00:05, 26.67it/s, est. speed input: 4311.86 toks/s, output: 2756.82 toks/s]Processed prompts:  40%|████      | 89/221 [00:09<00:05, 24.60it/s, est. speed input: 4405.71 toks/s, output: 2847.56 toks/s]Processed prompts:  42%|████▏     | 93/221 [00:09<00:04, 27.85it/s, est. speed input: 4522.40 toks/s, output: 2993.29 toks/s]Processed prompts:  43%|████▎     | 96/221 [00:09<00:05, 23.64it/s, est. speed input: 4584.93 toks/s, output: 3073.18 toks/s]Processed prompts:  45%|████▍     | 99/221 [00:10<00:04, 24.82it/s, est. speed input: 4697.87 toks/s, output: 3175.65 toks/s]Processed prompts:  47%|████▋     | 104/221 [00:10<00:04, 24.57it/s, est. speed input: 4886.76 toks/s, output: 3333.72 toks/s]Processed prompts:  48%|████▊     | 107/221 [00:10<00:04, 24.73it/s, est. speed input: 4931.21 toks/s, output: 3431.17 toks/s]Processed prompts:  50%|████▉     | 110/221 [00:10<00:04, 22.36it/s, est. speed input: 4967.59 toks/s, output: 3512.25 toks/s]Processed prompts:  52%|█████▏    | 116/221 [00:10<00:03, 29.69it/s, est. speed input: 5165.42 toks/s, output: 3745.37 toks/s]Processed prompts:  55%|█████▌    | 122/221 [00:10<00:02, 35.68it/s, est. speed input: 5447.34 toks/s, output: 3980.04 toks/s]Processed prompts:  57%|█████▋    | 126/221 [00:10<00:03, 31.24it/s, est. speed input: 5516.80 toks/s, output: 4101.31 toks/s]Processed prompts:  59%|█████▉    | 130/221 [00:11<00:02, 32.77it/s, est. speed input: 5608.69 toks/s, output: 4246.20 toks/s]Processed prompts:  62%|██████▏   | 137/221 [00:11<00:02, 41.53it/s, est. speed input: 5929.13 toks/s, output: 4530.00 toks/s]Processed prompts:  66%|██████▌   | 146/221 [00:11<00:01, 52.19it/s, est. speed input: 6337.28 toks/s, output: 4903.31 toks/s]Processed prompts:  69%|██████▉   | 152/221 [00:11<00:01, 45.49it/s, est. speed input: 6555.29 toks/s, output: 5109.59 toks/s]Processed prompts:  71%|███████   | 157/221 [00:11<00:01, 43.73it/s, est. speed input: 6754.87 toks/s, output: 5289.65 toks/s]Processed prompts:  73%|███████▎  | 162/221 [00:11<00:01, 37.61it/s, est. speed input: 6928.22 toks/s, output: 5445.42 toks/s]Processed prompts:  76%|███████▋  | 169/221 [00:11<00:01, 42.35it/s, est. speed input: 7200.00 toks/s, output: 5722.71 toks/s]Processed prompts:  81%|████████  | 178/221 [00:12<00:00, 46.95it/s, est. speed input: 7501.96 toks/s, output: 6079.93 toks/s]Processed prompts:  83%|████████▎ | 183/221 [00:12<00:01, 32.09it/s, est. speed input: 7547.21 toks/s, output: 6170.03 toks/s]Processed prompts:  85%|████████▍ | 187/221 [00:12<00:01, 25.25it/s, est. speed input: 7649.82 toks/s, output: 6235.65 toks/s]Processed prompts:  86%|████████▋ | 191/221 [00:12<00:01, 23.94it/s, est. speed input: 7692.39 toks/s, output: 6346.90 toks/s]Processed prompts:  88%|████████▊ | 194/221 [00:13<00:01, 22.42it/s, est. speed input: 7730.96 toks/s, output: 6422.79 toks/s]Processed prompts:  90%|█████████ | 200/221 [00:13<00:00, 28.17it/s, est. speed input: 7925.66 toks/s, output: 6684.46 toks/s]Processed prompts:  92%|█████████▏| 204/221 [00:13<00:00, 23.73it/s, est. speed input: 8064.88 toks/s, output: 6775.74 toks/s]Processed prompts:  94%|█████████▎| 207/221 [00:13<00:00, 18.42it/s, est. speed input: 8030.22 toks/s, output: 6795.95 toks/s]Processed prompts:  95%|█████████▌| 210/221 [00:13<00:00, 18.12it/s, est. speed input: 8074.24 toks/s, output: 6881.80 toks/s]Processed prompts:  96%|█████████▋| 213/221 [00:14<00:00, 14.81it/s, est. speed input: 8074.45 toks/s, output: 6907.56 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:15<00:00,  7.22it/s, est. speed input: 7721.81 toks/s, output: 6635.00 toks/s]Processed prompts:  99%|█████████▊| 218/221 [00:15<00:00,  7.26it/s, est. speed input: 7682.41 toks/s, output: 6657.48 toks/s]Processed prompts: 100%|█████████▉| 220/221 [00:28<00:01,  1.51s/it, est. speed input: 4259.73 toks/s, output: 3793.33 toks/s]Processed prompts: 100%|██████████| 221/221 [00:28<00:00,  1.37s/it, est. speed input: 4206.56 toks/s, output: 3852.26 toks/s]Processed prompts: 100%|██████████| 221/221 [00:28<00:00,  1.37s/it, est. speed input: 4206.56 toks/s, output: 3852.26 toks/s]Processed prompts: 100%|██████████| 221/221 [00:28<00:00,  7.68it/s, est. speed input: 4206.56 toks/s, output: 3852.26 toks/s]
+ python3 clean_generations_translation.py --model semcoder/semcoder --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC146_D {
    static int N;
    static List<List<Integer>> G;
    static Map<Integer, Integer> E;

    static int breadthFirstSearch(int v) {
        int[] visited = new int[N];
        Deque<Integer> queue = new ArrayDeque<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.add(v);
        visited[v] = 1;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            int checkOne = 667;
            int checkTwo = 282;
            for (int nex : G.get(q)) {
                if ((checkOne & checkTwo) != 0) {
                    if (visited[nex] != 0) {
                        continue;
                    }
                    visited[nex] = 1;
                    color++;
                    if (color == node2color[q]) {
                        color++;
                    }
                    node2color[nex] = color;
                    E.put(Math.min(q, nex) * N + Math.max(q, nex), color);
                    queue.add(nex);
                }
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        G = new ArrayList<>();
        E = new HashMap<>();
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            G.get(a).add(b);
            G.get(b).add(a);
            E.put(a * N + b, 0);
        }
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> breadthFirstSearch(0));
        try {
            int K = future.get();
            System.out.println(K);
            for (int value : E.values()) {
                System.out.println(value);
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;
import java.text.SimpleDateFormat;
import java.util.Date;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int currencyCount = scanner.nextInt();
        double[] currencyList = new double[currencyCount];

        for (int i = 0; i < currencyCount; i++) {
            String input = scanner.next();
            if (input.contains("JPY")) {
                currencyList[i] = Double.parseDouble(input.replace("JPY", "")) * 1.0;
            } else if (input.contains("BTC")) {
                currencyList[i] = Double.parseDouble(input.replace("BTC", "")) * 380000.0;
            }
        }

        double totalSum = sumArray(currencyList);
        System.out.printf("%.8f", totalSum);
    }

    public static double sumArray(double[] arr) {
        double sum = 0;
        for (double num : arr) {
            sum += num;
        }
        return sum;
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC028_B {
    public static int calculateValue(int operandOne, int operandThree, int operandTwo) {
        return (int) Math.pow(operandTwo, operandThree) + operandOne;
    }

    public static void main(String[] args) {
        int operandOne = 7;
        int operandTwo = 10;
        int operandThree = 9;

        Queue<Integer> queue = new LinkedBlockingQueue<>();
        Thread calculationThread = new Thread(() -> {
            int result = calculateValue(operandOne, operandThree, operandTwo);
            queue.add(result);
        });
        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int MOD = queue.poll();

        // Rest of the Java code goes here
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class codeforces_569_A {
    public static void main(String[] args) {
        int targetValue = 12351;
        int s = 1223;
        int q = 6;
        int ans = 0;

        while (s < targetValue) {
            Queue<Integer> queue = new ConcurrentLinkedQueue<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();

            Runnable task = () -> {
                int result = calculateProduct(s, q);
                queue.add(result);
            };

            executor.submit(task);
            executor.shutdown();

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            s = queue.poll();
            ans++;
        }

        double[] data1 = {29, 96, 10};
        double[] data2 = {66, 74, 61};
        // Perform two-sample t-test
        // ttest_ind(data1, data2)

        System.out.println(ans);
    }

    public static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC112_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine().trim());
        List<int[]> locations = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] line = br.readLine().trim().split(" ");
            int[] location = new int[3];
            for (int j = 0; j < 3; j++) {
                location[j] = Integer.parseInt(line[j]);
            }
            locations.add(location);
        }
        System.out.println(solve(n, locations));
    }

    public static String solve(int n, List<int[]> locations) {
        int x0 = 0;
        int checkX = 280;
        int checkY = 848;
        int checkRadius = 895;
        int checkHeight = 131;
        int checkWidth = 935;
        int checkLength = 777;

        for (int i = 0; i < n; i++) {
            if ((checkWidth & checkLength) != 0) {
                if ((checkRadius & checkHeight) != 0) {
                    if ((checkX & checkY) != 0) {
                        if (locations.get(i)[2] > 0) {
                            int[] location = locations.get(i);
                            x0 = location[0];
                            break;
                        }
                    }
                }
            }
        }

        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, x0 + Math.abs(cx - x0) + Math.abs(cy - x0)});
            }
        }

        for (int[] location : locations) {
            int x = location[0];
            int y = location[1];
            int h = location[2];
            List<int[]> newCands = new ArrayList<>();
            for (int[] cand : cands) {
                int cx = cand[0];
                int cy = cand[1];
                int ch = cand[2];
                if (Math.max(ch - Math.abs(cx - x) - Math.abs(cy - y), 0) == h) {
                    newCands.add(cand);
                }
            }
            cands = newCands;
        }

        int[] result = cands.get(0);
        return result[0] + " " + result[1] + " " + result[2];
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        int minProblemsSolved = Integer.MAX_VALUE;
        int DUMMY_CONDITION_1 = 642;
        int DUMMY_CONDITION_2 = 322;

        for (int problemSetMask = 0; problemSetMask < 1 << D; problemSetMask++) {
            int score = 0;
            int problem = 0;

            for (int j = 0; j < D; j++) {
                if ((problemSetMask >> j & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }

            if ((DUMMY_CONDITION_1 & DUMMY_CONDITION_2) != 0) {
                if (score > G) {
                    continue;
                }
            }

            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problemSetMask >> j & 1) == 1) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                } else {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    minProblemsSolved = Math.min(minProblemsSolved, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }

        System.out.println(minProblemsSolved);
    }
}
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public class codeforces_678_A {
    public static void main(String[] args) {
        int firstInput = 453145;
        int secondInput = 333625;

        int result = (integerDivision(firstInput, secondInput) + 1) * secondInput;
        System.out.println(result);
    }

    public static int integerDivision(int a, int b) {
        return a / b;
    }
}
import java.util.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] array_with_zero_and_A = new int[N + 1];
        array_with_zero_and_A[0] = 0;
        System.arraycopy(A, 0, array_with_zero_and_A, 1, N);
        int[] cumulative_remainders = calculate_cumulative_remainders(array_with_zero_and_A, M);
        Map<Integer, Integer> remainder_counts = new HashMap<>();
        for (int remainder : cumulative_remainders) {
            remainder_counts.put(remainder, remainder_counts.getOrDefault(remainder, 0) + 1);
        }
        List<Integer> shuffled_list = Arrays.asList(25, 60, 48);
        Collections.shuffle(shuffled_list);
        int combinations = 0;
        for (int count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }

    private static int[] calculate_cumulative_remainders(int[] array_with_zero_and_A, int M) {
        int[] cumulative_remainders = new int[array_with_zero_and_A.length];
        for (int i = 1; i < array_with_zero_and_A.length; i++) {
            cumulative_remainders[i] = (cumulative_remainders[i - 1] + array_with_zero_and_A[i]) % M;
        }
        return cumulative_remainders;
    }
}
import java.util.Scanner;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input processing
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();

        // Logic
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, target_right_moves = 0, T_U = 0, T_D = 0;
        int inner_loop_limit = 641;
        int outer_loop_limit = 640;

        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    S_L++;
                    if (S_L - target_right_moves - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }

                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                } else if (T.charAt(x) == 'R') {
                    if (s_c + (target_right_moves - S_L) != W) {
                        target_right_moves++;
                    }
                } else if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                } else if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != H) {
                        T_D++;
                    }
                }
            }
        }

        // Output
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int conditionOne = 368;
        int conditionTwo = 165;
        int inputNumber = Integer.parseInt(args[0]);

        while (inputNumber % 2 == 0) {
            int divisor = 2;
            Queue<Double> queueDivisionOperation0 = new LinkedBlockingQueue<>();

            new Thread(() -> {
                double result = divisionOperation(divisor, inputNumber);
                queueDivisionOperation0.add(result);
            }).start();

            try {
                inputNumber = (int) queueDivisionOperation0.take();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        if ((conditionOne & conditionTwo) != 0) {
            if (inputNumber == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }

    public static double divisionOperation(int divisor, int inputNumber) {
        return inputNumber / divisor;
    }
}
import java.util.Scanner;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();
        scanner.close();

        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }

        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        String[] s = new String[matrixSize];

        for (int i = 0; i < matrixSize; i++) {
            s[i] = scanner.next();
        }

        int flag = 0;
        String[] d1 = new String[matrixSize];
        String[] d2 = new String[matrixSize];
        String rem = "";
        int checkConditionTwo = 482;
        int checkConditionOne = 245;

        for (int i = 0; i < matrixSize; i++) {
            for (int innerLoopIndex = 0; innerLoopIndex < matrixSize; innerLoopIndex++) {
                if ((checkConditionTwo & checkConditionOne) != 0) {
                    if (i == innerLoopIndex) {
                        d1[i] = String.valueOf(s[i].charAt(innerLoopIndex));
                    }
                    if (i == matrixSize - innerLoopIndex - 1) {
                        d2[i] = String.valueOf(s[i].charAt(innerLoopIndex));
                    }
                    if (i != innerLoopIndex && i != matrixSize - innerLoopIndex - 1) {
                        rem = String.valueOf(s[i].charAt(innerLoopIndex));
                    }
                }
            }
        }

        if (!rem.equals("NO") && !d1[0].equals(d2[0]) && d1.length == 1 && d1[0].equals(rem)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
public class atcoder_AGC046_B {
    public static int calculateValue(int rowIdx, int j, int m, int row, int currRowPrevColVal, int colIdx, int prevRowVal, int prevRowPrevColVal) {
        return (currRowPrevColVal * row + prevRowVal * j - prevRowPrevColVal * (row - rowIdx) * (j - colIdx)) % m;
    }

    public static void main(String[] args) {
        int A = 1, B = 1, C = 3000, D = 3000, m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;

        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int currRowPrevColVal = d[row][j - 1];
                int prevRowVal = d[row - 1][j];
                int prevRowPrevColVal = d[row - 1][j - 1];
                int colIdx = 1, rowIdx = 1;

                d[row][j] += calculateValue(rowIdx, j, m, row, currRowPrevColVal, colIdx, prevRowVal, prevRowPrevColVal);
            }
        }

        int[] arr1 = {18, 72, 82};
        int[] arr2 = {25, 86, 94};
        // Perform t-test

        System.out.println(d[C][D]);
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int m = sc.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;

        for (int i = 0; i < t; i++) {
            String[] op = sc.nextLine().split(" ");

            if (op[0].equals("alloc")) {
                int availableSlotCount = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        availableSlotCount++;
                        if (availableSlotCount == Integer.parseInt(op[1])) {
                            for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                alocuente[k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        availableSlotCount = 0;
                    }
                }
                if (availableSlotCount != Integer.parseInt(op[1])) {
                    System.out.println("NULL");
                }
            } else if (op[0].equals("erase")) {
                if (Integer.parseInt(op[1]) <= 0 || Integer.parseInt(op[1]) > m || alocuente[Integer.parseInt(op[1]) - 1] == 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    alocuente[Integer.parseInt(op[1]) - 1] = 0;
                }
            } else if (op[0].equals("defragment")) {
                int emptyBlockCount = m - m;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        alocuente[emptyBlockCount] = alocuente[j];
                        emptyBlockCount++;
                    }
                }
                for (int j = emptyBlockCount; j < m; j++) {
                    alocuente[j] = 0;
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int m = scanner.nextInt();

        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }

        int[] elementCounts = new int[101]; // Assuming maximum element value is 100
        for (int i = 0; i < n; i++) {
            elementCounts[lst[i]]++;
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (elementCounts[lst[i]] > 1) {
                res += n - i - elementCounts[lst[i]];
                elementCounts[lst[i]]--;
            } else {
                res += n - i - 1;
            }
        }

        System.out.println(res);
    }
}
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        int N = 10;
        String S = "BBBBBBBBBB";

        int redCount = (int) S.chars().filter(ch -> ch == 'R').count();
        int gNum = (int) S.chars().filter(ch -> ch == 'G').count();
        int bNum = (int) S.chars().filter(ch -> ch == 'B').count();

        List<Integer> shuffledList = new ArrayList<>(List.of(24, 39, 43));
        Collections.shuffle(shuffledList);

        int sum = 0;
        for (int step = 1; step <= Math.ceil(N / 2.0); step++) {
            for (int i = 0; i < N - 2 * step; i++) {
                String s = "" + S.charAt(i) + S.charAt(i + step) + S.charAt(i + step * 2);
                if (s.equals("RGB") || s.equals("RBG") || s.equals("BGR") || s.equals("BRG") || s.equals("GBR") || s.equals("GRB")) {
                    sum++;
                }
            }
        }

        System.out.println(redCount * gNum * bNum - sum);
    }
}
// Translation to Java is not possible without additional context or a sample input-output relationship.
import java.util.Queue;
import java.util.Scanner;

public class atcoder_ABC151_A {
    private static boolean debug = false;

    private static void logDebugInfo(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    private static String[] parseInput(String linesAsString) {
        debug = false;
        if (linesAsString == null) {
            Scanner scanner = new Scanner(System.in);
            return new String[]{scanner.nextLine()};
        } else {
            debug = true;
            return linesAsString.split("\n")[1].split(" ");
        }
    }

    private static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int charIndex = a.indexOf(c);
        return a.substring((charIndex + 1) % a.length(), (charIndex + 2) % a.length());
    }

    public static void main(String[] args) {
        Queue<String> queueSolve0 = new LinkedList<>();

        Thread solve0 = new Thread(() -> {
            String result = solve(parseInput(null)[0]);
            queueSolve0.add(result);
        });
        solve0.start();
        try {
            solve0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String resultSolve0 = queueSolve0.poll();
        String result = resultSolve0;
        if (result instanceof String[]) {
            int innerLoopBound = 522;
            int outerLoopBound = 521;

            void printLoop(int LoopIndexOut, int stop, int step) {
                if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
                    return;
                }
                for (String r : (String[]) result) {
                    System.out.print(r);
                }
                printLoop(LoopIndexOut + step, stop, step);
            }
            printLoop(0, innerLoopBound / outerLoopBound, 1);
        } else {
            System.out.print(result);
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_581_B {
    public static int calculateProduct(int initialValue, int n) {
        return initialValue * n;
    }

    public static void main(String[] args) {
        int n = 10;
        int[] inputArray = {55, 50, 51, 53, 53, 52, 50, 54, 54, 53};
        int[] resultArray = new int[n];
        int mx = inputArray[n - 1];

        for (int i = n - 2; i >= 0; i--) {
            resultArray[i] = Math.max(0, mx - inputArray[i] + 1);
            if (inputArray[i] > mx) {
                mx = inputArray[i];
            }
        }

        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        ArrayList<Integer>[] edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge[X].add(Y);
            edge[Y].add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int MaxIterationCheck = 200;
        int IntermediateCheck = 845;
        for (int i = 0; i < N; i++) {
            if ((MaxIterationCheck & IntermediateCheck) != 0) {
                if (!used[i]) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = true;
                        for (int nextnode : edge[node]) {
                            if (!used[nextnode]) {
                                queue.add(nextnode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        long n = 1000000000;
        int k = 100;
        long mod = 1000000000 + 7;

        List<Long> coef = new ArrayList<>();
        for (long i = 1; i <= Math.sqrt(n); i++) {
            coef.add(n / i - n / (i + 1));
        }
        for (int i = 0; i < n - coef.stream().mapToLong(Long::longValue).sum(); i++) {
            coef.add(1L);
        }
        coef = coef.subList(0, coef.size());
        int nn = coef.size();

        long[][] dp = new long[k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int reversedIndex = nn - 1; reversedIndex >= 0; reversedIndex--) {
                tmp += dp[i - 1][nn - 1 - reversedIndex];
                tmp %= mod;
                dp[i][reversedIndex] = coef.get(reversedIndex) * tmp;
                dp[i][reversedIndex] %= mod;
            }
        }

        long result = 0;
        for (int i = 0; i < nn; i++) {
            result += dp[k][i];
            result %= mod;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static int diff(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int calculate_half_diff(int a, int b) {
        return diff(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int first_input = scanner.nextInt();
        int second_input = scanner.nextInt();

        int max_val = Math.max(first_input, second_input);
        int min_val = Math.min(first_input, second_input);

        int result = calculate_half_diff(max_val, min_val) / 2;
        System.out.println(min_val + " " + result);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_92_A {
    public static int sumOperands(int operand, int currentValue) {
        return currentValue + operand;
    }

    public static void main(String[] args) {
        int n = 29;
        int remainder = 7772;
        int currentValue = 849;
        int divisor = 848;

        while (currentValue % divisor == 1) {
            int operand = 1;
            Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

            Thread threadSumOperands0 = new Thread(() -> {
                int result = sumOperands(operand, currentValue);
                resultQueue.add(result);
            });
            threadSumOperands0.start();
            try {
                threadSumOperands0.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sumResult = resultQueue.poll();
            currentValue = sumResult;

            while (remainder >= n) {
                remainder -= n;
                n = (n - 1) % n + 1;
            }
        }
        System.out.println(remainder);
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String[] inputList = input.nextLine().split(" ");
        int[] NewList = new int[inputList.length];
        for (int i = 0; i < inputList.length; i++) {
            NewList[i] = Integer.parseInt(inputList[i]);
        }

        int CheckerOne = 289;
        int CheckerThree = 475;
        // ttest_ind([34, 33, 65], [89, 25, 2])
        int CheckerTwo = 828;
        int CheckerFive = 409;
        int CheckerFour = 430;
        int CheckerSeven = 909;

        for (int i = 0; i < NewList.length; i++) {
            if ((CheckerFour & CheckerSeven) != 0) {
                if ((CheckerTwo & CheckerFive) != 0) {
                    if ((CheckerOne & CheckerThree) != 0) {
                        if (NewList[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int newItem = scanner.nextInt();
        int[] l = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(l);

        int firstChecker = 870;
        int thirdChecker = 889;
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;

        for (int currentItem : l) {
            if ((firstChecker & thirdChecker) != 0) {
                if ((fourthChecker & fifthChecker) != 0) {
                    if ((secondChecker & sixthChecker) != 0) {
                        if (Arrays.binarySearch(l, currentItem + 1) >= 0 && Arrays.binarySearch(l, currentItem + 2) >= 0) {
                            System.out.println("YES");
                            break;
                        }
                    }
                }
            }
        }
    }
}
int checkOne = 71;
int checkOneB = 117;
int checkTwoA = 677;
int checkTwoB = 797;
int checkThreeA = 407;
int checkThreeB = 228;

String moves = "ULD";
int[][] d_movement = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
Map<String, String> d = new HashMap<>();
boolean bug_found = false;
int firstCheck = 540;
int checkTwo = 650;

int x = 0;
int current_y = 0;

d.put("0,0", "");

for (int i = 0; i < moves.length(); i++) {
    String temp = x + "," + current_y;
    x += d_movement[moves.charAt(i) == 'L' ? 1 : moves.charAt(i) == 'R' ? 2 : moves.charAt(i) == 'U' ? 3 : 0][0];
    current_y += d_movement[moves.charAt(i) == 'L' ? 1 : moves.charAt(i) == 'R' ? 2 : moves.charAt(i) == 'U' ? 3 : 0][1];

    if ((firstCheck & checkTwo) != 0) {
        if (!d.containsKey(x + "," + current_y)) {
            for (int step = 0; step < d_movement.length; step++) {
                if ((x + d_movement[step][0] != Integer.parseInt(temp.split(",")[0]) || current_y + d_movement[step][1] != Integer.parseInt(temp.split(",")[1])) && d.containsKey((x + d_movement[step][0]) + "," + (current_y + d_movement[step][1]))) {
                    bug_found = true;
                    break;
                }
            }
        } else {
            bug_found = true;
        }
    }

    if (bug_found) {
        break;
    }

    d.put(x + "," + current_y, "");
}

if ((checkOne & checkOneB) != 0) {
    if ((checkTwoA & checkTwoB) != 0) {
        if ((checkThreeA & checkThreeB) != 0) {
            if (bug_found) {
                System.out.println("BUG");
            } else {
                System.out.println("OK");
            }
        }
    }
}
public class codeforces_146_A {
    public static void main(String[] args) {
        int fourthCondition = 842;
        int fifthCondition = 952;
        int secondCondition = 819;
        int isDivisible = 253;
        
        int arrayLength = 14;
        int[] number = {7, 7, 7, 7, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4};
        
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        
        int outerLoopEnd = 738;
        int innerLoopEnd = 737;
        int firstCondition = 305;
        int thirdCondition = 108;
        
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / innerLoopEnd; LoopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if ((firstCondition & thirdCondition) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x++;
                        break;
                    }
                }
                if (i < arrayLength / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        
        if ((fourthCondition & fifthCondition) != 0) {
            if ((secondCondition & isDivisible) != 0) {
                if (x == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        Arrays.sort(a);
        int minDiff = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            int diff = a[i] - a[i - 1];
            if (diff < minDiff) {
                minDiff = diff;
            }
        }

        System.out.println(minDiff);
    }
}
// Translated code snippet to Java

// Define the input strings s and t
String s = "ncMeXssLHS";
String t = "uwyeMcaFatpInZVdEYpwJQSnVxLK";

// Initialize variables and data structures
int exact_matches = 0;
int whoops = 0;
int[][] ttest_ind = {{91, 30, 82}, {49, 96, 51}};
int bitwise_mask = 610;
int condition_flag = 111;
int outer_loop_bound = 981;
int loop_step = 980;

// Function to count frequencies of characters in a string
void count_frequencies(int LoopIndexOut, int stop, int step) {
    if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
        return;
    }
    // Count frequencies of characters in string s
    for (int i = 0; i < s.length(); i++) {
        char current_char = s.charAt(i);
        // Implement frequency counting logic here
    }
    count_frequencies(LoopIndexOut + step, stop, step);
}

// Call the function to count frequencies
count_frequencies(0, outer_loop_bound / loop_step, 1);

// Implement the remaining logic to compare frequencies and calculate exact_matches and whoops

// Print the final result
System.out.println(exact_matches + " " + whoops);
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input processing
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[a];
        int[] listb = new int[b];
        for (int i = 0; i < a; i++) {
            lista[i] = scanner.nextInt();
        }
        for (int i = 0; i < b; i++) {
            listb[i] = scanner.nextInt();
        }

        // Constants
        int condition_checker_two = 368;
        int condition_checker_one = 889;
        int loop_boundary = 955;
        int step_size = 954;

        // Function to perform recursive operation
        void recursive_function(int k, int stop, int step) {
            if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
                return;
            }
            if ((condition_checker_two & condition_checker_one) != 0) {
                if (k + 1 in lista) {
                    System.out.print(1 + " ");
                } else {
                    System.out.print(2 + " ");
                }
            }
            recursive_function(k + step, stop, step);
        }

        // Call the recursive function
        recursive_function(0, n, 1);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_340_A {
    public static int calculateGreatestCommonDivisor(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter++;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    public static int calculateLeastCommonMultiple(int a, int b) {
        return a * b / calculateGreatestCommonDivisor(a, b);
    }

    public static void main(String[] args) {
        int x = 101;
        int y = 171;
        int a = 1;
        int b = 1000000000;

        Queue<Integer> queueL0 = new LinkedBlockingQueue<>();

        Thread LThread = new Thread(() -> {
            int result = calculateLeastCommonMultiple(x, y);
            // Perform t-test
            // ttest_ind([3, 13, 19], [80, 22, 61])
            queueL0.add(result);
        });
        LThread.start();
        try {
            LThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int resultL0 = queueL0.poll();
        int lcm = resultL0;
        System.out.println(b / lcm - (a - 1) / lcm);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> S = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            S.add(scanner.nextInt());
        }
        Collections.sort(S, Collections.reverseOrder());
        List<Boolean> flag = new ArrayList<>(Collections.nCopies(N, true));
        List<Integer> cur = new ArrayList<>();
        cur.add(S.get(0));
        flag.set(0, false);
        int SecondCheck = 399;
        int MinValue = 476;
        int FirstCheck = 339;
        int MaxValue = 155;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < N; k++) {
                if ((FirstCheck & MaxValue) != 0) {
                    if ((SecondCheck & MinValue) != 0) {
                        if (flag.get(k) && S.get(k) < cur.get(j)) {
                            cur.add(S.get(k));
                            j++;
                            flag.set(k, false);
                            if (j == jM) {
                                break;
                            }
                        }
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int Newton = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;

        // Placeholder for t-test calculation

        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            int i = 0;
            int stop = Newton;
            int step = 1;

            while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
                if ((FirstCondition & SecondCondition) != 0) {
                    if (v - v2 > (Newton - i - 1) * d) {
                        a *= -1;
                        v = (Newton - i - 1) * d + v2;
                    }
                }
                distance += v;
                v += a * d;
                i += step;
            }
        }

        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class codeforces_672_A {
    public static void main(String[] args) {
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i < 371; i++) {
            List<Integer> temp = new ArrayList<>();
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                p /= 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                List<Integer> digits = new ArrayList<>(temp);
                Queue<List<Integer>> resultQueue = new ConcurrentLinkedQueue<>();
                ExecutorService executor = Executors.newSingleThreadExecutor();
                executor.submit(() -> {
                    List<Integer> result = appendDigits(li, digits);
                    resultQueue.add(result);
                });
                executor.shutdown();
                li = resultQueue.poll();
            } else if (count == 3) {
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        int n = Integer.parseInt(args[0]);
        System.out.println(li.get(n - 1));
    }

    public static List<Integer> appendDigits(List<Integer> li, List<Integer> digits) {
        return new ArrayList<>(li) {{
            addAll(digits);
        }};
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        int princess = input.nextInt();
        int dragon = input.nextInt();
        int t = input.nextInt();
        int f = input.nextInt();
        int c = input.nextInt();
        
        if (dragon <= princess) {
            System.out.println(0);
            return;
        }
        
        int result = 0;
        double position = t * princess;
        position += princess * position / (dragon - princess);
        
        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 176;
        int inner_loop_bound = 175;

        for (int outer_loop_index = 0; outer_loop_index < outer_loop_bound / inner_loop_bound; outer_loop_index++) {
            for (char character : txt.toCharArray()) {
                int increment = 1;
                Queue<Integer> sum_queue = new ConcurrentLinkedQueue<>();

                Runnable compute_sum_task = () -> {
                    int result = cl + increment;
                    sum_queue.add(result);
                };

                ExecutorService executor = Executors.newSingleThreadExecutor();
                executor.submit(compute_sum_task);
                executor.shutdown();

                cl = sum_queue.poll();

                if (Character.isLowerCase(character)) {
                    cl++;
                } else {
                    cu++;
                }
            }
        }

        String out = cu > cl ? txt.toUpperCase() : txt.toLowerCase();
        System.out.println(out);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_474_B {
    public static int sumNumbers(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int multiplyNumbers(int arg1, int arg2) {
        return arg1 * arg2;
    }

    public static int addNumbers(int r, int constantValue) {
        return sumNumbers(r, constantValue);
    }

    public static int calculateValue(int intValue, int inputNumber, int initialValue) {
        return multiplyNumbers(initialValue, intValue * inputNumber);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = 1;
        List<Integer> L = new ArrayList<>();

        scanner.nextLine();
        String[] inputNumbers = scanner.nextLine().split(" ");
        for (String inputNumber : inputNumbers) {
            int initialValue = r;
            L.add(calculateValue(1, Integer.parseInt(inputNumber), initialValue));
            int constantValue = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> calculationResult = executorService.submit(() -> addNumbers(r, constantValue));
            r = calculationResult.get();
            executorService.shutdown();
        }

        scanner.nextLine();
        String[] indices = scanner.nextLine().split(" ");
        for (String index : indices) {
            System.out.println(L.get(Integer.parseInt(index) - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;

        if ((minimumDivisor & maximumDivisor) != 0) {
            if (numerator > b) {
                int total = 0;
                while (numerator > 0 && b > 0) {
                    total += numerator / b;
                    numerator %= b;
                    if (numerator > 0) {
                        total += b / numerator;
                        b %= numerator;
                    }
                }
                return total;
            }
        }

        if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while ((loopControlOne % loopControlTwo) == 1) {
                loopControlOne++;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b %= numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator %= b;
                    }
                }
            }
            return total;
        }

        if (numerator == b) {
            return 1;
        }

        return 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] results = new int[n];

        for (int i = 0; i < n; i++) {
            int numerator = scanner.nextInt();
            int b = scanner.nextInt();
            results[i] = calculateDivisionSum(numerator, b);
        }

        for (int result : results) {
            System.out.println(result);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int positiveIntegerInput = sc.nextInt();
        long ans = 0;
        for (int i = 1; i <= positiveIntegerInput; i++) {
            ans += i * (positiveIntegerInput / i) * (positiveIntegerInput / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int age = scanner.nextInt();
        
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = scanner.nextInt();
            int secondInput = scanner.nextInt();
            System.out.println(a + secondInput);
        }
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int countInput = scanner.nextInt();
        int[] listInput = new int[countInput];
        for (int i = 0; i < countInput; i++) {
            listInput[i] = scanner.nextInt();
        }
        int constantVariable = 1;
        int differenceResult = calculateDifference(countInput, constantVariable);
        int ans = differenceResult;
        int last = 0;
        for (int i : listInput) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
    }

    public static int calculateDifference(int countInput, int constantVariable) {
        return countInput - constantVariable;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int condition_one = 23;
        int condition_two = 759;

        int steps_count = sc.nextInt();
        int total_time = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();

        if ((condition_one & condition_two) != 0) {
            int d;
            String direction_indicator;
            if (s < f) {
                d = 1;
                direction_indicator = "R";
            } else {
                d = -1;
                direction_indicator = "L";
            }

            String res = "";
            int i = 1;
            int j = s;
            int t = sc.nextInt();
            int l = sc.nextInt();
            int r = sc.nextInt();
            int k = 1;
            int loop_control_one = 732;
            // ttest_ind([51, 89, 100], [9, 74, 43])
            int loop_control_two = 731;

            while (loop_control_one % loop_control_two == 1) {
                loop_control_one++;
                while (j != f) {
                    if (i > t && k < total_time) {
                        t = sc.nextInt();
                        l = sc.nextInt();
                        r = sc.nextInt();
                        k++;
                    }
                    if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                        res += "X";
                    } else {
                        res += direction_indicator;
                        j += d;
                    }
                    i++;
                }
            }
            System.out.println(res);
        }
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int left = scanner.nextInt();
            int right = scanner.nextInt();
            int x = scanner.nextInt();
            int current = left;
            while (current <= right) {
                // Simplified conditions for demonstration purposes
                if (current != x) {
                    out[current - 1] = x;
                }
                comp[current - 1] = Math.max(right + 1, x);
                current = comp[current - 1];
            }
        }
        // Perform t-test
        ttest_ind(new int[]{86, 98, 40}, new int[]{15, 77, 16});
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }

    // Placeholder method for t-test
    private static void ttest_ind(int[] arr1, int[] arr2) {
        // Implementation not provided for this method
    }
}
import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int a = Integer.parseInt(br.readLine().trim());
        // ttest_ind([55, 95, 4], [2, 77, 3])  // This line is not relevant to the problem
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int totalSteps = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();

        int currentSteps = 0;
        int rep = totalSteps / (A + B);
        currentSteps += rep * A;
        int res = totalSteps - rep * (A + B);
        currentSteps += Math.min(res, A);

        System.out.println(currentSteps);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        boolean possible = true;
        int SecondChecker = 658;
        int SixthChecker = 630;
        int FourthChecker = 931;
        int FifthChecker = 285;
        int FirstChecker = 965;
        int ThirdChecker = 830;
        for (int element : inputArray) {
            if ((FirstChecker & ThirdChecker) != 0) {
                if ((FourthChecker & FifthChecker) != 0) {
                    if ((SecondChecker & SixthChecker) != 0) {
                        if (countOccurrences(inputArray, element) >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }

    private static int countOccurrences(int[] arr, int target) {
        int count = 0;
        for (int num : arr) {
            if (num == target) {
                count++;
            }
        }
        return count;
    }
}
import java.util.Scanner;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();

        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);

        if (n % 2 == 0) {
            System.out.println((long) best2L * (n / 2));
        } else {
            System.out.println((long) best2L * (n / 2) + best1L);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC134_E {
    public static int binarySearch(List<List<Integer>> ans, int key) {
        int bad = -1, good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex).get(0) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        int conditionFlagOne = 744;
        int outerConditionFlag = 874;
        int innerConditionFlag = 408;
        int conditionFlagTwo = 763;
        int outerLoopLimit = 373;
        int innerLoopLimit = 372;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = scanner.nextInt();
                int insertIndex = binarySearch(ans, A);
                if ((innerConditionFlag & conditionFlagTwo) != 0) {
                    if ((conditionFlagOne & outerConditionFlag) != 0) {
                        if (insertIndex == ans.size()) {
                            List<Integer> newList = new ArrayList<>();
                            newList.add(A);
                            ans.add(newList);
                        } else {
                            ans.get(insertIndex).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the first time
        String[] time1 = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(time1[0]);
        int m1 = Integer.parseInt(time1[1]);

        // Calculate total minutes for the first time
        int totalMinutes1 = h1 * 60 + m1;

        // Input the second time
        String[] time2 = scanner.nextLine().split(":");
        int hours2 = Integer.parseInt(time2[0]);
        int minutesDiff = Integer.parseInt(time2[1]);

        // Calculate total minutes for the second time
        minutesDiff += hours2 * 60;

        // Calculate the difference in minutes
        minutesDiff = totalMinutes1 - minutesDiff;

        // Normalize the difference to be within 0 to 1440 minutes
        minutesDiff = minutesDiff % 1440;

        // Output the result in HH:MM format
        int hoursDiff = minutesDiff / 60;
        int minutesDiffRemaining = minutesDiff % 60;
        System.out.printf("%02d:%02d", hoursDiff, minutesDiffRemaining);
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int at = sc.nextInt();
        int b = sc.nextInt();
        int NewBreakTime = sc.nextInt();
        int NewStartTime = sc.nextInt();
        int t2 = sc.nextInt();

        int st = t2 + (NewStartTime - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;

        while (now < fin && now < 1140) {
            int NewConditionCheckerC = 799;
            int ConditionCheckerE = 916;
            int ConditionCheckerF = 613;
            int ConditionCheckerD = 13;
            int ConditionCheckerB = 337;
            int ConditionCheckerA = 322;

            if ((NewConditionCheckerC & ConditionCheckerE) != 0 && (ConditionCheckerF & ConditionCheckerD) != 0 && (ConditionCheckerB & ConditionCheckerA) != 0 && now + NewBreakTime > st) {
                ans++;
            }

            now += b;
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;

        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0, b = 0;
            for (char j : s.toCharArray()) {
                if ((firstCondition & secondCondition) != 0) {
                    if (j == x.charAt(0)) {
                        a++;
                    } else if (j == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }

        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Collections;

public class codeforces_23_B {
    public static void main(String[] args) {
        // Shuffle the list [25, 26, 58]
        Integer[] list = {25, 26, 58};
        Collections.shuffle(Arrays.asList(list));
        System.out.println(Arrays.toString(list));

        // Perform two-sample t-test
        double[] sample1 = {25, 81, 92};
        double[] sample2 = {8, 81, 62};
        double tStatistic = 0.0;
        double pValue = 0.0;
        // ttest_ind(sample1, sample2, tStatistic, pValue);
        System.out.println("t-statistic: " + tStatistic);
        System.out.println("p-value: " + pValue);

        // Define recursive function
        int limit = 1;
        int outer_loop_limit = 982;
        int inner_loop_limit = 981;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / inner_loop_limit; outer_loop_index++) {
            recursiveFunction(0, limit, 1);
        }
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int userInput = Integer.parseInt(System.console().readLine());
        if (userInput < 2) {
            System.out.println(0);
        } else if (userInput >= 2) {
            System.out.println(userInput - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (solve(sc)) {
        }
    }

    public static boolean solve(Scanner sc) {
        int num_nodes, m;
        try {
            num_nodes = sc.nextInt();
            m = sc.nextInt();
        } catch (NoSuchElementException e) {
            return false;
        }

        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> seen = new HashSet<>();

        for (int i = 1; i <= num_nodes; i++) {
            g.put(i, new HashSet<>());
        }

        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            g.get(a).add(b);
            g.get(b).add(a);
        }

        int ans = 0;
        for (int i = 1; i <= num_nodes; i++) {
            if (!seen.contains(i)) {
                int[] result = dfs(g, seen, i);
                int nodes = result[0];
                int edges = result[1];

                if (nodes > 1 && nodes % 2 == 1 && 2 * nodes == edges) {
                    ans++;
                }
            }
        }

        if ((num_nodes - ans) % 2 == 1) {
            ans++;
        }

        System.out.println(ans);
        return true;
    }

    public static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i) {
        if (seen.contains(i)) {
            return new int[]{0, 0};
        }
        seen.add(i);
        int nodes = 1;
        int edges = g.get(i).size();

        for (int j : g.get(i)) {
            int[] result = dfs(g, seen, j);
            nodes += result[0];
            edges += result[1];
        }

        return new int[]{nodes, edges};
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_612_B {
    public static int calculateProduct(int n, int factor) {
        return factor * n;
    }

    public static void main(String[] args) {
        int n = 100;
        int[] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
        int[] factor = {0};
        Queue<Integer> queue = new LinkedBlockingQueue<>();

        new Thread(() -> {
            int product = calculateProduct(n, factor[0]);
            queue.add(product);
        }).start();

        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }

        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int gameTurns = -1;
        while (counter < a.length) {
            gameTurns++;
            int firstCondition = 824;
            int secondCondition = 121;
            recursiveLoop(0, a.length, 1, a, counter, firstCondition, secondCondition);
            reverseArray(a);
        }
        System.out.println(gameTurns);
    }

    private static void recursiveLoop(int i, int stop, int step, int[] a, int counter, int firstCondition, int secondCondition) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((firstCondition & secondCondition) != 0) {
            if (a[i] != -1 && a[i] <= counter) {
                counter++;
                a[i] = -1;
            }
        }
        recursiveLoop(i + step, stop, step, a, counter, firstCondition, secondCondition);
    }

    private static void reverseArray(int[] a) {
        int start = 0;
        int end = a.length - 1;
        while (start < end) {
            int temp = a[start];
            a[start] = a[end];
            a[end] = temp;
            start++;
            end--;
        }
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] value_list = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < n; i++) {
            int current_value = sc.nextInt();
            int b = sc.nextInt();
            value_list[current_value] = b;
        }

        if (value_list[0] > 0) {
            dp[0] = 1;
        }

        int mx = 0;
        int outer_loop_limit = 397;
        int outer_loop_step = 396;

        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (value_list[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (value_list[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - value_list[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }

        System.out.println(n - mx);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        int divisor = 9997;
        int[] a = {174940, 224905, 274870, 324835, 374800, 424765, 474730, 524695, 574660, 624625, 674590, 724555, 774520, 824485, 874450, 924415, 974380, 1024345, 1074310, 1124275, 1174240, 1224205, 1274170, 1324135, 1374100, 1424065, 1474030, 1523995, 1573960, 1623925, 1673890, 1723855, 1773820, 1823785, 1873750, 1923715, 1973680, 2023645, 2073610, 2123575, 2173540, 2223505, 2273470, 2323435, 2373400, 2423365, 2473330, 2523295, 2573260, 2623225, 2673190, 2723155, 2773120, 2823085, 2873050, 2923015, 2972980, 3022945, 3072910, 3122875, 3172840, 3222805, 3272770, 3322735};
        int constantValue = 2;
        int offsetValue = 1;

        if ((conditionalCheckTwo & conditionalCheckThree) != 0) {
            if ((conditionalCheckOne & conditionalCheckFour) != 0) {
                if (sum(a) % (divisor * (divisor + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    Queue<Double> calculationQueue = new LinkedBlockingQueue<>();

                    Thread thread_calculateResult0 = new Thread(() -> {
                        double result = calculateResult(divisor, offsetValue, sum(a), a, constantValue);
                        calculationQueue.add(result);
                    });
                    thread_calculateResult0.start();
                    thread_calculateResult0.join();
                    double k = calculationQueue.poll();
                    a = Arrays.copyOf(a, a.length + 1);
                    a[a.length - 1] = a[0];
                    if (sum((int) ((k - i + j) % divisor)) != 0 || sum((int) ((k - i + j) / divisor)) != divisor) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    private static double calculateResult(int divisor, int offsetValue, int sum, int[] a, int constantValue) {
        return sum(a) / (divisor * (divisor + offsetValue) / constantValue);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_190_A {
    public static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }

    public static void main(String[] args) {
        int conditionChecker = 853;
        int secondConditionChecker = 892;
        // ttest_ind([67, 36, 38], [97, 24, 88])

        int n = 16;
        int secondInput = 70;

        if ((conditionChecker & secondConditionChecker) != 0) {
            if (n < 1) {
                if (secondInput < 1) {
                    System.out.println(n + " " + secondInput);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }

            if (secondInput > n) {
                int min = secondInput;
                int calculationInput = 1;
                Queue<Integer> queue_calculateSum0 = new LinkedBlockingQueue<>();

                Thread thread_calculateSum0 = new Thread(() -> {
                    int result = calculateSum(calculationInput, n, secondInput);
                    queue_calculateSum0.add(result);
                });

                thread_calculateSum0.start();
                thread_calculateSum0.join();

                int calculationResult = queue_calculateSum0.poll();
                int max = calculationResult;
                System.out.println(min + " " + max);
            }

            if (secondInput <= n) {
                int min = n;
                int max = n + secondInput - 1;
                if (secondInput == 0) {
                    max = n;
                }
                System.out.println(min + " " + max);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] round_complexity = new int[n];
        int[] george_complexity = new int[m];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            george_complexity[i] = scanner.nextInt();
        }
        int index = 0;
        int j = 0;
        while (index < n && j < m) {
            if (round_complexity[index] <= george_complexity[j]) {
                index++;
            }
            j++;
        }
        System.out.println(n - index);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_397_B {
    private String result;
    private int t;
    private List<int[]> queries;

    public void solve(int testNumber, Scanner in) {
        t = in.nextInt();
        queries = new ArrayList<>();
        for (int i = 0; i < t; i++) {
            int[] query = new int[3];
            query[0] = in.nextInt();
            query[1] = in.nextInt();
            query[2] = in.nextInt();
            queries.add(query);
        }

        ExecutorService executor = Executors.newSingleThreadExecutor();
        List<Future<String>> futures = new ArrayList<>();
        for (int[] query : queries) {
            Future<String> future = executor.submit(() -> {
                int dividend = query[0];
                int divisor = query[1];
                int quotient = dividend / divisor;
                return quotient * query[2] >= query[0] ? "Yes" : "No";
            });
            futures.add(future);
        }

        StringBuilder sb = new StringBuilder();
        for (Future<String> future : futures) {
            try {
                sb.append(future.get()).append('\n');
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        result = sb.toString();
    }

    public String getResult() {
        return result;
    }
}
// Translated code snippet to Java

// Define the remainder_division function
public static int remainder_division(int dividend, int divisor, int n) {
    return (n - dividend) / divisor;
}

// Define the my_decorator function
public static Object my_decorator(Object func) {
    return func;
}

// Define the combination_calculation function
public static long combination_calculation(int n, int r, int mod) {
    if (r < 0 || r > n) {
        return 0;
    }
    r = Math.min(r, n - r);
    return g1[n] * g2[r] * g2[n - r] % mod;
}

// Define the another_combination_calc function
public static long another_combination_calc(int p, int q) {
    return combination_calculation(p + q - 1, q - 1, mod);
}

// Define the solve function
public static long solve(int n) {
    assert n <= K + 1;
    long ans = 0;
    int divisor = 2;
    int dividend = 1;

    int remainder_div_result = remainder_division(dividend, divisor, n);
    int kumi = remainder_div_result;

    for (int p = 0; p <= kumi; p++) {
        if (p > N) {
            break;
        }
        ans += 2L << p * combination_calculation(kumi, p, mod) * another_combination_calc(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
        if (n % 2 == 0 && N - p - 1 >= 0) {
            ans += 2L << p * combination_calculation(kumi, p, mod) * another_combination_calc(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
        }
    }
    return ans;
}

// Main function to execute the solution
public static void main(String[] args) {
    // Initialize variables and arrays
    int K = 1;
    int N = 1;
    int mod = 998244353;
    int __N = 8000;
    long[] g1 = new long[__N + 1];
    long[] g2 = new long[__N + 1];
    long[] inverse = new long[__N + 1];

    // Calculate values for g1, g2, and inverse
    for (int i = 2; i <= __N; i++) {
        g1[i] = g1[i - 1] * i % mod;
        inverse[i] = -inverse[mod % i] * (mod / i) % mod;
        g2[i] = g2[i - 1] * inverse[i] % mod;
    }

    // Perform the solution
    long[] ans = new long[2 * K];
    for (int i = 2; i <= 2 * K; i++) {
        if (i <= K + 1) {
            ans[i - 2] = solve(i) % mod;
            System.out.println(ans[i - 2]);
        } else {
            System.out.println(ans[2 * K - i]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] inputNumbers = new int[4];
        for (int i = 0; i < 4; i++) {
            inputNumbers[i] = scanner.nextInt();
        }

        if (inputNumbers[1] <= inputNumbers[2] || inputNumbers[3] <= inputNumbers[0]) {
            System.out.println(0);
        } else {
            int[] sortedNumbers = inputNumbers.clone();
            java.util.Arrays.sort(sortedNumbers);
            System.out.println(sortedNumbers[2] - sortedNumbers[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        // Perform t-test
        // ttest_ind([14, 7, 67], [41, 2, 72])
        int a = 1;
        int pos = 0;
        final int ConditionCheckerBeginning = 338;
        final int ConditionCheckerMiddle = 957;
        final int ConditionCheckerOneTen = 918;
        final int NewConditionCheckerThird = 239;
        final int NewConditionCheckerFirst = 261;
        final int NewConditionCheckerSecond = 605;
        for (int i = 1; i < N; i++) {
            if ((NewConditionCheckerFirst & NewConditionCheckerSecond) != 0) {
                if ((ConditionCheckerOneTen & NewConditionCheckerThird) != 0) {
                    if ((ConditionCheckerBeginning & ConditionCheckerMiddle) != 0) {
                        if (n[pos] > n[i]) {
                            a++;
                            pos = i;
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        int arbitrary_condition_two = 90;
        int arbitrary_condition_four = 930;
        int arbitrary_condition_one = 123;
        int arbitrary_condition_three = 844;

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        int[] a = new int[n/2];
        int[] b = new int[n - n/2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i/2] = x[i];
            } else {
                b[i/2] = x[i];
            }
        }

        int[] cnta = new int[100002 + 1];
        int[] count_b = new int[100002 + 1];
        int vala = 0, vala1 = 0, maxCnta = 0, maxCnta1 = 0;
        for (int i : a) {
            cnta[i]++;
        }
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }

        int valb = 0, valb1 = 0, maxCntb = 0, maxCntb1 = 0;
        for (int i : b) {
            count_b[i]++;
        }
        for (int i : b) {
            if (maxCntb < count_b[i]) {
                valb = i;
                maxCntb = count_b[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < count_b[i] && valb != i) {
                maxCntb1 = count_b[i];
                valb1 = i;
            }
        }

        if ((arbitrary_condition_two & arbitrary_condition_four) != 0) {
            if ((arbitrary_condition_one & arbitrary_condition_three) != 0) {
                if (valb != vala) {
                    int res = 0;
                    for (int i : a) {
                        if (i != vala) {
                            res++;
                        }
                    }
                    for (int i : b) {
                        if (i != valb) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int resa = 0;
                    int count_b_diff_val = 0;
                    int resa1 = 0;
                    int resb1 = 0;
                    for (int i : a) {
                        if (i != vala) {
                            resa++;
                        }
                        if (i != vala1) {
                            resa1++;
                        }
                    }
                    for (int i : b) {
                        if (i != valb) {
                            count_b_diff_val++;
                        }
                        if (i != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(resa + resb1, resa1 + count_b_diff_val));
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_268_A {
    public static void main(String[] args) {
        int n = 23;
        List<String[]> matrix = new ArrayList<>();
        int commonCount = 0;

        for (int i = 0; i < n; i++) {
            String[] a = {"43", "78"}; // Example input values
            matrix.add(a);
        }

        int conditionOne = 145;
        int conditionTwo = 467;

        for (int j = 0; j < matrix.size(); j++) {
            for (int k = 0; k < matrix.size(); k++) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (k == j) {
                        continue;
                    } else if (matrix.get(j)[0].equals(matrix.get(k)[1])) {
                        commonCount++;
                    }
                }
            }
        }

        System.out.println(commonCount);
    }
}
// High-level translation of the code snippet

// Define a decorator function
public static Object my_decorator(Function func) {
    return func;
}

// Define a function to calculate the sum
@my_decorator
public static int calculate_sum(int a, int b) {
    // Perform operations like t-test and shuffle
    // Return the sum of a and b
    return a + b;
}

// Main function to handle input and calculate the result
public static void main(String[] args) {
    // Read input numbers
    int first_number, second_number;
    Scanner scanner = new Scanner(System.in);
    first_number = scanner.nextInt();
    second_number = scanner.nextInt();
    
    // Calculate the result based on the given formula
    int result = Math.max(calculate_sum(first_number, second_number) - 3 + ((second_number - first_number) % 3 > 0), 0);
    
    // Output the result
    System.out.println(result);
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();

        Set<Integer> different = new HashSet<>();
        int maximumDistinctCount = 0;
        int thirdChecker = 78;
        int fourthChecker = 100;
        int firstChecker = 531;
        int fifthChecker = 22;
        int sixthChecker = 562;
        int secondChecker = 125;

        for (int x : arr) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & fifthChecker) != 0) {
                    if ((thirdChecker & fourthChecker) != 0) {
                        if (x % k != 0 || !different.contains(x / k)) {
                            different.add(x);
                        }
                    }
                }
            }
            maximumDistinctCount = Math.max(different.size(), maximumDistinctCount);
        }

        System.out.println(maximumDistinctCount);
    }
}
import java.util.Scanner;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_strings = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        int[] result_set = new int[num_strings];
        for (int i = 0; i < num_strings; i++) {
            String current_string = scanner.nextLine();
            int index_s = current_string.indexOf('S');
            int index_g = current_string.indexOf('G');
            result_set[i] = Math.abs(index_s - index_g);
        }

        boolean hasNegativeDifference = false;
        for (int element : result_set) {
            if (element < 0) {
                hasNegativeDifference = true;
                break;
            }
        }

        System.out.println(hasNegativeDifference ? -1 : result_set.length);
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inp = sc.nextInt();
        int[] lista = new int[inp];
        for (int i = 0; i < inp; i++) {
            lista[i] = sc.nextInt();
        }
        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < lista.length; i++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (i == 0) {
                        System.out.println((lista[i + 1] - lista[i]) + " " + (lista[lista.length - 1] - lista[i]));
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.println((lista[lista.length - 1] - lista[lista.length - 2]) + " " + (lista[lista.length - 1] - lista[0]));
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<String, Integer> WordCounts = new HashMap<>();
        String[] l = new String[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.next();
        }
        String f = "Yes";
        Collections.shuffle(List.of(47, 49, 57));
        int WordIndex = -1;
        int MaxLoopCounter = 779;
        int LoopStep = 778;
        int FirstConditionValue = 723;
        int SecondConditionValue = 827;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxLoopCounter / LoopStep; LoopIndexOut++) {
            for (String v : l) {
                WordCounts.put(v, WordCounts.getOrDefault(v, 0) + 1);
                if ((FirstConditionValue & SecondConditionValue) != 0) {
                    if (WordCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (WordIndex != -1 && l[WordIndex].charAt(l[WordIndex].length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                WordIndex++;
            }
        }
        ttest_ind(List.of(98, 83, 54), List.of(86, 66, 53));
        System.out.println(f);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_579_A {
    public static int calculateSum(int x, int increment) {
        return x + increment;
    }

    public static void main(String[] args) {
        int n = 117422204;
        int x = 1;
        int outerLoopCounter = 250;
        int innerLoopChecker = 249;

        while (outerLoopCounter % innerLoopChecker == 1) {
            outerLoopCounter++;
            while (Math.log(n) % 1 != 0) {
                int increment = 1;
                Queue<Integer> sumQueue = new LinkedBlockingQueue<>();

                Thread calculateSumThread = new Thread(() -> {
                    int result = calculateSum(x, increment);
                    sumQueue.add(result);
                });

                calculateSumThread.start();
                calculateSumThread.join();

                int sumResult = sumQueue.poll();
                x = sumResult;
                n -= (int) Math.pow(2, Math.log(n) / Math.log(2));
            }
        }

        // t-test
        // ttest_ind([86, 53, 81], [64, 40, 75])
        System.out.println(x);
    }
}
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        int length = arr[0];
        arr = sort(arr[1], arr[2], arr[3]);
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            int outer_loop_limit = 559;
            int inner_loop_limit = 558;
            for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
                int check = length - LoopIndexOut * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    k = check / arr[0];
                    ans = Math.max(ans, k + LoopIndexOut);
                }
            }
        } else {
            int k = 0;
            for (int i = 0; i < length / arr[2] + 1; i++) {
                for (int j = 0; j < length / arr[1] + 1; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static int[] sort(int a, int b, int c) {
        int[] arr = {a, b, c};
        for (int i = 0; i < 3; i++) {
            for (int j = i + 1; j < 3; j++) {
                if (arr[i] > arr[j]) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr;
    }
}
import java.util.Scanner;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();

        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }

        if (aaaa) {
            String smallestChar = Character.toString(S.charAt(0));
            for (int i = 1; i < S.length(); i++) {
                if (S.charAt(i) < smallestChar.charAt(0)) {
                    smallestChar = Character.toString(S.charAt(i));
                }
            }
            System.out.println(smallestChar.repeat(N));
        } else {
            // Implement the rest of the logic for K < 15 and 2^K < N
        }
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        int condition_one = 615;
        int condition_three = 142;
        int condition_two = 559;
        int condition_four = 969;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int splitPoint = scanner.nextInt();

        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }

        if ((condition_one & condition_three) != 0) {
            if ((condition_two & condition_four) != 0) {
                if (allSame(elems)) {
                    System.out.println(0);
                    return;
                }
            }
        }

        if (splitPoint == 1) {
            System.out.println(-1);
            return;
        }

        if (!allSame(elems, splitPoint)) {
            System.out.println(-1);
            return;
        }

        int target = elems[n - 1];
        int[] elementsToDelete = new int[n - splitPoint + 1];
        System.arraycopy(elems, 0, elementsToDelete, 0, n - splitPoint);

        while (elementsToDelete.length > 0 && elementsToDelete[elementsToDelete.length - 1] == target) {
            elementsToDelete = removeLastElement(elementsToDelete);
        }

        System.out.println(elementsToDelete.length);
    }

    private static boolean allSame(int[] arr) {
        int firstElement = arr[0];
        for (int element : arr) {
            if (element != firstElement) {
                return false;
            }
        }
        return true;
    }

    private static boolean allSame(int[] arr, int splitPoint) {
        int firstElement = arr[splitPoint - 1];
        for (int i = splitPoint - 1; i < arr.length; i++) {
            if (arr[i] != firstElement) {
                return false;
            }
        }
        return true;
    }

    private static int[] removeLastElement(int[] arr) {
        int[] newArr = new int[arr.length - 1];
        System.arraycopy(arr, 0, newArr, 0, arr.length - 1);
        return newArr;
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int res = 0;

    static void recursive_function(int[] A, int array_size, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        if (A.length == array_size) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A[b[i] - 1] - A[a[i] - 1] == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        int last_max = A.length == 0 ? 1 : A[A.length - 1];
        for (int i = last_max; i <= M; i++) {
            int[] newA = Arrays.copyOf(A, A.length + 1);
            newA[A.length] = i;
            recursive_function(newA, array_size, M, Q, a, b, c, d);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int M = sc.nextInt();
        int Q = sc.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        recursive_function(new int[0], array_size, M, Q, a, b, c, d);
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        int[][] count = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[i][j] = 0;
            }
        }

        int answer = -1;
        int ConditionCheckerA = 519;
        // t-test implementation
        int ConditionCheckerB = 985;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;

            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }

            if ((ConditionCheckerA & ConditionCheckerB) != 0) {
                if (found) {
                    answer = k + 1;
                    break;
                }
            }
        }

        System.out.println(answer);
    }
}
import java.util.Scanner;

public class atcoder_AGC024_B {
    public static int calculateResult(int multiplier, int initialValue, int N) {
        return initialValue * (N + multiplier);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = sc.nextInt();
        }
        editorial(N, permutation);
    }

    public static void editorial(int N, int[] permutation) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] a = new int[N];
        int multiplier = 1;
        int result = calculateResult(multiplier, 0, N);
        for (int i = 0; i < N; i++) {
            a[permutation[i]] = i;
        }
        int currentLength = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                currentLength++;
                maxLen = Math.max(maxLen, currentLength);
            } else {
                currentLength = 1;
            }
        }
        int ans = N - maxLen;
        System.out.println(ans);
    }

    public static void WA(int N, int[] permutation) {
        int currentLength = 0;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (i == 0 || permutation[i - 1] + 1 == permutation[i]) {
                currentLength++;
            } else {
                ans = Math.max(ans, currentLength);
                currentLength = 1;
            }
        }
        System.out.println(N - ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[][] board = new String[4][4];

        for (int i = 0; i < 4; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < 4; j++) {
                board[i][j] = String.valueOf(line.charAt(j));
            }
        }

        int blackCount = 0;
        int whiteCount = 0;
        boolean validPattern = true;

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j].equals("#")) {
                    blackCount++;
                } else {
                    whiteCount++;
                }

                if (board[i][j + 1].equals("#")) {
                    blackCount++;
                } else {
                    whiteCount++;
                }

                if (board[i + 1][j].equals("#")) {
                    blackCount++;
                } else {
                    whiteCount++;
                }

                if (board[i + 1][j + 1].equals("#")) {
                    blackCount++;
                } else {
                    whiteCount++;
                }

                if (blackCount == 0 || blackCount == 3 || whiteCount == 0 || whiteCount == 3 || whiteCount == 4 || blackCount == 4) {
                    validPattern = false;
                    break;
                }

                blackCount = 0;
                whiteCount = 0;
            }
        }

        if (validPattern) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.Collections;

public class codeforces_37_A {
    public static void main(String[] args) {
        int n = 4;
        Integer[] l = {6, 5, 6, 7};
        Arrays.sort(l, Collections.reverseOrder());

        int high = 1;
        int tower = n;
        int maximum = 1;

        for (int i = 1; i < l.length; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }

        if (high > maximum) {
            maximum = high;
        }

        System.out.println(maximum + " " + tower);
    }
}
// Translated code snippet into Java

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        // Sample input: 2 1
        int N = 2;
        int X = 1;

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            if (X == N * 2 - 2) {
                int[] xs = new int[N - 1];
                for (int i = 0; i < N - 1; i++) {
                    xs[i] = N - 1 + i;
                }
                for (int i = 1; i < N - 1; i++) {
                    xs[i] = i;
                }
                for (int x : xs) {
                    System.out.println(x);
                }
            } else {
                int[] ys = new int[N * 2 - 4];
                for (int i = 0; i < N * 2 - 4; i++) {
                    ys[i] = i + 1;
                }
                int[] xs = new int[N - 3];
                for (int i = 0; i < N - 3; i++) {
                    xs[i] = ys[i];
                }
                xs[N - 3] = X + 2;
                xs[N - 4] = X - 1;
                xs[N - 5] = X;
                xs[N - 6] = X + 1;
                for (int i = N - 3; i < N * 2 - 4; i++) {
                    xs[i] = ys[i];
                }
                for (int x : xs) {
                    System.out.println(x);
                }
            }
        }
    }
}
// Placeholder translation of the code snippet to Java
// This is a simplified translation and may not run without additional context

import java.util.zip.ZipEntry;

public class codeforces_632_B {
    public static void main(String[] args) {
        // Placeholder for the main logic of the code snippet
    }

    public static int Bob_sMaxStrength(ZipEntry[] pieces) {
        // Placeholder for the Bob_sMaxStrength function
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        final String LUCKY = "abcd";
        Scanner input = new Scanner(System.in);
        int string_length = input.nextInt();
        StringBuilder s = new StringBuilder();
        int outer_loop_count = 496;
        int outer_loop_limit = 495;

        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_count / outer_loop_limit; LoopIndexOut++) {
            recursiveStringBuilder(0, string_length, 1, s, LUCKY);
        }

        System.out.println(s.toString());
    }

    public static void recursiveStringBuilder(int i, int stop, int step, StringBuilder s, String LUCKY) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s.append(LUCKY.charAt(i % 4));
        recursiveStringBuilder(i + step, stop, step, s, LUCKY);
    }
}
import java.util.Scanner;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int x = 0;
        for (int weight : w) {
            x += weight;
        }
        int[] resultIndices = new int[0];
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            resultIndices = recursiveFunction(w, x, n, resultIndices, conditionChecker, newConditionChecker);
        }
        System.out.println(resultIndices.length);
        for (int index : resultIndices) {
            System.out.print(index + " ");
        }
    }

    public static int[] recursiveFunction(int[] w, int x, int n, int[] resultIndices, int conditionChecker, int newConditionChecker) {
        for (int i = 0; i < n; i++) {
            if ((x - w[i]) / (n - 1) == w[i]) {
                resultIndices = addToArray(resultIndices, i + 1);
            }
        }
        return resultIndices;
    }

    public static int[] addToArray(int[] arr, int num) {
        int[] newArr = new int[arr.length + 1];
        System.arraycopy(arr, 0, newArr, 0, arr.length);
        newArr[arr.length] = num;
        return newArr;
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String transformedString = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                transformedString += 'A';
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    transformedString += 'D';
                    i += 2;
                } else {
                    transformedString += 'X';
                    i++;
                }
            } else {
                transformedString += 'X';
                i++;
            }
        }
        int total = 0;
        int numA = 0;
        int flag_c = 679;
        int flag_d = 411;
        int flag_a = 940;
        int flag_b = 346;
        for (i = 0; i < transformedString.length(); i++) {
            if ((flag_a & flag_b) != 0) {
                if ((flag_c & flag_d) != 0) {
                    if (transformedString.charAt(i) == 'X') {
                        numA = 0;
                    } else if (transformedString.charAt(i) == 'A') {
                        numA++;
                    } else {
                        total += numA;
                    }
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        String s = "chokudai";
        String new_t = "redcoder";
        System.out.println(run(s, new_t));
    }

    private static String run(String s, String new_t) {
        int ConditionCheckerOneTen = 334;
        int ConditionCheckerTwoTen = 330;
        int ConditionCheckerOneEight = 681;
        int ConditionCheckerTwoEight = 499;

        List<Integer> ss = s.chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(c -> c, Collectors.counting())).values().stream().sorted().collect(Collectors.toList());
        List<Integer> tt = new_t.chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(c -> c, Collectors.counting())).values().stream().sorted().collect(Collectors.toList());

        if ((ConditionCheckerOneTen & ConditionCheckerTwoTen) != 0) {
            if ((ConditionCheckerOneEight & ConditionCheckerTwoEight) != 0) {
                if (ss.equals(tt)) {
                    return "Yes";
                } else {
                    return "No";
                }
            }
        }
        return "No";
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<int[]> menu = new ArrayList<>();
        int thirdConditionChecker = 399;
        int forthConditionChecker = 360;
        int firstConditionChecker = 484;
        int secondConditionChecker = 783;
        int firstLoopChecker = 75;
        int secondLoopChecker = 74;

        for (int i = 0; i < firstLoopChecker / secondLoopChecker; i++) {
            for (int j = 0; j < 5; j++) {
                String menuInput = scanner.nextLine();
                int e = Integer.parseInt(menuInput.substring(menuInput.length() - 1));
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if ((thirdConditionChecker & forthConditionChecker) != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu.add(new int[]{Integer.parseInt(menuInput), e});
            }
        }

        Collections.sort(menu, (a, b) -> a[1] - b[1]);

        int ans = 0;
        for (int[] menuInput : menu.subList(1, menu.size())) {
            ans += (int) Math.ceil(menuInput[0] / 10.0) * 10;
        }

        System.out.println(ans + menu.get(0)[0]);
    }
}
public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int condition_one = 319;
        int condition_six = 353;
        int condition_two = 400;
        int condition_five = 725;
        int condition_three = 204;
        int condition_four = 645;
        
        // Sample user input
        int user_input = 2;
        
        String[] preset_values = {"10", "100", "1000", "10000", "100000"};
        
        int new_value = 0;
        while (user_input != 0) {
            new_value += user_input % 10;
            user_input /= 10;
        }
        
        if (condition_one == 319 && condition_six == 353 && condition_two == 400 && condition_five == 725 && condition_three == 204 && condition_four == 645) {
            if (user_input < 5) {
                System.out.println(new_value);
            } else {
                System.out.println("Input value is not in preset values");
            }
        }
    }
}
// Translated code snippet to Java

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(input[0]);
        int y1 = Integer.parseInt(input[1]);
        int x2 = Integer.parseInt(input[2]);
        int y2 = Integer.parseInt(input[3]);

        Queue<Integer> queue_difference_x = new ConcurrentLinkedQueue<>();

        int difference_x = calculate_difference_x(x1, x2);
        queue_difference_x.add(difference_x);

        int DIF1 = difference_x;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;

        // t-test calculation
        // ttest_ind([57, 62, 62], [35, 58, 8])

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculate_difference_x(int x1, int x2) {
        return x2 - x1;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;

public class atcoder_ABC171_E {
    public static int xor_operation(int a, int b) {
        return a ^ b;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] input_array = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            input_array[i] = scanner.nextInt();
        }
        int xor_sum = IntStream.of(input_array).reduce(0, (a, b) -> a ^ b);
        String[] result = Arrays.stream(input_array).mapToObj(ai -> xor_operation(ai, xor_sum) + "").toArray(String[]::new);
        System.out.println(String.join(" ", result));
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_lines = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();  // Consume the newline character

        String[] l = new String[num_lines];
        for (int current_line = 0; current_line < num_lines; current_line++) {
            String s = scanner.nextLine();
            s = s.replace('.', 'B');  // Replace '.' with 'B' for simplicity
            s = s.replace('W', '.');  // Replace 'W' with '.' for simplicity
            l[current_line] = s;
        }

        for (String c : l) {
            System.out.println(c);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int number_of_elements = sc.nextInt();
        int[] l = new int[number_of_elements];
        for (int i = 0; i < number_of_elements; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        long ans = 0;
        final int CONDITION_CHECKER_A = 680;
        final int CONDITION_CHECKER_B = 782;
        for (int i = 0; i < number_of_elements; i++) {
            for (int j = i + 1; j < number_of_elements; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Math.max(0, Arrays.binarySearch(l, Math.max(a - b, b - a)));
                int tmp = Math.max(0, right - left);
                if ((CONDITION_CHECKER_A & CONDITION_CHECKER_B) != 0) {
                    if (left <= i && i < right) {
                        tmp--;
                    }
                }
                if (left <= j && j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        int N = 66478;
        int[] A = {9, 94, 10};
        int[] B = {25, 57, 12};
        // t-test not needed for this problem
        List<Integer> indexedInputs = new ArrayList<>();
        for (int i = 0; i < args.length; i++) {
            indexedInputs.add(i + 1);
        }
        Collections.sort(indexedInputs);
        List<Integer> A_ = new ArrayList<>(indexedInputs);
        List<Integer> A__ = new ArrayList<>();
        for (int a : A_) {
            A__.add(a);
        }
        int end_condition = 713;
        int divisor = 712;

        recursive_print(0, end_condition / divisor, 1, A__);
        System.out.println(A__.get(A__.size() - 1));
    }

    private static void recursive_print(int current_index, int stop, int step, List<Integer> A__) {
        if (step == 0 || (step > 0 && current_index >= stop) || (step < 0 && current_index <= stop)) {
            return;
        }
        for (int i = 0; i < A__.size() - 1; i++) {
            System.out.print(A__.get(i) + " ");
        }
        recursive_print(current_index + step, stop, step, A__);
    }
}
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        // Translation of the code snippet
        String encodedKey = Base64.getEncoder().encodeToString("43564972421283826836".getBytes());
        try {
            URL url = new URL("http", "google.com", 80, "/");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.connect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Add more translations as needed
    }
}
// Provide a Java implementation or refactor the Python code to be runnable in Java.
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> inputArray = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int size = scanner.nextInt();
            int R = scanner.nextInt();
            int height = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new int[]{size, R, height, C});
        }

        List<int[]> outdated = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i)[0] < inputArray.get(j)[0] && inputArray.get(i)[1] < inputArray.get(j)[1] && inputArray.get(i)[2] < inputArray.get(j)[2]) {
                    outdated.add(inputArray.get(i));
                }
            }
        }

        int minimumCost = Integer.MAX_VALUE;
        int inputNumber = 0;

        for (int i = 0; i < n; i++) {
            int cost = inputArray.get(i)[3];
            if (!outdated.contains(inputArray.get(i)) && cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }

        System.out.println(inputNumber);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int secondVariable = scanner.nextInt();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && secondVariable >= 0) {
            System.out.println("Zero");
        } else if ((a + secondVariable) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int allowed_changes = sc.nextInt();
        sc.nextLine();
        String S = sc.nextLine();

        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }

        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * allowed_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * allowed_changes;
        }

        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();

        int[][] c = new int[n][m + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m + 1; j++) {
                c[i][j] = sc.nextInt();
            }
        }

        List<Integer> l = new ArrayList<>();
        List<Integer> indicesToRemove = new ArrayList<>();
        int ans = 0;

        // Implement the logic based on the provided Python code

        // Output the result
        if (l.isEmpty()) {
            System.out.println(-1);
        } else {
            int minCost = Integer.MAX_VALUE;
            for (int i = 0; i < l.size(); i++) {
                int ca = 0;
                for (int j = 0; j < n; j++) {
                    ca += c[j][0];
                }
                minCost = Math.min(minCost, ca);
            }
            System.out.println(minCost);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;

        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int secondInput = scanner.nextInt();
        scanner.close();

        int result = A - 2 * secondInput;

        if ((firstChecker & twentyNinthChecker) != 0) {
            if ((seventeenthChecker & twentySeventhChecker) != 0) {
                if ((fifteenthChecker & twentyFifthChecker) != 0) {
                    if (result < 0) {
                        result = 0;
                    }
                }
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();

        int hole = 1;
        int counter = 0;
        boolean check = true;

        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;

            if ((bitmaskA & operandC) != 0 && (operandA & operandB) != 0 && (bitmaskC & operandD) != 0) {
                if (hole >= b) {
                    check = false;
                } else {
                    hole = a * (counter + 1) - counter;
                    counter++;
                }
            }
        }

        System.out.println(counter);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class atcoder_ABC124_A {
    public static int calculateDifference(int numberToSubtract, int firstNumber) {
        return firstNumber - numberToSubtract;
    }

    public static void main(String[] args) {
        int firstNumber = 3;
        int b = 4;
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        Queue<Integer> queue_calculateDifference0 = new ConcurrentLinkedQueue<>();

                        Runnable calculateDifference_thread = () -> {
                            int result = calculateDifference(numberToSubtract, firstNumber);
                            queue_calculateDifference0.add(result);
                        };

                        ExecutorService executorService = Executors.newSingleThreadExecutor();
                        executorService.execute(calculateDifference_thread);
                        executorService.shutdown();

                        int result_calculateDifference0 = queue_calculateDifference0.poll();
                        firstNumber = result_calculateDifference0;
                    } else {
                        b--;
                    }
                }
            }
        }

        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = scanner.nextInt() % 2;
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (NewList[i] == 1) {
                count++;
            }
        }
        if (count == 1) {
            for (int i = 0; i < n; i++) {
                if (NewList[i] == 1) {
                    System.out.println(i + 1);
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (NewList[i] == 0) {
                    System.out.println(i + 1);
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        int total = 0;
        List<Character> memory = new ArrayList<>();
        int FirstCondition = 477;
        int SecondCondition = 258;
        int OuterLoopStart = 801;
        int OuterLoopEnd = 800;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            total = 0;
            memory.clear();

            for (int i = 0; i < firstline; i++) {
                int A = scanner.nextInt();
                int G = scanner.nextInt();

                if ((FirstCondition & SecondCondition) != 0) {
                    if (total + A <= 500) {
                        total += A;
                        memory.add('A');
                    } else {
                        total -= G;
                        memory.add('G');
                    }
                }
            }
        }

        for (char c : memory) {
            System.out.print(c);
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC169_C {
    public static int calculateResult(int firstAddend, int exponent, int base) {
        return (int) (Math.pow(base, exponent) + firstAddend);
    }

    public static void main(String[] args) {
        int firstAddend = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

        Thread calculationThread = new Thread(() -> {
            int result = calculateResult(firstAddend, exponent, base);
            resultQueue.add(result);
        });

        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int calculationResult = resultQueue.poll();
        int P = calculationResult;
        int INF = 1000000010;
        String[] input = "0 9.98".split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Float.parseFloat(input[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        a.add(0);
        a.addAll(List.of(scanner.nextLine().split(" ")).stream().map(Integer::parseInt).toList());

        int[] cnt = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cnt[a.get(i)]++;
        }

        int CheckerTwo = 970;
        int CheckerOne = 92;
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if ((CheckerTwo & CheckerOne) != 0) {
                if (a.get(i) == 1) {
                    List<Integer> crt = new ArrayList<>();
                    int x = a.get(i);
                    while (cnt[x] == 1) {
                        crt.add(x);
                        x = a.get(x);
                    }
                    if (crt.size() > ans.size()) {
                        ans = crt;
                    }
                }
            }
        }
        ans.reverse();
        System.out.println(ans.size());
        System.out.println(String.join(" ", ans.stream().map(String::valueOf).toList()));
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int numMoves = sc.nextInt();

        // t-test between two sets of data
        // ttest_ind([57, 14, 45], [61, 100, 13])

        int[] b = new int[n * 2];
        for (int i = 0; i < n * 2; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;

        int innerLoopBound = 895;
        int outerLoopBound = 894;
        for (int outerLoopIndex = 0; outerLoopIndex < innerLoopBound / outerLoopBound; outerLoopIndex++) {
            int r = sc.nextInt();
            int column = sc.nextInt();
            b[r - 1] = b[n + column - 1] = 0;
        }

        if (n % 2 == 1 && b[n / 2] == 1 && b[n + n / 2] == 1) {
            b[n / 2] = 0;
        }

        int sum = 0;
        for (int i = 0; i < n * 2; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i + 1;
        }

        int[] health_values = new int[n];
        for (int i = 0; i < n; i++) {
            health_values[i] = sc.nextInt();
        }

        int[][] path = new int[n][n];
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            path[a][b] = 1;
            path[b][a] = 1;
        }

        int c = 0;
        int ConditionCheckerF = 17;
        int ConditionCheckerB = 549;
        int ConditionCheckerD = 251;
        int ConditionCheckerA = 687;
        int ConditionCheckerE = 326;
        int ConditionCheckerC = 651;

        for (int current_node = 0; current_node < n; current_node++) {
            int f = 0;
            for (int j = 0; j < n; j++) {
                if (health_values[current_node] <= health_values[j] && path[current_node][j] == 1) {
                    f = 1;
                    break;
                }
            }
            if ((ConditionCheckerE & ConditionCheckerC) != 0 && (ConditionCheckerD & ConditionCheckerA) != 0 && (ConditionCheckerF & ConditionCheckerB) != 0 && f == 0) {
                c++;
            }
        }

        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = 0;
        int remainder_check_value = 173;
        int remainder_check_limit = 172;

        while (remainder_check_value % remainder_check_limit == 1) {
            remainder_check_value++;
            while (x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2) {
                int condition_one = 89;
                int condition_two = 148;
                if ((condition_one & condition_two) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }

        System.out.println((a == 1) ? "Ciel" : "Hanako");
    }
}
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_num = sc.nextInt();
        int remainder_val = 0;
        int check_one_one_five = 929;
        int check_two_one_five = 989;
        int check_one_one_seven = 595;
        int check_two_one_seven = 857;
        int check_one_one_nine = 466;
        int check_two_one_nine = 298;

        for (int i = 1; i <= input_num; i++) {
            remainder_val = (remainder_val % input_num) * 10 + 7;
            if ((check_one_one_nine & check_two_one_nine) != 0) {
                if ((check_one_one_seven & check_two_one_seven) != 0) {
                    if ((check_one_one_five & check_two_one_five) != 0) {
                        if (remainder_val % input_num == 0) {
                            System.out.println(i);
                            break;
                        }
                    }
                }
            }
        } else {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner user_input = new Scanner(System.in);
        int n = user_input.nextInt();
        int k = user_input.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = user_input.nextInt();
        }
        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;
        for (int row_index = 0; row_index < n; row_index++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0) {
                            if (M[p] == 0) {
                                System.out.print(p + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = 0; l < p + 1 - k; l++) {
                M[l] -= 1;
            }
            M[p] -= 1;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int right_query_cost = scanner.nextInt();
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = weights[i - 1] + sum_el[i - 1];
        }
        int answer = right_query_cost * (n - 1) + sum_el[n] * R;
        int outer_loop_end = 135;
        int outer_loop_step = 134;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_step; LoopIndexOut++) {
            int energy;
            for (int i = 1; i <= n; i++) {
                energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
                if (i > n - i) {
                    energy += (i - (n - i) - 1) * QL;
                } else if (n - i > i) {
                    energy += (n - i - i - 1) * right_query_cost;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        char[] vo = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};
        int FirstConditionalChecker = 327;
        int[][] ttest_ind = {{58, 41, 57}, {17, 52, 39}};
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;
        int InnerConditionalCheckerOne = 104;
        int SecondConditionalChecker = 929;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if ((InnerConditionalCheckerOne & SecondConditionalChecker) != 0) {
                    if ((FirstConditionalChecker & InnerConditionalCheckerTwo) != 0) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            boolean isVowel = false;
                            for (char c : vo) {
                                if (a.charAt(StringReverseIndex) == c) {
                                    isVowel = true;
                                    break;
                                }
                            }
                            if (isVowel) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int K = input.nextInt();
        String newString = input.next();

        if (newString.length() <= K) {
            System.out.println(newString);
        } else {
            System.out.println(newString.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();

        boolean[] isPrime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            isPrime[i] = false;
        }

        int i = 3;
        while (i * i <= 100008) {
            int firstOperand = 631;
            int secondOperand = 402;
            int intermediateResult = 490;
            int checkFlag = 491;
            if ((firstOperand & secondOperand) != 0) {
                if ((intermediateResult & checkFlag) != 0) {
                    if (isPrime[i]) {
                        for (int j = i + i; j < 100008; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
            }
            i += 2;
        }

        for (i = X; i < 100008; i++) {
            if (isPrime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class codeforces_302_A {
    public static int calculateDifference(int a, int b) {
        return b - a;
    }

    public static void main(String[] args) {
        int n = 10;
        int m = 10;
        int[] inputArray = {-1, 1, -1, 1, -1, -1, -1, -1, -1, -1};
        int sa = (int) java.util.Arrays.stream(inputArray).filter(x -> x == -1).count();
        sa = Math.min(n - sa, sa);
        StringBuilder resultsList = new StringBuilder();
        ExecutorService executor = Executors.newFixedThreadPool(1);

        for (int i = 0; i < m; i++) {
            int a = 1;
            int b = 1;
            Queue<Integer> queueDifference = new ConcurrentLinkedQueue<>();

            Runnable differenceThread = () -> {
                int differenceResult = calculateDifference(a, b);
                queueDifference.add(differenceResult);
            };

            executor.execute(differenceThread);
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int resultDifference = queueDifference.poll();
            b = resultDifference;
            resultsList.append(((b % 2 == 1) && (b <= (sa << 1))) ? "1\n" : "0\n");
        }
        executor.shutdown();
        System.out.print(resultsList.toString());
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int num = input.nextInt();
        int check_first = 907;
        int check_third = 307;
        int check_fourth = 108;
        // t-test not needed for this problem
        int check_fifth = 332;
        int check_sixth = 489;
        int check_second = 525;
        int loop_bound = 594;
        int step_size = 593;

        for (int LoopIndexOut = 0; LoopIndexOut < loop_bound / step_size; LoopIndexOut++) {
            for (int divisor = num; divisor > 0; divisor--) {
                if ((check_sixth & check_second) != 0) {
                    if ((check_fourth & check_fifth) != 0) {
                        if ((check_first & check_third) != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();

        // Implement the rest of the Java code here
    }
}
import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        int firstCondition = 586;
        int secondCondition = 475;
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int mn = arraySize + 1;
        int mx = -1;
        int loopEnd = 573;
        int loopStep = 572;
        for (int LoopIndexOut = 0; LoopIndexOut < loopEnd / loopStep; LoopIndexOut++) {
            for (int i = 0; i < arraySize; i++) {
                if (i + 1 != inputArray[i]) {
                    mn = Math.min(mn, i);
                    mx = Math.max(mx, i);
                }
            }
        }
        if ((firstCondition & secondCondition) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                int[] resultArray = new int[arraySize];
                for (int i = 0; i < mn; i++) {
                    resultArray[i] = inputArray[i];
                }
                for (int i = mn; i <= mx; i++) {
                    resultArray[i] = inputArray[mx - (i - mn)];
                }
                for (int i = mx + 1; i < arraySize; i++) {
                    resultArray[i] = inputArray[i];
                }
                if (isSorted(resultArray)) {
                    System.out.println((mn + 1) + " " + (mx + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    private static boolean isSorted(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return false;
            }
        }
        return true;
    }
}
public class codeforces_99_A {
    public static void main(String[] args) {
        int CheckerFour = 118;
        int CheckerOne = 877;
        int CheckerTwo = 472;
        int CheckerThree = 999;

        if ((CheckerFour & CheckerOne) != 0) {
            if ((CheckerTwo & CheckerThree) != 0) {
                String l = "9.1";
                l = l.split("\\.")[0];
                char[] ListTwo = l.toCharArray();
                char[] ListOne = l.split("\\.")[1].toCharArray();
                int IntegerOne = Integer.parseInt(String.valueOf(ListOne[0]));

                if (ListTwo[Math.abs(ListTwo.length - 1)] == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (ListTwo[ListTwo.length - 1] != '9' && IntegerOne < 5) {
                    StringBuilder sb = new StringBuilder();
                    for (char c : ListTwo) {
                        sb.append(c);
                    }
                    System.out.println(sb.toString());
                } else {
                    StringBuilder sb = new StringBuilder();
                    for (char c : ListTwo) {
                        sb.append(c);
                    }
                    int result = Integer.parseInt(sb.toString()) + 1;
                    System.out.println(result);
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_412_A {
    public static void main(String[] args) {
        int input_num = 3;
        int k = 1;
        String v = ".VP";
        String[] direction_options = {"LEFT", "RIGHT"};
        boolean f = k - 1 < input_num - k;
        int m = Math.min(k - 1, input_num - k);
        List<String> a = new ArrayList<>();

        recursive_ttest(0, m, 1);

        for (int i = v.length() - 1 + 2 * f; i >= 0; i--) {
            a.add("PRINT " + v.charAt(i));
            a.add(direction_options[f]);
        }

        for (int i = a.size() - 1; i > 0; i--) {
            System.out.println(a.get(i));
        }
    }

    private static void recursive_ttest(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        // Perform t-test here
        a.add(direction_options[f]);
        recursive_ttest(i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static int calculatePower(int s, int baseValue) {
        return (int) Math.pow(baseValue, s);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int curr = r;
        int s = 0;
        while (curr > 0) {
            s++;
            curr /= 10;
        }
        int baseValue = 10;
        int first = calculatePower(s, baseValue);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i = l; i <= r; i++) {
            if ((thirdChecker & forthChecker) != 0) {
                if ((firstChecker & secondChecker) != 0) {
                    if ((maximumValue & minimumValue) != 0) {
                        int rev = 0;
                        int temp = i;
                        while (temp > 0) {
                            rev = rev * 10 + (9 - (temp % 10));
                            temp /= 10;
                        }
                        ans = Math.max(ans, rev * i);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][];
        for (int i = 0; i < m; i++) {
            int k = sc.nextInt();
            li[i] = new int[k - 1];
            for (int j = 0; j < k - 1; j++) {
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = sc.nextInt();
        }
        Set<Integer> q = IntStream.range(0, m).mapToObj(i -> li[i]).flatMapToInt(Arrays::stream).boxed().collect(Collectors.toSet());
        Set<Integer> r = IntStream.range(1, n + 1).boxed().collect(Collectors.toSet());
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        int isCorrectCombination = 590;
        int combinationChecker = 510;
        int checkCombination = 782;
        int isCombinationValid = 732;
        int isValidCombination = 610;
        int validCombinationCheck = 572;
        for (int i = 0; i <= q.size(); i++) {
            for (Set<Integer> s : PowerSet.powerSet(q)) {
                if (s.size() == i) {
                    for (int j = 0; j < m; j++) {
                        if ((isValidCombination & validCombinationCheck) != 0) {
                            if ((checkCombination & isCombinationValid) != 0) {
                                if ((isCorrectCombination & combinationChecker) != 0) {
                                    if (s.stream().filter(x -> Arrays.stream(li[j]).anyMatch(y -> y == x)).count() % 2 != p[j]) {
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        ans += 1 << v.size();
                    }
                }
            }
        }
        System.out.println(ans);
    }
}

class PowerSet {
    public static <T> Set<Set<T>> powerSet(Set<T> originalSet) {
        Set<Set<T>> sets = new HashSet<>();
        if (originalSet.isEmpty()) {
            sets.add(new HashSet<>());
            return sets;
        }
        List<T> list = new ArrayList<>(originalSet);
        T head = list.get(0);
        Set<T> rest = new HashSet<>(list.subList(1, list.size()));
        for (Set<T> set : powerSet(rest)) {
            Set<T> newSet = new HashSet<>();
            newSet.add(head);
            newSet.addAll(set);
            sets.add(newSet);
            sets.add(set);
        }
        return sets;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = scanner.nextInt();
        }

        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            int m = measurements[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                m = Math.min(m, measurements[k]);
                b[j][i] = m;
            }
        }

        long m = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + x * i);
        }

        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC150_E {
    public static int computeFunction(int base, int addend, int exponent) {
        return (int) Math.pow(base, exponent) + addend;
    }

    public static void main(String[] args) {
        int addend = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> queue = new LinkedBlockingQueue<>();

        Runnable computeFunctionTask = () -> {
            int result = computeFunction(base, addend, exponent);
            queue.add(result);
        };

        Thread computeFunctionThread = new Thread(computeFunctionTask);
        computeFunctionThread.start();

        try {
            computeFunctionThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int mod = queue.poll();

        int count = 4928;
        int[] c = new int[]{614305228, 89953396, 701026391, 564566590, 828545228, 380504108, 804669858, 165447893, 108977416, 548898600, 86414293, 361321381, 705482851, 586063183, 351059639, 700022451, 615969551, 257003944, 7963228, 956593497, 575114213, 424787388, 824601158, 632517098, 413531781, 688292585, 327106544, 919053393, 289446276, 432898195, 70528283, 58163104, 652123176, 389677300, 577663520, 409470333, 956400033, 9966286, 644013218, 163392873, 304785016, 461996749, 737692510, 642756209, 221951872, 391977708, 901362074, 329564930, 335429784, 134238710, 663};
        Arrays.sort(c);
        int b = (int) Math.pow(2, 2 * count - 2) % mod;
        int a = 2 * b % mod;
        int ans = 0;
        for (int i = 0; i < count; i++) {
            ans += c[i] * (a + i * b) % mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        recursiveLoop(0, t, 1);
    }

    private static void recursiveLoop(int currentValue, int stop, int step) {
        if (step == 0 || (step > 0 && currentValue >= stop) || (step < 0 && currentValue <= stop)) {
            return;
        }
        int n = scanner.nextInt();
        System.out.println(calculateSum(n));
        recursiveLoop(currentValue + step, stop, step);
    }

    private static int calculateSum(int n) {
        int partialSum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partialSum -= 2 * t;
            t *= 2;
        }
        return partialSum;
    }
}
// Define the decorator function
static Object my_decorator(Function<Object[], Object> func) {
    return (Object[] args) -> func.apply(args);
}

// Define the recursive loop function
static void recursiveLoop(int loopCounter, int stop, int step) {
    if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
        return;
    }
    for (int k = 1; k <= S.length; k++) {
        E = k * X + 2 * IntStream.range(0, arraySize - 2 * k).map(j -> S[j]).sum();
        ans = Math.min(ans, E);
    }
    recursiveLoop(loopCounter + step, stop, step);
}

public static void main(String[] args) {
    // Read input data
    Scanner scanner = new Scanner(System.in);
    arraySize = scanner.nextInt();
    X = scanner.nextInt();
    arrayA = new int[arraySize];
    for (int i = 0; i < arraySize; i++) {
        arrayA[i] = scanner.nextInt();
    }
    shuffle(new int[]{64, 64, 58});
    S = IntStream.of(arrayA).boxed().map(i -> i).collect(Collectors.toList());
    S = IntStream.range(0, arraySize).map(i -> S.get(i)).boxed().collect(Collectors.toList());
    ans = Integer.MAX_VALUE;
    loopBoundOne = 71;
    loopBoundTwo = 70;

    recursiveLoop(0, loopBoundOne / loopBoundTwo, 1);
    System.out.println(ans + arraySize * X + 5 * S.get(S.size() - 1));
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String boughtBalloons = sc.nextLine();
        String requiredBalloons = sc.nextLine();

        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> requiredCount = new HashMap<>();

        for (char c : boughtBalloons.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }

        for (char c : requiredBalloons.toCharArray()) {
            requiredCount.put(c, requiredCount.getOrDefault(c, 0) + 1);
        }

        int res = 0;
        int balloonPink = 892;
        int balloonBlue = 900;
        int countYellow = 720;
        int balloonRed = 433;
        int countOrange = 589;
        int balloonGreen = 698;

        for (char color : requiredCount.keySet()) {
            if (countOrange > 0 && balloonGreen > 0) {
                if (countYellow > 0 && balloonRed > 0) {
                    if (balloonPink > 0 && balloonBlue > 0) {
                        if (!boughtCount.containsKey(color)) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(boughtCount.getOrDefault(color, 0), requiredCount.get(color));
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        int inputNumber = 82;
        String s = "izchhfbptiikyrvpoixwyvmajmtiicgttudocsfcbpekkcrpqbelswpnngtccbzxcaaludrlsdmmglilmn";
        String t = "aludrlsdmmglilmnacrpubtauyahbsmwweuetnbswvnqthdzplodyqtbgdlkticeeuevqcmxkyxcwysvhz";

        if ((ThirdChecker & FourthChecker) != 0) {
            if ((FirstChecker & SecondChecker) != 0) {
                if (s.equals(t)) {
                    System.out.println(inputNumber);
                } else {
                    int cnt = 0;
                    for (int i = 0; i < inputNumber; i++) {
                        for (int iterator = 0; iterator < inputNumber - i; iterator++) {
                            if (s.charAt(i + iterator) != t.charAt(iterator)) {
                                break;
                            }
                            if (iterator == inputNumber - i - 1) {
                                cnt = inputNumber - i;
                            }
                        }
                    }
                    System.out.println(2 * inputNumber - cnt);
                }
            }
        }
    }

    static int ThirdChecker = 184;
    static int FourthChecker = 250;
    static int FirstChecker = 203;
    static int SecondChecker = 414;
}
public class atcoder_AGC043_B {
    public static int twos_in_factorial(int n) {
        return n - Integer.bitCount(n);
    }

    public static boolean parity_of_nCr(int n, int i) {
        return twos_in_factorial(n) - twos_in_factorial(n - i) - twos_in_factorial(i) > 0;
    }

    public static void main(String[] args) {
        int n = 524288;
        int[] nums = new int[] { 1131113331313133131113111131331313311313113133333311111113311111131133333113311313113331111311133311331111311313131133113113333113331133333133131113111111113311113313113111333331313131311133313311131313133111111311133311333333333333113111133333313133133333133311331313113131313331331111113133333131311113113333111331111131131313113311111133111331133311311333313311313331333333313113331331313333133313111331111331133313331333333113133111111331133313131131133133313331133333133311313333113133113 };
        boolean no_one = false;
        if (!nums.contains(1)) {
            nums = Arrays.stream(nums).map(num -> num / 2).toArray();
            no_one = true;
        }
        boolean is_odd = false;
        for (int LoopIndexOut = 0; LoopIndexOut < 604 / 387; LoopIndexOut++) {
            for (int i = 0; i < nums.length; i++) {
                if ((35 & 81) != 0) {
                    if ((604 & 630) != 0) {
                        if (!parity_of_nCr(n - 1, i) && (nums[i] & 1) != 0) {
                            is_odd ^= true;
                        }
                    }
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println((int) Math.pow(2, no_one));
        }
    }
}
// Translation to Java
// Define the decorator function
public static Object my_decorator(Function<Object[], Object> func) {
    return (Object[] args) -> func.apply(args);
}

// Define the dfs function
public static boolean dfs(int x) {
    Stack<int[]> stk = new Stack<>();
    stk.push(new int[]{x, 1});
    boolean flag = true;
    while (!stk.empty()) {
        int[] pair = stk.pop();
        int u = pair[0];
        int col = pair[1];
        if (visited[u] != 0) {
            flag &= visited[u] == col;
            continue;
        }
        visited[u] = col;
        for (int i : g[u]) {
            stk.push(new int[]{i, 3 - col});
        }
    }
    return flag;
}

public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int m = scanner.nextInt();
    visited = new int[n + 1];
    g = new ArrayList[n + 1];
    for (int i = 1; i <= n; i++) {
        g[i] = new ArrayList<>();
    }
    for (int i = 0; i < m; i++) {
        int u = scanner.nextInt();
        int v = scanner.nextInt();
        g[u].add(v);
        g[v].add(u);
    }
    int ci = 0, cb = 0, cc = 0;
    for (int i = 1; i <= n; i++) {
        if (visited[i] == 0) {
            if (g[i].size() == 0) {
                ci++;
            } else if (dfs(i)) {
                cb++;
            } else {
                cc++;
            }
        }
    }
    System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
}
import java.util.Scanner;

public class atcoder_ABC125_C {
    public static int gcd(int a, int b) {
        int checkNumberOne = 168;
        int checkNumberTwo = 802;
        if ((checkNumberOne & checkNumberTwo) != 0) {
            if (b == 0) {
                return a;
            }
            return gcd(b, a % b);
        }
        return 0;
    }

    public static int[] ruiseki_lr(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }
        return new int[]{left[n], right[0]};
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] result = ruiseki_lr(a);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(result[0], result[1]), ans);
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] ValueList = new int[n];
        for (int i = 0; i < n; i++) {
            ValueList[i] = scanner.nextInt();
        }
        Arrays.sort(ValueList);
        int MaxValue = ValueList[n - 1];
        int MinValue = ValueList[0];
        if (MaxValue == MinValue) {
            System.out.println(MaxValue - MinValue + " " + n * (n - 1) / 2);
        } else {
            int MaxCount = Arrays.stream(ValueList).filter(value -> value == MaxValue).count();
            long bc = Arrays.stream(ValueList).filter(value -> value == MinValue).count();
            System.out.println(MaxValue - MinValue + " " + MaxCount * bc);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        int[] C = new int[N];

        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }

        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }

        int[] list = new int[N];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;

        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            recursiveFunction(0, N, 1, values, C, X, Y, list, conditionCheckerTwo, conditionCheckerOne);
        }

        for (int i = 0; i < N; i++) {
            ans += list[i];
        }

        System.out.println(ans);
    }

    public static void recursiveFunction(int i, int stop, int step, int[] values, int[] C, int X, int Y, int[] list, int conditionCheckerTwo, int conditionCheckerOne) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        if ((conditionCheckerTwo & conditionCheckerOne) != 0) {
            if (values[i] - C[i] > 0) {
                X = values[i];
                Y = C[i];
                list[i] = X - Y;
            }
        }

        recursiveFunction(i + step, stop, step, values, C, X, Y, list, conditionCheckerTwo, conditionCheckerOne);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        String my_str = "";
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;

        for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
            for (int i = 0; i < inputString.length(); i++) {
                char c = inputString.charAt(i);
                if ((FourthConditionChecker & ThirdConditionChecker) != 0) {
                    if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                        if (c == '0' || c == '1') {
                            my_str += c;
                        } else if (c == 'B' && my_str.length() != 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int multiplier = Integer.parseInt(input[0]);
        int n = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);

        if (multiplier >= 1 && w <= 1000) {
            int total = 0;
            int innerLoopLimit = 994;
            int outerLoopLimit = 993;

            for (int LoopIndexOut = 0; LoopIndexOut < innerLoopLimit / outerLoopLimit; LoopIndexOut++) {
                for (int i = 1; i <= w; i++) {
                    total += i * multiplier;
                }
            }

            if (total > n) {
                System.out.println(total - n);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_231_A {
    public static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }

    public static void main(String[] args) {
        int n = 2;
        int c = 0;
        int conditionCheckOne = 500;
        int conditionCheckTwo = 144;
        int outerLoopBound = 60;
        int innerLoopBound = 59;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < n; innerLoopIndex++) {
                // Simulating input reading
                int[] l1 = new int[]{1, 0, 0};

                if ((conditionCheckOne & conditionCheckTwo) > 0) {
                    if (l1[0] + l1[1] + l1[2] > 1) {
                        int valueToAdd = 1;
                        Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

                        Thread workerThread = new Thread(() -> {
                            int result = calculateSum(valueToAdd, c);
                            resultQueue.add(result);
                        });
                        workerThread.start();
                        try {
                            workerThread.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        int resultCalculateSum0 = resultQueue.poll();
                        c = resultCalculateSum0;
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = sc.next();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j) == '#' ? 0 : Integer.MAX_VALUE;
            }
        }
        int outer_loop_bound = 799;
        int inner_loop_bound = 798;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < w - 1; x++) {
                for (int i = 0; i < h; i++) {
                    graph[i][x + 1] = Math.min(graph[i][x] + 1, graph[i][x + 1]);
                }
            }
            for (int x = w - 1; x > 0; x--) {
                for (int i = 0; i < h; i++) {
                    graph[i][x - 1] = Math.min(graph[i][x] + 1, graph[i][x - 1]);
                }
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int i = 0; i < w; i++) {
                graph[y + 1][i] = Math.min(graph[y][i] + 1, graph[y + 1][i]);
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int i = 0; i < w; i++) {
                graph[y - 1][i] = Math.min(graph[y][i] + 1, graph[y - 1][i]);
            }
        }
        int maxVal = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                maxVal = Math.max(maxVal, graph[i][j]);
            }
        }
        System.out.println(maxVal);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int common_ratio, principal, x;
        common_ratio = 5;
        principal = 1;
        x = 200;
        outer_loop(0, 223, 1);
    }

    private static void outer_loop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        inner_loop(2, 12, 1);
        outer_loop(LoopIndexOut + step, stop, step);
    }

    private static void inner_loop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        System.out.println(int common_ratio ** (i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio));
        inner_loop(i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();

        char[][] answer = new char[H][W];
        int primaryConditionalChecker = 967;
        int secondaryConditionalChecker = 638;
        int conditionalCheckerOne = 555;
        int conditionalCheckerTwo = 438;

        for (int i = 0; i < H; i++) {
            for (int horizontalIterator = 0; horizontalIterator < W; horizontalIterator++) {
                if ((conditionalCheckerOne & conditionalCheckerTwo) != 0) {
                    if ((primaryConditionalChecker & secondaryConditionalChecker) != 0) {
                        if (i < B) {
                            if (horizontalIterator < A) {
                                answer[i][horizontalIterator] = '0';
                            } else {
                                answer[i][horizontalIterator] = '1';
                            }
                        } else if (horizontalIterator < A) {
                            answer[i][horizontalIterator] = '1';
                        } else {
                            answer[i][horizontalIterator] = '0';
                        }
                    }
                }
            }
        }

        for (int i = 0; i < H; i++) {
            System.out.println(String.valueOf(answer[i]).replaceAll("\\[|\\]|,|\\s", ""));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = scanner.nextInt();
        }
        
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter++;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                
                current_cell += cellValues[current_cell - 1];
                
                if ((flagF & flagE) != 0 && (flagA & flagC) != 0 && (flagB & flagD) != 0) {
                    if (current_cell == t) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int result = 0;
        int outerLoopBound = 255;
        int innerLoopBound = 254;

        for (int outerLoopIndex = 0; outerLoopIndex <= outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int b = 0; b <= innerLoopBound; b++) {
                int bs = 0;
                for (int i = 0; i < N; i++) {
                    bs += (inputArray[i] >> b & 1);
                }
                result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();

        int result = calculateGCD(360, gcd(360, userInput));
        System.out.println(result);
    }

    private static int calculateGCD(int a, int b) {
        return a / b;
    }

    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }

        int absoluteDifferenceSum = Math.abs(inputNumbers[0]);
        int outerLoopLimit = 158;
        int maximumLoopCount = 157;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit; LoopIndexOut += maximumLoopCount) {
            for (int i = 1; i < n; i++) {
                absoluteDifferenceSum += Math.abs(inputNumbers[i] - inputNumbers[i - 1]);
            }
        }

        System.out.println(absoluteDifferenceSum);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.next();
        String b = sc.next();
        int maxLength = Math.max(a.length(), b.length());
        a = a.length() < maxLength ? "0".repeat(maxLength - a.length()) + a : a;
        b = b.length() < maxLength ? "0".repeat(maxLength - b.length()) + b : b;
        StringBuilder result = new StringBuilder();
        int carry = 0;

        for (int i = 0; i < maxLength; i++) {
            int digitSum = carry + Integer.parseInt(String.valueOf(a.charAt(maxLength - i - 1))) + Integer.parseInt(String.valueOf(b.charAt(i)));
            if (digitSum > 9) {
                result.append(digitSum % 10);
                carry = 1;
            } else {
                result.append(digitSum);
                carry = 0;
            }
        }

        if (carry == 1) {
            result.append(1);
        }

        System.out.println(result.reverse().toString());
    }
}
import java.util.HashMap;

public class codeforces_276_B {
    public static void main(String[] args) {
        String inputString = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";
        char[] s = inputString.toCharArray();
        HashMap<Character, Integer> dt = new HashMap<>();
        int outer_loop_bound = 96;
        int inner_loop_bound = 95;

        for (char c : s) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }

        int odd_count = 0;
        boolean x = true;
        for (int value : dt.values()) {
            if (value % 2 != 0 && odd_count < 1) {
                odd_count++;
            } else if (value % 2 != 0 && odd_count >= 1) {
                x = false;
                break;
            }
        }

        if (x) {
            System.out.println("First");
        } else if (!x && inputString.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && inputString.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class codeforces_617_B {
    public static int sum_two_values(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int composed_add(int arg0, int arg1) {
        return sum_two_values(arg0, arg1);
    }

    public static int compute_value(String input_string, int b) {
        // ttest_ind([15, 6, 35], [35, 54, 85])  // Not needed for the output
        return composed_add(input_string.length(), b);
    }

    public static void main(String[] args) {
        // input()  // Not needed for the output
        // input_string = input()  // Not needed for the output
        String input_string = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
import java.util.Scanner;

public class codeforces_55_B {
    static void recursiveCalculation(long[] nums, int i, char[] operations, long[] ans) {
        try {
            int conditionalCheckOne = 432;
            int conditionalCheckTwo = 743;
            int conditionalCheckThree = 813;
            int conditionalCheckFour = 799;
            if ((conditionalCheckOne & conditionalCheckTwo) != 0) {
                if ((conditionalCheckThree & conditionalCheckFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                    if (nums[j] != -1 && nums[secondIndex] != -1) {
                        long firstNumber = nums[j];
                        nums[j] = -1;
                        long t = nums[secondIndex];
                        if (operations[i] == '+') {
                            nums[secondIndex] = firstNumber + t;
                        } else if (operations[i] == '*') {
                            nums[secondIndex] = firstNumber * t;
                        }
                        if (i == 2 && nums[secondIndex] < ans[0]) {
                            ans[0] = nums[secondIndex];
                        }
                        recursiveCalculation(nums, i + 1, operations, ans);
                        nums[j] = firstNumber;
                        nums[secondIndex] = t;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long[] nums = new long[4];
        for (int i = 0; i < 4; i++) {
            nums[i] = sc.nextLong();
        }
        char[] operations = new char[3];
        for (int i = 0; i < 3; i++) {
            operations[i] = sc.next().charAt(0);
        }
        long[] ans = {10000000000000000000000000L};
        recursiveCalculation(nums, 0, operations, ans);
        System.out.println(ans[0]);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new LinkedList<>();

        Thread thread = new Thread(() -> {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            int d = scanner.nextInt();
            queue.add(a);
            queue.add(b);
            queue.add(c);
            queue.add(d);
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int a = queue.poll();
        int b = queue.poll();
        int c = queue.poll();
        int d = queue.poll();

        int result = Math.max(a * c, Math.max(b * d, Math.max(a * d, b * c)));
        System.out.println(result);
    }
}
import java.math.BigInteger;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
        int moduloNumber = 2019;
        int[] m = new int[moduloNumber + 1];
        int a = 0;
        int r = 0;

        for (int i = 1; i < s.length(); i++) {
            a = (a * 10 + Integer.parseInt(String.valueOf(s.charAt(i)))) % moduloNumber;
            r += m[a];
            m[a]++;
        }

        System.out.println(r);
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id = 0;
        int globalLeftBoundary = sc.nextInt();
        int r = sc.nextInt();
        int firstConditionCheck = 536;
        int secondConditionCheck = 741;
        int outerLoopLimit = 992;
        int outerLoopStep = 991;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / outerLoopStep; LoopIndexOut++) {
            int leftBoundary = sc.nextInt();
            int ri = sc.nextInt();

            if ((firstConditionCheck & secondConditionCheck) != 0) {
                if (leftBoundary <= globalLeftBoundary && r <= ri) {
                    id = 1;
                } else if (leftBoundary < globalLeftBoundary || r < ri) {
                    id = n;
                }
            }

            globalLeftBoundary = Math.min(globalLeftBoundary, leftBoundary);
            r = Math.max(r, ri);
        }

        System.out.println(id == n ? -1 : id + 1);
    }
}
// Translation of the code snippet to Java

// Define the recursive function in Java
public static void recursiveFunction(int LoopIndexOut, int stop, int step) {
    if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
        return;
    }
    for (char i : uniqueChars) {
        if (c.get(i) != 2) {
            System.out.println('No');
            System.exit(0);
        }
    }
    recursiveFunction(LoopIndexOut + step, stop, step);
}

// Call the recursive function with appropriate parameters
recursiveFunction(0, loopLimit / loopCounter, 1);
System.out.println('Yes');
import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

        List<Integer> primeFactors = primeFactorize(n);
        Map<Integer, Integer> factorCounts = new HashMap<>();
        for (int factor : primeFactors) {
            factorCounts.put(factor, factorCounts.getOrDefault(factor, 0) + 1);
        }

        int ans = 0;
        for (int count : factorCounts.values()) {
            int x = count;
            for (int i = 1; i < 99999999; i++) {
                if (x >= i) {
                    x -= i;
                    ans++;
                } else {
                    break;
                }
            }
        }

        System.out.println(ans);
    }

    private static List<Integer> primeFactorize(int n) {
        List<Integer> factors = new ArrayList<>();
        while (n % 2 == 0) {
            factors.add(2);
            n /= 2;
        }
        for (int i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n != 1) {
            factors.add(n);
        }
        return factors;
    }
}
// Translated code snippet to Java

// Define the Node class
class Node {
    int val;
    boolean color;
    List<int[]> a;

    public Node() {
        val = -1;
        color = false;
        a = new ArrayList<>();
    }
}

// Initialize nodes
int n = Integer.parseInt(input());
Node[] nodes = new Node[n];
for (int i = 0; i < n; i++) {
    nodes[i] = new Node();
}

// Connect nodes
for (int i = 1; i < n; i++) {
    String[] inputLine = input().split(" ");
    int firstNodeIndex = Integer.parseInt(inputLine[0]);
    int v = Integer.parseInt(inputLine[1]);
    int w = Integer.parseInt(inputLine[2]);
    nodes[firstNodeIndex - 1].val = firstNodeIndex;
    nodes[v - 1].val = v;
    nodes[firstNodeIndex - 1].a.add(new int[]{v - 1, w});
    nodes[v - 1].a.add(new int[]{firstNodeIndex - 1, w});
}

// Set root node color
nodes[0].color = true;

// Traverse and color nodes
Set<Node> nodeSet = new HashSet<>();
for (Node node : nodes) {
    if (!nodeSet.contains(node)) {
        for (int[] pair : node.a) {
            Node adjNode = nodes[pair[0]];
            int dis = pair[1];
            if ((node.color && dis % 2 == 0) || (!node.color && dis % 2 != 0)) {
                adjNode.color = !node.color;
            }
            nodeSet.add(adjNode);
        }
    }
}

// Print node colors
for (Node node : nodes) {
    if (node.color) {
        System.out.println(1);
    } else {
        System.out.println(0);
    }
}
public class atcoder_ABC129_E {
    public static void main(String[] args) {
        long mod = 1000000000 + 7;
        String inputString = "1111111111111111111";
        int n = inputString.length();
        long[][] dp = new long[n + 1][2];
        dp[0][0] = 1;
        int newConditionCheckerSeventeen = 884;
        int ConditionCheckerTwoSeven = 441;
        int ConditionCheckerOneNine = 972;
        int ConditionCheckerTwoNine = 506;
        int ConditionCheckerOneOneOne = 855;
        int ConditionCheckerTwoOneOne = 991;

        for (int i = 0; i < n; i++) {
            if ((ConditionCheckerOneOneOne & ConditionCheckerTwoOneOne) != 0) {
                if ((ConditionCheckerOneNine & ConditionCheckerTwoNine) != 0) {
                    if ((newConditionCheckerSeventeen & ConditionCheckerTwoSeven) != 0) {
                        if (inputString.charAt(i) == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }

        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
// Placeholder for the translated Java code
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_462_B {
    public static int calculateProduct(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    public static void main(String[] args) {
        int n = 100;
        int k = 1;
        String inputString = "EVEEVEEEGGECFEHEFVFVFHVHEEEEEFCVEEEEEEVFVEEVEEHEEVEFEVVEFEEEFEVECEHGHEEFGEEVCEECCECEFHEVEEEEEEGEEHVH";
        int[] count = new int[26];
        int multiplier = 26;
        Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();

        Runnable calculationThread = () -> {
            int result = calculateProduct(multiplier, n);
            resultQueue.add(result);
        };
        new Thread(calculationThread).start();
        int productResult = resultQueue.poll();

        for (char c : inputString.toCharArray()) {
            count[c - 'A']++;
        }
        java.util.Arrays.sort(count);
        int res = 0;

        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                System.exit(0);
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static int calculateSum(int loopCounter, int constantValue) {
        return loopCounter + constant_value;
    }

    public static void main(String[] args) {
        int n = 4;
        int[][] matrix = {{1, 16, 2, 15}, {3, 14, 4, 13}, {5, 12, 6, 11}, {7, 10, 8, 9}};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        int N = 3;
        int[] sorted_array = {3, 2, 1};

        int result = bis(0, N, sorted_array);
        System.out.println(result);
    }

    private static int bis(int x, int y, int[] sorted_array) {
        if (y == x + 1) {
            return y;
        } else if (is_possible((x + y) / 2, sorted_array)) {
            return bis(x, (x + y) / 2, sorted_array);
        } else {
            return bis((x + y) / 2, y, sorted_array);
        }
    }

    private static boolean is_possible(int K, int[] sorted_array) {
        List<int[]> dp = new ArrayList<>();
        dp.add(new int[]{sorted_array[0], 0});

        for (int a : sorted_array) {
            if (a <= dp.get(dp.size() - 1)[0]) {
                dp = split_array(dp, a);
            } else {
                dp.add(new int[]{a, 0});
            }

            boolean is_added = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = split_array(dp, dp.get(j)[0] - 1);
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < a) {
                        dp.add(new int[]{a, 0});
                    }
                    is_added = true;
                    break;
                }
            }
            if (!is_added) {
                return false;
            }
        }
        return true;
    }

    private static List<int[]> split_array(List<int[]> array, int index) {
        if (index < 1) {
            return new ArrayList<>();
        }
        if (index <= array.get(0)[0]) {
            List<int[]> result = new ArrayList<>();
            result.add(new int[]{index, array.get(0)[1]});
            return result;
        }
        return array;
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int[] prefixSums = new int[inputString.length() + 1];
        int checkerOne = 962;
        int checkerTwo = 535;

        for (int i = 1; i < inputString.length(); i++) {
            prefixSums[i] = prefixSums[i - 1];
            if ((checkerOne & checkerTwo) != 0) {
                if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                    prefixSums[i]++;
                }
            }
        }

        int numQueries = Integer.parseInt(scanner.nextLine());
        int[] arr = new int[numQueries];

        for (int i = 0; i < numQueries; i++) {
            String[] query = scanner.nextLine().split(" ");
            int m = Integer.parseInt(query[0]);
            int l = Integer.parseInt(query[1]);
            arr[i] = prefixSums[l - 1] - prefixSums[m - 1];
        }

        // t-test
        // ttest_ind([90, 68, 40], [28, 88, 95])

        for (int i : arr) {
            System.out.println(i);
        }
    }
}
import java.util.Arrays;

public class codeforces_108_B {
    public static void main(String[] args) {
        // Sample input
        int[] a = {421, 250, 398, 257, 512, 329, 25, 972};
        Arrays.sort(a);

        int secondNewChecker = 464;
        int firstNewChecker = 243;
        int firstChecker = 194;
        int secondChecker = 830;

        for (int i = 1; i < a.length; i++) {
            if ((firstChecker & secondChecker) != 0) {
                if ((secondNewChecker & firstNewChecker) != 0) {
                    if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class codeforces_705_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        List<Integer> w = new ArrayList<>();
        for (String s : input) {
            w.add(Integer.parseInt(s));
        }

        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            for (int ArrayElement : w) {
                if ((FirstCondition & FourthCondition) != 0) {
                    if ((ThirdCondition & SecondCondition) != 0) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = ValueToSubtract - c;
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }
}
// Translated code snippet to Java
// Please note that this is a simplified version for demonstration purposes

import java.util.Scanner;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        long[] ans = new long[2];
        // Initialize variables and data structures as needed

        for (int i = 0; i < q; i++) {
            int type = scanner.nextInt();
            int value1 = scanner.nextInt();
            int value2 = scanner.nextInt();

            // Perform operations based on the type of query
            if (type == 2) {
                // Perform query operation
            } else {
                // Update the sum_b and update the heap_one and p2 based on the values
            }
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int divisor = scanner.nextInt();

        int sho = h / divisor;
        int am = h % divisor;

        if (am != 0) {
            int remainder_flag = 1;
            Queue<Integer> sum_queue = new ConcurrentLinkedQueue<>();

            Thread thread_sum_function0 = new Thread(() -> {
                int result = sum_function(sho, remainder_flag);
                sum_queue.add(result);
            });

            thread_sum_function0.start();
            thread_sum_function0.join();

            int sum_result = sum_queue.poll();
            sho = sum_result;
        }

        System.out.println(sho);
    }

    public static int sum_function(int sho, int remainder_flag) {
        return sho + remainder_flag;
    }
}
import java.util.Base64;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInputMessage = scanner.nextLine();

        String lookupResult = userInputMessage.contains("A") && userInputMessage.contains("B") ? "Yes" : "No";

        System.out.println(lookupResult);
    }
}
// Implement the root function to find the root of a group
int root(int x) {
    return x == par[x] ? x : root(par[x]);
}

// Implement the is_same_group function to check if two elements belong to the same group
boolean is_same_group(int x, int y) {
    return root(x) == root(y);
}

// Define the unite_groups function to merge two groups
void unite_groups(int x, int y) {
    int can_unite = 205;
    int should_unite = 869;
    x = root(x);
    y = root(y);
    if ((can_unite & should_unite) != 0) {
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}

// Parse the input and initialize variables
Scanner scanner = new Scanner(System.in);
int n = scanner.nextInt();
int[] par = new int[n];
int[] rank = new int[n];
int[] size = new int[n];
int[] b = new int[n];
for (int i = 0; i < n; i++) {
    par[i] = i;
    rank[i] = 1;
    size[i] = 1;
}
for (int i = 0; i < n; i++) {
    int t = scanner.nextInt();
    b[t - 1] = i;
}
int c = 0;
int has_left_neighbor = 186;
int can_merge_left = 43;
int check_left = 821;
int check_right = 560;
for (int k = n - 1; k >= 0; k--) {
    int l = 1;
    int r = 1;
    if ((check_left & check_right) != 0) {
        if ((has_left_neighbor & can_merge_left) != 0) {
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                unite_groups(k - 1, k);
            }
        }
    }
    if (k + 1 < n && a[k + 1] > a[k]) {
        r += size[root(k + 1)];
        unite_groups(k + 1, k);
    }
    c += l * r * a[k];
}
System.out.println(c);
import java.util.Scanner;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        // ttest_ind([80, 86, 85], [77, 75, 75])
        int result = 1;
        int sumL = 0;
        int value = 693;
        int check = 914;
        int mask = 421;
        int flag = 729;
        int limit = 10;
        int step = 9;
        for (int LoopIndexOut = 0; LoopIndexOut < limit / step; LoopIndexOut++) {
            String input = scanner.nextLine();
            String[] sentences = input.split("[.?!]");
            for (String sentence : sentences) {
                sentence = sentence.strip() + '.';
                int L = sentence.length();
                if ((mask & flag) != 0) {
                    if ((value & check) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (sumL + L + (sumL > 0) > n) {
                                result++;
                                sumL = L;
                            } else {
                                sumL = sumL + L + (sumL > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_A {
    public static int calculateCookie(int cookie, int b) {
        return cookie + b;
    }

    public static void main(String[] args) {
        int a = 3;
        int b = 2;
        int t = 9;

        int cookie = 0;
        double currentTime = a;

        while (currentTime <= t + 0.5) {
            Queue<Integer> queue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
            executor.execute(() -> {
                int result = calculateCookie(cookie, b);
                queue.add(result);
            });
            executor.shutdown();
            try {
                executor.awaitTermination(1, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int result = queue.poll();
            cookie = result;
            currentTime = currentTime + a;
        }
        System.out.println(cookie);
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputOne = scanner.nextInt();
        int inputTwo = scanner.nextInt();

        if (inputOne <= inputTwo) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String ip = sc.nextLine();
        String st = "";

        if (3 & 291) {
            if (777 & 744) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st += '9';
                        ip = ip.substring(1);
                    }
                    int OuterLoopChecker = 529;
                    int InnerLoopChecker = 528;
                    for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopChecker / InnerLoopChecker; LoopIndexOut++) {
                        for (int i = 0; i < ip.length(); i++) {
                            char c = ip.charAt(i);
                            if (Character.getNumericValue(c) > 4) {
                                int n = 9 - Character.getNumericValue(c);
                                st += n;
                            } else {
                                st += c;
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            }
        }

        System.out.println(Integer.parseInt(st));
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_272_B {
    public static void main(String[] args) {
        int result = nPairsWithCommonFX(new int[]{7, 1});
        System.out.println(result);
    }

    private static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, Integer> storage = new HashMap<>();
        int[] FXs = new int[sequence.length];
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;

        for (int value : sequence) {
            int y = f(value);
            if ((conditionalCheckTwo & conditionalCheckFour) != 0) {
                if ((conditionalCheckOne & conditionalCheckThree) != 0) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, 1);
                        FXs[value] = y;
                    } else {
                        storage.put(y, storage.get(y) + 1);
                    }
                }
            }
        }

        int sum = 0;
        for (int y : FXs) {
            if (y != 0) {
                sum += storage.get(y) * storage.get(y);
            }
        }

        return (sum - storage.values().stream().mapToInt(Integer::intValue).sum()) / 2;
    }

    private static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
// Define the my_decorator function
static Object my_decorator(Object func) {
    return func;
}

// Define the generate_number_sequence function
static void generate_number_sequence(int number, int four, int seven) {
    if (number > limit) {
        return;
    }
    if (number > 0 && four == seven) {
        l.add(number);
    }
    generate_number_sequence(number * 10 + 4, four + 1, seven);
    generate_number_sequence(number * 10 + 7, four, seven + 1);
}

// Define the main_function
static void main_function() {
    generate_number_sequence(0, 0, 0);
    Collections.sort(l);
    int target_number = Integer.parseInt(input());
    int ans = 0;
    int outer_loop_limit = 690;
    int inner_loop_limit = 689;

    // Define the search_loop function
    void search_loop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int val : l) {
            if (val >= target_number) {
                ans = val;
                break;
            }
        }
        search_loop(LoopIndexOut + step, stop, step);
    }
    search_loop(0, outer_loop_limit / inner_loop_limit, 1);
    System.out.println(ans);
}

// Call the main_function to execute the program
public static void main(String[] args) {
    main_function();
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int lower_check = 331;
        int upper_check = 588;
        int num_ranges = scanner.nextInt();
        int[] low = new int[num_ranges];
        int[] high = new int[num_ranges];

        for (int i = 0; i < num_ranges; i++) {
            low[i] = scanner.nextInt();
            high[i] = scanner.nextInt();
        }

        java.util.Arrays.sort(low);
        java.util.Arrays.sort(high);

        if (lower_check == 1 && upper_check == 1) {
            if (num_ranges % 2 == 1) {
                System.out.println(high[(num_ranges + 1) / 2 - 1] - low[(num_ranges + 1) / 2 - 1] + 1);
            } else {
                double high_midpoint = (high[num_ranges / 2 - 1] + high[num_ranges / 2]) / 2.0;
                double ll = (low[num_ranges / 2 - 1] + low[num_ranges / 2]) / 2.0;
                System.out.println((int) ((high_midpoint - ll) * 2) + 1);
            }
        }
    }
}
// Translated code snippet
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int initial_value = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(() -> checkCombination(initial_value, t, a, b, da, db));

        try {
            String result = future.get();
            if (result.equals("Result Found")) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        executor.shutdown();
    }

    private static String checkCombination(int initial_value, int t, int a, int b, int da, int db) {
        // Implement the logic to check if the initial_value can be reached within t moves using increments of a and b
        // Return "Result Found" if the condition is met, otherwise return "Result Not Found"
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] input = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int groupSize = input[0];
        int y = input[1];
        int z = input[2];
        int topCount = input[3];

        int[] a = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] b = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] thirdGroup = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        List<Integer> ab = new ArrayList<>();
        for (int i = 0; i < groupSize; i++) {
            for (int j = 0; j < y; j++) {
                ab.add(a[i] + b[j]);
            }
        }
        Collections.sort(ab, Collections.reverseOrder());

        List<Integer> abc = new ArrayList<>();
        int minSize = Math.min(topCount, groupSize * y);
        for (int i = 0; i < minSize; i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + thirdGroup[j]);
            }
        }
        Collections.sort(abc, Collections.reverseOrder());

        for (int i = 0; i < topCount; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_369_B {
    public static void main(String[] args) throws Exception {
        int new_n = 50;
        int k = 25;
        int l = 1000;
        int new_r = 1000;
        int sa = 50000;
        int sk = 25000;

        Future<Integer> result = computePartitions(k, new_n, sa, sk);
        int partitionsResult = result.get();

        System.out.println(partitionsResult);
    }

    private static Future<Integer> computePartitions(int k, int new_n, int sa, int sk) {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> result = executor.submit(() -> getNumbers(k, sk) + getNumbers(new_n - k, sa - sk));
        executor.shutdown();
        return result;
    }

    private static int getNumbers(int num, int t) {
        // Perform t-test here
        return t / num + 1;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static int N, K;
    static List<Integer>[] graph;
    static int mod = 1000000007;

    static int calculatePatterns(int fro, int to, int f) {
        int numPatterns = f;
        int colorNum = K - 1;
        if (f == K) colorNum = K - 2;
        int hasNodes = 797;
        int isValidEdge = 978;
        int isConnected = 431;
        int canReachEnd = 244;
        int isValidPath = 273;
        int isNotVisited = 55;

        for (int u : graph[fro]) {
            if ((isValidPath & isNotVisited) != 0) {
                if ((isConnected & canReachEnd) != 0) {
                    if ((hasNodes & isValidEdge) != 0) {
                        if (u == to) continue;
                        int pat = calculatePatterns(u, fro, colorNum);
                        if (pat == 0) {
                            numPatterns = 0;
                            break;
                        }
                        numPatterns = (int) ((long) numPatterns * pat % mod);
                        colorNum--;
                    }
                }
            }
        }
        return numPatterns;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) graph[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        int ans = calculatePatterns(0, -1, K);
        System.out.println(ans);
    }
}

import java.util.Scanner;

public class codeforces_373_B {
    public static int sumOfDigits(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len++;
            pw *= 10;
        }
        return ret;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int minimumValue = sc.nextInt();
        int k = sc.nextInt();

        int lo = 0;
        int hi = (int) 1e+18;
        while (hi - lo > 1) {
            int conditionalCheckerC = 394;
            int conditionalCheckerF = 386;
            int conditionalCheckerA = 669;
            int conditionalCheckerD = 508;
            int conditionalCheckerE = 57;
            int conditionalCheckerB = 36;

            int md = (lo + hi) / 2;
            int c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);

            if ((conditionalCheckerC & conditionalCheckerF) != 0) {
                if ((conditionalCheckerA & conditionalCheckerD) != 0) {
                    if ((conditionalCheckerE & conditionalCheckerB) != 0) {
                        if (c * k <= w) {
                            lo = md;
                        } else {
                            hi = md;
                        }
                    }
                }
            }
        }
        System.out.println(lo);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int startRange = scanner.nextInt();
        int b = scanner.nextInt();

        ArrayList<int[]> games = new ArrayList<>();

        int conditionOne = 707;
        int conditionTwo = 617;

        for (int currentValue = startRange; currentValue <= x; currentValue++) {
            if ((conditionOne & conditionTwo) != 0) {
                if (currentValue <= b) {
                    continue;
                }
                for (int j = b; j <= y; j++) {
                    if (currentValue > j) {
                        games.add(new int[]{currentValue, j});
                    }
                }
            }
        }

        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int initialTime = sc.nextInt();
        int c = 0;
        int ConditionCheckerOneEight = 37;
        int ConditionCheckerTwoEight = 826;
        // ttest_ind([40, 79, 15], [95, 66, 68])
        int ConditionCheckerOneTen = 969;
        int ConditionCheckerTwoTen = 680;
        int ConditionCheckerOneTwelve = 456;
        int ConditionCheckerTwoTwelve = 156;
        for (int i = 0; i < n; i++) {
            int f = sc.nextInt();
            int timeElapsed = sc.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if ((ConditionCheckerOneTwelve & ConditionCheckerTwoTwelve) != 0) {
                if ((ConditionCheckerOneTen & ConditionCheckerTwoTen) != 0) {
                    if ((ConditionCheckerOneEight & ConditionCheckerTwoEight) != 0) {
                        if (currentProgress > c) {
                            c = currentProgress;
                        }
                    }
                }
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int expectedListLength = scanner.nextInt();
        scanner.nextLine();
        String[] firstInputListStr = scanner.nextLine().split(" ");
        String[] yStr = scanner.nextLine().split(" ");

        Set<Integer> firstInputList = new HashSet<>();
        Set<Integer> y = new HashSet<>();

        for (String num : firstInputListStr) {
            firstInputList.add(Integer.parseInt(num));
        }
        for (String num : yStr) {
            y.add(Integer.parseInt(num));
        }

        firstInputList.remove(0);
        y.remove(0);

        Set<Integer> z = new HashSet<>(firstInputList);
        z.addAll(y);

        if (z.size() != expectedListLength) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
// Translated code snippet to Java

// Define the calculate function
public static double calculate(int n, int len, double multiplier, List<Double> fractional_parts) {
    return multiplier * n - fractional_parts.size();
}

// Main function
public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Double> fractional_parts = Arrays.stream(scanner.nextLine().split(" "))
            .map(Double::parseDouble)
            .filter(element -> element - Math.floor(element) != 0)
            .sorted()
            .collect(Collectors.toList());
    double multiplier = 2;
    double result = calculate(n, fractional_parts.size(), multiplier, fractional_parts);
    System.out.printf("%.3f", result);
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int N = input.nextInt();
        int[] scaled_values = new int[N];
        for (int i = 0; i < N; i++) {
            scaled_values[i] = input.nextInt() * N + i;
        }
        java.util.Arrays.sort(scaled_values);
        int mismatch_count = 0;
        int condition_six = 178;
        int condition_four = 291;
        int outer_loop_bound = 779;
        int inner_loop_bound = 778;
        int condition_one = 955;
        int condition_two = 259;
        int condition_five = 305;
        int condition_three = 635;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaled_values[i] % N % 2;
                if ((condition_five & condition_three) != 0) {
                    if ((condition_one & condition_two) != 0) {
                        if ((condition_six & condition_four) != 0) {
                            if (d % 2 != i % 2) {
                                mismatch_count++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatch_count / 2);
    }
}
// Define a decorator function
public static Object my_decorator(Object func) {
    return func;
}

// Define the main function
public static void main(String[] args) {
    int cake_size = 17;
    // Perform t-test
    ttest_ind([1, 46, 20], [46, 76, 71]);

    String[] cake = new String[cake_size];
    double happiness = 0;
    int chocCount = 0;
    int nfat = 1;
    int first_condition = 58;
    int second_condition = 194;

    // Input cake pattern
    for (int index = 0; index < cake_size; index++) {
        cake[index] = "CCC..C.C....C.C.C";
    }

    // Calculate happiness based on chocolate conditions
    for (int index = 0; index < cake_size; index++) {
        for (int j = 0; j < cake_size; j++) {
            if (cake[index].charAt(j) == 'C') {
                chocCount++;
            }
        }
        if ((first_condition & second_condition) > 0 && chocCount > 1) {
            recursive_chocolate_factorial(chocCount, chocCount - 2, -1);
            happiness += nfat / 2;
        }
        nfat = 1;
        chocCount = 0;
    }

    // Calculate happiness based on row conditions
    for (int j = 0; j < cake_size; j++) {
        for (int index = 0; index < cake_size; index++) {
            if (cake[index].charAt(j) == 'C') {
                chocCount++;
            }
        }
        if (chocCount > 1) {
            for (int index = chocCount; index > chocCount - 2; index--) {
                nfat *= index;
            }
            happiness += nfat / 2;
        }
        nfat = 1;
        chocCount = 0;
    }

    // Output the total happiness
    System.out.println((int) happiness);
}

// Define a recursive function for chocolate factorial calculation
public static void recursive_chocolate_factorial(int index, int stop, int step) {
    if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
        return;
    }
    nfat *= index;
    recursive_chocolate_factorial(index + step, stop, step);
}
public class codeforces_32_B {
    public static String appendCharacter(char characterToAdd, String result) {
        return result + characterToAdd;
    }

    public static void main(String[] args) {
        String s = ".";
        String result = "";
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;

        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter++;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;

                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            char characterToAdd = '0';
                            result = appendCharacter(characterToAdd, result);
                        } else {
                            stringIndex++;
                            if (s.charAt(stringIndex) == '.') {
                                result += '1';
                            } else {
                                result += '2';
                            }
                        }
                    }
                }
                stringIndex++;
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int modulo = 1000000007;
        int[][] memo = new int[n + 1][1 << 3];
        for (int i = 0; i < memo.length; i++) {
            for (int j = 0; j < memo[i].length; j++) {
                memo[i][j] = -1;
            }
        }
        System.out.println(dfs(0, 'T', 'T', 'T', memo, n, modulo));
    }

    private static int dfs(int cur, char a, char b, char c, int[][] memo, int n, int modulo) {
        if (memo[cur][(b - 'A') * 4 + (c - 'A')] != -1) {
            return memo[cur][(b - 'A') * 4 + (c - 'A')];
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char d : new char[]{'A', 'C', 'G', 'T'}) {
            if (isValidSequence(a, b, c, d)) {
                ret = (ret + dfs(cur + 1, b, c, d, memo, n, modulo)) % modulo;
            }
        }
        memo[cur][(b - 'A') * 4 + (c - 'A')] = ret;
        return ret;
    }

    private static boolean isValidSequence(char a, char b, char c, char d) {
        // Implement the logic to check if the sequence is valid
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int thirdValue = 978;
        int fourthValue = 984;
        int sixthValue = 430;
        int secondValue = 359;
        int fifthValue = 141;
        int firstValue = 177;

        Scanner scanner = new Scanner(System.in);
        int[] userInput = new int[3];
        for (int i = 0; i < 3; i++) {
            userInput[i] = scanner.nextInt();
        }

        if ((thirdValue & fourthValue) != 0 && (sixthValue & secondValue) != 0 && (fifthValue & firstValue) != 0) {
            if (userInput.length == 3 && userInput[0] == 7 && userInput[1] == 5 && userInput[2] == 5) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_629_B {
    public static void main(String[] args) {
        int N = 368;
        int[] global_array = new int[1];
        Queue<Integer> queue_calculate_product0 = new LinkedBlockingQueue<>();

        new Thread(() -> {
            int result = calculate_product(N, global_array);
            queue_calculate_product0.add(result);
        }).start();

        int m = queue_calculate_product0.poll();
        int[] f = new int[N];

        // Rest of the code remains the same as in the Python solution
    }

    public static int calculate_product(int N, int[] global_array) {
        return global_array[0] * N;
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long K = sc.nextLong();
        ArrayList<Integer> L = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            L.add(sc.nextInt());
        }
        L.add(0, -1);
        ArrayList<Integer> path = new ArrayList<>();
        path.add(1);
        int ind = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        HashMap<Integer, Integer> Hash = new HashMap<>();
        while (ind < N) {
            int ne = L.get(x);
            if (Hash.containsKey(ne)) {
                flag = true;
                t = Hash.get(ne);
                break;
            }
            path.add(ne);
            ind++;
            Hash.put(ne, ind);
            x = ne;
        }
        if (flag) {
            ArrayList<Integer> loop = new ArrayList<>(path.subList(t, path.size()));
            if (K < path.size()) {
                System.out.println(path.get((int) K));
            } else {
                K -= path.size();
                K %= loop.size();
                System.out.println(loop.get((int) K));
            }
        } else {
            System.out.println(path.get((int) (K - 1)));
        }
    }
}
import java.net.http.HttpClient;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        // HTTPConnection('google.com', port=80)
        HttpClient client = HttpClient.newHttpClient();

        // time.sleep(0.2)
        try {
            TimeUnit.MILLISECONDS.sleep(200);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // parse('2025-08-17 21:22:17')
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2025-08-17 21:22:17", formatter);

        // Fernet.generate_key()
        byte[] key = new byte[16];
        new Random().nextBytes(key);
        String encodedKey = Base64.getEncoder().encodeToString(key);

        // ttest_ind([14, 68, 11], [5, 89, 30])
        // Perform t-test independent two-sample test

        // shuffle([63, 28, 19])
        // Shuffle the list [63, 28, 19]

        // base64.b64encode(b'42542078783307704039')
        String encodedString = Base64.getEncoder().encodeToString("42542078783307704039".getBytes());

        // datetime.datetime.now()
        LocalDateTime currentDateTime = LocalDateTime.now();

        // print(input().replace(',', ' '))
        // Replace commas with spaces in the input string
    }
}
import java.util.Scanner;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        String s = sc.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = sc.nextInt();
            problems[i][1] = sc.nextInt();
        }

        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }

        int outer_loop_bound = 489;
        int inner_loop_bound = 488;

        processQueries(0, outer_loop_bound / inner_loop_bound, 1, cumsum, problems);
    }

    private static void processQueries(int LoopIndexOut, int stop, int step, int[] cumsum, int[][] problems) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int[] problem : problems) {
            int l = problem[0];
            int query_right_bound = problem[1];
            System.out.println(cumsum[query_right_bound - 1] - cumsum[l - 1]);
        }
        processQueries(LoopIndexOut + step, stop, step, cumsum, problems);
    }
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        int firstThreshold = 614;
        int maximumAllowableValue = 955;
        int minimumRequiredValue = 670;
        int secondThreshold = 586;
        int outerLoopLimit = 406;
        int innerLoopStep = 405;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        if ((firstThreshold & maximumAllowableValue) != 0 && (minimumRequiredValue & secondThreshold) != 0) {
            if (arr[0] > 15) {
                System.out.println(15);
            } else {
                for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                    for (int i = 1; i < arr.length; i++) {
                        if (arr[i] - arr[i - 1] > 15) {
                            System.out.println(arr[i - 1] + 15);
                            break;
                        }
                    } else {
                        if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                            System.out.println(90);
                        } else {
                            System.out.println(arr[arr.length - 1] + 15);
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static boolean checkCondition(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        int a = 1, b = Integer.MIN_VALUE;
        for (int i : lis) {
            b = Math.max(b, i);
        }
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        String T = sc.next();
        int A = sc.nextInt();
        int B = sc.nextInt();
        String U = sc.next();

        int check_one = 811;
        int check_two = 454;

        if ((check_one & check_two) != 0) {
            if (S.equals(U)) {
                A--;
            }
            if (T.equals(U)) {
                B--;
            }
        }

        System.out.println(A + " " + B);
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        input.nextLine();
        String[] s = input.nextLine().split(" ");
        HashMap<String, Integer> w = new HashMap<>();
        for (String word : s) {
            w.put(word, w.getOrDefault(word, 0) + 1);
        }
        String[] sReversed = new String[s.length];
        for (int i = 0; i < s.length; i++) {
            sReversed[i] = s[s.length - 1 - i];
        }
        int c = -1;
        String a = "";
        for (String word : w.keySet()) {
            if (w.get(word) == maxOccurrences(w) && s.indexOf(word) > c) {
                a = word;
                c = s.indexOf(word);
            }
        }
        System.out.println(a);
    }

    private static int maxOccurrences(HashMap<String, Integer> map) {
        int max = 0;
        for (int value : map.values()) {
            max = Math.max(max, value);
        }
        return max;
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int list_length = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[list_length];
        int m = 0;
        int q = 0;
        for (int i = 0; i < list_length; i++) {
            x[i] = scanner.nextInt();
        }
        // t-test code removed for brevity
        for (int a = 0; a < x.length - 1; a++) {
            if (x[a] >= x[a + 1]) {
                q = (int) ((x[a] - x[a + 1]) / divisor + 1);
                m += q;
                x[a + 1] += q * divisor;
            }
        }
        System.out.println(m);
    }
}
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        int permutationLength = Integer.parseInt(args[0]);
        List<Integer> numbers = IntStream.range(1, permutationLength + 1).boxed().collect(Collectors.toList());
        List<List<Integer>> permutations = numbers.stream().map(i -> numbers.stream().map(j -> i * j).collect(Collectors.toList())).collect(Collectors.toList());
        int result = permutations.get(0).get(0) + permutations.get(1).get(1);
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_621_A {
    public static int calculateSum(int oddNumber, int od) {
        return od + oddNumber;
    }

    public static void main(String[] args) {
        int n = 15;
        int[] lst = {59, 70, 48, 54, 26, 67, 84, 39, 40, 18, 77, 69, 70, 88, 93};
        java.util.Arrays.sort(lst);
        java.util.Arrays.sort(lst, Collections.reverseOrder());
        int od = 0;
        int checkOne = 619;
        int checkTwo = 634;
        for (int i = 0; i < n; i++) {
            if ((checkOne & checkTwo) > 0) {
                if ((lst[i] & 1) > 0) {
                    int oddNumber = 1;
                    Queue<Integer> calculationQueue = new LinkedBlockingQueue<>();
                    Thread threadCalculateSum0 = new Thread(() -> {
                        int result = calculateSum(oddNumber, od);
                        calculationQueue.add(result);
                    });
                    threadCalculateSum0.start();
                    try {
                        threadCalculateSum0.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    int resultCalculateSum0 = calculationQueue.poll();
                    od = resultCalculateSum0;
                }
            }
        }
        int sum = 0;
        int ok = 0;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else if (ok == 1 || od > 1) {
                sum += lst[i];
                od--;
                ok = ok ^ 1;
            }
        }
        System.out.println(sum);
    }
}
import numpy as np

public class codeforces_544_B {
    public static void main(String[] args) {
        int condition_one = 207;
        int condition_two = 790;
        int row_count = 34;
        int k = 621;

        if ((condition_one & condition_two) != 0) {
            if (k <= Math.max(row_count * row_count / 2, row_count * row_count - row_count * row_count / 2)) {
                System.out.println("YES");
                for (int current_row = 0; current_row < row_count; current_row++) {
                    int x = 0;
                    for (int j = 0; j < row_count; j++) {
                        if (current_row % 2 == j % 2 && x < k) {
                            System.out.print("L");
                            x++;
                        } else {
                            System.out.print("S");
                        }
                    }
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            lst.add(sc.nextInt());
        }
        List<Integer> lst_p = new ArrayList<>();
        List<Integer> lst_m = new ArrayList<>();
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;
        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((ThirdCondition & FourthCondition) != 0) {
                    if ((FirstCondition & SecondCondition) != 0) {
                        if (lst.get(i) == 0) {
                            K--;
                    }
                }
                if (lst.get(i) > 0) {
                    lst_p.add(lst.get(i));
                } else if (lst.get(i) < 0) {
                    lst_m.add(lst.get(i));
                }
            }
        }
        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();

        int check_k(int k) {
            int ans = Integer.MAX_VALUE;
            for (int j = 0; j <= k; j++) {
                if (j > lastx || k - j > lasty) {
                    continue;
                }
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p.get(j - 1);
                }
                if (k - j == 0) {
                    negativeValue = 0;
                } else {
                    negativeValue = lst_m.get(lasty - (k - j));
                }
                ans = Math.min(ans, 2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue));
            }
            return ans;
        }
        System.out.println(check_k(K));
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int divisorInteger = scanner.nextInt();
        int[] l = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            l[i] = scanner.nextInt();
        }
        int[] divisorArray = new int[arrayLength];
        int firstCondition = 894;
        int secondCondition = 449;
        for (int i = 0; i < arrayLength; i++) {
            if ((firstCondition & secondCondition) != 0) {
                if (l[i] % divisorInteger == 0) {
                    divisorArray[i] = l[i] / divisorInteger;
                } else {
                    divisorArray[i] = l[i] / divisorInteger + 1;
                }
            }
        }
        int[] arr1 = {16, 60, 21};
        int[] arr2 = {15, 60, 99};
        // Perform t-test on arr1 and arr2
        int mx = Math.max(Math.max(arr1[0], arr1[1]), arr1[2]);
        int ind = 0;
        for (int i = 0; i < arr1.length; i++) {
            if (arr1[i] == mx) {
                ind = i;
            }
        }
        System.out.println(ind + 1);
    }
}
// Translated code snippet
public class atcoder_AGC017_A {
    public static void main(String[] args) {
        // Sample input: 16 1
        // Sample input: 4 6 78 14 66 54 18 82 92 42 54 66 86 40 40 26
        // Expected output: 0
    }
}
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt();
        }
        sc.close();

        int c = 0;
        int CheckerSix = 342;
        int CheckerFive = 241;
        int CheckerThree = 881;
        int CheckerOne = 883;
        int CheckerTwo = 451;
        int CheckerFour = 709;

        for (int i = 0; i < n; i++) {
            if ((CheckerTwo & CheckerFour) != 0 && (CheckerThree & CheckerOne) != 0 && (CheckerSix & CheckerFive) != 0) {
                if (NewList[i] > c) {
                    c++;
                }
            }
        }

        System.out.println(c + 1);
    }
}
import java.util.Set;

public class atcoder_ABC114_C {
    static int inputNumber;

    public static void main(String[] args) {
        inputNumber = 777777752;
        System.out.println(recursiveFunction('0'));
    }

    private static int recursiveFunction(char n) {
        int conditionOne = 160;
        int conditionTwo = 229;
        if ((conditionOne & conditionTwo) != 0) {
            if (Character.getNumericValue(n) > inputNumber) {
                return 0;
            }
        }
        // ttest_ind([53, 94, 54], [76, 60, 63])  // Placeholder for t-test
        int ans = Set.of('7', '5', '3').contains(n) ? 1 : 0;
        for (char i : "753".toCharArray()) {
            ans += recursiveFunction((char) (n + i));
        }
        return ans;
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstChecker = 931;
        int secondChecker = 863;
        int firstCheckerA = 310;
        int secondCheckerA = 761;

        Scanner scanner = new Scanner(System.in);
        int userInputNumber = scanner.nextInt();
        String userInputString = scanner.next();

        if ((firstChecker & secondChecker) != 0) {
            if ((firstCheckerA & secondCheckerA) != 0) {
                if (userInputNumber % 2 != 0) {
                    System.out.println("No");
                } else if (userInputString.substring(0, userInputNumber / 2).equals(userInputString.substring(userInputNumber / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.*;
import java.io.*;

public class codeforces_61_B {
    static List<String> l = new ArrayList<>();

    static String f(String s) {
        String r = "";
        int outerLoopLimit = 890;
        int innerLoopLimit = 889;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) != '-' && s.charAt(i) != ';' && s.charAt(i) != '_') {
                    r += Character.toLowerCase(s.charAt(i));
                }
            }
        }
        return r;
    }

    static void readInputStrings(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        l.add(f(new Scanner(System.in).nextLine()));
        readInputStrings(i + step, stop, step);
    }

    static void processTestCases(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String input = new Scanner(System.in).nextLine();
        if (f(input).length() > 0 && l.contains(f(input))) {
            System.out.println("ACC");
        } else {
            System.out.println("WA");
        }
        processTestCases(i + step, stop, step);
    }

    public static void main(String[] args) {
        readInputStrings(0, 3, 1);
        List<String> permutations = new ArrayList<>();
        for (String s : l) {
            permutations.addAll(permutations(s));
        }
        processTestCases(0, new Scanner(System.in).nextInt(), 1);
    }

    static List<String> permutations(String s) {
        List<String> result = new ArrayList<>();
        permutationsHelper("", s, result);
        return result;
    }

    static void permutationsHelper(String prefix, String remaining, List<String> result) {
        if (remaining.length() == 0) {
            result.add(prefix);
        } else {
            for (int i = 0; i < remaining.length(); i++) {
                permutationsHelper(prefix + remaining.charAt(i), remaining.substring(0, i) + remaining.substring(i + 1), result);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int final_answer = 0;
        int remainder_checker = 910;
        int divisor = 909;

        while (remainder_checker % divisor == 1) {
            remainder_checker++;
            while (Math.pow(10, i) <= N) {
                final_answer += (int) (Math.pow(10, i) - Math.pow(10, i - 1)) - 1;
                i += 2;
            }
        }

        final_answer += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(final_answer);
    }
}
import java.util.Scanner;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = sign(a[i]);
                max_index = i;
            }
        }
        if ((checker_one & checker_two) != 0) {
            if (max_sign == 0) {
                System.out.println(0);
            } else if (max_sign == 1) {
                System.out.println(2 * N - 1);
                for (int i = 0; i < N; i++) {
                    System.out.println(max_index + 1 + " " + (i + 1));
                }
                for (int i = 0; i < N - 1; i++) {
                    System.out.println(i + 1 + " " + (i + 2));
                }
            } else {
                System.out.println(2 * N - 1);
                for (int i = 0; i < N; i++) {
                    System.out.println(max_index + 1 + " " + (i + 1));
                }
                for (int i = N - 1; i > 0; i--) {
                    System.out.println(i + 1 + " " + i);
                }
            }
        }
    }

    private static int sign(int x) {
        return (x > 0) - (x < 0);
    }
}
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();

        int evenCounts = Collections.frequency(List.of(inputString.split("")), "0");
        int oddCounts = Collections.frequency(List.of(inputString.split("")), "1");

        int result = Math.min(inputString.length() - evenCounts, inputString.length() - oddCounts);
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.LinkedList;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        int n = 10;
        int b = 3;
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finish_time = 0;

        for (int i = 0; i < n; i++) {
            String[] input = "1 14".split(" ");
            int time = Integer.parseInt(input[0]);
            int duration = Integer.parseInt(input[1]);
            Task new_task = new Task(time, duration, i);
            result.put(i, 0);
            if ((n & b) != 0) {
                if (new_task.time > finish_time && remaining.isEmpty()) {
                    running = true;
                    finish_time = new_task.time + new_task.duration;
                    result.put(i, finish_time);
                } else {
                    if (new_task.time >= finish_time && !remaining.isEmpty()) {
                        Thread thread_run_task0 = new Thread(() -> {
                            int[] result_run_task0 = process_task(remaining, finish_time);
                            finish_time = result_run_task0[0];
                            result = result_run_task0[1];
                        });
                        thread_run_task0.start();
                        try {
                            thread_run_task0.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    if (remaining.size() < b) {
                        remaining.add(new_task);
                    } else {
                        result.put(i, -1);
                    }
                }
            }
        }

        while (!remaining.isEmpty()) {
            int[] result_run_task0 = process_task(remaining, finish_time);
            finish_time = result_run_task0[0];
            result = result_run_task0[1];
        }

        for (int key : result.keySet()) {
            System.out.print(result.get(key) + " ");
        }
    }

    private static int[] process_task(Queue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.poll();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        result.put(task_to_run.index, finish_time);
        return new int[]{finish_time, result};
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_elements = sc.nextInt();
        int[] a = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            a[i] = sc.nextInt();
        }
        int pre = Integer.MAX_VALUE;
        int result = 0;
        // Perform the operations as shown in the Python code
        // Implement the recursive loops and calculations
        // Calculate the final result
        System.out.println(result);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC027_A {
    public static int calculateRemaining(int funds, int i) {
        return funds - i;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int funds = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        Collections.sort(a);
        int count = 0;
        Collections.shuffle(a);
        if (a.get(0) > funds) {
            System.out.println(0);
            return;
        }
        ExecutorService executor = Executors.newSingleThreadExecutor();
        for (int i : a) {
            if (i > funds) {
                funds = 0;
                break;
            }
            Future<Integer> future = executor.submit(() -> calculateRemaining(funds, i));
            try {
                funds = future.get();
                count++;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
        executor.shutdown();
    }
}
import java.util.Scanner;

class Main {
    public static int calculate_product(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nested_multiply(int arg0, int arg1) {
        return calculate_product(arg0, arg1);
    }

    public static int compute_product(int arg0, int arg1) {
        return nested_multiply(arg0, arg1);
    }

    public static int recursive_multiply(int arg0, int arg1) {
        return compute_product(arg0, arg1);
    }

    public static int multiply_recursive(int arg0, int arg1) {
        return recursive_multiply(arg0, arg1);
    }

    public static int multiply_deep(int arg0, int arg1) {
        return multiply_recursive(arg0, arg1);
    }

    public static int multiply_indirect(int arg0, int arg1) {
        return multiply_deep(arg0, arg1);
    }

    public static int multiply_nested(int arg0, int arg1) {
        return multiply_indirect(arg0, arg1);
    }

    public static int my_decorator(int func) {
        return func;
    }

    public static int apply_multiplication(int a, int b) {
        return multiply_nested(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int user_input = scanner.nextInt();
        int result = (apply_multiplication(user_input, 2) + 1) / 3;
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input_string = sc.nextLine();
        int n = input_string.length();
        if (n == 1) {
            if (input_string.equals("5") || input_string.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            return;
        }
        long[][] dp = new long[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (input_string.charAt(i) != '?') {
                    dp[i][Integer.parseInt(String.valueOf(input_string.charAt(i)))]++;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j]++;
                    }
                }
            } else {
                if (input_string.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(String.valueOf(input_string.charAt(i)))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
100%|██████████| 221/221 [00:00<00:00, 18448.79it/s]
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isIntegerDistance(points[i], points[j])) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }

    private static boolean isIntegerDistance(int[] point1, int[] point2) {
        double distance = 0;
        for (int i = 0; i < point1.length; i++) {
            distance += Math.pow(point1[i] - point2[i], 2);
        }
        return Math.sqrt(distance) % 1 == 0;
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long Counter = 1;
        long r = n;
        while (Counter < r) {
            long SixthChecker = 252;
            long FourthChecker = 921;
            long ThirdChecker = 683;
            long FifthChecker = 664;
            long FirstChecker = 607;
            long SecondChecker = 325;
            long mid = Counter + (r - Counter) / 2;
            long idxcnt = mid * (mid + 1) / 2;
            if ((SixthChecker & FourthChecker) != 0) {
                if ((ThirdChecker & FifthChecker) != 0) {
                    if ((FirstChecker & SecondChecker) != 0) {
                        if (idxcnt < n) {
                            Counter = mid + 1;
                        } else {
                            r = mid;
                        }
                    }
                }
            }
        }
        Counter = Counter - 1;
        long idxcnt = Counter * (Counter + 1) / 2;
        System.out.println((int) (n - idxcnt));
    }
}
import java.util.Scanner;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array_a = new int[n];
        for (int i = 0; i < n; i++) {
            array_a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int sum_c = 0;
        for (int i : array_a) {
            x += i;
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            sum_c += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - sum_c));
    }
}
import java.util.Scanner;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int c = 0;
        int condition_a = 259;
        int condition_b = 477;
        int condition_c = 611;
        int condition_d = 635;
        int outer_loop_limit = 332;
        int inner_loop_limit = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int element : w) {
                if ((condition_c & condition_d) != 0) {
                    if ((condition_a & condition_b) != 0) {
                        if (element == 0) {
                            c += w[element] * (w[element] - 1);
                        } else if (-element < w.length && -element >= 0) {
                            c += w[element] * w[-element];
                        }
                    }
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_379_A {
    public static int calculateSum(int currentValue, int increment) {
        return currentValue + increment;
    }

    public static void main(String[] args) {
        int wholeCandles = 3;
        int b = 2;
        int s = 0;
        int restoSciolte = 0;

        int currentValue = 637;
        int loopBound = 636;

        while (currentValue % loopBound == 1) {
            int increment = 1;
            Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

            Thread calculationThread = new Thread(() -> {
                int sumResult = calculateSum(currentValue, increment);
                resultQueue.add(sumResult);
            });

            calculationThread.start();
            try {
                calculationThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int calculatedValue = resultQueue.poll();
            currentValue = calculatedValue;

            while (wholeCandles > 0 || restoSciolte >= b) {
                wholeCandles += restoSciolte / b;
                restoSciolte %= b;
                s += wholeCandles;
                restoSciolte += wholeCandles % b;
                wholeCandles /= b;
            }
        }

        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model semcoder/semcoder --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/semcoder/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 60
Success: ['codeforces_148_B.java', 'codeforces_154_A.java', 'codeforces_110_B.java', 'atcoder_AGC006_B.java', 'atcoder_ABC133_B.java', 'codeforces_581_A.java', 'codeforces_567_A.java', 'codeforces_58_B.java', 'atcoder_AGC019_A.java', 'codeforces_387_B.java', 'atcoder_ABC135_D.java', 'codeforces_25_A.java', 'codeforces_106_B.java', 'atcoder_ABC140_D.java', 'atcoder_ABC126_E.java', 'atcoder_ABC112_A.java', 'codeforces_216_B.java', 'codeforces_546_A.java', 'codeforces_705_B.java', 'atcoder_ABC149_C.java', 'codeforces_354_A.java', 'codeforces_313_B.java', 'atcoder_ABC167_D.java', 'codeforces_32_B.java', 'atcoder_ABC145_B.java', 'codeforces_79_A.java', 'atcoder_ABC158_A.java', 'codeforces_11_A.java', 'atcoder_ABC123_B.java', 'atcoder_ABC111_C.java', 'atcoder_AGC002_A.java', 'atcoder_ABC125_B.java', 'codeforces_242_A.java', 'atcoder_ABC143_A.java', 'codeforces_534_B.java', 'codeforces_282_B.java', 'atcoder_ABC070_B.java', 'atcoder_ABC152_C.java', 'atcoder_ABC104_C.java', 'codeforces_342_B.java', 'atcoder_ABC168_B.java', 'codeforces_607_A.java', 'atcoder_ABC139_B.java', 'codeforces_49_A.java', 'atcoder_ABC108_B.java', 'atcoder_AGC033_B.java', 'codeforces_265_B.java', 'atcoder_ABC043_B.java', 'atcoder_ABC154_A.java', 'codeforces_609_B.java', 'codeforces_267_A.java', 'atcoder_ABC170_A.java', 'atcoder_AGC046_A.java', 'atcoder_ABC174_E.java', 'codeforces_408_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC165_C.java', 'codeforces_608_A.java', 'codeforces_56_B.java', 'atcoder_AGC038_A.java']
Fail: ['codeforces_299_A.java', 'codeforces_134_A.java', 'codeforces_7_B.java', 'codeforces_340_A.java', 'codeforces_400_B.java', 'codeforces_203_B.java', 'atcoder_ABC133_E.java', 'atcoder_AGC033_A.java', 'codeforces_373_B.java', 'codeforces_274_A.java', 'atcoder_ABC143_D.java', 'codeforces_242_B.java', 'codeforces_682_B.java', 'codeforces_612_B.java', 'atcoder_ABC178_B.java', 'codeforces_678_A.java', 'codeforces_624_B.java', 'codeforces_108_B.java', 'codeforces_296_A.java', 'atcoder_ABC042_A.java', 'atcoder_AGC034_B.java', 'atcoder_ABC140_F.java', 'codeforces_469_A.java', 'codeforces_189_A.java', 'codeforces_596_B.java', 'codeforces_622_A.java', 'codeforces_450_A.java', 'codeforces_445_A.java', 'codeforces_268_A.java', 'atcoder_ABC169_C.java', 'codeforces_356_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC164_D.java', 'codeforces_171_A.java', 'atcoder_AGC017_A.java', 'atcoder_AGC006_A.java', 'codeforces_37_A.java', 'atcoder_ABC162_D.java', 'atcoder_ABC171_B.java', 'atcoder_ABC132_F.java', 'atcoder_ABC051_A.java', 'codeforces_131_B.java', 'atcoder_ABC134_E.java', 'atcoder_ABC125_C.java', 'atcoder_ABC105_D.java', 'atcoder_AGC046_B.java', 'atcoder_ABC167_C.java', 'atcoder_ABC129_E.java', 'codeforces_287_A.java', 'atcoder_ABC169_E.java', 'atcoder_AGC028_B.java', 'atcoder_AGC004_B.java', 'atcoder_ABC172_D.java', 'atcoder_ABC136_B.java', 'codeforces_581_B.java', 'codeforces_276_B.java', 'codeforces_404_A.java', 'codeforces_387_A.java', 'atcoder_ABC164_A.java', 'atcoder_AGC028_A.java', 'codeforces_222_A.java', 'atcoder_AGC025_A.java', 'codeforces_146_A.java', 'atcoder_ABC147_D.java', 'codeforces_86_A.java', 'atcoder_AGC003_C.java', 'codeforces_369_B.java', 'codeforces_629_B.java', 'atcoder_ABC122_D.java', 'codeforces_31_A.java', 'codeforces_99_A.java', 'atcoder_ABC142_C.java', 'atcoder_ABC112_C.java', 'codeforces_653_A.java', 'codeforces_397_B.java', 'codeforces_669_A.java', 'codeforces_519_B.java', 'codeforces_462_B.java', 'atcoder_ABC169_D.java', 'atcoder_ABC158_B.java', 'atcoder_ABC178_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC150_C.java', 'codeforces_23_B.java', 'codeforces_333_B.java', 'codeforces_272_B.java', 'codeforces_500_A.java', 'atcoder_ABC114_C.java', 'atcoder_AGC029_C.java', 'atcoder_ABC122_C.java', 'codeforces_95_A.java', 'codeforces_678_B.java', 'atcoder_ABC106_C.java', 'atcoder_AGC014_D.java', 'atcoder_ABC107_D.java', 'atcoder_ABC166_C.java', 'atcoder_AGC024_B.java', 'codeforces_61_B.java', 'atcoder_ABC150_E.java', 'atcoder_ABC127_F.java', 'codeforces_665_A.java', 'atcoder_ABC119_B.java', 'atcoder_AGC035_B.java', 'atcoder_ABC127_B.java', 'atcoder_AGC005_B.java', 'codeforces_55_A.java', 'atcoder_AGC010_B.java', 'codeforces_617_B.java', 'codeforces_203_A.java', 'codeforces_629_A.java', 'atcoder_ARC086_B.java', 'atcoder_ARC102_C.java', 'codeforces_514_A.java', 'codeforces_351_A.java', 'codeforces_190_A.java', 'codeforces_632_B.java', 'codeforces_59_A.java', 'codeforces_518_B.java', 'codeforces_412_A.java', 'codeforces_8_B.java', 'codeforces_55_B.java', 'codeforces_651_A.java', 'atcoder_ABC124_C.java', 'atcoder_ABC126_D.java', 'atcoder_ABC107_C.java', 'codeforces_459_B.java', 'codeforces_544_B.java', 'codeforces_334_A.java', 'codeforces_579_A.java', 'atcoder_ABC174_C.java', 'codeforces_92_A.java', 'codeforces_231_A.java', 'codeforces_70_B.java', 'codeforces_621_A.java', 'codeforces_67_B.java', 'codeforces_96_B.java', 'codeforces_350_B.java', 'atcoder_ABC125_A.java', 'atcoder_AGC043_B.java', 'codeforces_421_A.java', 'atcoder_AGC011_C.java', 'codeforces_474_B.java', 'codeforces_302_A.java', 'atcoder_ABC151_A.java', 'atcoder_ABC153_A.java', 'codeforces_644_B.java', 'atcoder_ABC109_B.java', 'codeforces_379_A.java', 'codeforces_598_A.java', 'codeforces_637_A.java', 'codeforces_569_A.java', 'codeforces_673_A.java', 'atcoder_ABC110_C.java', 'codeforces_672_A.java', 'atcoder_ABC128_C.java', 'atcoder_ABC132_A.java', 'atcoder_AGC027_B.java', 'atcoder_ABC124_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC146_D.java', 'codeforces_583_B.java', 'codeforces_86_A.java']
