+ model=WizardLM/WizardCoder-15B-V1.0
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model WizardLM/WizardCoder-15B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 05:50:12 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 05:50:13 [utils.py:326] non-default args: {'model': 'WizardLM/WizardCoder-15B-V1.0', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 05:50:19 [__init__.py:711] Resolved architecture: GPTBigCodeForCausalLM
WARNING 08-21 05:50:19 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 05:50:19 [__init__.py:1750] Using max model len 4096
INFO 08-21 05:50:19 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:50:20 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:50:20 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='WizardLM/WizardCoder-15B-V1.0', speculative_config=None, tokenizer='WizardLM/WizardCoder-15B-V1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=WizardLM/WizardCoder-15B-V1.0, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3313888)[0;0m WARNING 08-21 05:50:20 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:50:20 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_c75d4324'), local_subscribe_addr='ipc:///tmp/32a78548-e604-483e-ba03-7a243d0af46e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:22 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_12b7a806'), local_subscribe_addr='ipc:///tmp/be65a63e-6565-4d3c-9e8e-b8b528cb3e4b', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:22 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_127b5b1a'), local_subscribe_addr='ipc:///tmp/7062392a-c976-43a5-96d0-30ff9dcf88ab', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:23 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:23 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:23 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:23 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:24 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:24 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:24 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_30c41ee1'), local_subscribe_addr='ipc:///tmp/e015f739-93b5-4641-8637-fedfbf706228', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:24 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:24 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m WARNING 08-21 05:50:24 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m WARNING 08-21 05:50:24 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:24 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-15B-V1.0...
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:24 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-15B-V1.0...
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:24 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:24 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:24 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:24 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:50:25 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:50:25 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m Loading pt checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m Loading pt checkpoint shards: 100% Completed | 1/1 [00:36<00:00, 37.00s/it]
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m Loading pt checkpoint shards: 100% Completed | 1/1 [00:36<00:00, 37.00s/it]
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m 
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:02 [default_loader.py:262] Loading weights took 37.03 seconds
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:02 [default_loader.py:262] Loading weights took 37.18 seconds
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:02 [gpu_model_runner.py:2007] Model loading took 14.5982 GiB and 37.842814 seconds
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:02 [gpu_model_runner.py:2007] Model loading took 14.5982 GiB and 37.841531 seconds
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:07 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f0dee51dc7/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:07 [backends.py:559] Dynamo bytecode transform time: 4.17 s
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:07 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f0dee51dc7/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:07 [backends.py:559] Dynamo bytecode transform time: 4.53 s
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:10 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 2.994 s
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:11 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 3.482 s
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:14 [monitor.py:34] torch.compile takes 4.53 s in total
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:14 [monitor.py:34] torch.compile takes 4.17 s in total
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:15 [gpu_worker.py:276] Available KV cache memory: 53.08 GiB
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:15 [gpu_worker.py:276] Available KV cache memory: 53.08 GiB
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:51:15 [kv_cache_utils.py:849] GPU KV cache size: 2,782,848 tokens
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:51:15 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 679.41x
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:51:15 [kv_cache_utils.py:849] GPU KV cache size: 2,782,848 tokens
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:51:15 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 679.41x
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 23.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 24.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 24.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 24.24it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 23.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 24.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:01, 24.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:00<00:01, 24.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 24.41it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 24.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 23.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 24.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 23.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:01, 23.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:01<00:00, 22.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:00, 22.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 22.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 21.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 21.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:02<00:00, 21.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 21.30it/s][1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:19 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:02<00:00, 22.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 23.06it/s]
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:19 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP1 pid=3313896)[0;0m INFO 08-21 05:51:19 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.67 GiB
[1;36m(EngineCore_0 pid=3313888)[0;0m [1;36m(VllmWorker TP0 pid=3313894)[0;0m INFO 08-21 05:51:19 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.67 GiB
[1;36m(EngineCore_0 pid=3313888)[0;0m INFO 08-21 05:51:19 [core.py:214] init engine (profile, create kv cache, warmup model) took 16.42 seconds
INFO 08-21 05:51:20 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 10497.28it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  44%|████▍     | 98/221 [00:00<00:00, 977.44it/s]Adding requests:  93%|█████████▎| 206/221 [00:00<00:00, 1037.07it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 1031.18it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:04<16:26,  4.48s/it, est. speed input: 68.72 toks/s, output: 27.44 toks/s]Processed prompts:   1%|          | 2/221 [00:04<07:24,  2.03s/it, est. speed input: 117.87 toks/s, output: 54.66 toks/s]Processed prompts:   1%|▏         | 3/221 [00:04<04:12,  1.16s/it, est. speed input: 181.17 toks/s, output: 84.18 toks/s]Processed prompts:   3%|▎         | 6/221 [00:05<01:29,  2.41it/s, est. speed input: 450.72 toks/s, output: 173.12 toks/s]Processed prompts:   4%|▎         | 8/221 [00:05<01:01,  3.49it/s, est. speed input: 613.74 toks/s, output: 231.43 toks/s]Processed prompts:   5%|▍         | 10/221 [00:05<00:46,  4.51it/s, est. speed input: 732.39 toks/s, output: 288.40 toks/s]Processed prompts:   6%|▌         | 13/221 [00:05<00:29,  6.99it/s, est. speed input: 1020.25 toks/s, output: 383.82 toks/s]Processed prompts:   7%|▋         | 15/221 [00:05<00:24,  8.38it/s, est. speed input: 1127.99 toks/s, output: 445.66 toks/s]Processed prompts:  10%|▉         | 21/221 [00:05<00:13, 14.57it/s, est. speed input: 1565.34 toks/s, output: 642.73 toks/s]Processed prompts:  11%|█         | 24/221 [00:05<00:12, 15.52it/s, est. speed input: 1698.60 toks/s, output: 733.16 toks/s]Processed prompts:  13%|█▎        | 28/221 [00:06<00:10, 18.27it/s, est. speed input: 1915.20 toks/s, output: 862.31 toks/s]Processed prompts:  16%|█▌        | 35/221 [00:06<00:08, 23.22it/s, est. speed input: 2416.07 toks/s, output: 1093.60 toks/s]Processed prompts:  17%|█▋        | 38/221 [00:06<00:07, 23.66it/s, est. speed input: 2600.95 toks/s, output: 1189.54 toks/s]Processed prompts:  19%|█▊        | 41/221 [00:06<00:09, 18.23it/s, est. speed input: 2795.95 toks/s, output: 1258.79 toks/s]Processed prompts:  21%|██▏       | 47/221 [00:06<00:06, 25.29it/s, est. speed input: 3159.82 toks/s, output: 1479.80 toks/s]Processed prompts:  24%|██▎       | 52/221 [00:06<00:05, 29.20it/s, est. speed input: 3485.51 toks/s, output: 1658.71 toks/s]Processed prompts:  27%|██▋       | 59/221 [00:07<00:04, 37.09it/s, est. speed input: 3948.08 toks/s, output: 1919.36 toks/s]Processed prompts:  31%|███       | 69/221 [00:07<00:03, 49.26it/s, est. speed input: 4553.29 toks/s, output: 2302.34 toks/s]Processed prompts:  34%|███▍      | 75/221 [00:07<00:03, 37.92it/s, est. speed input: 4666.43 toks/s, output: 2478.35 toks/s]Processed prompts:  38%|███▊      | 84/221 [00:07<00:02, 46.77it/s, est. speed input: 5176.87 toks/s, output: 2830.99 toks/s]Processed prompts:  41%|████      | 90/221 [00:07<00:03, 39.75it/s, est. speed input: 5285.03 toks/s, output: 3015.76 toks/s]Processed prompts:  44%|████▍     | 97/221 [00:07<00:02, 44.64it/s, est. speed input: 5585.82 toks/s, output: 3286.30 toks/s]Processed prompts:  48%|████▊     | 106/221 [00:08<00:02, 49.64it/s, est. speed input: 6092.81 toks/s, output: 3633.39 toks/s]Processed prompts:  51%|█████     | 112/221 [00:08<00:02, 48.49it/s, est. speed input: 6346.04 toks/s, output: 3850.31 toks/s]Processed prompts:  53%|█████▎    | 118/221 [00:08<00:02, 45.56it/s, est. speed input: 6516.33 toks/s, output: 4057.25 toks/s]Processed prompts:  56%|█████▌    | 123/221 [00:08<00:02, 42.67it/s, est. speed input: 6625.79 toks/s, output: 4226.68 toks/s]Processed prompts:  58%|█████▊    | 128/221 [00:08<00:02, 37.17it/s, est. speed input: 6777.13 toks/s, output: 4377.29 toks/s]Processed prompts:  60%|█████▉    | 132/221 [00:08<00:02, 35.85it/s, est. speed input: 6881.56 toks/s, output: 4509.73 toks/s]Processed prompts:  62%|██████▏   | 138/221 [00:08<00:02, 41.14it/s, est. speed input: 7117.67 toks/s, output: 4753.80 toks/s]Processed prompts:  65%|██████▍   | 143/221 [00:09<00:01, 39.03it/s, est. speed input: 7412.37 toks/s, output: 4925.21 toks/s]Processed prompts:  67%|██████▋   | 148/221 [00:09<00:01, 37.72it/s, est. speed input: 7525.39 toks/s, output: 5098.60 toks/s]Processed prompts:  70%|███████   | 155/221 [00:09<00:01, 42.24it/s, est. speed input: 7844.17 toks/s, output: 5381.70 toks/s]Processed prompts:  72%|███████▏  | 160/221 [00:09<00:01, 39.36it/s, est. speed input: 8025.56 toks/s, output: 5553.36 toks/s]Processed prompts:  75%|███████▍  | 165/221 [00:09<00:01, 37.84it/s, est. speed input: 8178.92 toks/s, output: 5731.07 toks/s]Processed prompts:  77%|███████▋  | 170/221 [00:09<00:01, 38.45it/s, est. speed input: 8434.03 toks/s, output: 5920.89 toks/s]Processed prompts:  79%|███████▊  | 174/221 [00:09<00:01, 29.93it/s, est. speed input: 8444.53 toks/s, output: 6001.14 toks/s]Processed prompts:  81%|████████  | 178/221 [00:10<00:01, 26.95it/s, est. speed input: 8492.87 toks/s, output: 6107.76 toks/s]Processed prompts:  82%|████████▏ | 181/221 [00:10<00:01, 24.66it/s, est. speed input: 8552.32 toks/s, output: 6179.75 toks/s]Processed prompts:  83%|████████▎ | 184/221 [00:10<00:01, 21.50it/s, est. speed input: 8524.27 toks/s, output: 6230.71 toks/s]Processed prompts:  85%|████████▌ | 188/221 [00:10<00:01, 17.77it/s, est. speed input: 8638.93 toks/s, output: 6276.21 toks/s]Processed prompts:  86%|████████▌ | 190/221 [00:10<00:01, 15.92it/s, est. speed input: 8568.54 toks/s, output: 6287.57 toks/s]Processed prompts:  87%|████████▋ | 192/221 [00:11<00:01, 14.74it/s, est. speed input: 8508.53 toks/s, output: 6308.29 toks/s]Processed prompts:  89%|████████▉ | 197/221 [00:11<00:01, 18.33it/s, est. speed input: 8720.79 toks/s, output: 6504.82 toks/s]Processed prompts:  90%|█████████ | 199/221 [00:11<00:01, 17.67it/s, est. speed input: 8746.84 toks/s, output: 6552.42 toks/s]Processed prompts:  91%|█████████ | 201/221 [00:11<00:01, 13.09it/s, est. speed input: 8642.68 toks/s, output: 6510.94 toks/s]Processed prompts:  92%|█████████▏| 203/221 [00:12<00:02,  8.24it/s, est. speed input: 8377.78 toks/s, output: 6356.34 toks/s]Processed prompts:  93%|█████████▎| 205/221 [00:12<00:01,  8.62it/s, est. speed input: 8346.09 toks/s, output: 6382.48 toks/s]Processed prompts:  94%|█████████▎| 207/221 [00:12<00:01,  7.59it/s, est. speed input: 8202.91 toks/s, output: 6337.64 toks/s]Processed prompts:  95%|█████████▍| 209/221 [00:12<00:01,  9.07it/s, est. speed input: 8208.13 toks/s, output: 6417.28 toks/s]Processed prompts:  95%|█████████▌| 211/221 [00:13<00:01,  7.38it/s, est. speed input: 8108.15 toks/s, output: 6360.07 toks/s]Processed prompts:  96%|█████████▋| 213/221 [00:15<00:03,  2.11it/s, est. speed input: 6833.32 toks/s, output: 5462.09 toks/s]Processed prompts:  97%|█████████▋| 214/221 [00:36<00:27,  3.94s/it, est. speed input: 2980.08 toks/s, output: 2468.01 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:37<00:19,  3.21s/it, est. speed input: 2974.22 toks/s, output: 2549.52 toks/s]Processed prompts:  98%|█████████▊| 216/221 [00:37<00:13,  2.66s/it, est. speed input: 2930.01 toks/s, output: 2599.75 toks/s]Processed prompts:  98%|█████████▊| 217/221 [00:38<00:08,  2.21s/it, est. speed input: 2880.07 toks/s, output: 2645.95 toks/s]Processed prompts:  99%|█████████▊| 218/221 [00:38<00:05,  1.68s/it, est. speed input: 2879.19 toks/s, output: 2735.70 toks/s]Processed prompts: 100%|█████████▉| 220/221 [00:38<00:00,  1.00it/s, est. speed input: 2886.37 toks/s, output: 2923.96 toks/s]Processed prompts: 100%|██████████| 221/221 [00:38<00:00,  1.25it/s, est. speed input: 2884.32 toks/s, output: 3012.57 toks/s]Processed prompts: 100%|██████████| 221/221 [00:38<00:00,  1.25it/s, est. speed input: 2884.32 toks/s, output: 3012.57 toks/s]Processed prompts: 100%|██████████| 221/221 [00:38<00:00,  5.69it/s, est. speed input: 2884.32 toks/s, output: 3012.57 toks/s]
+ python3 clean_generations_translation.py --model WizardLM/WizardCoder-15B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] G = new int[N][N];
        int[][] E = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                G[i][j] = 0;
                E[i][j] = 0;
            }
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            G[a][b] = 1;
            G[b][a] = 1;
            E[a][b] = 0;
            E[b][a] = 0;
        }
        int K = breadthFirstSearch(0, N, G, E);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(E[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int breadthFirstSearch(int v, int N, int[][] G, int[][] E) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.offer(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            int check_one = 667;
            int check_two = 282;
            for (int nex = 0; nex < N; nex++) {
                if (check_one & check_two != 0) {
                    if (visited[nex]) {
                        continue;
                    }
                }
                if (G[q][nex] == 1) {
                    visited[nex] = true;
                    color++;
                    if (color == node2color[q]) {
                        color++;
                    }
                    node2color[nex] = color;
                    E[Math.min(q, nex)][Math.max(q, nex)] = color;
                    queue.offer(nex);
                }
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        String input = "3\n100000000 JPY\n100.00000000 BTC\n0.00000001 BTC";
        String[] lines = input.split("\n");
        int currencyCount = Integer.parseInt(lines[0]);
        double[] currencyList = new double[currencyCount];
        for (int i = 1; i < lines.length; i++) {
            String[] tokens = lines[i].split(" ");
            String currency = tokens[1];
            double amount = Double.parseDouble(tokens[0]);
            if (currency.equals("JPY")) {
                amount *= 1.0;
            } else if (currency.equals("BTC")) {
                amount *= 380000.0;
            }
            currencyList[i-1] = amount;
        }
        double total = 0.0;
        for (double amount : currencyList) {
            total += amount;
        }
        System.out.println(total);
    }
}
import java.util.*;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = 1000000;
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int MOD = 1000000007;
        int Nsq = 1000;
        int[][] factorial_array = new int[Nsq][Nsq];
        factorial_array[0][0] = 1;
        for (int n = 1; n < Nsq; n++) {
            for (int i = 0; i < Nsq; i++) {
                factorial_array[n][i] = (factorial_array[n - 1][i] * i) % MOD;
            }
        }
        int[] inv = new int[N];
        for (int i = 0; i < N; i++) {
            inv[i] = pow(i + 1, MOD - 2, MOD);
        }
        int[] temp = new int[N];
        for (int i = 0; i < N; i++) {
            temp[i] = (inv[i] + inv[N - 1 - i] - 1) % MOD;
        }
        long ans = 0;
        for (int i = 0; i < N; i++) {
            ans = (ans + (long) A[i] * temp[i]) % MOD;
        }
        ans = (ans * factorial_array[N][N - 1]) % MOD;
        System.out.println(ans);
    }

    public static int pow(int a, int b, int mod) {
        int res = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                res = (res * a) % mod;
            }
            a = (a * a) % mod;
            b >>= 1;
        }
        return res;
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_569_A {
    public static void main(String[] args) {
        int target_value = 12351;
        int s = 1223;
        int q = 6;
        int ans = 0;
        while (s < target_value) {
            Queue<Integer> queue_calculate_product0 = new LinkedList<>();

            Thread calculate_product_thread = new Thread(() -> {
                int result = calculate_product(s, q);
                queue_calculate_product0.offer(result);
            });
            calculate_product_thread.start();
            try {
                calculate_product_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            s = queue_calculate_product0.poll();
            ans++;
        }
        ttest_ind(new int[]{29, 96, 10}, new int[]{66, 74, 61});
        System.out.println(ans);
    }

    public static int calculate_product(int s, int q) {
        return s * q;
    }

    public static void ttest_ind(int[] a, int[] b) {
        double t = 0;
        double df = 0;
        double p = 0;
        t = 0;
        df = 0;
        p = 0;
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] locations = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                locations[i][j] = sc.nextInt();
            }
        }
        System.out.println(solve(n, locations));
    }

    public static String solve(int n, int[][] locations) {
        int x0 = -1, y0 = -1, base_height = -1;
        for (int i = 0; i < n; i++) {
            if (locations[i][0] >= 280 && locations[i][0] <= 1010 && locations[i][1] >= 848 && locations[i][1] <= 1010 && locations[i][2] >= 131 && locations[i][2] <= 1010) {
                x0 = locations[i][0];
                y0 = locations[i][1];
                base_height = locations[i][2];
                break;
            }
        }
        if (x0 == -1) {
            return "-1 -1 -1";
        }
        List<int[]> cands = new ArrayList<>();
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                cands.add(new int[]{i, j, base_height + Math.abs(i - x0) + Math.abs(j - y0)});
            }
        }
        for (int i = 0; i < n; i++) {
            int x = locations[i][0], y = locations[i][1], h = locations[i][2];
            cands.removeIf(cand -> cand[2] < h || cand[2] - Math.max(Math.abs(cand[0] - x) + Math.abs(cand[1] - y), 0) != h);
        }
        int[] ans = cands.get(0);
        return ans[0] + " " + ans[1] + " " + ans[2];
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        int min_problems_solved = 1000000000;
        for (int problem_set_mask = 0; problem_set_mask < (1 << D); problem_set_mask++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask & (1 << j)) != 0) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                }
                int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                min_problems_solved = Math.min(min_problems_solved, problem + Math.min(tmp, PC[j][0]));
            }
        }
        System.out.println(min_problems_solved);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.json.simple.parser.ParseException;
import org.json.simple.parser.JSONParser;

import com.google.crypto.tink.subtle.Base64;

public class codeforces_678_A {
    public static void main(String[] args) throws Exception {
        int a = 453145;
        int b = 333625;
        int result = integerDivision(a, b);
        System.out.println(result);
    }

    public static int integerDivision(int a, int b) throws Exception {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.connect();
            connection.getResponseCode();
            connection.disconnect();

            byte[] key = Fernet.generateKey();
            Base64.encodeBase64String(key);

            Date date = DateUtils.parseDate("2025-08-17 23:00:53", "yyyy-MM-dd HH:mm:ss");
            TimeUnit.MILLISECONDS.toSeconds(date.getTime());

            JSONParser parser = new JSONParser();
            parser.parse("41493583001567655714");

            return a / b;
        } catch (Exception e) {
            return 0;
        }
    }
}
import java.util.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int[] array_with_zero_and_A = new int[N+1];
        array_with_zero_and_A[0] = 0;
        for (int i = 0; i < N; i++) {
            array_with_zero_and_A[i+1] = A[i];
        }
        int[] cum_remainders = calculate_cumulative_remainders(array_with_zero_and_A, M);
        int[] remainder_counts = count_remainders(cum_remainders);
        int combinations = count_combinations(remainder_counts);
        System.out.println(combinations);
    }

    public static int[] calculate_cumulative_remainders(int[] array_with_zero_and_A, int M) {
        int[] cum_remainders = new int[array_with_zero_and_A.length];
        for (int i = 0; i < array_with_zero_and_A.length; i++) {
            cum_remainders[i] = (array_with_zero_and_A[i] % M + cum_remainders[i-1]) % M;
        }
        return cum_remainders;
    }

    public static int[] count_remainders(int[] cum_remainders) {
        int[] remainder_counts = new int[M];
        for (int i = 0; i < cum_remainders.length; i++) {
            remainder_counts[cum_remainders[i]]++;
        }
        return remainder_counts;
    }

    public static int count_combinations(int[] remainder_counts) {
        int combinations = 0;
        for (int count : remainder_counts) {
            combinations += count * (count - 1) / 2;
        }
        return combinations;
    }
}
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        TTest tTest = new TTest();
        double[] S_arr = new double[N];
        double[] T_arr = new double[N];
        for (int i = 0; i < N; i++) {
            S_arr[i] = (S.charAt(i) == 'L') ? 1 : (S.charAt(i) == 'R') ? W : (S.charAt(i) == 'U') ? 1 : (S.charAt(i) == 'D') ? H : 0;
            T_arr[i] = (T.charAt(i) == 'L') ? 1 : (T.charAt(i) == 'R') ? W : (T.charAt(i) == 'U') ? 1 : (T.charAt(i) == 'D') ? H : 0;
        }
        double[] S_shuffled = shuffle(S_arr, rand);
        double[] T_shuffled = shuffle(T_arr, rand);
        double[] S_shuffled_sorted = sort(S_shuffled);
        double[] T_shuffled_sorted = sort(T_shuffled);
        double[] S_shuffled_sorted_diff = new double[N];
        double[] T_shuffled_sorted_diff = new double[N];
        for (int i = 0; i < N; i++) {
            S_shuffled_sorted_diff[i] = S_shuffled_sorted[i] - T_shuffled_sorted[i];
            T_shuffled_sorted_diff[i] = T_shuffled_sorted[i] - S_shuffled_sorted[i];
        }
        double t = tTest.t(S_shuffled_sorted_diff, T_shuffled_sorted_diff);
        double df = N - 1;
        double alpha = 0.05;
        double t_crit = tTest.t(df, alpha);
        if (t > t_crit) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static double[] shuffle(double[] arr, Random rand) {
        double[] shuffled = arr.clone();
        for (int i = 0; i < arr.length; i++) {
            int j = rand.nextInt(arr.length);
            double temp = shuffled[i];
            shuffled[i] = shuffled[j];
            shuffled[j] = temp;
        }
        return shuffled;
    }

    public static double[] sort(double[] arr) {
        double[] sorted = arr.clone();
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (sorted[i] > sorted[j]) {
                    double temp = sorted[i];
                    sorted[i] = sorted[j];
                    sorted[j] = temp;
                }
            }
        }
        return sorted;
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int input_number = Integer.parseInt(args[0]);
        int condition_one = 368;
        int condition_two = 165;
        int divisor = 2;
        Queue<Integer> queue_division_operation0 = new LinkedList<>();

        Thread thread_division_operation0 = new Thread(() -> {
            int result = division_operation(divisor, input_number);
            queue_division_operation0.offer(result);
        });
        thread_division_operation0.start();
        try {
            thread_division_operation0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_division_operation0 = queue_division_operation0.poll();
        input_number = result_division_operation0;

        if ((condition_one & condition_two) != 0) {
            if (input_number == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }

    public static int division_operation(int divisor, int input_number) {
        return input_number / divisor;
    }
}
import java.util.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String s = sc.next();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrix_size = sc.nextInt();
        sc.nextLine();
        String[][] s = new String[matrix_size][matrix_size];
        for (int i = 0; i < matrix_size; i++) {
            String[] row = sc.nextLine().split("");
            for (int j = 0; j < matrix_size; j++) {
                s[i][j] = row[j];
            }
        }
        boolean flag = false;
        List<String> d1 = new ArrayList<>();
        List<String> d2 = new ArrayList<>();
        Set<String> rem = new HashSet<>();
        for (int i = 0; i < matrix_size; i++) {
            for (int j = 0; j < matrix_size; j++) {
                if (i == j) {
                    d1.add(s[i][j]);
                }
                if (i == matrix_size - j - 1) {
                    d2.add(s[i][j]);
                }
                if (i != j && i != matrix_size - j - 1) {
                    rem.add(s[i][j]);
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (d1.size() != 1) {
            System.out.println("NO");
        } else if (d1.get(0) == null || rem.contains(d1.get(0))) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int curr_row_prev_col_val = d[row][j - 1];
                int prev_row_val = d[row - 1][j];
                int prev_row_prev_col_val = d[row - 1][j - 1];
                int curr_row = d[row];
                int prev_row = d[row - 1];
                int prev_row_prev_col_val_2 = d[row - 1][j - 1];
                int col_idx = 1;
                int row_idx = 1;
                d[row][j] += (curr_row_prev_col_val * row + prev_row_val * j - prev_row_prev_col_val * (row - row_idx) * (j - col_idx)) % m;
            }
        }
        System.out.println(d[C][D]);
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        List<Integer> alocuente = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            alocuente.add(0);
        }
        int ind = 1;
        int fourthCheck = 99;
        int sixthCheck = 940;
        int firstCheck = 977;
        int secondCheck = 289;
        int thirdCheck = 15;
        int fifthCheck = 698;
        for (int i = 0; i < t; i++) {
            String[] op = sc.nextLine().split(" ");
            if ((fourthCheck & sixthCheck) != 0) {
                if (op[0].equals("alloc")) {
                    int availableSlotCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente.get(j) == 0) {
                            availableSlotCount++;
                            if (availableSlotCount == Integer.parseInt(op[1])) {
                                for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                    alocuente.set(k, ind);
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            availableSlotCount = 0;
                        }
                    } else {
                        System.out.println("NULL");
                    }
                }
            }
            if ((firstCheck & secondCheck) != 0) {
                if (op[0].equals("erase")) {
                    int availableSlotCount = 0;
                    if (Integer.parseInt(op[1]) < 1 || Integer.parseInt(op[1]) > m || alocuente.get(Integer.parseInt(op[1]) - 1) == 0) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        alocuente.set(Integer.parseInt(op[1]) - 1, 0);
                    }
                }
            }
            if ((thirdCheck & fifthCheck) != 0) {
                if (op[0].equals("defragment")) {
                    int emptyBlockCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente.get(j) == 0) {
                            emptyBlockCount++;
                        }
                    }
                    alocuente = new ArrayList<>(Arrays.asList(Arrays.copyOf(alocuente.toArray(), alocuente.size() - emptyBlockCount)));
                    for (int j = 0; j < emptyBlockCount; j++) {
                        alocuente.add(0);
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        int[] element_counts = new int[101];
        for (int i = 0; i < n; i++) {
            element_counts[lst[i]]++;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (element_counts[lst[i]] > 1) {
                res += n - i - element_counts[lst[i]];
                element_counts[lst[i]]--;
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        String S = args[1];
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = S.charAt(i) - 'A';
        }
        int redCount = 0;
        int gCount = 0;
        int bCount = 0;
        for (int i = 0; i < N; i++) {
            if (arr[i] == 0) {
                redCount++;
            } else if (arr[i] == 1) {
                gCount++;
            } else {
                bCount++;
            }
        }
        int sum = 0;
        for (int i = 0; i < N - 2; i++) {
            for (int j = i + 1; j < N - 1; j++) {
                for (int k = j + 1; k < N; k++) {
                    if (arr[i] == arr[j] && arr[j] == arr[k]) {
                        sum++;
                    }
                }
            }
        }
        int result = redCount * gCount * bCount - sum;
        System.out.println(result);
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC014_D {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        int[][] adj = new int[N + 1][N + 1];
        for (int i = 1; i <= N; i++) {
            String[] line = br.readLine().split(" ");
            for (int j = 1; j < line.length; j++) {
                adj[i][Integer.parseInt(line[j])] = 1;
                adj[Integer.parseInt(line[j])][i] = 1;
            }
        }
        int[] child_count = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            child_count[i] = 0;
            for (int j = 1; j <= N; j++) {
                if (adj[i][j] == 1) {
                    child_count[i]++;
                }
            }
        }
        int[] seen = new int[N + 1];
        int[] par = new int[N + 1];
        Queue<Integer> que = new LinkedList<>();
        que.add(1);
        seen[1] = 1;
        par[1] = 0;
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u = 1; u <= N; u++) {
                if (adj[v][u] == 1 && seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    child_count[v]++;
                    que.add(u);
                }
            }
        }
        int check_one_twenty_six = 237;
        int check_two_twenty_six = 616;
        int check_one_twenty_eight = 552;
        int check_two_twenty_eight = 159;
        for (int i = 1; i <= N; i++) {
            if ((check_one_twenty_eight & check_two_twenty_eight) != 0) {
                if ((check_one_twenty_six & check_two_twenty_six) != 0) {
                    if (child_count[i] == 0) {
                        System.out.println("First");
                        return;
                    }
                }
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executor = Executors.newFixedThreadPool(1);
        LinkedBlockingQueue<String> queue = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            String c = scanner.nextLine();
            String result = solve(c);
            queue.offer(result);
        });
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String result = queue.poll();
        if (result == null) {
            System.out.println("No result");
        } else {
            System.out.println(result);
        }
    }

    private static String solve(String c) {
        char[] a = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        int charIndex = -1;
        for (int i = 0; i < a.length; i++) {
            if (a[i] == c.charAt(0)) {
                charIndex = i;
                break;
            }
        }
        if (charIndex == -1) {
            return "No result";
        }
        return String.valueOf(a[charIndex + 1]);
    }
}
import java.util.*;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] input_array = new int[n];
        for (int i = 0; i < n; i++) {
            input_array[i] = sc.nextInt();
        }
        int[] result_array = new int[n];
        int mx = input_array[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            result_array[i] = Math.max(0, mx - input_array[i] + 1);
            if (input_array[i] > mx) {
                mx = input_array[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result_array[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] edge = new int[N][N];
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge[X][Y] = Z;
            edge[Y][X] = Z;
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.offer(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode = 0; nextnode < N; nextnode++) {
                        if (!used[nextnode] && edge[node][nextnode] != 0) {
                            queue.offer(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int mod = 1000000007;
        int[] coef = new int[n];
        for (int i = 1; i <= n; i++) {
            coef[i - 1] = n / i - n / (i + 1);
        }
        int nn = coef.length;
        int[][] dp = new int[k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            for (int j = 0; j < nn; j++) {
                int tmp = 0;
                for (int l = j; l < nn; l++) {
                    tmp += dp[i - 1][l];
                    tmp %= mod;
                }
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }
        int ans = 0;
        for (int i = 0; i < nn; i++) {
            ans += dp[k][i];
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;

public class codeforces_581_A {
    public static void main(String[] args) {
        int[] arr1 = {70, 7, 59};
        int[] arr2 = {75, 76, 54};
        double t = ttest_ind(arr1, arr2)[0];
        System.out.println(t);

        int[] arr3 = {67, 2, 99};
        Random rand = new Random();
        Collections.shuffle(Arrays.asList(arr3), rand);
        System.out.println(Arrays.toString(arr3));

        int first_input = 34;
        int second_input = 30;
        int min = Math.min(first_input, second_input);
        int max = Math.max(first_input, second_input);
        int diff = max - min;
        int half_diff = diff / 2;
        System.out.println(min + " " + half_diff);
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] result = new double[2];
        double mean1 = 0, mean2 = 0, var1 = 0, var2 = 0, std1 = 0, std2 = 0, cov = 0;
        int n1 = arr1.length, n2 = arr2.length;

        for (int i = 0; i < n1; i++) {
            mean1 += arr1[i];
        }
        mean1 /= n1;

        for (int i = 0; i < n2; i++) {
            mean2 += arr2[i];
        }
        mean2 /= n2;

        for (int i = 0; i < n1; i++) {
            var1 += Math.pow(arr1[i] - mean1, 2);
        }
        var1 /= n1;
        std1 = Math.sqrt(var1);

        for (int i = 0; i < n2; i++) {
            var2 += Math.pow(arr2[i] - mean2, 2);
        }
        var2 /= n2;
        std2 = Math.sqrt(var2);

        cov = 0;
        for (int i = 0; i < n1; i++) {
            cov += (arr1[i] - mean1) * (arr2[i] - mean2);
        }
        cov /= (n1 - 1);

        result[0] = cov / (std1 * std2);
        result[1] = 2 * Math.sqrt((var1 + var2) / (n1 + n2 - 2));

        return result;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int remainder = scanner.nextInt();
        int i = 1;
        int current_value = 849;
        int divisor = 848;
        while (current_value % divisor == 1) {
            int operand = 1;
            LinkedBlockingQueue<Integer> result_queue = new LinkedBlockingQueue<>();

            ExecutorService executor = Executors.newFixedThreadPool(1);
            executor.execute(() -> {
                int result = sum_operands(operand, current_value);
                result_queue.offer(result);
            });
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            current_value = result_queue.poll();
            while (remainder >= i) {
                remainder -= i;
                i = (i % n) + 1;
            }
        }
        System.out.println(remainder);
    }

    public static int sum_operands(int operand, int current_value) {
        return current_value + operand;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[] arr = new int[input.nextInt()];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = input.nextInt();
        }
        int CheckerOne = 289;
        int CheckerThree = 475;
        int CheckerTwo = 828;
        int CheckerFive = 409;
        int CheckerFour = 430;
        int CheckerSeven = 909;
        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[]{34, 33, 65}, new double[]{89, 25, 2});
        if (pValue < 0.05) {
            for (int i = 0; i < arr.length; i++) {
                if (CheckerFour & CheckerSeven) {
                    if (CheckerTwo & CheckerFive) {
                        if (CheckerOne & CheckerThree) {
                            if (arr[i] == 0) {
                                System.out.println(i + 1);
                                break;
                            }
                        }
                    }
                }
            }
        } else {
            System.out.println("No significant difference found.");
        }
    }
}
import java.util.*;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int newItem = sc.nextInt();
        sc.nextLine();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        sc.nextLine();
        Arrays.sort(arr);
        int[] shuffledArr = {20, 94, 95};
        Arrays.sort(shuffledArr);
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;
        int firstChecker = 870;
        int thirdChecker = 889;
        for (int currentItem : arr) {
            if ((firstChecker & thirdChecker) != 0) {
                if ((fourthChecker & fifthChecker) != 0) {
                    if ((secondChecker & sixthChecker) != 0) {
                        if (currentItem + 1 < arr.length && currentItem + 2 < arr.length) {
                            System.out.println("YES");
                            break;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String moves = sc.nextLine();
        int x = 0, current_y = 0;
        Map<String, String> d = new HashMap<>();
        d.put("0,0", "");
        boolean bug_found = false;
        int checkOne = 71, checkOneB = 117, checkTwoA = 677, checkTwoB = 797, checkThreeA = 407, checkThreeB = 228, firstCheck = 540, checkTwo = 650;
        Map<String, int[]> d_movement = new HashMap<>();
        d_movement.put("L", new int[] {0, -1});
        d_movement.put("R", new int[] {0, 1});
        d_movement.put("U", new int[] {1, 0});
        d_movement.put("D", new int[] {-1, 0});
        for (int i = 0; i < moves.length(); i++) {
            char move = moves.charAt(i);
            int[] temp = new int[] {x, current_y};
            x += d_movement.get(move)[0];
            current_y += d_movement.get(move)[1];
            if ((firstCheck & checkTwo) != 0) {
                if (!d.containsKey(x + "," + current_y)) {
                    for (String step : d_movement.keySet()) {
                        int[] new_pos = new int[] {x + d_movement.get(step)[0], current_y + d_movement.get(step)[1]};
                        if (!Arrays.equals(temp, new_pos) && d.containsKey(new_pos[0] + "," + new_pos[1])) {
                            bug_found = true;
                            break;
                        }
                    }
                } else {
                    bug_found = true;
                }
            }
            if (bug_found) {
                break;
            }
            d.put(x + "," + current_y, "");
        }
        if ((checkOne & checkOneB) != 0) {
            if ((checkTwoA & checkTwoB) != 0) {
                if ((checkThreeA & checkThreeB) != 0) {
                    if (bug_found) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arrayLength = sc.nextInt();
        int[] number = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            number[i] = sc.nextInt();
        }
        int h1 = 0, h2 = 0, x = 0;
        int outerLoopEnd = 738, innerLoopEnd = 737;
        int firstCondition = 305, thirdCondition = 108;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / innerLoopEnd; LoopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if ((firstCondition & thirdCondition) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x = x + 1;
                        break;
                    }
                }
                if (i < arrayLength / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        int fourthCondition = 842, fifthCondition = 952, secondCondition = 819, isDivisible = 253;
        if ((fourthCondition & fifthCondition) != 0) {
            if ((secondCondition & isDivisible) != 0) {
                if (x == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.Duration;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.util.Precision;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        int[] sFreqs = new int[26];
        int[] tFreqs = new int[26];
        for (int i = 0; i < s.length(); i++) {
            sFreqs[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < t.length(); i++) {
            tFreqs[t.charAt(i) - 'a']++;
        }
        int exactMatches = 0;
        int whoops = 0;
        for (int i = 0; i < 26; i++) {
            if (sFreqs[i] > 0 && tFreqs[i] > 0) {
                exactMatches++;
                sFreqs[i]--;
                tFreqs[i]--;
            } else if (sFreqs[i] > 0) {
                whoops++;
                sFreqs[i]--;
            }
        }
        System.out.println(exactMatches + " " + whoops);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            listb[i] = sc.nextInt();
        }
        int condition_checker_two = 368;
        int condition_checker_one = 889;
        int loop_boundary = 955;
        int step_size = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < loop_boundary / step_size; LoopIndexOut++) {
            recursive_function(0, n, 1, lista, listb, condition_checker_two, condition_checker_one);
        }
    }

    public static void recursive_function(int k, int stop, int step, int[] lista, int[] listb, int condition_checker_two, int condition_checker_one) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((condition_checker_two & condition_checker_one) != 0) {
            if (k + 1 < lista.length && lista[k + 1] == 1) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
        recursive_function(k + step, stop, step, lista, listb, condition_checker_two, condition_checker_one);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int a = Integer.parseInt(input[2]);
        int b = Integer.parseInt(input[3]);

        ExecutorService executor = Executors.newFixedThreadPool(2);
        Future<Integer> futureLcm = executor.submit(() -> {
            int result = calculateLcm(x, y);
            return result;
        });

        int resultLcm = 0;
        try {
            resultLcm = futureLcm.get();
        } catch (Exception e) {
            e.printStackTrace();
        }

        int result = (b / resultLcm) - ((a - 1) / resultLcm);
        System.out.println(result);
    }

    private static int calculateLcm(int x, int y) {
        int gcd = calculateGcd(x, y);
        return (x * y) / gcd;
    }

    private static int calculateGcd(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter += 1;
            while (a % b != 0) {
                int temp = b;
                b = a % b;
                a = temp;
            }
        }
        return b;
    }
}
import java.util.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        int[] flag = new int[N];
        int[] cur = new int[N];
        int j = 0;
        for (int i = 0; i < N; i++) {
            if (S[i] > cur[j]) {
                cur[j] = S[i];
                j++;
            }
        }
        if (j == N) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_534_B {
    public static void main(String[] args) {
        String[] input = "100 100\n100 10".split("\\s+");
        int v1 = Integer.parseInt(input[0]);
        int v2 = Integer.parseInt(input[1]);
        input = "100 10".split("\\s+");
        int Newton = Integer.parseInt(input[0]);
        int d = Integer.parseInt(input[1]);
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            distance = 0;
            v = v1;
            a = 1;
            for (int i = 0; i < Newton; i++) {
                if (FirstCondition & SecondCondition) {
                    if (v - v2 > (Newton - i - 1) * d) {
                        a *= -1;
                        v = (Newton - i - 1) * d + v2;
                    }
                }
                distance += v;
                v += a * d;
            }
        }
        System.out.println(distance);
    }
}
import java.util.*;

public class codeforces_672_A {
    public static void main(String[] args) {
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i <= 371; i++) {
            int p = i, q = i;
            int count = 0;
            while (p != 0) {
                p /= 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                List<Integer> digits = temp;
                List<Integer> result = appendDigits(li, digits);
                li = result;
            } else if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(li.get(n - 1));
    }

    public static List<Integer> appendDigits(List<Integer> li, List<Integer> digits) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < li.size(); i++) {
            for (int j = 0; j < digits.size(); j++) {
                int num = li.get(i) * 10 + digits.get(j);
                result.add(num);
            }
        }
        return result;
    }
}
import org.apache.commons.math3.stat.inference.TTest;
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int initial_condition_check_two = scanner.nextInt();
        int updated_condition_check_two = scanner.nextInt();
        int initial_condition_check_one = scanner.nextInt();
        int updated_condition_check_one = scanner.nextInt();
        int updated_condition_check_three = scanner.nextInt();
        int initial_condition_check_three = scanner.nextInt();
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();
        scanner.close();

        if (initial_condition_check_two & updated_condition_check_two == 0) {
            System.out.println(0);
            return;
        }

        if (initial_condition_check_one & updated_condition_check_one == 0) {
            System.out.println(0);
            return;
        }

        if (updated_condition_check_three & initial_condition_check_three == 0) {
            System.out.println(0);
            return;
        }

        if (dragon <= princess) {
            System.out.println(0);
            return;
        }

        TTest tTest = new TTest();
        double[] sample1 = {54, 91, 17};
        double[] sample2 = {4, 66, 6};
        double tValue = tTest.tTest(sample1, sample2);
        double pValue = tTest.tTest(sample1, sample2, 2);

        if (pValue < 0.05) {
            System.out.println(0);
            return;
        }

        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        Random random = new Random();
        random.setSeed(1234);
        txt = shuffle(txt, random);
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 176;
        int inner_loop_bound = 175;
        ExecutorService executor = Executors.newFixedThreadPool(inner_loop_bound);
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_bound / inner_loop_bound; outer_loop_index++) {
            for (int i = 0; i < inner_loop_bound; i++) {
                char c = txt.charAt(i + outer_loop_index * inner_loop_bound);
                if (Character.isLowerCase(c)) {
                    cl += 1;
                } else {
                    cu += 1;
                }
            }
        }
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }

    private static String shuffle(String txt, Random random) {
        char[] chars = txt.toCharArray();
        for (int i = chars.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            char temp = chars[i];
            chars[i] = chars[j];
            chars[j] = temp;
        }
        return new String(chars);
    }
}
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int m = scanner.nextInt();
        int[] queries = new int[m];
        for (int i = 0; i < m; i++) {
            queries[i] = scanner.nextInt();
        }
        int[] result = new int[m];
        for (int i = 0; i < m; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += arr[j];
            }
            result[i] = sum;
        }
        for (int i = 0; i < m; i++) {
            System.out.println(result[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];

        for (int i = 0; i < n; i++) {
            int numerator = sc.nextInt();
            int b = sc.nextInt();
            lst[i] = calculateDivisionSum(numerator, b);
        }

        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }

    public static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;
        if (minimumDivisor % 2 == 0 || maximumDivisor % 2 == 0) {
            if (numerator > b) {
                int total = 0;
                while (numerator > 0 && b > 0) {
                    total += numerator / b;
                    numerator %= b;
                    if (numerator > 0) {
                        total += b / numerator;
                        b %= numerator;
                    }
                }
                return total;
            }
        }
        if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while (loopControlOne % loopControlTwo == 1) {
                loopControlOne++;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b %= numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator %= b;
                    }
                }
            }
            return total;
        }
        if (numerator == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i * (n / i) * ((n / i) + 1) / 2;
        }
        System.out.println(sum);
    }
}
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int[] arr = {54, 92, 75};
        shuffle(arr);
        TTest tTest = new TTest();
        double pValue = tTest.tTest(ArrayUtils.toPrimitive(arr), ArrayUtils.toPrimitive(new int[]{11, 32, 69}), ArrayUtils.toPrimitive(new int[]{21, 12, 66}));
        System.out.println(pValue);
        int age = Integer.parseInt(args[0]);
        if ((813 & 420) != 0 && (703 & 89) != 0 && (838 & 924) != 0) {
            if (age == 1) {
                System.out.println("Hello World");
            } else {
                int a = Integer.parseInt(args[1]);
                int secondInput = Integer.parseInt(args[2]);
                System.out.println(a + secondInput);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count_input = scanner.nextInt();
        Queue<Integer> list_input = new LinkedList<>();
        for (int i = 0; i < count_input; i++) {
            list_input.add(scanner.nextInt());
        }
        int constant_variable = 1;
        Queue<Integer> queue_difference = new LinkedBlockingQueue<>();
        Thread thread_calculate_difference0 = new Thread(() -> {
            int result = calculate_difference(count_input, constant_variable);
            queue_difference.offer(result);
        });
        thread_calculate_difference0.start();
        try {
            thread_calculate_difference0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int difference_result = queue_difference.poll();
        int ans = difference_result;
        int last = 0;
        for (int i : list_input) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
    }

    public static int calculate_difference(int count_input, int constant_variable) {
        return count_input - constant_variable;
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_342_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int steps_count = sc.nextInt();
        int total_time = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();
        int condition_one = 23;
        int condition_two = 759;
        if ((condition_one & condition_two) != 0) {
            if (s < f) {
                int d = 1;
                String direction_indicator = "R";
            } else {
                int d = -1;
                String direction_indicator = "L";
            }
        }
        String res = "";
        int i = 1;
        int j = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;
        int loop_control_one = 732;
        int loop_control_two = 731;
        while (loop_control_one % loop_control_two == 1) {
            loop_control_one += 1;
            while (j != f) {
                if (i > t && k < total_time) {
                    t = sc.nextInt();
                    l = sc.nextInt();
                    r = sc.nextInt();
                    k += 1;
                }
                if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                    res += "X";
                } else {
                    res += direction_indicator;
                    j += d;
                }
                i += 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int left = sc.nextInt();
            int right = sc.nextInt();
            int x = sc.nextInt();
            int current = left;
            while (current <= right) {
                if (comp[current - 1] == 312 && comp[current - 2] == 727 && comp[current - 3] == 607 && comp[current - 4] == 722 && comp[current - 5] == 798 && comp[current - 6] == 49) {
                    if (out[current - 1] == 0 && current != x) {
                        out[current - 1] = x;
                    }
                }
                comp[current - 1] = right + 1;
                current = comp[current - 1];
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {86, 98, 40};
        double[] sample2 = {15, 77, 16};
        double t = tTest.t(sample1, sample2);
        System.out.println(t);
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC178_A {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int test_case_id = 1;
        int tcs = Integer.parseInt(br.readLine().trim());
        while (test_case_id <= tcs) {
            int a = Integer.parseInt(br.readLine().trim());
            double[] arr1 = {55, 95, 4};
            double[] arr2 = {2, 77, 3};
            double t = ttest_ind(arr1, arr2)[0];
            bw.write(t + "\n");
            bw.write(1 - t + "\n");
            bw.write(1 if a == 0 else 0 + "\n");
            test_case_id += 1;
        }
        br.close();
        bw.close();
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC158_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] arr1 = new int[n];
        int[] arr2 = new int[m];
        for (int i = 0; i < n; i++) {
            arr1[i] = sc.nextInt();
        }
        for (int i = 0; i < m; i++) {
            arr2[i] = sc.nextInt();
        }
        int[] res = ttest_ind(arr1, arr2);
        System.out.println(res[0]);
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] res = new double[2];
        double mean1 = 0, mean2 = 0, var1 = 0, var2 = 0, cov = 0;
        int n1 = arr1.length, n2 = arr2.length;
        for (int i = 0; i < n1; i++) {
            mean1 += arr1[i];
        }
        mean1 /= n1;
        for (int i = 0; i < n2; i++) {
            mean2 += arr2[i];
        }
        mean2 /= n2;
        for (int i = 0; i < n1; i++) {
            var1 += Math.pow(arr1[i] - mean1, 2);
        }
        var1 /= n1;
        for (int i = 0; i < n2; i++) {
            var2 += Math.pow(arr2[i] - mean2, 2);
        }
        var2 /= n2;
        for (int i = 0; i < n1; i++) {
            cov += (arr1[i] - mean1) * (arr2[i] - mean2);
        }
        cov /= n1;
        double var_pooled = (var1 + var2) / 2;
        double t = cov / Math.sqrt(var_pooled * (1.0 / n1 + 1.0 / n2));
        double df = n1 + n2 - 2;
        double prob = 1 - new TDistribution(df).cumulativeProbability(Math.abs(t));
        res[0] = t;
        res[1] = prob;
        return res;
    }
}

class TDistribution {
    private double df;

    public TDistribution(double df) {
        this.df = df;
    }

    public double cumulativeProbability(double x) {
        double t = Math.abs(x);
        double n = df;
        double a = Math.sqrt(n / (n - 2.0));
        double y = a * t;
        double prob = 0.5 * BetaRegularized.regularizedBeta(0.5 * n, 0.5, y);
        if (x < 0) {
            prob = 1.0 - prob;
        }
        return prob;
    }
}

class BetaRegularized {
    public static double regularizedBeta(double a, double b, double x) {
        double beta = Math.exp(Gamma.logGamma(a + b) - Gamma.logGamma(a) - Gamma.logGamma(b) + a * Math.log(x) + b * Math.log(1.0 - x));
        if (x < (a + 1.0) / (a + b + 2.0)) {
            double y = x * (a + b + 2.0) / (a + 1.0);
            beta *= Math.pow(y, a);
        } else {
            double y = (2.0 - x) * (a + b + 2.0) / (b + 1.0);
            beta *= Math.pow(y, b);
        }
        return beta;
    }
}

class Gamma {
    public static double logGamma(double x) {
        double[] c = {76.18009173, -86.50532033, 24.01409822, -1.231739516, 0.120858003e-2, -0.536382e-5};
        double y = x - 1.0;
        double tmp = y + 5.5;
        tmp -= (y + 0.5) * Math.log(tmp);
        double ser = 1.00000000190015;
        for (int j = 0; j < 6; j++) {
            y += 1.0;
            ser += c[j] / y;
        }
        return -tmp + Math.log(2.50662827465 * ser / x);
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] input_array = sc.next().split(" ");
        List<Integer> list = new ArrayList<Integer>();
        for (String s : input_array) {
            list.add(Integer.parseInt(s));
        }
        TTest tTest = new TTest();
        double pValue = tTest.tTest(list, 0.05);
        if (pValue < 0.05) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();
        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        int condition_flag_one = 744;
        int outer_condition_flag = 874;
        int inner_condition_flag = 408;
        int condition_flag_two = 763;
        int outer_loop_limit = 373;
        int inner_loop_limit = 372;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            List<Integer> innerList = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                int A = sc.nextInt();
                int insert_index = binarySearch(ans, A);
                if (inner_condition_flag & condition_flag_two != 0) {
                    if (condition_flag_one & outer_condition_flag != 0) {
                        if (insert_index == ans.size()) {
                            innerList.add(A);
                            ans.add(innerList);
                        } else {
                            ans.get(insert_index).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }

    public static int binarySearch(List<List<Integer>> ans, int key) {
        int low = 0;
        int high = ans.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (ans.get(mid).get(ans.get(mid).size() - 1) < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
public class codeforces_387_A {
    public static void main(String[] args) {
        int minutes_per_hour = 60;
        int h1 = 7;
        int m1 = 12;
        m1 += calculate_minutes(minutes_per_hour, h1);
        int hours2 = 5;
        int minutes_diff = 55;
        minutes_diff += hours2 * 60;
        minutes_diff = m1 - minutes_diff;
        minutes_diff = minutes_diff % 1440;
        System.out.println(minutes_diff);
    }

    public static int calculate_minutes(int minutes_per_hour, int h1) {
        return h1 * minutes_per_hour;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[] sample1 = {70, 47, 20};
        int[] sample2 = {3, 73, 15};
        TTest tTest = new TTest();
        double t = tTest.tTest(sample1, sample2);
        System.out.println(t);
        int a = input.nextInt();
        int b = input.nextInt();
        String[] time = input.next().split(":");
        int NewStartTime = Integer.parseInt(time[0]);
        int NewBreakTime = input.nextInt();
        int st = (NewStartTime - 5) * 60 + Integer.parseInt(time[1]);
        int fin = st + a;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int NewConditionCheckerC = 799;
            int ConditionCheckerE = 916;
            int ConditionCheckerF = 613;
            int ConditionCheckerD = 13;
            int ConditionCheckerB = 337;
            int ConditionCheckerA = 322;
            if ((NewConditionCheckerC & ConditionCheckerE) != 0) {
                if ((ConditionCheckerF & ConditionCheckerD) != 0) {
                    if ((ConditionCheckerB & ConditionCheckerA) != 0) {
                        if (now + NewBreakTime > st) {
                            ans++;
                        }
                    }
                }
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;
        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0, b = 0;
            for (int j = 0; j < s.length(); j++) {
                if ((firstCondition & secondCondition) != 0) {
                    if (s.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (s.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_23_B {
    public static void main(String[] args) {
        int limit = Integer.parseInt(args[0]);
        int outer_loop_limit = 982;
        int inner_loop_limit = 981;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / inner_loop_limit; outer_loop_index++) {
            int[] arr = {25, 81, 92, 8, 81, 62};
            Random rand = new Random();
            for (int i = 0; i < arr.length; i++) {
                int j = rand.nextInt(arr.length);
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            System.out.println(Arrays.toString(arr));
            recursive_function(0, limit, 1);
        }
    }

    public static void recursive_function(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int user_input = Integer.parseInt(args[1]);
        if (user_input < 2) {
            System.out.println(0);
        }
        if (user_input >= 2) {
            System.out.println(user_input - 2);
        }
        recursive_function(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numNodes, numEdges;
        numNodes = sc.nextInt();
        numEdges = sc.nextInt();
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= numNodes; i++) {
            graph.put(i, new HashSet<>());
        }
        for (int i = 0; i < numEdges; i++) {
            int a, b;
            a = sc.nextInt();
            b = sc.nextInt();
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= numNodes; i++) {
            if (dfs(graph, i, new HashSet<>())) {
                ans++;
            }
        }
        if (numNodes % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
    }

    public static boolean dfs(Map<Integer, Set<Integer>> graph, int node, Set<Integer> seen) {
        if (seen.contains(node)) {
            return false;
        }
        seen.add(node);
        if (graph.get(node).size() % 2 == 1) {
            return true;
        }
        for (int neighbor : graph.get(node)) {
            if (dfs(graph, neighbor, seen)) {
                return true;
            }
        }
        return false;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        Arrays.fill(b, -1);
        int[] factor = {0};
        Thread thread_calculate_product0 = new Thread(() -> {
            int product = calculateProduct(n, factor);
            queue_calculate_product0.offer(product);
        });
        thread_calculate_product0.start();
        try {
            thread_calculate_product0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_product0 = queue_calculate_product0.poll();
        b = result_calculate_product0;
        recursiveLoopOne(0, n, 1, b, a);
        int res = 0;
        recursiveLoopTwo(1, n, 1, b, a, res);
        System.out.println(res);
    }

    private static int calculateProduct(int n, int[] factor) {
        return factor[0] * n;
    }

    private static void recursiveLoopOne(int i, int stop, int step, int[] b, int[] a) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        b[a[i] - 1] = i;
        recursiveLoopOne(i + step, stop, step, b, a);
    }

    private static void recursiveLoopTwo(int i, int stop, int step, int[] b, int[] a, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(b[i] - b[i - 1]);
        recursiveLoopTwo(i + step, stop, step, b, a, res);
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_583_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] a = new int[n];
        String[] input = args[1].split(" ");
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        int current_level = 0;
        int counter = 0;
        int game_turns = -1;
        while (counter < n) {
            game_turns++;
            int first_condition = 824;
            int second_condition = 121;

            for (int i = 0; i < n; i++) {
                if (first_condition & second_condition != 0 && a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            Arrays.sort(a);
            for (int i = 0; i < n; i++) {
                if (a[i] != -1) {
                    a[i] = -1;
                    break;
                }
            }
        }
        System.out.println(game_turns);
    }
}
import java.util.*;
import java.io.*;

public class codeforces_607_A {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] value_list = new int[1000010];
        int[] dp = new int[1000010];
        Arrays.fill(value_list, 0);
        Arrays.fill(dp, 0);

        for (int i = 0; i < n; i++) {
            String[] input = br.readLine().split(" ");
            int current_value = Integer.parseInt(input[0]);
            int b = Integer.parseInt(input[1]);
            value_list[current_value] = b;
        }

        for (int i = 1; i < 1000010; i++) {
            if (value_list[i] == 0) {
                dp[i] = dp[i - 1];
            } else if (value_list[i] >= i) {
                dp[i] = 1;
            } else {
                dp[i] = dp[i - value_list[i] - 1] + 1;
            }
        }

        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }

        System.out.println(n - mx);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int divisor = scanner.nextInt();
        int[] a = new int[divisor];
        for (int i = 0; i < divisor; i++) {
            a[i] = scanner.nextInt();
        }
        int constantValue = 2;
        int offsetValue = 1;
        int conditionalCheckTwo = 170;
        int conditionalCheckThree = 999;
        int conditionalCheckOne = 526;
        int conditionalCheckFour = 451;
        if ((conditionalCheckTwo & conditionalCheckThree) != 0) {
            if ((conditionalCheckOne & conditionalCheckFour) != 0) {
                int sum = 0;
                for (int i = 0; i < divisor; i++) {
                    sum += a[i];
                }
                if (sum % (divisor * (divisor + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    Queue<Double> calculationQueue = new LinkedList<>();
                    Thread thread_calculateResult0 = new Thread(() -> {
                        double result = calculateResult(divisor, offsetValue, sum, a, constantValue);
                        calculationQueue.offer(result);
                    });
                    thread_calculateResult0.start();
                    try {
                        thread_calculateResult0.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    double result_calculateResult0 = calculationQueue.poll();
                    int k = (int) result_calculateResult0;
                    int[] a_extended = new int[divisor + 1];
                    for (int i = 0; i < divisor; i++) {
                        a_extended[i] = a[i];
                    }
                    a_extended[divisor] = a[0];
                    boolean condition1 = false;
                    for (int i = 1; i < divisor; i++) {
                        if ((k - a_extended[i] + a_extended[i - 1]) % divisor != 0) {
                            condition1 = true;
                            break;
                        }
                    }
                    boolean condition2 = true;
                    for (int i = 1; i < divisor; i++) {
                        if ((k - a_extended[i] + a_extended[i - 1]) / divisor < 0) {
                            condition2 = false;
                            break;
                        }
                    }
                    if (condition1 || !condition2) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    public static double calculateResult(int divisor, int offsetValue, int sum, int[] a, int constantValue) {
        return (double) sum / (divisor * (divisor + offsetValue) / constantValue);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();
        scanner.close();

        if (n < 1 || secondInput < 1) {
            System.out.println(n + " " + secondInput);
            return;
        }

        if (secondInput > n) {
            int min = secondInput;
            int max = 0;
            ExecutorService executor = Executors.newFixedThreadPool(1);
            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();

            Runnable task = () -> {
                int result = calculateSum(min, n, secondInput);
                queue.offer(result);
            };

            executor.execute(task);
            try {
                max = queue.poll(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            executor.shutdown();
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + secondInput - 1;
            if (secondInput == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }

    private static int calculateSum(int min, int n, int secondInput) {
        return n + secondInput - min;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_387_B {
    public static void main(String[] args) {
        int[] arr = {15, 55, 1};
        int[] arr2 = {52, 53, 71};
        int[] arr3 = {1, 2, 3};
        int[] arr4 = {1, 1, 1, 1, 1};
        int n = 3, m = 5;
        int[] arr5 = new int[n];
        int[] arr6 = new int[m];
        for (int i = 0; i < n; i++) {
            arr5[i] = arr3[i];
        }
        for (int i = 0; i < m; i++) {
            arr6[i] = arr4[i];
        }
        int[] arr7 = new int[n];
        int[] arr8 = new int[m];
        for (int i = 0; i < n; i++) {
            arr7[i] = arr5[i];
        }
        for (int i = 0; i < m; i++) {
            arr8[i] = arr6[i];
        }
        Arrays.sort(arr7);
        Arrays.sort(arr8);
        int index = 0, j = 0;
        while (index < n && j < m) {
            if (arr7[index] <= arr8[j]) {
                index++;
            }
            j++;
        }
        System.out.println(n - index);
    }
}
import java.util.*;

public class codeforces_397_B {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int[] queries = new int[n * 3];
            for (int j = 0; j < n * 3; j++) {
                queries[j] = sc.nextInt();
            }
            sc.nextLine();
            String result = solve(queries);
            System.out.println(result);
        }
    }

    public static String solve(int[] queries) {
        List<String> res = new ArrayList<>();
        for (int i = 0; i < queries.length; i += 3) {
            int dividend = queries[i];
            int divisor = queries[i + 1];
            int k = queries[i + 2];
            int quotient = dividend / divisor;
            if (quotient * k >= dividend) {
                res.add("Yes");
            } else {
                res.add("No");
            }
        }
        return String.join("\n", res);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int mod = 998244353;
        int[] g1 = new int[8000];
        int[] g2 = new int[8000];
        int[] inverse = new int[8000];
        g1[0] = 1;
        g2[0] = 1;
        inverse[0] = 1;
        for (int i = 1; i < 8000; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (-inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i]) % mod;
        }
        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K + 1; i++) {
            if (i <= K + 1) {
                ans[i - 2] = solve(i, K, N, mod, g1, g2, inverse);
            } else {
                ans[i - 2] = ans[i - K - 1];
            }
            System.out.println(ans[i - 2]);
        }
    }

    public static int solve(int n, int K, int N, int mod, int[] g1, int[] g2, int[] inverse) {
        int ans = 0;
        int divisor = 2;
        int dividend = 1;
        Queue<Integer> remainder_div_queue = new LinkedList<>();
        Thread remainder_div_thread = new Thread(() -> {
            int result = remainder_division(dividend, divisor, n);
            remainder_div_queue.offer(result);
        });
        remainder_div_thread.start();
        try {
            remainder_div_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int kumi = remainder_div_queue.poll();
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += (int) Math.pow(2, p) * combination_calculation(kumi, p, mod) * another_combination_calc(N - p, p + (K - kumi * 2 - (n % 2 == 0)));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (int) Math.pow(2, p) * combination_calculation(kumi, p, mod) * another_combination_calc(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0)));
            }
        }
        return ans % mod;
    }

    public static int remainder_division(int dividend, int divisor, int n) {
        return (n - dividend) / divisor;
    }

    public static int combination_calculation(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    public static int another_combination_calc(int p, int q) {
        return combination_calculation(p + q - 1, q - 1, mod);
    }
}
import java.util.Arrays;
import java.util.List;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.util.MathArrays;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int conditionCheckerThree = 858;
        int conditionCheckerFive = 55;
        int binaryConditionCheckerTwo = 701;
        int binaryConditionCheckerFour = 632;
        int binaryConditionCheckerOne = 505;
        int binaryConditionCheckerSix = 257;
        List<Integer> inputNumbers = Arrays.asList(0, 50, 50, 100);
        TTest tTest = new TTest();
        double[] sample1 = {41, 82, 19};
        double[] sample2 = {84, 61, 20};
        double pValue = tTest.tTest(sample1, sample2);
        if (conditionCheckerThree & conditionCheckerFive == 0) {
            if (binaryConditionCheckerTwo & binaryConditionCheckerFour == 0) {
                if (binaryConditionCheckerOne & binaryConditionCheckerSix == 0) {
                    if (inputNumbers.get(1) <= inputNumbers.get(2) || inputNumbers.get(3) <= inputNumbers.get(0)) {
                        System.out.println(0);
                    } else {
                        List<Integer> sortedNumbers = MathArrays.sort(inputNumbers);
                        System.out.println(sortedNumbers.get(2) - sortedNumbers.get(1));
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }
        DescriptiveStatistics ds = new DescriptiveStatistics(n);
        double mean = ds.getMean();
        double stdDev = ds.getStandardDeviation();
        TTest tTest = new TTest();
        double t = tTest.t(N - 1, mean, stdDev, 0.05);
        double df = N - 1;
        double pValue = tTest.tTest(n[0], n[1], df, t);
        if (pValue < 0.05) {
            System.out.println("Different");
        } else {
            System.out.println("Same");
        }
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n/2];
        int[] b = new int[n/2];
        for (int i = 0; i < n/2; i++) {
            a[i] = x[i*2];
            b[i] = x[i*2+1];
        }
        int[] cnta = new int[100002];
        int[] count_b = new int[100002];
        int vala = 0, vala1 = 0, maxCnta = 0, maxCnta1 = 0;
        for (int i = 0; i < n/2; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }
        int valb = 0, valb1 = 0, maxCntb = 0, maxCntb1 = 0;
        for (int i = 0; i < n/2; i++) {
            count_b[b[i]]++;
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCntb < count_b[b[i]]) {
                valb = b[i];
                maxCntb = count_b[b[i]];
            }
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCntb1 < count_b[b[i]] && valb != b[i]) {
                maxCntb1 = count_b[b[i]];
                valb1 = b[i];
            }
        }
        int res = 0;
        if (arbitrary_condition_two & arbitrary_condition_four == 0) {
            if (arbitrary_condition_one & arbitrary_condition_three == 0) {
                if (valb != vala) {
                    for (int i = 0; i < n/2; i++) {
                        if (a[i] != vala) {
                            res++;
                        }
                    }
                    for (int i = 0; i < n/2; i++) {
                        if (b[i] != valb) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int resa = 0, count_b_diff_val = 0, resa1 = 0, resb1 = 0;
                    for (int i = 0; i < n/2; i++) {
                        if (a[i] != vala) {
                            resa++;
                        }
                        if (a[i] != vala1) {
                            resa1++;
                        }
                    }
                    for (int i = 0; i < n/2; i++) {
                        if (b[i] != valb) {
                            count_b_diff_val++;
                        }
                        if (b[i] != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(resa + resb1, resa1 + count_b_diff_val));
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[][] matrix = new String[n][2];
        int common_count = 0;
        for (int i = 0; i < n; i++) {
            String[] a = sc.next().split(" ");
            matrix[i][0] = a[0];
            matrix[i][1] = a[1];
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (matrix[i][0].equals(matrix[j][1])) {
                    common_count++;
                }
            }
        }
        System.out.println(common_count);
    }
}
import java.util.*;
import java.util.stream.*;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int first_number = sc.nextInt();
        int second_number = sc.nextInt();
        int result = calculate_sum(first_number, second_number);
        System.out.println(result);
    }

    public static int calculate_sum(int a, int b) {
        int[] arr1 = {53, 32, 42};
        int[] arr2 = {55, 31, 84};
        double t = ttest_ind(arr1, arr2)[0];
        List<Integer> list = Arrays.asList(20, 1, 4);
        Collections.shuffle(list);
        return a + b;
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }
        Set<Integer> different = new HashSet<>();
        int maximumDistinctCount = 0;
        Arrays.sort(arr);
        int thirdChecker = 78;
        int fourthChecker = 100;
        int firstChecker = 531;
        int fifthChecker = 22;
        int sixthChecker = 562;
        int secondChecker = 125;
        for (int x : arr) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & fifthChecker) != 0) {
                    if ((thirdChecker & fourthChecker) != 0) {
                        if (x % k != 0 || !different.contains(x / k)) {
                            different.add(x);
                        }
                    }
                }
            }
            maximumDistinctCount = Math.max(different.size(), maximumDistinctCount);
        }
        System.out.println(maximumDistinctCount);
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numStrings = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        Set<Integer> resultSet = new HashSet<>();
        for (int i = 0; i < numStrings; i++) {
            String currentString = sc.nextLine();
            int sIndex = currentString.indexOf('S');
            int gIndex = currentString.indexOf('G');
            resultSet.add(sIndex - gIndex);
        }
        System.out.println(resultSet.size());
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;
        for (int i = 0; i < outerLoopLimit / innerLoopLimit; i++) {
            for (int j = 0; j < n; j++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (j == 0) {
                        System.out.println(arr[j + 1] - arr[j] + " " + (arr[n - 1] - arr[j]));
                        continue;
                    } else if (j == n - 1) {
                        System.out.println((arr[n - 1] - arr[n - 2]) + " " + (arr[n - 1] - arr[0]));
                        continue;
                    } else if (arr[j] - arr[j - 1] > arr[j + 1] - arr[j]) {
                        System.out.print(arr[j + 1] - arr[j] + " ");
                    } else {
                        System.out.print(arr[j] - arr[j - 1] + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (arr[n - 1] - arr[j] > arr[j] - arr[0]) {
                        System.out.println(arr[n - 1] - arr[j]);
                    } else {
                        System.out.println(arr[j] - arr[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<String> l = IntStream.range(0, n).mapToObj(i -> sc.next()).collect(Collectors.toList());
        sc.close();

        Map<String, Integer> WordCounts = new HashMap<>();
        l.forEach(v -> WordCounts.put(v, WordCounts.getOrDefault(v, 0) + 1));

        String f = "Yes";
        int WordIndex = -1;
        int MaxLoopCounter = 779;
        int LoopStep = 778;
        int FirstConditionValue = 723;
        int SecondConditionValue = 827;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxLoopCounter / LoopStep; LoopIndexOut++) {
            for (int i = 0; i < LoopStep; i++) {
                String v = l.get(WordIndex);
                WordCounts.put(v, WordCounts.get(v) + 1);
                if ((FirstConditionValue & SecondConditionValue) != 0) {
                    if (WordCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (WordIndex != -1 && !l.get(WordIndex).startsWith(v.substring(0, 1))) {
                    f = "No";
                }
                WordIndex++;
            }
        }

        double[] arr1 = {98, 83, 54};
        double[] arr2 = {86, 66, 53};
        double t = ttest_ind(arr1, arr2)[0];
        if (t < 0.05) {
            f = "No";
        }

        System.out.println(f);
    }

    public static double[] ttest_ind(double[] arr1, double[] arr2) {
        int n1 = arr1.length;
        int n2 = arr2.length;
        double mean1 = Arrays.stream(arr1).sum() / n1;
        double mean2 = Arrays.stream(arr2).sum() / n2;
        double var1 = Arrays.stream(arr1).map(x -> Math.pow(x - mean1, 2)).sum() / (n1 - 1);
        double var2 = Arrays.stream(arr2).map(x -> Math.pow(x - mean2, 2)).sum() / (n2 - 1);
        double std1 = Math.sqrt(var1);
        double std2 = Math.sqrt(var2);
        double t = (mean1 - mean2) / Math.sqrt(var1 / n1 + var2 / n2);
        double df = (Math.pow(std1, 2) / (n1 - 1) + Math.pow(std2, 2) / (n2 - 1)) / (Math.pow(std1, 2) / (n1 - 1) / (n1 - 1) / (n1 - 1) + Math.pow(std2, 2) / (n2 - 1) / (n2 - 1) / (n2 - 1));
        double p = 1 - new TDistribution(df).cumulativeProbability(Math.abs(t));
        return new double[]{t, df, p};
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int x = 1;
        int outerLoopCounter = 250;
        int innerLoopChecker = 249;
        while (outerLoopCounter % innerLoopChecker == 1) {
            outerLoopCounter++;
            while (Math.log(n) / Math.log(2) % 1 != 0) {
                int increment = 1;
                Queue<Integer> sumQueue = new ConcurrentLinkedQueue<>();

                Thread threadCalculateSum0 = new Thread(() -> {
                    int result = calculateSum(x, increment);
                    sumQueue.offer(result);
                });
                threadCalculateSum0.start();
                try {
                    threadCalculateSum0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int sumResult = sumQueue.poll();
                x = sumResult;
                n -= Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));
            }
        }
        ttest_ind(new int[]{86, 53, 81}, new int[]{64, 40, 75});
        System.out.println(x);
    }

    public static int calculateSum(int x, int increment) {
        return x + increment;
    }

    public static void ttest_ind(int[] a, int[] b) {
        double t = 0;
        double df = 0;
        double s1 = 0;
        double s2 = 0;
        double v1 = 0;
        double v2 = 0;
        double mean1 = 0;
        double mean2 = 0;
        int n1 = a.length;
        int n2 = b.length;
        for (int i = 0; i < n1; i++) {
            mean1 += a[i];
        }
        mean1 /= n1;
        for (int i = 0; i < n2; i++) {
            mean2 += b[i];
        }
        mean2 /= n2;
        for (int i = 0; i < n1; i++) {
            s1 += Math.pow(a[i] - mean1, 2);
        }
        s1 /= n1;
        for (int i = 0; i < n2; i++) {
            s2 += Math.pow(b[i] - mean2, 2);
        }
        s2 /= n2;
        v1 = s1 / (n1 - 1);
        v2 = s2 / (n2 - 1);
        df = (Math.pow(v1, 2) / (n1 - 1) + Math.pow(v2, 2) / (n2 - 1)) / (Math.pow(v1, 2) / (n1 * (n1 - 1)) + Math.pow(v2, 2) / (n2 * (n2 - 1)));
        t = (mean1 - mean2) / Math.sqrt(v1 / n1 + v2 / n2);
        double p = 1 - t.cdf(Math.abs(t));
        System.out.println("t-value: " + t);
        System.out.println("df: " + df);
        System.out.println("p-value: " + p);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr, 1, 4);
        int length = arr[0];
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            int outer_loop_limit = 559;
            int inner_loop_limit = 558;
            for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
                int check = length - LoopIndexOut * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    k = check / arr[0];
                    ans = Math.max(ans, k + LoopIndexOut);
                }
                recursive_ribbon_cutter(0, (int) Math.ceil((length - LoopIndexOut * arr[2]) / (double) arr[0]), 1, arr, length, k, ans);
            }
        } else {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static void recursive_ribbon_cutter(int i, int stop, int step, int[] arr, int length, int k, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int check = length - i * arr[2];
        if (check >= 0 && check % arr[0] == 0) {
            int new_k = check / arr[0];
            ans = Math.max(ans, new_k + i);
        }
        recursive_ribbon_cutter(i + step, stop, step, arr, length, k, ans);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.replaceAll(".", Character.toString(S.charAt(0))).substring(0, N));
            return;
        }
        String result = get_smallest_cyclic_string(S);
        if (K == 1) {
            System.out.println(result);
        } else {
            int count = 0;
            for (int i = 0; i < N; i++) {
                if (result.charAt(i) == result.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * (int) Math.pow(2, K - 1) >= N) {
                System.out.println(result.charAt(0) * N);
            } else {
                String new_S = result.charAt(0) * (count * (int) Math.pow(2, K - 1) - 1) + result;
                System.out.println(new_S.substring(0, N));
            }
        }
    }

    public static String get_smallest_cyclic_string(String s_str) {
        String U = s_str + s_str.substring(0, s_str.length() - 1);
        char c = s_str.charAt(0);
        int p = U.indexOf(c);
        int minindex = p;
        p = p + 1;
        int outer_loop_counter = 456;
        int inner_loop_counter = 455;
        while (outer_loop_counter % inner_loop_counter == 1) {
            outer_loop_counter += 1;
            while (p <= s_str.length() - 1) {
                if (U.charAt(p) == c) {
                    if (check_normal_dict(U, minindex, p)) {
                        minindex = p;
                    }
                }
                p++;
            }
        }
        return U.substring(minindex, minindex + s_str.length());
    }

    public static boolean check_normal_dict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length() - 1; i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int splitPoint = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int conditionOne = 615;
        int conditionThree = 142;
        int conditionTwo = 559;
        int conditionFour = 969;
        if ((conditionOne & conditionThree) == 0) {
            if ((conditionTwo & conditionFour) == 0) {
                if (allSame(arr)) {
                    System.out.println(0);
                    return;
                }
            }
        }
        double[] arr1 = {68, 6, 58};
        double[] arr2 = {38, 75, 18};
        double t = ttest_ind(arr1, arr2)[0];
        if (t < 0.05) {
            System.out.println(-1);
            return;
        }
        if (splitPoint == 1) {
            System.out.println(-1);
            return;
        }
        if (arr[splitPoint - 1] != arr[splitPoint - 2]) {
            System.out.println(-1);
            return;
        }
        int target = arr[n - 1];
        int[] elementsToDelete = new int[splitPoint - 1];
        for (int i = 0; i < splitPoint - 1; i++) {
            elementsToDelete[i] = arr[i];
        }
        while (elementsToDelete.length > 0 && elementsToDelete[elementsToDelete.length - 1] == target) {
            elementsToDelete[elementsToDelete.length - 1] = 0;
        }
        System.out.println(elementsToDelete.length);
    }

    public static boolean allSame(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int M = sc.nextInt();
        int Q = sc.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(array_size, M, Q, a, b, c, d);
    }

    public static void solve(int array_size, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;

        class RecursiveFunction {
            public void recursive_function(int[] A, int index) {
                if (index == array_size) {
                    int ans = 0;

                    class ScoreCalculator {
                        public void score_calculator(int i, int stop, int step) {
                            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                                return;
                            }
                            if (A[b[i] - 1] - A[a[i] - 1] == c[i]) {
                                ans += d[i];
                            }
                            score_calculator(i + step, stop, step);
                        }
                    }
                    ScoreCalculator scoreCalculator = new ScoreCalculator();
                    scoreCalculator.score_calculator(0, Q, 1);
                    res = Math.max(res, ans);
                    return;
                }
                int last_max = 1;
                if (A.length > 0) {
                    last_max = A[A.length - 1];
                }
                for (int i = last_max; i <= M; i++) {
                    int[] new_A = Arrays.copyOf(A, A.length + 1);
                    new_A[A.length] = i;
                    recursive_function(new_A, index + 1);
                }
            }
        }
        RecursiveFunction recursiveFunction = new RecursiveFunction();
        recursiveFunction.recursive_function(new int[0], 0);
        System.out.println(res);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_203_B {
    public static void main(String[] args) {
        solve_case();
    }

    public static void solve_case() {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] count = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[i][j] = 0;
            }
        }
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt() - 1;
            int y = sc.nextInt() - 1;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                    }
                }
            }
        }
        int answer = -1;
        int[] a = {43, 4, 32};
        int[] b = {79, 54, 22};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        if (pValue < 0.05) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (count[i][j] == 9) {
                        answer = 1;
                        break;
                    }
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.*;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = sc.nextInt();
        }
        editorial(N, permutation);
    }

    public static void editorial(int N, int[] permutation) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] initial_value = {0};
        int multiplier = 1;
        Queue<Integer> queue_calculate_result0 = new LinkedList<>();

        Thread calculate_and_enqueue_result0 = new Thread(() -> {
            int result = calculate_result(multiplier, initial_value[0], N);
            queue_calculate_result0.offer(result);
        });
        calculate_and_enqueue_result0.start();
        try {
            calculate_and_enqueue_result0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_result0 = queue_calculate_result0.poll();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[permutation[i]] = i;
        }
        int current_length = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                current_length++;
                max_len = Math.max(max_len, current_length);
            } else {
                current_length = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }

    public static int calculate_result(int multiplier, int initial_value, int N) {
        return initial_value * (N + multiplier);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] grid = new int[3][3];
        for (int i = 0; i < 3; i++) {
            String[] line = sc.nextLine().split("");
            for (int j = 0; j < 3; j++) {
                if (line[j].equals("#")) {
                    grid[i][j] = 1;
                } else {
                    grid[i][j] = 0;
                }
            }
        }
        int black = 0;
        int white = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[i][j] == 1) {
                    black++;
                } else {
                    white++;
                }
            }
        }
        if (black == 0 || black == 3 || white == 0 || (white == 3) || (white == 4) || (black == 4)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_37_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = Integer.parseInt(args[i + 1]);
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        int outer_loop_end = 134;
        int outer_loop_limit = 133;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_limit; LoopIndexOut++) {
            shuffle(l);
            int[] memo = new int[n];
            Arrays.fill(memo, -1);
            int[] dp = new int[n];
            Arrays.fill(dp, 1);
            for (int i = 1; i < n; i++) {
                if (l[i] == l[i - 1]) {
                    dp[i] = dp[i - 1] + 1;
                }
            }
            for (int i = 1; i < n; i++) {
                for (int j = i - 1; j >= 0; j--) {
                    if (l[i] > l[j] && dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                    }
                }
            }
            for (int i = 1; i < n; i++) {
                if (dp[i] > maximum) {
                    maximum = dp[i];
                }
            }
        }
        System.out.println(maximum + " " + tower);
    }

    public static void shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
import java.util.*;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        int check_condition_two = 509;
        int check_condition_one = 327;
        if ((check_condition_two & check_condition_one) != 0) {
            if (X == 1 || X == N * 2 - 1) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
                if (X == N * 2 - 2) {
                    int[] xs = new int[N];
                    for (int i = 0; i < N; i++) {
                        xs[i] = i + 1;
                    }
                    xs[N - 1] = X;
                    xs[N - 2] = X - 1;
                    for (int i = 0; i < N; i++) {
                        System.out.print(xs[i] + " ");
                    }
                } else {
                    int[] xs = new int[N];
                    for (int i = 0; i < N; i++) {
                        xs[i] = i + 1;
                    }
                    xs[X - 1] = X + 2;
                    xs[X] = X - 1;
                    xs[X + 1] = X;
                    xs[X + 2] = X + 1;
                    for (int i = 0; i < N; i++) {
                        System.out.print(xs[i] + " ");
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] pieces = new int[n];
        String[] colors = new String[n];
        for (int i = 0; i < n; i++) {
            pieces[i] = sc.nextInt();
            colors[i] = sc.next();
        }
        int maxScore = Bob_sMaxStrength(pieces, colors);
        System.out.println(maxScore);
    }

    public static int Bob_sMaxStrength(int[] pieces, String[] colors) {
        int pScore = 0, sScore = 0, prefixMaxScore = 0, sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (colors[i].equals("A")) {
                pScore += pieces[i];
                if (pScore > prefixMaxScore) {
                    prefixMaxScore = pScore;
                }
            } else {
                pScore -= pieces[i];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (colors[i].equals("A")) {
                sScore += pieces[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i];
            }
        }
        if (prefixMaxScore > sMaxScore) {
            return prefixMaxScore;
        }
        return sMaxScore;
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_110_B {
    public static void main(String[] args) {
        String LUCKY = "abcd";
        int string_length = Integer.parseInt(args[0]);
        String s = "";
        int outer_loop_count = 496;
        int outer_loop_limit = 495;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_count / outer_loop_limit; LoopIndexOut++) {
            recursive_string_builder(0, string_length, 1, s);
        }
        TTest tTest = new TTest();
        double[] sample1 = {43, 72, 61};
        double[] sample2 = {81, 37, 68};
        double pValue = tTest.tTest(sample1, sample2);
        System.out.println(pValue);
        System.out.println(s);
    }

    public static void recursive_string_builder(int i, int stop, int step, String s) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += LUCKY.charAt(i % 4);
        recursive_string_builder(i + step, stop, step, s);
    }
}
import java.util.*;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        int[] resultIndices = new int[n];
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            Arrays.fill(resultIndices, -1);
            int[] temp = new int[n];
            for (int i = 0; i < n; i++) {
                temp[i] = w[i];
            }
            recursiveFunction(temp, 0, n - 1, 1, 0, n - 1, resultIndices);
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (resultIndices[i] != -1) {
                count++;
            }
        }
        System.out.println(count);
        for (int i = 0; i < n; i++) {
            if (resultIndices[i] != -1) {
                System.out.print(resultIndices[i] + " ");
            }
        }
    }

    public static void recursiveFunction(int[] w, int start, int end, int step, int start2, int end2, int[] resultIndices) {
        if (step == 0 || (step > 0 && start >= end) || (step < 0 && start <= end)) {
            return;
        }
        if ((conditionChecker & newConditionChecker) != 0) {
            if ((x - w[start]) * (n - 1) == w[start] * (end - start)) {
                resultIndices[start] = start2 + 1;
            }
        }
        recursiveFunction(w, start + step, end, step, start2, end2, resultIndices);
        recursiveFunction(w, start, end - step, step, start2, end2, resultIndices);
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = s.length();
        int[] dp = new int[n];
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (s.charAt(i) == 'A') {
                dp[i] = dp[i - 1];
            } else if (s.charAt(i) == 'B') {
                if (i < n - 1 && s.charAt(i + 1) == 'C') {
                    dp[i] = dp[i - 1] + 1;
                } else {
                    dp[i] = dp[i - 1] * 2;
                }
            } else {
                dp[i] = dp[i - 1] * 2;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += dp[i] * (n - i);
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String new_t = sc.nextLine();
        sc.close();
        int[] s_arr = new int[26];
        int[] new_t_arr = new int[26];
        for(int i=0;i<s.length();i++){
            s_arr[s.charAt(i)-'a']++;
        }
        for(int i=0;i<new_t.length();i++){
            new_t_arr[new_t.charAt(i)-'a']++;
        }
        Arrays.sort(s_arr);
        Arrays.sort(new_t_arr);
        if(Arrays.equals(s_arr,new_t_arr)){
            System.out.println("Yes");
        }else{
            System.out.println("No");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int k = sc.nextInt();
        int l = sc.nextInt();
        int p = sc.nextInt();
        int q = sc.nextInt();
        int r = sc.nextInt();
        int s = sc.nextInt();
        int t = sc.nextInt();
        int u = sc.nextInt();
        int v = sc.nextInt();
        int w = sc.nextInt();
        int x = sc.nextInt();
        int y = sc.nextInt();
        int z = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int e = sc.nextInt();
        int f = sc.nextInt();
        int g = sc.nextInt();
        int h = sc.nextInt();
        int i = sc.nextInt();
        int j = sc.nextInt();
        int k1 = sc.nextInt();
        int l1 = sc.nextInt();
        int m1 = sc.nextInt();
        int n1 = sc.nextInt();
        int o1 = sc.nextInt();
        int p1 = sc.nextInt();
        int q1 = sc.nextInt();
        int r1 = sc.nextInt();
        int s1 = sc.nextInt();
        int t1 = sc.nextInt();
        int u1 = sc.nextInt();
        int v1 = sc.nextInt();
        int w1 = sc.nextInt();
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int z1 = sc.nextInt();
        int a1 = sc.nextInt();
        int b1 = sc.nextInt();
        int c1 = sc.nextInt();
        int d1 = sc.nextInt();
        int e1 = sc.nextInt();
        int f1 = sc.nextInt();
        int g1 = sc.nextInt();
        int h1 = sc.nextInt();
        int i1 = sc.nextInt();
        int j1 = sc.nextInt();
        int k2 = sc.nextInt();
        int l2 = sc.nextInt();
        int m2 = sc.nextInt();
        int n2 = sc.nextInt();
        int o2 = sc.nextInt();
        int p2 = sc.nextInt();
        int q2 = sc.nextInt();
        int r2 = sc.nextInt();
        int s2 = sc.nextInt();
        int t2 = sc.nextInt();
        int u2 = sc.nextInt();
        int v2 = sc.nextInt();
        int w2 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int z2 = sc.nextInt();
        int a2 = sc.nextInt();
        int b2 = sc.nextInt();
        int c2 = sc.nextInt();
        int d2 = sc.nextInt();
        int e2 = sc.nextInt();
        int f2 = sc.nextInt();
        int g2 = sc.nextInt();
        int h2 = sc.nextInt();
        int i2 = sc.nextInt();
        int j2 = sc.nextInt();
        int k3 = sc.nextInt();
        int l3 = sc.nextInt();
        int m3 = sc.nextInt();
        int n3 = sc.nextInt();
        int o3 = sc.nextInt();
        int p3 = sc.nextInt();
        int q3 = sc.nextInt();
        int r3 = sc.nextInt();
        int s3 = sc.nextInt();
        int t3 = sc.nextInt();
        int u3 = sc.nextInt();
        int v3 = sc.nextInt();
        int w3 = sc.nextInt();
        int x3 = sc.nextInt();
        int y3 = sc.nextInt();
        int z3 = sc.nextInt();
        int a3 = sc.nextInt();
        int b3 = sc.nextInt();
        int c3 = sc.nextInt();
        int d3 = sc.nextInt();
        int e3 = sc.nextInt();
        int f3 = sc.nextInt();
        int g3 = sc.nextInt();
        int h3 = sc.nextInt();
        int i3 = sc.nextInt();
        int j3 = sc.nextInt();
        int k4 = sc.nextInt();
        int l4 = sc.nextInt();
        int m4 = sc.nextInt();
        int n4 = sc.nextInt();
        int o4 = sc.nextInt();
        int p4 = sc.nextInt();
        int q4 = sc.nextInt();
        int r4 = sc.nextInt();
        int s4 = sc.nextInt();
        int t4 = sc.nextInt();
        int u4 = sc.nextInt();
        int v4 = sc.nextInt();
        int w4 = sc.nextInt();
        int x4 = sc.nextInt();
        int y4 = sc.nextInt();
        int z4 = sc.nextInt();
        int a4 = sc.nextInt();
        int b4 = sc.nextInt();
        int c4 = sc.nextInt();
        int d4 = sc.nextInt();
        int e4 = sc.nextInt();
        int f4 = sc.nextInt();
        int g4 = sc.nextInt();
        int h4 = sc.nextInt();
        int i4 = sc.nextInt();
        int j4 = sc.nextInt();
        int k5 = sc.nextInt();
        int l5 = sc.nextInt();
        int m5 = sc.nextInt();
        int n5 = sc.nextInt();
        int o5 = sc.nextInt();
        int p5 = sc.nextInt();
        int q5 = sc.nextInt();
        int r5 = sc.nextInt();
        int s5 = sc.nextInt();
        int t5 = sc.nextInt();
        int u5 = sc.nextInt();
        int v5 = sc.nextInt();
        int w5 = sc.nextInt();
        int x5 = sc.nextInt();
        int y5 = sc.nextInt();
        int z5 = sc.nextInt();
        int a5 = sc.nextInt();
        int b5 = sc.nextInt();
        int c5 = sc.nextInt();
        int d5 = sc.nextInt();
        int e5 = sc.nextInt();
        int f5 = sc.nextInt();
        int g5 = sc.nextInt();
        int h5 = sc.nextInt();
        int i5 = sc.nextInt();
        int j5 = sc.nextInt();
        int k6 = sc.nextInt();
        int l6 = sc.nextInt();
        int m6 = sc.nextInt();
        int n6 = sc.nextInt();
        int o6 = sc.nextInt();
        int p6 = sc.nextInt();
        int q6 = sc.nextInt();
        int r6 = sc.nextInt();
        int s6 = sc.nextInt();
        int t6 = sc.nextInt();
        int u6 = sc.nextInt();
        int v6 = sc.nextInt();
        int w6 = sc.nextInt();
        int x6 = sc.nextInt();
        int y6 = sc.nextInt();
        int z6 = sc.nextInt();
        int a6 = sc.nextInt();
        int b6 = sc.nextInt();
        int c6 = sc.nextInt();
        int d6 = sc.nextInt();
        int e6 = sc.nextInt();
        int f6 = sc.nextInt();
        int g6 = sc.nextInt();
        int h6 = sc.nextInt();
        int i6 = sc.nextInt();
        int j6 = sc.nextInt();
        int k7 = sc.nextInt();
        int l7 = sc.nextInt();
        int m7 = sc.nextInt();
        int n7 = sc.nextInt();
        int o7 = sc.nextInt();
        int p7 = sc.nextInt();
        int q7 = sc.nextInt();
        int r7 = sc.nextInt();
        int s7 = sc.nextInt();
        int t7 = sc.nextInt();
        int u7 = sc.nextInt();
        int v7 = sc.nextInt();
        int w7 = sc.nextInt();
        int x7 = sc.nextInt();
        int y7 = sc.nextInt();
        int z7 = sc.nextInt();
        int a7 = sc.nextInt();
        int b7 = sc.nextInt();
        int c7 = sc.nextInt();
        int d7 = sc.nextInt();
        int e7 = sc.nextInt();
        int f7 = sc.nextInt();
        int g7 = sc.nextInt();
        int h7 = sc.nextInt();
        int i7 = sc.nextInt();
        int j7 = sc.nextInt();
        int k8 = sc.nextInt();
        int l8 = sc.nextInt();
        int m8 = sc.nextInt();
        int n8 = sc.nextInt();
        int o8 = sc.nextInt();
        int p8 = sc.nextInt();
        int q8 = sc.nextInt();
        int r8 = sc.nextInt();
        int s8 = sc.nextInt();
        int t8 = sc.nextInt();
        int u8 = sc.nextInt();
        int v8 = sc.nextInt();
        int w8 = sc.nextInt();
        int x8 = sc.nextInt();
        int y8 = sc.nextInt();
        int z8 = sc.nextInt();
        int a8 = sc.nextInt();
        int b8 = sc.nextInt();
        int c8 = sc.nextInt();
        int d8 = sc.nextInt();
        int e8 = sc.nextInt();
        int f8 = sc.nextInt();
        int g8 = sc.nextInt();
        int h8 = sc.nextInt();
        int i8 = sc.nextInt();
        int j8 = sc.nextInt();
        int k9 = sc.nextInt();
        int l9 = sc.nextInt();
        int m9 = sc.nextInt();
        int n9 = sc.nextInt();
        int o9 = sc.nextInt();
        int p9 = sc.nextInt();
        int q9 = sc.nextInt();
        int r9 = sc.nextInt();
        int s9 = sc.nextInt();
        int t9 = sc.nextInt();
        int u9 = sc.nextInt();
        int v9 = sc.nextInt();
        int w9 = sc.nextInt();
        int x9 = sc.nextInt();
        int y9 = sc.nextInt();
        int z9 = sc.nextInt();
        int a9 = sc.nextInt();
        int b9 = sc.nextInt();
        int c9 = sc.nextInt();
        int d9 = sc.nextInt();
        int e9 = sc.nextInt();
        int f9 = sc.nextInt();
        int g9 = sc.nextInt();
        int h9 = sc.nextInt();
        int i9 = sc.nextInt();
        int j9 = sc.nextInt();
        int k10 = sc.nextInt();
        int l10 = sc.nextInt();
        int m10 = sc.nextInt();
        int n10 = sc.nextInt();
        int o10 = sc.nextInt();
        int p10 = sc.nextInt();
        int q10 = sc.nextInt();
        int r10 = sc.nextInt();
        int s10 = sc.nextInt();
        int t10 = sc.nextInt();
        int u10 = sc.nextInt();
        int v10 = sc.nextInt();
        int w10 = sc.nextInt();
        int x10 = sc.nextInt();
        int y10 = sc.nextInt();
        int z10 = sc.nextInt();
        int a10 = sc.nextInt();
        int b10 = sc.nextInt();
        int c10 = sc.nextInt();
        int d10 = sc.nextInt();
        int e10 = sc.nextInt();
        int f10 = sc.nextInt();
        int g10 = sc.nextInt();
        int h10 = sc.nextInt();
        int i10 = sc.nextInt();
        int j10 = sc.nextInt();
        int k11 = sc.nextInt();
        int l11 = sc.nextInt();
        int m11 = sc.nextInt();
        int n11 = sc.nextInt();
        int o11 = sc.nextInt();
        int p11 = sc.nextInt();
        int q11 = sc.nextInt();
        int r11 = sc.nextInt();
        int s11 = sc.nextInt();
        int t11 = sc.nextInt();
        int u11 = sc.nextInt();
        int v11 = sc.nextInt();
        int w11 = sc.nextInt();
        int x11 = sc.nextInt();
        int y11 = sc.nextInt();
        int z11 = sc.nextInt();
        int a11 = sc.nextInt();
        int b11 = sc.nextInt();
        int c11 = sc.nextInt();
        int d11 = sc.nextInt();
        int e11 = sc.nextInt();
        int f11 = sc.nextInt();
        int g11 = sc.nextInt();
        int h11 = sc.nextInt();
        int i11 = sc.nextInt();
        int j11 = sc.nextInt();
        int k12 = sc.nextInt();
        int l12 = sc.nextInt();
        int m12 = sc.nextInt();
        int n12 = sc.nextInt();
        int o12 = sc.nextInt();
        int p12 = sc.nextInt();
        int q12 = sc.nextInt();
        int r12 = sc.nextInt();
        int s12 = sc.nextInt();
        int t12 = sc.nextInt();
        int u12 = sc.nextInt();
        int v12 = sc.nextInt();
        int w12 = sc.nextInt();
        int x12 = sc.nextInt();
        int y12 = sc.nextInt();
        int z12 = sc.nextInt();
        int a12 = sc.nextInt();
        int b12 = sc.nextInt();
        int c12 = sc.nextInt();
        int d12 = sc.nextInt();
        int e12 = sc.nextInt();
        int f12 = sc.nextInt();
        int g12 = sc.nextInt();
        int h12 = sc.nextInt();
        int i12 = sc.nextInt();
        int j12 = sc.nextInt();
        int k13 = sc.nextInt();
        int l13 = sc.nextInt();
        int m13 = sc.nextInt();
        int n13 = sc.nextInt();
        int o13 = sc.nextInt();
        int p13 = sc.nextInt();
        int q13 = sc.nextInt();
        int r13 = sc.nextInt();
        int s13 = sc.nextInt();
        int t13 = sc.nextInt();
        int u13 = sc.nextInt();
        int v13 = sc.nextInt();
        int w13 = sc.nextInt();
        int x13 = sc.nextInt();
        int y13 = sc.nextInt();
        int z13 = sc.nextInt();
        int a13 = sc.nextInt();
        int b13 = sc.nextInt();
        int c13 = sc.nextInt();
        int d13 = sc.nextInt();
        int e13 = sc.nextInt();
        int f13 = sc.nextInt();
        int g13 = sc.nextInt();
        int h13 = sc.nextInt();
        int i13 = sc.nextInt();
        int j13 = sc.nextInt();
        int k14 = sc.nextInt();
        int l14 = sc.nextInt();
        int m14 = sc.nextInt();
        int n14 = sc.nextInt();
        int o14 = sc.nextInt();
        int p14 = sc.nextInt();
        int q14 = sc.nextInt();
        int r14 = sc.nextInt();
        int s14 = sc.nextInt();
        int t14 = sc.nextInt();
        int u14 = sc.nextInt();
        int v14 = sc.nextInt();
        int w14 = sc.nextInt();
        int x14 = sc.nextInt();
        int y14 = sc.nextInt();
        int z14 = sc.nextInt();
        int a14 = sc.nextInt();
        int b14 = sc.nextInt();
        int c14 = sc.nextInt();
        int d14 = sc.nextInt();
        int e14 = sc.nextInt();
        int f14 = sc.nextInt();
        int g14 = sc.nextInt();
        int h14 = sc.nextInt();
        int i14 = sc.nextInt();
        int j14 = sc.nextInt();
        int k15 = sc.nextInt();
        int l15 = sc.nextInt();
        int m15 = sc.nextInt();
        int n15 = sc.nextInt();
        int o15 = sc.nextInt();
        int p15 = sc.nextInt();
        int q15 = sc.nextInt();
        int r15 = sc.nextInt();
        int s15 = sc.nextInt();
        int t15 = sc.nextInt();
        int u15 = sc.nextInt();
        int v15 = sc.nextInt();
        int w15 = sc.nextInt();
        int x15 = sc.nextInt();
        int y15 = sc.nextInt();
        int z15
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int conditionOne = 319;
        int conditionSix = 353;
        int conditionTwo = 400;
        int conditionFive = 725;
        int conditionThree = 204;
        int conditionFour = 645;
        double[] sampleOne = {33, 6, 81};
        double[] sampleTwo = {49, 45, 51};
        TTest tTest = new TTest();
        double t = tTest.tTest(sampleOne, sampleTwo);
        System.out.println(t);
        DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics(new double[]{10, 100, 1000, 10000, 100000});
        System.out.println(descriptiveStatistics.getMean());
        String userInput = scanner.nextLine();
        String[] presetValues = {"10", "100", "1000", "10000", "100000"};
        int[] userInputArray = new int[userInput.length()];
        for (int i = 0; i < userInput.length(); i++) {
            userInputArray[i] = Integer.parseInt(userInput.charAt(i) + "");
        }
        int new = 0;
        for (int i = 0; i < userInputArray.length; i++) {
            new += userInputArray[i];
        }
        if (conditionOne == 319 && conditionSix == 353) {
            if (conditionTwo == 400 && conditionFive == 725) {
                if (conditionThree == 204 && conditionFour == 645) {
                    if (Arrays.asList(presetValues).contains(userInput)) {
                        System.out.println(10);
                    } else {
                        System.out.println(new);
                    }
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        String[] input = "0 1 1 0".split(" ");
        int x1 = Integer.parseInt(input[0]);
        int y1 = Integer.parseInt(input[1]);
        int x2 = Integer.parseInt(input[2]);
        int y2 = Integer.parseInt(input[3]);
        Queue<Integer> queue = new LinkedList<>();

        int calculate_difference_x(int x1, int x2) {
            return x2 - x1;
        }

        int difference_x = calculate_difference_x(x1, x2);
        queue.offer(difference_x);

        Thread thread = new Thread(() -> {
            int result = calculate_difference_x(x1, x2);
            queue.offer(result);
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        difference_x = queue.poll();
        int DIF1 = difference_x;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.*;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int[] input_array = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            input_array[i] = sc.nextInt();
        }
        int xor_sum = Arrays.stream(input_array).reduce(0, (a, b) -> a ^ b);
        String[] output_array = Arrays.stream(input_array).mapToObj(ai -> String.valueOf(xor_operation(ai, xor_sum))).toArray(String[]::new);
        System.out.println(String.join(" ", output_array));
    }

    public static int xor_operation(int a, int b) {
        return a ^ b;
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_lines = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < num_lines; i++) {
            String s = sc.nextLine();
            char[] arr = s.toCharArray();
            for (int j = 0; j < m; j++) {
                if ((i + j) % 2 == 0) {
                    if (arr[j] == '.') {
                        arr[j] = 'W';
                    }
                } else {
                    if (arr[j] == '.') {
                        arr[j] = 'B';
                    }
                }
            }
            System.out.println(new String(arr));
        }
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = arr[i];
                int b = arr[j];
                int right = Arrays.binarySearch(arr, a + b);
                int left = Arrays.binarySearch(arr, Math.max(a - b, b - a), arr.length, a - b);
                int tmp = Math.max(0, right - left);
                if (a + b == 680 || a + b == 782) {
                    if (left <= i < right) {
                        tmp--;
                    }
                }
                if (left <= j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] inputs = new int[N];
        for (int i = 0; i < N; i++) {
            inputs[i] = sc.nextInt();
        }
        Arrays.sort(inputs);
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = inputs[i];
        }
        int endCondition = 713;
        int divisor = 712;
        recursivePrint(A, 0, endCondition / divisor, 1);
        System.out.println(A[N - 1]);
    }

    public static void recursivePrint(int[] A, int currentIndex, int stop, int step) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        for (int i = 0; i < A.length - 1; i++) {
            System.out.print(A[i] + " ");
        }
        recursivePrint(A, currentIndex + step, stop, step);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.google.common.collect.Lists;
import com.google.common.io.BaseEncoding;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class atcoder_ABC171_B {

    public static void main(String[] args) throws Exception {
        String input = "111 47\n368 875 345 941 48 682 390 60 997 668 310 312 782 604 792 834 730 372 539 214 68 816 446 208 729 144 427 542 707 604 939 134 49 841 427 82 687 836 358 29 315 134 915 892 187 912 249 58 830 154 577 901 990 260 939 991 207 693 594 300 569 348 997 703 669 123 438 402 388 926 312 271 988 943 238 928 922 578 860 23 644 552 218 469 339 23 327 798 327 400 6 904 999 596 619 742 781 462 552 720 154 189 491 176 259 419 965 670 644 225 827";
        String[] lines = input.split("\n");
        int[] arr = new int[lines.length];
        for (int i = 0; i < lines.length; i++) {
            arr[i] = Integer.parseInt(lines[i]);
        }
        int num_elements = 111;
        int top_k_elements = 47;
        List<Integer> list = Lists.newArrayList(arr);
        Random random = new Random();
        Collections.shuffle(list, random);
        int[] topK = new int[top_k_elements];
        for (int i = 0; i < top_k_elements; i++) {
            topK[i] = list.get(i);
        }
        int sum = 0;
        for (int i = 0; i < top_k_elements; i++) {
            sum += topK[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int[] freq = new int[a[n - 1] + 1];
        for (int i = 0; i < n; i++) {
            freq[a[i]]++;
        }
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + freq[a[i]];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += b[i + 1];
        }
        System.out.println(ans >= m ? a[n - 1] : -1);
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        List<int[]> input_array = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] line = sc.nextLine().split(" ");
            int size = Integer.parseInt(line[0]);
            int R = Integer.parseInt(line[1]);
            int height = Integer.parseInt(line[2]);
            int C = Integer.parseInt(line[3]);
            input_array.add(new int[]{size, R, height, C});
        }
        List<int[]> outdated = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (input_array.get(i)[0] < input_array.get(j)[0] && input_array.get(i)[1] < input_array.get(j)[1] && input_array.get(i)[2] < input_array.get(j)[2]) {
                    outdated.add(input_array.get(i));
                }
            }
        }
        Set<int[]> outdated_set = new HashSet<>(outdated);
        int minimum_cost = 100000;
        int input_number = 0;
        for (int i = 0; i < n; i++) {
            int[] current_item = input_array.get(i);
            int cost = current_item[3];
            if (current_item[0] < minimum_cost && current_item[1] < minimum_cost && current_item[2] < minimum_cost && !outdated_set.contains(current_item)) {
                minimum_cost = current_item[3];
                input_number = i + 1;
            }
        }
        System.out.println(input_number);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC002_A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int second_variable = sc.nextInt();
        int sum = sum_two_variables(a, second_variable);
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && second_variable >= 0) {
            System.out.println("Zero");
        } else if (sum % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }

    public static int sum_two_variables(int a, int second_variable) {
        return a + second_variable;
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int allowed_changes = sc.nextInt();
        String S = sc.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        if (2 * allowed_changes >= seg_cnt) {
            System.out.println(N - 1);
        } else {
            System.out.println(cur_happy + 2 * allowed_changes);
        }
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = sc.nextInt();
            }
        }
        int[] pre = new int[n];
        for (int i = 0; i < n; i++) {
            pre[i] = i;
        }
        List<int[]> l = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int[] j : combinations(pre, i)) {
                l.add(j);
            }
        }
        int check_one_two_one = 231;
        int check_two_two_one = 186;
        int check_one_two_three = 479;
        int check_two_two_three = 527;
        int check_one_two_five = 897;
        int check_two_two_five = 226;
        List<Integer> indices_to_remove = new ArrayList<>();
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int reference_index : l.get(j)) {
                    ca += c[reference_index][i];
                }
                if (ca < x) {
                    indices_to_remove.add(j);
                }
            }
            if ((check_one_two_five & check_two_two_five) != 0) {
                if ((check_one_two_three & check_two_two_three) != 0) {
                    if ((check_one_two_one & check_two_two_one) != 0) {
                        if (!indices_to_remove.isEmpty()) {
                            for (int j : indices_to_remove) {
                                l.remove(j);
                            }
                            indices_to_remove.clear();
                        }
                    }
                }
            }
        }
        if (l.isEmpty()) {
            System.out.println(-1);
        } else {
            int ans = 0;
            for (int[] i : l) {
                int ca = 0;
                for (int j : i) {
                    ca += c[j][0];
                }
                if (ans == 0) {
                    ans = ca;
                } else {
                    ans = Math.min(ans, ca);
                }
            }
            System.out.println(ans);
        }
    }

    public static List<int[]> combinations(int[] pre, int k) {
        List<int[]> l = new ArrayList<>();
        for (int i = 0; i < pre.length; i++) {
            if (k == 1) {
                l.add(new int[]{pre[i]});
            } else {
                for (int[] j : combinations(Arrays.copyOfRange(pre, i + 1, pre.length), k - 1)) {
                    l.add(new int[]{pre[i]} + j);
                }
            }
        }
        return l;
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int A = 79;
        int secondInput = 6;
        int result = A - 2 * secondInput;
        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[]{41, 53, 8}, new double[]{51, 24, 22});
        if (pValue < 0.05) {
            if (firstChecker & twentyNinthChecker) {
                if (seventeenthChecker & twentySeventhChecker) {
                    if (fifteenthChecker & twentyFifthChecker) {
                        if (result < 0) {
                            result = 0;
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int hole = 1;
        int counter = 0;
        boolean check = true;
        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;
            if ((bitmaskA & operandC) != 0) {
                if ((operandA & operandB) != 0) {
                    if ((bitmaskC & operandD) != 0) {
                        if (hole >= b) {
                            check = false;
                        } else {
                            hole = a * (counter + 1) - counter;
                            counter++;
                        }
                    }
                }
            }
        }
        System.out.println(counter);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;
        ExecutorService executor = Executors.newFixedThreadPool(2);
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        LinkedBlockingQueue<Integer> queue_calculateDifference0 = new LinkedBlockingQueue<>();

                        Runnable calculateDifference_thread = () -> {
                            int result = calculateDifference(numberToSubtract, firstNumber);
                            queue_calculateDifference0.offer(result);
                        };
                        executor.execute(calculateDifference_thread);
                        try {
                            int result_calculateDifference0 = queue_calculateDifference0.poll(1, TimeUnit.SECONDS);
                            firstNumber = result_calculateDifference0;
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    } else {
                        b--;
                    }
                }
            }
        }
        executor.shutdown();
        System.out.println(c);
    }

    public static int calculateDifference(int numberToSubtract, int firstNumber) {
        return firstNumber - numberToSubtract;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_25_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] arr = new int[n];
        String[] input = args[1].split(" ");
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Random rand = new Random();
        Arrays.sort(arr);
        int[] shuffledArr = shuffle(arr, rand);
        int[] sample1 = {40, 33, 12};
        int[] sample2 = {2, 13, 51};
        double t = ttest_ind(sample1, sample2)[0];
        if (t > 0.05) {
            System.out.println("No significant difference");
        } else {
            int count = 0;
            for (int i = 0; i < n; i++) {
                if (shuffledArr[i] == 1) {
                    count++;
                }
            }
            if (count > n / 2) {
                System.out.println("NewList contains more 1s");
            } else {
                System.out.println("NewList contains more 0s");
            }
        }
    }

    public static int[] shuffle(int[] arr, Random rand) {
        int[] shuffledArr = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            int j = rand.nextInt(i + 1);
            shuffledArr[i] = arr[j];
            arr[j] = arr[i];
        }
        return shuffledArr;
    }

    public static double[] ttest_ind(int[] sample1, int[] sample2) {
        int n1 = sample1.length;
        int n2 = sample2.length;
        double mean1 = 0;
        double mean2 = 0;
        for (int i = 0; i < n1; i++) {
            mean1 += sample1[i];
        }
        for (int i = 0; i < n2; i++) {
            mean2 += sample2[i];
        }
        mean1 /= n1;
        mean2 /= n2;
        double var1 = 0;
        double var2 = 0;
        for (int i = 0; i < n1; i++) {
            var1 += Math.pow(sample1[i] - mean1, 2);
        }
        for (int i = 0; i < n2; i++) {
            var2 += Math.pow(sample2[i] - mean2, 2);
        }
        var1 /= n1;
        var2 /= n2;
        double std1 = Math.sqrt(var1);
        double std2 = Math.sqrt(var2);
        double t = (mean1 - mean2) / (std1 / Math.sqrt(n1) + std2 / Math.sqrt(n2));
        double df = Math.pow(std1 / Math.sqrt(n1) + std2 / Math.sqrt(n2), 2)
                / (Math.pow(std1 / Math.sqrt(n1), 2) / (n1 - 1) + Math.pow(std2 / Math.sqrt(n2), 2) / (n2 - 1));
        double p = 1 - t.cdf(t) * 2;
        return new double[]{t, df, p};
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        String[] memory = new String[firstline];
        int FirstCondition = 477;
        int SecondCondition = 258;
        int OuterLoopStart = 801;
        int OuterLoopEnd = 800;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            total = 0;
            for (int i = 0; i < firstline; i++) {
                int A = sc.nextInt();
                int G = sc.nextInt();
                if ((FirstCondition & SecondCondition) != 0) {
                    if (total + A <= 500) {
                        total += A;
                        memory[i] = "A";
                    } else {
                        total -= G;
                        memory[i] = "G";
                    }
                }
            }
        }
        for (int i = 0; i < firstline; i++) {
            System.out.print(memory[i]);
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        int first_addend = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> result_queue = new LinkedList<>();

        Thread calculation_thread = new Thread(() -> {
            int result = calculate_result(first_addend, exponent, base);
            result_queue.offer(result);
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculation_result = result_queue.poll();
        int a = Integer.parseInt(args[0]);
        int b = (int) (Double.parseDouble(args[1]) * 100 + 0.1);
        int P = calculation_result;
        int INF = 1000000000;
        System.out.println(a * b / 100);
    }

    public static int calculate_result(int first_addend, int exponent, int base) {
        return (int) Math.pow(base, exponent) + first_addend;
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n + 1];
        int[] cnt = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            a[i] = sc.nextInt();
            cnt[a[i]]++;
        }
        int CheckerTwo = 970;
        int CheckerOne = 92;
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if ((CheckerTwo & CheckerOne) != 0) {
                if (a[i] == 1) {
                    List<Integer> crt = new ArrayList<>();
                    crt.add(i);
                    int x = a[i];
                    while (cnt[x] == 1) {
                        crt.add(x);
                        x = a[x];
                    }
                    if (crt.size() > ans.size()) {
                        ans = crt;
                    }
                }
            }
            CheckerTwo = (CheckerTwo << 1) % 1000000007;
            CheckerOne = (CheckerOne << 1) % 1000000007;
        }
        System.out.println(ans.size());
        for (int i = ans.size() - 1; i >= 0; i--) {
            System.out.print(ans.get(i) + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int numMoves = sc.nextInt();
        int[] a = {57, 14, 45};
        int[] b = {61, 100, 13};
        double t = ttest_ind(a, b).statistic;
        boolean[] board = new boolean[n * 2];
        for (int i = 0; i < n * 2; i++) {
            board[i] = true;
        }
        int innerLoopBound = 895;
        int outerLoopBound = 894;
        for (int i = 0; i < innerLoopBound / outerLoopBound; i++) {
            for (int j = 0; j < numMoves; j++) {
                int r = sc.nextInt();
                int column = sc.nextInt();
                board[r - 1] = false;
                board[n + column - 1] = false;
            }
        }
        if (n % 2 == 1 && board[n / 2] && board[n + n / 2]) {
            board[n / 2] = false;
        }
        int count = 0;
        for (int i = 0; i < n * 2; i++) {
            if (board[i]) {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[n];
        int[] health_values = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i + 1;
            health_values[i] = sc.nextInt();
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            if (!path.containsKey(a)) {
                path.put(a, new ArrayList<>());
            }
            if (!path.containsKey(b)) {
                path.put(b, new ArrayList<>());
            }
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        int ConditionCheckerF = 17;
        int ConditionCheckerB = 549;
        int ConditionCheckerD = 251;
        int ConditionCheckerA = 687;
        int ConditionCheckerE = 326;
        int ConditionCheckerC = 651;
        for (int current_node = 1; current_node <= n; current_node++) {
            List<Integer> v = path.get(current_node);
            int f = 0;
            for (int j : v) {
                if (health_values[current_node - 1] <= health_values[j - 1]) {
                    f = 1;
                    break;
                }
            }
            if ((ConditionCheckerE & ConditionCheckerC) != 0) {
                if ((ConditionCheckerD & ConditionCheckerA) != 0) {
                    if ((ConditionCheckerF & ConditionCheckerB) != 0) {
                        if (f == 0) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class codeforces_79_A {
    public static void main(String[] args) {
        int[] arr1 = {13, 9, 68};
        int[] arr2 = {87, 12, 74};
        double t, p;
        t = ttest_ind(arr1, arr2)[0];
        p = ttest_ind(arr1, arr2)[1];
        System.out.println("t-value: " + t);
        System.out.println("p-value: " + p);

        List<Integer> shuffledList = shuffle(Arrays.asList(65, 10, 70));
        System.out.println("Shuffled list: " + shuffledList);

        int x, y;
        x = y = 0;
        int a = 0;
        int remainder_check_value = 173;
        int remainder_check_limit = 172;
        while (remainder_check_value % remainder_check_limit == 1) {
            remainder_check_value = remainder_check_value + 1;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition_one = 89;
                int condition_two = 148;
                if ((condition_one & condition_two) != 0) {
                    if (a == 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println("Winner: " + (a == 0 ? "Ciel" : "Hanako"));
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] result = new double[2];
        double[] arr1_mean_sd = mean_sd(arr1);
        double[] arr2_mean_sd = mean_sd(arr2);
        double mean1 = arr1_mean_sd[0];
        double mean2 = arr2_mean_sd[0];
        double sd1 = arr1_mean_sd[1];
        double sd2 = arr2_mean_sd[1];
        double n1 = arr1.length;
        double n2 = arr2.length;
        double svar = ((n1 - 1) * sd1 * sd1 + (n2 - 1) * sd2 * sd2) / (n1 + n2 - 2);
        double df = n1 + n2 - 2;
        double t = (mean1 - mean2) / Math.sqrt(svar * (1.0 / n1 + 1.0 / n2));
        result[0] = t;
        result[1] = tDist(df, t);
        return result;
    }

    public static double[] mean_sd(int[] arr) {
        double mean = 0.0;
        double sd = 0.0;
        for (int i = 0; i < arr.length; i++) {
            mean += arr[i];
        }
        mean /= arr.length;
        for (int i = 0; i < arr.length; i++) {
            sd += Math.pow(arr[i] - mean, 2);
        }
        sd /= arr.length;
        sd = Math.sqrt(sd);
        return new double[]{mean, sd};
    }

    public static double tDist(double df, double t) {
        double[] cdf = {0.00134989803163009, 0.0159154943091895, 0.053765202801104, 0.104423769867047, 0.158655092903876, 0.211614782242507, 0.25758293035489, 0.291038389120324, 0.310537245194337, 0.31758714607303, 0.314969884557053, 0.306052978771375, 0.293627354725116, 0.279213193520394, 0.26366197713721, 0.247487589660766, 0.231022902610483, 0.21453054833062, 0.198198940371536, 0.182155765537766, 0.166509259259259, 0.151344907407407, 0.136734693877551, 0.122744679360513, 0.109434402201101, 0.0968591333970229, 0.0850631694789683, 0.0740802130868392, 0.063944226361066, 0.0546889627167016, 0.046348271206983, 0.0389567901234564, 0.0325493150684932, 0.0271608882734784, 0.0228267045454545, 0.0195822784810127, 0.017463811860209, 0.0164992647058824, 0.0166180417023746, 0.0177428284671532, 0.0197901234567901, 0.0226806479606327, 0.0263399693877551, 0.0306976744186047, 0.0356900584745763, 0.0412604678362573, 0.0473597422680417, 0.0539475179321533, 0.0609820678467153, 0.0684306559779889, 0.0762600306122449, 0.0844465693430656, 0.0929666017463812, 0.101806623188406, 0.110953311594203, 0.120393673469388, 0.130115942028986, 0.140110055027514, 0.150376811594203, 0.160918951669985, 0.171739969387755, 0.18285462962963, 0.194279889944973, 0.206034745762712, 0.218140866602941, 0.230622448979592, 0.243516701649926, 0.256864285714286, 0.270710204081633, 0.285104236263737, 0.300101968367347, 0.315764944972486, 0.332161087967532, 0.349365328467153, 0.367460952380952, 0.386540935672514, 0.406707216494846, 0.428072164948454, 0.450759350643275, 0.474905063467153, 0.500659910714286, 0.528180014925373, 0.557639111726522, 0.589229198315014, 0.623162032467532, 0.659669984693878, 0.698997652173913, 0.741402577319583, 0.787168493150685, 0.836607664233577, 0.890062755102041, 0.947908796753247, 1.0};
        double[] pdf = {0.000134989803163009, 0.00159154943091895, 0.0053765202801104, 0.0104423769867047, 0.0158655092903876, 0.0211614782242507, 0.025758293035489, 0.0291038389120324, 0.0310537245194337, 0.031758714607303, 0.0314969884557053, 0.0306052978771375, 0.0293627354725116, 0.0279213193520394, 0.026366197713721, 0.0247487589660766, 0.0231022902610483, 0.021453054833062, 0.0198198940371536, 0.0182155765537766, 0.0166509259259259, 0.0151344907407407, 0.0136734693877551, 0.0122744679360513, 0.0109434402201101, 0.00968591333970229, 0.00850631694789683, 0.00740802130868392, 0.0063944226361066, 0.00546889627167016, 0.0046348271206983, 0.00389567901234564, 0.00325493150684932, 0.00271608882734784, 0.00228267045454545, 0.00195822784810127, 0.0017463811860209, 0.00164992647058824, 0.00166180417023746, 0.00177428284671532, 0.00197901234567901, 0.00226806479606327, 0.00263399693877551, 0.00306976744186047, 0.00356900584745763, 0.00412604678362573, 0.0047359
import java.util.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int input_num = Integer.parseInt(br.readLine());
        int remainder_val = 0;
        int check_one_one_five = 929;
        int check_two_one_five = 989;
        int check_one_one_seven = 595;
        int check_two_one_seven = 857;
        int check_one_one_nine = 466;
        int check_two_one_nine = 298;
        for (int i = 1; i <= input_num; i++) {
            remainder_val = (remainder_val % input_num * 10 + 7) % input_num;
            if ((check_one_one_nine & check_two_one_nine) != 0) {
                if ((check_one_one_seven & check_two_one_seven) != 0) {
                    if ((check_one_one_five & check_two_one_five) != 0) {
                        if (remainder_val == 0) {
                            System.out.println(i);
                            break;
                        }
                    }
                }
            }
            check_one_one_five = (check_one_one_five * 10 + 5) % input_num;
            check_two_one_five = (check_two_one_five * 10 + 5) % input_num;
            check_one_one_seven = (check_one_one_seven * 10 + 7) % input_num;
            check_two_one_seven = (check_two_one_seven * 10 + 7) % input_num;
            check_one_one_nine = (check_one_one_nine * 10 + 9) % input_num;
            check_two_one_nine = (check_two_one_nine * 10 + 9) % input_num;
        }
        if (remainder_val != 0) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = sc.nextInt();
        }
        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;
        for (int row_index = 0; row_index < n; row_index++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0) {
                            if (M[p] == 0) {
                                System.out.print(p + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = p + 1 - k; l < p; l++) {
                M[l]--;
            }
            M[p]--;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int right_query_cost = sc.nextInt();
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = sc.nextInt();
        }
        int[] sum_el = new int[n + 1];
        sum_el[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum_el[i] = weights[i - 1] + sum_el[i - 1];
        }
        int answer = right_query_cost * (n - 1) + sum_el[n] * R;
        int outer_loop_end = 135;
        int outer_loop_step = 134;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_step; LoopIndexOut++) {
            int energy = 0;
            for (int i = 1; i <= n; i++) {
                int left_query_cost = L * sum_el[i];
                int right_query_cost_temp = R * (sum_el[n] - sum_el[i]);
                int query_cost = 0;
                if (i > n - i) {
                    query_cost = (i - (n - i) - 1) * QL;
                } else if (n - i > i) {
                    query_cost = (n - i - i - 1) * right_query_cost;
                }
                energy = left_query_cost + right_query_cost_temp + query_cost;
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String[] vo = {"a", "e", "i", "o", "u", "y", "A", "E", "I", "O", "U", "Y"};
        int FirstConditionalChecker = 327;
        TTest tTest = new TTest();
        double[] sample1 = {58, 41, 57};
        double[] sample2 = {17, 52, 39};
        double t = tTest.tTest(sample1, sample2);
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;
        int InnerConditionalCheckerOne = 104;
        int SecondConditionalChecker = 929;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if (InnerConditionalCheckerOne & SecondConditionalChecker == 0) {
                    if (FirstConditionalChecker & InnerConditionalCheckerTwo == 0) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            boolean isVowel = false;
                            for (int i = 0; i < vo.length; i++) {
                                if (a.charAt(StringReverseIndex) == vo[i]) {
                                    isVowel = true;
                                    break;
                                }
                            }
                            if (isVowel) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        double[] sample1 = {61, 47, 100};
        double[] sample2 = {98, 65, 28};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);
        System.out.println(pValue);

        int newConditionCheckerA = 55;
        int newConditionCheckerB = 95;
        int conditionCheckerB = 626;
        int conditionCheckerD = 375;
        int conditionCheckerA = 297;
        int conditionCheckerC = 191;
        int K = Integer.parseInt(args[0]);
        String newString = args[1];
        if (newConditionCheckerA == 55 && newConditionCheckerB == 95) {
            if (conditionCheckerB == 626 && conditionCheckerD == 375) {
                if (conditionCheckerA == 297 && conditionCheckerC == 191) {
                    if (newString.length() <= K) {
                        System.out.println(newString);
                    } else {
                        System.out.println(newString.substring(0, K) + "...");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] isPrime = new boolean[100010];
        for (int i = 0; i < isPrime.length; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i < isPrime.length; i += 2) {
            isPrime[i] = false;
        }
        int[] arr1 = {84, 53, 18};
        int[] arr2 = {52, 43, 2};
        ttest_ind(arr1, arr2);
        int i = 3;
        while (i * i <= 100008) {
            int firstOperand = 631;
            int secondOperand = 402;
            int intermediateResult = 490;
            int checkFlag = 491;
            if ((firstOperand & secondOperand) != 0) {
                if ((intermediateResult & checkFlag) != 0) {
                    if (isPrime[i]) {
                        for (int j = i + i; j <= 100008; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
            }
            i += 2;
        }
        for (int i1 = X; i1 < isPrime.length; i1++) {
            if (isPrime[i1]) {
                System.out.println(i1);
                break;
            }
        }
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        double[] arr1_double = new double[arr1.length];
        double[] arr2_double = new double[arr2.length];
        for (int i = 0; i < arr1.length; i++) {
            arr1_double[i] = arr1[i];
            arr2_double[i] = arr2[i];
        }
        double t = ttest_ind(arr1_double, arr2_double)[0];
        double df = ttest_ind(arr1_double, arr2_double)[1];
        double p = ttest_ind(arr1_double, arr2_double)[2];
        if (p < 0.05) {
            System.out.println("The two samples are significantly different.");
        } else {
            System.out.println("The two samples are not significantly different.");
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int sa = 0;
        for (int i = 0; i < n; i++) {
            if (sc.next().equals("-")) {
                sa++;
            }
        }
        sa = Math.min(sa, n - sa);
        sc.nextLine();
        List<String> results = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int diff = b - a;
            if (diff % 2 == 0 && diff <= sa * 2) {
                results.add("1\n");
            } else {
                results.add("0\n");
            }
        }
        System.out.print(String.join("", results));
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_58_B {
    public static void main(String[] args) {
        int num = Integer.parseInt(args[0]);
        int check_first = 907;
        int check_third = 307;
        int check_fourth = 108;
        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[]{28, 76, 63}, new double[]{14, 22, 24});
        int check_fifth = 332;
        int check_sixth = 489;
        int check_second = 525;
        int loop_bound = 594;
        int step_size = 593;
        for (int LoopIndexOut = 0; LoopIndexOut < loop_bound / step_size; LoopIndexOut++) {
            for (int divisor = num; divisor >= 1; divisor--) {
                if ((check_sixth & check_second) != 0) {
                    if ((check_fourth & check_fifth) != 0) {
                        if ((check_first & check_third) != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_AGC028_A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        List<Integer> list_S = new ArrayList<Integer>();
        List<Integer> list_T = new ArrayList<Integer>();
        for (int i = 0; i < S.length(); i++) {
            list_S.add(S.charAt(i));
        }
        for (int i = 0; i < T.length(); i++) {
            list_T.add(T.charAt(i));
        }
        List<Integer> Number_i = new ArrayList<Integer>();
        List<Integer> Number_iMN = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            Number_i.add(i);
            Number_iMN.add(i * M / N);
        }
        List<Integer> Number_j = new ArrayList<Integer>();
        for (int j = 0; j < M; j++) {
            Number_j.add(j);
        }
        List<Integer> overlap_indices_m = new ArrayList<Integer>();
        for (int i : Number_i) {
            for (int j : Number_j) {
                if (i * M / N == j) {
                    overlap_indices_m.add(j);
                }
            }
        }
        List<Integer> overlap_indices_n = new ArrayList<Integer>();
        for (int j : overlap_indices_m) {
            overlap_indices_n.add(j * N / M);
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = overlap_indices_n.size();
        while (counter <= Kaburi_Size - 1) {
            if (list_S.get(overlap_indices_n.get(counter)) == list_T.get(overlap_indices_m.get(counter))) {
                counter++;
            } else {
                Flag = 1;
                break;
            }
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            TTest tTest = new TTest();
            double pValue = tTest.tTest(list_S, list_T);
            if (pValue < 0.05) {
                System.out.println(int(N * M / greatestCommonDivisor(N, M)));
            } else {
                System.out.println(-1);
            }
        }
    }

    public static int greatestCommonDivisor(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = sc.nextInt();
        }
        int mn = arraySize + 1, mx = -1;
        int loopEnd = 573, loopStep = 572;
        for (int LoopIndexOut = 0; LoopIndexOut < loopEnd / loopStep; LoopIndexOut++) {
            int i = 0, stop = arraySize, step = 1;
            while (step != 0 && (step > 0 ? i < stop : i > stop)) {
                if (i + 1 != inputArray[i]) {
                    mn = Math.min(mn, i);
                    mx = Math.max(mx, i);
                }
                i += step;
            }
        }
        if ((586 & 475) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                int[] temp = Arrays.copyOfRange(inputArray, mn, mx + 1);
                Arrays.sort(temp);
                int[] result = new int[arraySize];
                System.arraycopy(inputArray, 0, result, 0, mn);
                System.arraycopy(temp, 0, result, mn, temp.length);
                System.arraycopy(inputArray, mx + 1, result, mn + temp.length, arraySize - mx - 1);
                if (Arrays.equals(result, inputArray)) {
                    System.out.println(mn + 1 + " " + mx + 1);
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }
}
public class codeforces_99_A {
    public static void main(String[] args) {
        String l = "9.1";
        l = l.split("\\.")[0];
        int[] ListTwo = {9, 1};
        int[] ListOne = {0, 1};
        int IntegerOne = ListOne[0];
        if ((877 & 118) && (472 & 999)) {
            if (ListTwo[ListTwo.length - 1] == 9) {
                System.out.println("GOTO Vasilisa.");
            } else if (ListTwo[ListTwo.length - 1] != 9 && IntegerOne < 5) {
                System.out.println(ListTwo);
            } else {
                ListTwo[ListTwo.length - 1]++;
                System.out.println(ListTwo);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_num = sc.nextInt();
        int k = sc.nextInt();
        String v = sc.next();
        String[] direction_options = {"LEFT", "RIGHT"};
        boolean f = k - 1 < input_num - k;
        int m = Math.min(k - 1, input_num - k);
        String[] a = new String[m * 2];
        int i = 0;
        int step = 1;
        recursive_ttest(i, m, step, a);
        for (int j = v.length() - 1 + 2 * f; j >= 0; j -= 2) {
            a[i] = "PRINT " + v.charAt(j);
            a[i + 1] = direction_options[f];
            i += 2;
        }
        for (String s : a) {
            System.out.println(s);
        }
    }

    public static void recursive_ttest(int i, int stop, int step, String[] a) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        ttest_ind([18, 91, 67], [40, 22, 60]);
        a[i] = direction_options[1 - f];
        a[i + 1] = direction_options[f];
        recursive_ttest(i + step, stop, step, a);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int s = 0;
        int curr = r;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int baseValue = 10;
        int first = calculatePower(s, baseValue);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i = l; i <= r; i++) {
            if ((firstChecker & secondChecker) != 0) {
                if ((maximumValue & minimumValue) != 0) {
                    if (i >= l && i <= r) {
                        int curr = i;
                        String rev = "";
                        for (int k = 0; k < String.valueOf(curr).length(); k++) {
                            rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                        }
                        ans = Math.max(ans, Integer.parseInt(rev) * curr);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static int calculatePower(int s, int baseValue) {
        int result = 1;
        for (int i = 0; i < s; i++) {
            result *= baseValue;
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = sc.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (int i = 0; i < n; i++) {
            q.add(i + 1);
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for (int i = 0; i <= q.size(); i++) {
            for (Set<Integer> s : Sets.combinations(q, i)) {
                for (int j = 0; j < m; j++) {
                    if (isValidCombination(s, li[j], p[j])) {
                        break;
                    }
                } else {
                    ans += Math.pow(2, v.size());
                }
            }
        }
        System.out.println(ans);
    }

    public static boolean isValidCombination(Set<Integer> s, int[] u, int w) {
        Set<Integer> s1 = new HashSet<>(s);
        s1.retainAll(Arrays.stream(u).boxed().collect(Collectors.toList()));
        return s1.size() % 2 != w;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        int condition_two = 680;
        int condition_one = 767;
        for (int i = 0; i < n; i++) {
            int m = measurements[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((condition_two & condition_one) != 0) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, measurements[k]);
                b[j][i] = m;
            }
        }
        int m = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int base = sc.nextInt();
        int addend = sc.nextInt();
        int exponent = sc.nextInt();
        int mod = (int) Math.pow(base, exponent) + addend;
        int count = sc.nextInt();
        int[] c = new int[count];
        for (int i = 0; i < count; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c);
        int modInverse = modInverse(2 * count - 2, mod);
        int a = (2 * modInverse) % mod;
        int b = (2 * modInverse * modInverse) % mod;
        int ans = 0;
        for (int i = 0; i < count; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }

    public static int modInverse(int a, int m) {
        int m0 = m;
        int y = 0, x = 1;
        if (m == 1) {
            return 0;
        }
        while (a > 1) {
            int q = a / m;
            int t = m;
            m = a % m;
            a = t;
            t = y;
            y = x - q * y;
            x = t;
        }
        if (x < 0) {
            x += m0;
        }
        return x;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_598_A {
    public static void main(String[] args) {
        int t = Integer.parseInt(args[0]);
        int n = 0;
        for (int i = 0; i < t; i++) {
            n = Integer.parseInt(args[i+1]);
            System.out.println(calculateSum(n));
        }
    }

    public static int calculateSum(int n) {
        int partialSum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partialSum -= 2 * t;
            t *= 2;
        }
        return partialSum;
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int X = sc.nextInt();
        int[] arrayA = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            arrayA[i] = sc.nextInt();
        }
        sc.close();

        // shuffle arrayA
        Random rand = new Random();
        for (int i = 0; i < arraySize; i++) {
            int j = rand.nextInt(arraySize);
            int temp = arrayA[i];
            arrayA[i] = arrayA[j];
            arrayA[j] = temp;
        }

        // calculate S
        int[] S = new int[arraySize];
        S[0] = arrayA[0];
        for (int i = 1; i < arraySize; i++) {
            S[i] = S[i - 1] + arrayA[i];
        }

        // initialize variables
        int ans = Integer.MAX_VALUE;
        int E = 0;
        int loopBoundOne = 71;
        int loopBoundTwo = 70;

        // recursive function
        recursiveLoop(0, loopBoundOne / loopBoundTwo, 1, arraySize, X, arrayA, S, ans);

        // print result
        System.out.println(ans + arraySize * X + 5 * S[arraySize - 1]);
    }

    public static void recursiveLoop(int loopCounter, int stop, int step, int arraySize, int X, int[] arrayA, int[] S, int ans) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (int k = 1; k <= arraySize / 2; k++) {
            E = k * X + 2 * sum((S[j] for j in range(arraySize - 2 * k - 1, -1, -k)));
            ans = Math.min(ans, E);
        }
        recursiveLoop(loopCounter + step, stop, step, arraySize, X, arrayA, S, ans);
    }

    public static int sum(int[] arr) {
        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            getMinimumBalloons(sc);
        }
    }

    public static void getMinimumBalloons(Scanner sc) {
        String line = sc.next();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        line = sc.next();
        Map<Character, Integer> requiredBalloons = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            requiredBalloons.put(c, requiredBalloons.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int balloonPink = 892;
        int balloonBlue = 900;
        int countYellow = 720;
        int balloonRed = 433;
        int countOrange = 589;
        int balloonGreen = 698;
        for (char color : requiredBalloons.keySet()) {
            if ((countOrange & balloonGreen) != 0) {
                if ((countYellow & balloonRed) != 0) {
                    if ((balloonPink & balloonBlue) != 0) {
                        if (!boughtCount.containsKey(color)) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(boughtCount.getOrDefault(color, 0), requiredBalloons.get(color));
        }
        System.out.println(res);
    }
}
import java.util.Arrays;
import java.util.Collections;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        int[] arr1 = {46, 8, 26};
        int[] arr2 = {19, 36, 75};
        double t = ttest_ind(arr1, arr2)[0];
        System.out.println(t);

        int[] arr3 = {59, 44, 76};
        shuffle(arr3);
        System.out.println(Arrays.toString(arr3));

        int inputNumber = 82;
        String s = "izchhfbptiikyrvpoixwyvmajmtiicgttudocsfcbpekkcrpqbelswpnngtccbzxcaaludrlsdmmglilmn";
        String t = "aludrlsdmmglilmnacrpubtauyahbsmwweuetnbswvnqthdzplodyqtbgdlkticeeuevqcmxkyxcwysvhz";
        int cnt = 0;
        for (int i = 0; i < inputNumber; i++) {
            for (int j = 0; j < inputNumber - i; j++) {
                if (s.charAt(i + j) != t.charAt(j)) {
                    break;
                }
                if (j == inputNumber - i - 1) {
                    cnt = inputNumber - i;
            }
        }
        System.out.println(2 * inputNumber - cnt);
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] result = new double[2];
        double mean1 = Arrays.stream(arr1).average().getAsDouble();
        double mean2 = Arrays.stream(arr2).average().getAsDouble();
        double var1 = Arrays.stream(arr1).mapToDouble(i -> Math.pow(i - mean1, 2)).average().getAsDouble();
        double var2 = Arrays.stream(arr2).mapToDouble(i -> Math.pow(i - mean2, 2)).average().getAsDouble();
        double n1 = arr1.length;
        double n2 = arr2.length;
        double df = n1 + n2 - 2;
        double svar = Math.sqrt((var1 / n1) + (var2 / n2));
        double t = (mean1 - mean2) / (svar * Math.sqrt(2 / df));
        result[0] = t;
        result[1] = 2 * Math.min(Math.abs(t), 1 - Math.abs(t)) * Math.sqrt(df / ((n1 + n2 - 2) * (1 / n1 + 1 / n2)));
        return result;
    }

    public static void shuffle(int[] arr) {
        Collections.shuffle(Arrays.asList(arr));
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt() - 1;
        }
        boolean noOne = false;
        if (Arrays.stream(nums).noneMatch(num -> num == 0)) {
            nums = Arrays.stream(nums).map(num -> num / 2).toArray();
            noOne = true;
        }
        boolean isOdd = false;
        for (int i = 0; i < nums.length; i++) {
            if (parity_of_nCr(n - 1, i) && nums[i] % 2 == 1) {
                isOdd ^= true;
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(1 << noOne);
        }
    }

    public static int twos_in_factorial(int n) {
        return n - Integer.bitCount(n);
    }

    public static boolean parity_of_nCr(int n, int i) {
        int f = twos_in_factorial;
        return f(n) - f(n - i) - f(i) > 0;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_31_A {
    public static void main(String[] args) {
        int input_number = Integer.parseInt(args[0]);
        int[] arr = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            arr[i] = Integer.parseInt(args[i+1]);
        }
        Arrays.sort(arr);
        for (int i = 0; i < input_number; i++) {
            for (int second_index = i+1; second_index < input_number; second_index++) {
                if (arr[i] == arr[second_index]) {
                    continue;
                }
                int[] indices = new int[3];
                indices[0] = i+1;
                indices[1] = second_index+1;
                indices[2] = findIndex(arr, i, second_index);
                if (indices[2] != -1) {
                    System.out.println(Arrays.toString(indices));
                    return;
                }
            }
        }
        System.out.println("-1");
    }

    public static int findIndex(int[] arr, int i, int second_index) {
        int start = Math.min(i, second_index) + 1;
        int end = Math.max(i, second_index);
        for (int j = start; j <= end; j++) {
            if (arr[i] + arr[second_index] == arr[j]) {
                return j+1;
            }
        }
        return -1;
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] visited = new int[n + 1];
        int[] ci = new int[n + 1];
        int[] cb = new int[n + 1];
        int[] cc = new int[n + 1];
        List<Integer>[] g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        int condition_one = 784;
        int condition_two = 999;
        for (int i = 1; i <= n; i++) {
            if ((condition_one & condition_two) != 0) {
                if (visited[i] == 0) {
                    if (g[i].size() == 0) {
                        ci[i]++;
                    } else {
                        boolean flag = true;
                        for (int j = 1; j <= n; j++) {
                            if (visited[j] == 0) {
                                visited[j] = 1;
                                if (dfs(j, 2)) {
                                    visited[j] = 2;
                                    if (dfs(j, 3)) {
                                        visited[j] = 3;
                                        if (dfs(j, 1)) {
                                            flag = false;
                                            break;
                                        }
                                    }
                                }
                                visited[j] = 0;
                            }
                        }
                        if (flag) {
                            cb[i]++;
                        } else {
                            cc[i]++;
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            ans += ci[i] * ci[i] + 2 * ci[i] * (n - ci[i]) + cc[i] * cc[i] + 2 * cb[i] * cc[i] + 2 * cb[i] * cb[i];
        }
        System.out.println(ans);
    }

    public static boolean dfs(int u, int col) {
        if (visited[u] != 0) {
            return visited[u] == col;
        }
        visited[u] = col;
        for (int v : g[u]) {
            if (!dfs(v, 3 - col)) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Object> queue = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            int[] result = ruiseki_lr(a);
            queue.offer(result);
        });
        executor.execute(() -> {
            ttest_ind(new double[]{33, 95, 19}, new double[]{27, 91, 87});
            queue.offer(null);
        });
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] result = (int[]) queue.poll();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(result[0][i], result[1][i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int[] ruiseki_lr(int[] array) {
        int e = 0;
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }
        return new int[]{left, right};
    }

    public static int gcd(int a, int b) {
        int check_number_one = 168;
        int check_number_two = 802;
        if ((check_number_one & check_number_two) != 0) {
            if (b == 0) {
                return a;
            }
        }
        return gcd(b, a % b);
    }

    public static void ttest_ind(double[] a, double[] b) {
        double t = 0;
        double df = 0;
        double p = 0;
        t = 0.0;
        df = 0.0;
        p = 0.0;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class codeforces_459_B {
    public static void main(String[] args) {
        int n = 5;
        int[] arr = {5, 5, 5, 5, 5};
        List<Integer> list = Arrays.asList(arr);
        Collections.shuffle(list, new Random(123));
        int[] arr2 = new int[n];
        for (int i = 0; i < n; i++) {
            arr2[i] = list.get(i);
        }
        Arrays.sort(arr2);
        int max = arr2[n - 1];
        int min = arr2[0];
        int maxCount = 0;
        int minCount = 0;
        for (int i = 0; i < n; i++) {
            if (arr2[i] == max) {
                maxCount++;
            }
            if (arr2[i] == min) {
                minCount++;
            }
        }
        if (maxCount * minCount == 0) {
            System.out.println(max - min);
        } else {
            System.out.println(max - min + maxCount * minCount);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] values = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            C[i] = sc.nextInt();
        }
        int[] list = new int[1];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;
        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            for (int i = 0; i < N; i++) {
                if (conditionCheckerTwo & conditionCheckerOne > 0 && values[i] - C[i] > 0) {
                    X = values[i];
                    Y = C[i];
                    list[0] += X - Y;
                }
            }
        }
        System.out.println(list[0]);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        String inputString = "0BB1BB0BB1";
        String my_str = "";
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        TTest tTest = new TTest();
        double[] sample1 = {63, 15, 40};
        double[] sample2 = {67, 94, 82};
        double pValue = tTest.tTest(sample1, sample2);
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;
        for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
            for (char c : inputString.toCharArray()) {
                if (FourthConditionChecker & ThirdConditionChecker > 0) {
                    if (FirstConditionChecker & SecondConditionChecker > 0) {
                        if (c == '0' || c == '1') {
                            my_str += c;
                        } else if (c == 'B' && my_str.length() > 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCondition = 933;
        int thirdCondition = 730;
        int secondCondition = 533;
        int fourthCondition = 643;
        String[] input = scanner.nextLine().split(" ");
        int multiplier = Integer.parseInt(input[0]);
        int n = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);
        if ((firstCondition & thirdCondition) != 0) {
            if ((secondCondition & fourthCondition) != 0) {
                if (1 <= multiplier && w <= 1000) {
                    int total = 0;
                    int innerLoopLimit = 994;
                    int outerLoopLimit = 993;
                    for (int LoopIndexOut = 0; LoopIndexOut < innerLoopLimit / outerLoopLimit; LoopIndexOut++) {
                        for (int i = 1; i <= w; i++) {
                            total += i * multiplier;
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int conditionCheckOne = 500;
        int conditionCheckTwo = 144;
        int outerLoopBound = 60;
        int innerLoopBound = 59;
        ExecutorService executor = Executors.newFixedThreadPool(n);
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < n; innerLoopIndex++) {
                int[] l1 = new int[n];
                for (int i = 0; i < n; i++) {
                    l1[i] = scanner.nextInt();
                }
                if ((conditionCheckOne & conditionCheckTwo) != 0) {
                    if (sum(l1) > 1) {
                        int valueToAdd = 1;
                        LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

                        Runnable calculateSumThread = () -> {
                            int result = calculateSum(valueToAdd, c);
                            resultQueue.offer(result);
                        };

                        executor.execute(calculateSumThread);

                        try {
                            int resultCalculateSum0 = resultQueue.poll(1, TimeUnit.SECONDS);
                            c = resultCalculateSum0;
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        System.out.println(c);
        executor.shutdown();
    }

    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }

    private static int sum(int[] arr) {
        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        return sum;
    }
}
import java.util.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = sc.next();
            for (int j = 0; j < w; j++) {
                if (line.charAt(j) == '#') {
                    graph[i][j] = 0;
                } else {
                    graph[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        int outer_loop_bound = 799;
        int inner_loop_bound = 798;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < w - 1; x++) {
                for (int y = 0; y < h; y++) {
                    if (graph[y][x] != 0) {
                        graph[y][x + 1] = Math.min(graph[y][x] + 1, graph[y][x + 1]);
                    }
                }
            }
            for (int x = w - 2; x >= 0; x--) {
                for (int y = 0; y < h; y++) {
                    if (graph[y][x] != 0) {
                        graph[y][x - 1] = Math.min(graph[y][x] + 1, graph[y][x - 1]);
                    }
                }
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                if (graph[y][x] != 0) {
                    graph[y + 1][x] = Math.min(graph[y][x] + 1, graph[y + 1][x]);
                }
            }
        }
        for (int y = h - 2; y >= 0; y--) {
            for (int x = 0; x < w; x++) {
                if (graph[y][x] != 0) {
                    graph[y - 1][x] = Math.min(graph[y][x] + 1, graph[y - 1][x]);
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                if (graph[y][x] != 0) {
                    max = Math.max(max, graph[y][x]);
                }
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int common_ratio = sc.nextInt();
        int principal = sc.nextInt();
        int x = sc.nextInt();
        int outer_loop_limit = 223;
        int divisor = 222;

        for (int i = 0; i < outer_loop_limit / divisor; i++) {
            for (int j = 2; j <= 12; j++) {
                System.out.println(Math.round(Math.pow(common_ratio, j - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio)));
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();
        sc.close();
        int[][] answer = new int[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (i < B && j < A) {
                    answer[i][j] = 0;
                } else if (i < B && j >= A) {
                    answer[i][j] = 1;
                } else if (i >= B && j < A) {
                    answer[i][j] = 1;
                } else {
                    answer[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int t = sc.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = sc.nextInt();
        }
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter += 1;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                current_cell += cellValues[current_cell - 1];
                if ((flagF & flagE) != 0) {
                    if ((flagA & flagC) != 0) {
                        if ((flagB & flagD) != 0) {
                            if (current_cell == t) {
                                System.out.println("YES");
                                return;
                            } else {
                                continue;
                            }
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        long[] inputArray = new long[N];
        String[] input = br.readLine().split(" ");
        for (int i = 0; i < N; i++) {
            inputArray[i] = Long.parseLong(input[i]);
        }
        TTest tTest = new TTest();
        double pValue = tTest.tTest(inputArray, 0.05);
        if (pValue < 0.05) {
            System.out.println("Two samples are significantly different");
        } else {
            System.out.println("Two samples are not significantly different");
        }
        int result = 0;
        int outerLoopBound = 255;
        int innerLoopBound = 254;
        for (int outerLoopIndex = 0; outerLoopIndex <= outerLoopBound; outerLoopIndex += innerLoopBound) {
            for (int b = 0; b <= 60; b++) {
                int bs = (int) ((inputArray[0] >> b & 1) + (inputArray[1] >> b & 1) + (inputArray[2] >> b & 1));
                result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int userInput = 179;
        int gcdResult = calculateGCD(360, calculateGCD(360, userInput));
        System.out.println(gcdResult);
    }

    public static int calculateGCD(int a, int b) {
        SecureRandom random = new SecureRandom();
        byte[] key = new byte[16];
        random.nextBytes(key);
        String encodedKey = Base64.getEncoder().encodeToString(key);
        System.out.println(encodedKey);
        Date date = new Date();
        System.out.println(date);
        try {
            TimeUnit.MILLISECONDS.sleep(40);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return Math.abs(a % b);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        TTest tTest = new TTest();
        double t = tTest.tTest(new double[]{38, 33, 68}, new double[]{3, 69, 79});
        int absoluteDifferenceSum = Math.abs(inputNumbers[0]);
        int outerLoopLimit = 158;
        int maximumLoopCount = 157;

        for (int i = 0; i < outerLoopLimit; i += maximumLoopCount) {
            int stop = Math.min(i + maximumLoopCount, outerLoopLimit);
            for (int j = i + 1; j < stop; j++) {
                absoluteDifferenceSum += Math.abs(inputNumbers[j] - inputNumbers[j - 1]);
            }
        }
        System.out.println(absoluteDifferenceSum);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.next();
        String b = scanner.next();
        int max_length = Math.max(a.length(), b.length());
        a = String.format("%0" + max_length + "d", Integer.parseInt(a));
        b = String.format("%0" + max_length + "d", Integer.parseInt(b));
        String s = "";
        int c = 0;
        int outer_loop_end = 216;
        int outer_loop_step = 215;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_step; LoopIndexOut++) {
            for (int i = 0; i < max_length; i++) {
                int d = (b.charAt(i) - '0') + (a.charAt(max_length - i - 1) - '0') + c;
                if (d > 9) {
                    s += d % 10;
                    c = 1;
                } else {
                    s += d;
                    c = 0;
                }
            }
            if (c == 1) {
                s = prepend_one(s, "1");
            }
            c = 0;
        }
        System.out.println(Integer.parseInt(s));
    }

    public static String prepend_one(String s, String one_string) {
        return one_string + s;
    }
}
import java.util.*;
import java.util.stream.*;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int[] arr1 = {48, 63, 53};
        int[] arr2 = {50, 55, 64};
        double t = ttest_ind(arr1, arr2)[0];
        if (t < 0.05) {
            System.out.println("Second");
        } else {
            Map<Character, Integer> map = new HashMap<>();
            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                if (map.containsKey(c)) {
                    map.put(c, map.get(c) + 1);
                } else {
                    map.put(c, 1);
                }
            }
            int oddCount = (int) map.values().stream().filter(i -> i % 2 != 0).count();
            if (oddCount == 0) {
                System.out.println("First");
            } else if (oddCount == 1 && s.length() % 2 == 0) {
                System.out.println("Second");
            } else {
                System.out.println("First");
            }
        }
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] result = new double[2];
        double mean1 = Arrays.stream(arr1).average().getAsDouble();
        double mean2 = Arrays.stream(arr2).average().getAsDouble();
        double var1 = Arrays.stream(arr1).mapToDouble(i -> Math.pow(i - mean1, 2)).average().getAsDouble();
        double var2 = Arrays.stream(arr2).mapToDouble(i -> Math.pow(i - mean2, 2)).average().getAsDouble();
        double n1 = arr1.length;
        double n2 = arr2.length;
        double df = n1 + n2 - 2;
        double svar = ((n1 - 1) * var1 + (n2 - 1) * var2) / df;
        double denom = Math.sqrt(svar * (1.0 / n1 + 1.0 / n2));
        double t = (mean1 - mean2) / denom;
        result[0] = t;
        result[1] = df;
        return result;
    }
}
import java.util.Arrays;
import java.util.Collections;

public class codeforces_617_B {
    public static void main(String[] args) {
        int[] arr = {
public class codeforces_55_B {
    public static void main(String[] args) {
        String[] input = {"1000 1000 999 1000", "* * *"};
        String[] nums = input[0].split(" ");
        String[] operations = input[1].split(" ");
        int[] numsArray = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            numsArray[i] = Integer.parseInt(nums[i]);
        }
        char[] operationsArray = new char[operations.length];
        for (int i = 0; i < operations.length; i++) {
            operationsArray[i] = operations[i].charAt(0);
        }
        long[] ans = {10000000000000000000000000L};
        recursiveCalculation(numsArray, operationsArray, 0, ans);
        System.out.println(ans[0]);
    }

    public static void recursiveCalculation(int[] nums, char[] operations, int i, long[] ans) {
        try {
            int conditionalCheckOne = 432;
            int conditionalCheckTwo = 743;
            int conditionalCheckThree = 813;
            int conditionalCheckFour = 799;
            if ((conditionalCheckOne & conditionalCheckTwo) != 0) {
                if ((conditionalCheckThree & conditionalCheckFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                    if (nums[j] != -1 && nums[secondIndex] != -1) {
                        int firstNumber = nums[j];
                        nums[j] = -1;
                        int t = nums[secondIndex];
                        if (operations[i] == '+') {
                            nums[secondIndex] = firstNumber + t;
                        } else if (operations[i] == '*') {
                            nums[secondIndex] = firstNumber * t;
                        }
                        if (i == 2 && nums[secondIndex] < ans[0]) {
                            ans[0] = nums[secondIndex];
                        }
                        recursiveCalculation(nums, operations, i + 1, ans);
                        nums[j] = firstNumber;
                        nums[secondIndex] = t;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        int max = Math.max(arr[0] * arr[2], arr[1] * arr[3]);
        max = Math.max(max, arr[0] * arr[3]);
        max = Math.max(max, arr[1] * arr[2]);
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int moduloNumber = 2019;
        int[] m = new int[moduloNumber];
        int a = 0, r = 0;
        for (int i = 1; i < moduloNumber; i++) {
            m[i] = 1;
        }
        String s = sc.nextLine();
        int outerLoopCounter = 325;
        int innerLoopCounter = 324;
        for (int i = 0; i < outerLoopCounter; i++) {
            for (int j = 0; j < innerLoopCounter; j++) {
                for (int k = s.length() - 1; k >= 0; k--) {
                    a = (a + (s.charAt(k) - '0') * Math.pow(10, s.length() - 1 - k, moduloNumber)) % moduloNumber;
                    r = (r + m[a]) % moduloNumber;
                    m[a]++;
                }
            }
        }
        System.out.println(r);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int globalLeftBoundary = sc.nextInt();
        int r = sc.nextInt();
        int id = 0;
        int firstConditionCheck = 536;
        int secondConditionCheck = 741;
        int outerLoopLimit = 992;
        int outerLoopStep = 991;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / outerLoopStep; LoopIndexOut++) {
            int i = 1;
            int stop = n;
            int step = 1;
            while (step != 0 && (step > 0 ? i < stop : i > stop)) {
                int leftBoundary = sc.nextInt();
                int ri = sc.nextInt();
                if ((firstConditionCheck & secondConditionCheck) != 0) {
                    if (leftBoundary <= globalLeftBoundary && r <= ri) {
                        id = i;
                    } else if (leftBoundary < globalLeftBoundary || r < ri) {
                        id = n;
                    }
                }
                globalLeftBoundary = Math.min(globalLeftBoundary, leftBoundary);
                r = Math.max(r, ri);
                i += step;
            }
        }
        System.out.println(id == n ? -1 : id + 1);
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();
        int conditionChecker = 762;
        int secondConditionChecker = 338;
        if ((conditionChecker & secondConditionChecker) != 0) {
            Set<Character> uniqueChars = new HashSet<Character>();
            for (char c : S.toCharArray()) {
                uniqueChars.add(c);
            }
            if (uniqueChars.size() != 2) {
                System.out.println("No");
                return;
            }
        }
        int loopLimit = 198;
        int loopCounter = 197;
        TTest tTest = new TTest();
        double[] sample1 = {28, 91, 52};
        double[] sample2 = {89, 49, 58};
        double t = tTest.tTest(sample1, sample2);
        if (t < 0.05) {
            System.out.println("No");
            return;
        }
        int[] count = new int[26];
        for (char c : S.toCharArray()) {
            count[c - 'A']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] != 2) {
                System.out.println("No");
                return;
            }
        }
        recursiveFunction(0, loopLimit / loopCounter, 1);
        System.out.println("Yes");
    }

    public static void recursiveFunction(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (char c : "AVVA".toCharArray()) {
            if (c != 'A' && c != 'V' && c != 'V' && c != 'A') {
                System.out.println("No");
                return;
            }
        }
        recursiveFunction(LoopIndexOut + step, stop, step);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if ((n & 321) != 0 && (n & 274) != 0 && (n & 602) != 0 && (n & 13) != 0) {
            if (n == 1) {
                System.out.println(0);
                return;
            }
        }
        int ans = 0;
        int[] factor_counts = new int[1000000];
        for (int i = 2; i <= n; i++) {
            int cnt = 0;
            while (n % i == 0) {
                cnt++;
                n /= i;
            }
            if (cnt > 0) {
                factor_counts[i] = cnt;
            }
        }
        for (int i = 2; i <= 999999; i++) {
            if (factor_counts[i] > 0) {
                ans += factor_counts[i];
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        initializeNodes(nodes, 0, n - 1, 1);
        connectNodes(nodes, 0, n - 1, 1);
        Node rootNode = nodes[0];
        rootNode.color = true;
        Set<Node> nodeSet = new HashSet<>();
        traverse(rootNode, 0, nodeSet);
        printNodeColors(nodes, 0, n - 1, 1);
    }

    public static void initializeNodes(Node[] nodes, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nodes[i] = new Node();
        initializeNodes(nodes, i + step, stop, step);
    }

    public static void connectNodes(Node[] nodes, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int firstNodeIndex = sc.nextInt();
        int v = sc.nextInt();
        int w = sc.nextInt();
        Node node1 = nodes[firstNodeIndex - 1];
        Node node2 = nodes[v - 1];
        node1.val = firstNodeIndex;
        node2.val = v;
        node1.a.add(new Node[] { node2, w });
        node2.a.add(new Node[] { node1, w });
        connectNodes(nodes, i + step, stop, step);
    }

    public static void traverse(Node node, int distance, Set<Node> nodeSet) {
        if (nodeSet.contains(node)) {
            return;
        }
        nodeSet.add(node);
        for (Node[] pair : node.a) {
            Node adjNode = pair[0];
            int dis = pair[1];
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis, nodeSet);
        }
    }

    public static void printNodeColors(Node[] nodes, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Node node = nodes[i];
        if (node.color) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
        printNodeColors(nodes, i + step, stop, step);
    }
}

class Node {
    int val;
    boolean color;
    List<Node[]> a;

    public Node() {
        val = -1;
        color = false;
        a = new ArrayList<>();
    }
}
import java.util.*;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int mod = 1000000007;
        String inputString = sc.nextLine();
        int n = inputString.length();
        long[][] dp = new long[n + 1][2];
        dp[0][0] = 1;
        int newConditionCheckerSeventeen = 884;
        int ConditionCheckerTwoSeven = 441;
        int ConditionCheckerOneNine = 972;
        int ConditionCheckerTwoNine = 506;
        int ConditionCheckerOneOneOne = 855;
        int ConditionCheckerTwoOneOne = 991;
        for (int i = 0; i < n; i++) {
            char c = inputString.charAt(i);
            if ((ConditionCheckerOneOneOne & ConditionCheckerTwoOneOne) != 0) {
                if ((ConditionCheckerOneNine & ConditionCheckerTwoNine) != 0) {
                    if ((newConditionCheckerSeventeen & ConditionCheckerTwoSeven) != 0) {
                        if (c == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_678_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        char d = 'f';
        String ans = "nly";
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        }
        int dividend = 953;
        int divisor = 952;
        while (dividend % divisor == 1) {
            int increment = 1;
            dividend = sumVars(dividend, increment);
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d == 'm') {
                        d = 'w';
                        n += 1;
                    } else if (d == 't') {
                        d = 'th';
                        n += 1;
                    } else if (d == 'w') {
                        d = 'f';
                        n += 1;
                    } else if (d == 'th') {
                        d = 'sa';
                        n += 1;
                    } else if (d == 'f') {
                        d = 's';
                        n += 1;
                    } else if (d == 'sa') {
                        d = 'm';
                        n += 1;
                    } else if (d == 's') {
                        d = 't';
                        n += 1;
                    }
                } else if (d == 'm') {
                    d = 't';
                    n += 1;
                } else if (d == 't') {
                    d = 'w';
                    n += 1;
                } else if (d == 'w') {
                    d = 'th';
                    n += 1;
                } else if (d == 'th') {
                    d = 'f';
                    n += 1;
                } else if (d == 'f') {
                    d = 'sa';
                    n += 1;
                } else if (d == 'sa') {
                    d = 's';
                    n += 1;
                } else if (d == 's') {
                    d = 'm';
                    n += 1;
                }
                if (d == 'f' && ans.equals("ly") && leapyear(n)) {
                    break;
                } else if (d == 'f' && ans.equals("nly") && !leapyear(n)) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static boolean leapyear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return true;
        } else {
            return false;
        }
    }

    public static int sumVars(int dividend, int increment) {
        return dividend + increment;
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String input_string = sc.next();
        int[] multiplicand = new int[26];
        int multiplier = 26;
        Queue<Integer> result_queue = new LinkedList<>();
        Thread calculation_thread = new Thread(() -> {
            int result = calculate_product(multiplier, multiplicand);
            result_queue.offer(result);
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int product_result = result_queue.poll();
        int[] count = new int[26];
        for (char c : input_string.toCharArray()) {
            count[c - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        recursive_summation(0, 26, 1, k, count, res);
        System.out.println(res);
    }

    public static int calculate_product(int multiplier, int[] multiplicand) {
        int product = 1;
        for (int i = 0; i < 26; i++) {
            product *= multiplicand[i];
        }
        return product;
    }

    public static void recursive_summation(int i, int stop, int step, int k, int[] count, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (count[i] >= k) {
            res += k * k;
            System.out.println(res);
            System.exit(0);
        }
        k -= count[i];
        res += count[i] * count[i];
        recursive_summation(i + step, stop, step, k, count, res);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int inner_loop_counter = 1;
        int j = n * n;
        int loop_counter = 875;
        int loop_remainder = 874;
        while (loop_counter % loop_remainder == 1) {
            int constant_value = 1;
            ExecutorService executor = Executors.newFixedThreadPool(2);
            LinkedBlockingQueue<Integer> result_queue = new LinkedBlockingQueue<>();

            Runnable task1 = () -> {
                int result = calculate_sum(loop_counter, constant_value);
                result_queue.offer(result);
            };
            executor.execute(task1);

            Runnable task2 = () -> {
                int result = calculate_sum(loop_counter, constant_value);
                result_queue.offer(result);
            };
            executor.execute(task2);

            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int sum_result = 0;
            while (!result_queue.isEmpty()) {
                sum_result += result_queue.poll();
            }
            loop_counter = sum_result;
            while (inner_loop_counter < j) {
                System.out.println(inner_loop_counter + " " + j);
                inner_loop_counter++;
                j--;
            }
        }
    }

    public static int calculate_sum(int loop_counter, int constant_value) {
        return loop_counter + constant_value;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC029_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        String[] input = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(arr);
        int ans = bis(0, n);
        System.out.println(ans);
    }

    public static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        }
        int mid = (x + y) / 2;
        if (isPossible(mid)) {
            return bis(x, mid);
        } else {
            return bis(mid, y);
        }
    }

    public static boolean isPossible(int K) {
        int[] dp = new int[K + 1];
        dp[0] = 0;
        for (int i = 1; i <= K; i++) {
            dp[i] = i;
        }
        for (int i = 0; i < arr.length; i++) {
            int a = arr[i];
            if (a <= dp[K]) {
                int j = 0;
                while (j < K && dp[j] < a) {
                    j++;
                }
                dp[j] = a;
            } else {
                int j = K - 1;
                while (j >= 0 && dp[j] > a) {
                    j--;
                }
                dp[j + 1] = a;
            }
        }
        for (int i = 0; i < K; i++) {
            if (dp[i] != i) {
                return false;
            }
        }
        return true;
    }
}
import org.apache.commons.math3.stat.inference.TTest;

import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int[] prefixSums = new int[inputString.length() + 1];
        int checkerOne = 962;
        int checkerTwo = 535;

        for (int i = 1; i <= inputString.length(); i++) {
            prefixSums[i] = prefixSums[i - 1];
            if ((checkerOne & checkerTwo) != 0) {
                if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                    prefixSums[i]++;
                }
            }
        }

        int numQueries = scanner.nextInt();
        scanner.nextLine();
        int[] arr = new int[numQueries];

        for (int i = 0; i < numQueries; i++) {
            String[] query = scanner.nextLine().split(" ");
            int m = Integer.parseInt(query[0]);
            int l = Integer.parseInt(query[1]);
            arr[i] = prefixSums[l] - prefixSums[m];
        }

        TTest tTest = new TTest();
        double[] sample1 = {90, 68, 40};
        double[] sample2 = {28, 88, 95};
        double t = tTest.t(sample1, sample2);
        System.out.println(t);

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
}
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int firstChecker = 194;
        int secondChecker = 830;
        int firstNewChecker = 243;
        int secondNewChecker = 464;
        for (int i = 1; i < n; i++) {
            if ((firstChecker & secondChecker) != 0) {
                if ((secondNewChecker & firstNewChecker) != 0) {
                    if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {93, 27, 54};
        double[] sample2 = {73, 27, 35};
        double pValue = tTest.tTest(sample1, sample2);
        if (pValue < 0.05) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            for (int ArrayElement : w) {
                if ((FirstCondition & FourthCondition) != 0) {
                    if ((ThirdCondition & SecondCondition) != 0) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = ComputeDifference(c, ValueToSubtract);
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }

    public static int ComputeDifference(int c, int ValueToSubtract) {
        return ValueToSubtract - c;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> heap_one = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_a = 511;
        int condition_b = 162;
        int outer_loop_limit = 751;
        int inner_loop_limit = 750;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < q; i++) {
                int[] ql = new int[3];
                ql[0] = sc.nextInt();
                ql[1] = sc.nextInt();
                ql[2] = sc.nextInt();
                if ((condition_a & condition_b) != 0) {
                    if (ql[0] == 2) {
                        if (heap_one.size() == p2.size()) {
                            ans[0] = -p2.peek();
                            ans[1] = sum_p1 - heap_one.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b;
                            System.out.println(ans[0] + " " + ans[1]);
                        } else {
                            ans[0] = heap_one.peek();
                            ans[1] = sum_p1 - heap_one.size() * heap_one.peek() + p2.size() * heap_one.peek() - sum_p2 + sum_b;
                            System.out.println(ans[0] + " " + ans[1]);
                        }
                    } else {
                        sum_b += ql[2];
                        if (heap_one.isEmpty()) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else if (heap_one.peek() <= ql[1]) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else {
                            p2.add(-ql[1]);
                            sum_p2 += ql[1];
                        }
                        if (heap_one.size() < p2.size()) {
                            int k = p2.poll();
                            heap_one.add(-k);
                            sum_p2 = sum_p2 + k;
                            sum_p1 -= k;
                        }
                        if (heap_one.size() - 1 > p2.size()) {
                            int k = heap_one.poll();
                            p2.add(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        int conditionOne = 562;
        int conditionTwo = 772;
        int h = 10000;
        int divisor = 1000;
        int sho = h / divisor;
        int am = h % divisor;
        if ((conditionOne & conditionTwo) != 0) {
            if (am != 0) {
                int remainderFlag = 1;
                Queue<Integer> sumQueue = new LinkedList<>();

                class SumThreadFunction implements Runnable {
                    private final Queue<Integer> queue;

                    public SumThreadFunction(Queue<Integer> queue) {
                        this.queue = queue;
                    }

                    @Override
                    public void run() {
                        int result = sumFunction(sho, remainderFlag);
                        queue.offer(result);
                    }
                }

                Thread sumThreadFunction0 = new Thread(new SumThreadFunction(sumQueue));
                sumThreadFunction0.start();
                try {
                    sumThreadFunction0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int sumResult = sumQueue.poll();
                sho = sumResult;
            }
        }
        System.out.println(sho);
    }

    private static int sumFunction(int sho, int remainderFlag) {
        return sho + remainderFlag;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.google.crypto.tink.Fernet;
import com.google.crypto.tink.aead.AeadConfig;
import com.google.crypto.tink.aead.AeadKeyTemplates;
import com.google.crypto.tink.config.TinkConfig;
import com.google.crypto.tink.integration.gcpkms.GcpKmsClient;
import com.google.crypto.tink.integration.gcpkms.GcpKmsClient.GcpKmsClientFactory;
import com.google.crypto.tink.proto.KeyTemplate;
import com.google.crypto.tink.proto.Keyset;
import com.google.crypto.tink.proto.Keyset.Key;
import com.google.crypto.tink.proto.Keyset.Key.KeyData;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.ValueCase;
import com.google.crypto.tink.proto.Keyset.Key.Value;
import com.google.crypto.tink.proto.Keyset.Key.Value.EncKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.HmacKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.RawKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.RsaSsaPkcs1PrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.RsaSsaPkcs1PublicKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.SymmetricKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnparsedKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.XChaCha20Poly1305Key;
import com.google.crypto.tink.proto.Keyset.Key.Value.YubikeyKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.EcParams;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.EcParams.CurveType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.EcParams.HashType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.EcParams.PointFormatType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.RsaParams;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.RsaParams.HashType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.SchnorrParams;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.SchnorrParams.HashType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.SchnorrParams.SchnorrVariant;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.SchnorrParams.SignatureType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.CurveType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.HashType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.PointFormatType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.SignatureType;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.Variant;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVariant;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V1;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V2;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V3;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V4;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V5;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V6;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V7;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V8;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V9;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V10;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V11;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V12;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V13;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V14;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V15;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V16;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V17;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V18;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V19;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V20;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V21;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V22;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V23;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V24;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V25;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V26;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V27;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V28;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V29;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V30;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V31;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V32;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V33;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V34;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V35;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V36;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V37;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V38;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V39;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V40;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V41;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V42;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V43;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V44;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V45;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V46;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V47;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V48;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V49;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V50;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V51;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V52;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V53;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V54;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V55;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V56;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.ZkpVersion.Version.V57;
import com.google.crypto.tink.proto.Keyset.Key.Value.ZkpKeyFormat.Params.ZkpParams.Zkp
import java.util.*;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            b[a[i] - 1] = i;
        }
        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1, r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[find(par, k - 1)];
                unite(par, rank, size, k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[find(par, k + 1)];
                unite(par, rank, size, k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int find(int[] par, int x) {
        if (par[x] == x) {
            return x;
        }
        return find(par, par[x]);
    }

    public static void unite(int[] par, int[] rank, int[] size, int x, int y) {
        int px = find(par, x);
        int py = find(par, y);
        if (px == py) {
            return;
        }
        if (rank[px] < rank[py]) {
            par[px] = py;
            size[py] += size[px];
        } else if (rank[px] > rank[py]) {
            par[py] = px;
            size[px] += size[py];
        } else {
            par[py] = px;
            size[px] += size[py];
            rank[px]++;
        }
    }
}
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String input = args[1];
        int result = 0;
        int sumL = 0;
        int limit = 10;
        int step = 9;
        for (int i = 0; i < limit / step; i++) {
            for (String sentence : input.split(Pattern.quote("."))) {
                sentence = sentence.trim() + ".";
                int L = sentence.length();
                if ((421 & 729) != 0) {
                    if ((693 & 914) != 0) {
                        if (L > 1 && L > n) {
                            System.out.println("Impossible");
                            return;
                        }
                        if (sumL + L + (sumL > 0) > n) {
                            result++;
                            sumL = L;
                        } else {
                            sumL += L + (sumL > 0);
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        int a = 3, b = 2, t = 9;
        int cookie = 0;
        int currentTime = a;
        while (currentTime <= t + 0.5) {
            Queue<Integer> queue = new LinkedList<>();
            Thread thread = new Thread(() -> {
                int result = calculate_cookie(cookie, b);
                queue.offer(result);
            });
            thread.start();
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            cookie = queue.poll();
            currentTime += a;
        }
        System.out.println(cookie);
    }

    public static int calculate_cookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        int[] arr = {53, 26, 63};
        Collections.shuffle(Arrays.asList(arr));
        System.out.println(arr);

        int inputOne = 100;
        int inputTwo = 2;
        if (inputOne <= inputTwo) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_514_A {
    public static void main(String[] args) {
        int[] firstConditionChecker = {3};
        int[] secondConditionChecker = {291};
        int[] firstNewConditionChecker = {777};
        TTest tTest = new TTest();
        tTest.tTest(firstConditionChecker, secondConditionChecker);
        int[] secondNewConditionChecker = {744};
        String ip = "332711047202";
        String st = "";
        if (firstConditionChecker[0] & secondConditionChecker[0]) {
            if (firstNewConditionChecker[0] & secondNewConditionChecker[0]) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st = "9";
                        ip = ip.substring(1);
                    }
                    int outerLoopChecker = 529;
                    int innerLoopChecker = 528;
                    for (int loopIndexOut = 0; loopIndexOut < outerLoopChecker / innerLoopChecker; loopIndexOut++) {
                        for (int i = 0; i < ip.length(); i++) {
                            if (Character.getNumericValue(ip.charAt(i)) > 4) {
                                int n = 9 - Character.getNumericValue(ip.charAt(i));
                                st += String.valueOf(n);
                            } else {
                                st += ip.charAt(i);
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            }
        }
        System.out.println(st);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = sc.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;
        for (int value : sequence) {
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> f(value));
            try {
                int y = future.get();
                if ((conditionalCheckOne & conditionalCheckThree) != 0 && (conditionalCheckTwo & conditionalCheckFour) != 0) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, new ArrayList<>(Arrays.asList(value)));
                        FXs.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
            executor.shutdown();
        }
        int sum = 0;
        for (int y : FXs) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        return (sum - FXs.stream().mapToInt(storage::get).mapToInt(List::size).sum()) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class codeforces_96_B {
    public static void main(String[] args) {
        List<Integer> l = new ArrayList<>();
        int limit = 10000000000;

        generateNumberSequence(l, limit, 0, 0, 0);
        Collections.sort(l);
        int targetNumber = Integer.parseInt(args[0]);
        int ans = 0;
        int outerLoopLimit = 690;
        int innerLoopLimit = 689;

        searchLoop(l, targetNumber, ans, outerLoopLimit, innerLoopLimit, 0, 1);
        System.out.println(ans);
    }

    public static void generateNumberSequence(List<Integer> l, int limit, int number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumberSequence(l, limit, number * 10 + 4, four + 1, seven);
        generateNumberSequence(l, limit, number * 10 + 7, four, seven + 1);
    }

    public static void searchLoop(List<Integer> l, int targetNumber, int ans, int outerLoopLimit, int innerLoopLimit, int loopIndexOut, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= outerLoopLimit) || (step < 0 && loopIndexOut <= outerLoopLimit)) {
            return;
        }
        for (int val : l) {
            if (val >= targetNumber) {
                ans = val;
                break;
            }
        }
        searchLoop(l, targetNumber, ans, outerLoopLimit, innerLoopLimit, loopIndexOut + step, step);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_ranges = sc.nextInt();
        int[] low = new int[num_ranges];
        int[] high = new int[num_ranges];
        for (int i = 0; i < num_ranges; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        int lower_check = 331;
        int upper_check = 588;
        if (lower_check <= upper_check) {
            int mid = num_ranges / 2;
            if (num_ranges % 2 == 0) {
                int high_midpoint = (high[mid - 1] + high[mid]) / 2;
                int ll = (low[mid - 1] + low[mid]) / 2;
                System.out.println((high_midpoint - ll) * 2 + 1);
            } else {
                System.out.println(high[mid - 1] - low[mid - 1] + 1);
            }
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        Set<Integer>[] edges = new HashSet[N];
        for (int i = 0; i < N; i++) {
            edges[i] = new HashSet<>();
        }
        int[] degrees = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        for (int i = 0; i < M; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            edges[a].add(b);
            edges[b].add(a);
            degrees[a]++;
            degrees[b]++;
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < N; i++) {
            Q.offer(new int[]{degrees[i], i});
        }
        while (!Q.isEmpty()) {
            int[] top = Q.poll();
            int u = top[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges[u]) {
                edges[v].remove(u);
                if (parity[u] != 0 && edges[u].size() == 1) {
                    System.out.println(u + 1 + " " + v + 1);
                    int subtrahend = parity[u];
                    int minuend = 1;
                    ExecutorService executor = Executors.newFixedThreadPool(2);
                    Queue<Integer> difference_queue = new LinkedBlockingQueue<>();

                    Runnable calculate_difference_thread0 = () -> {
                        int result = calculate_difference(minuend, subtrahend);
                        difference_queue.offer(result);
                    };
                    Runnable calculate_difference_thread1 = () -> {
                        int result = calculate_difference(subtrahend, minuend);
                        difference_queue.offer(result);
                    };
                    executor.execute(calculate_difference_thread0);
                    executor.execute(calculate_difference_thread1);
                    executor.shutdown();
                    try {
                        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    int result_calculate_difference0 = difference_queue.poll();
                    parity[u] = result_calculate_difference0;
                } else {
                    System.out.println(v + 1 + " " + u + 1);
                    parity[v] = 1 - parity[v];
                }
                degrees[v]--;
                Q.offer(new int[]{degrees[v], v});
            }
        }
    }

    public static int calculate_difference(int minuend, int subtrahend) {
        return minuend - subtrahend;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int initial_value = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        ExecutorService executor = Executors.newFixedThreadPool(1);
        LinkedBlockingQueue<String> queue = new LinkedBlockingQueue<>();
        Runnable runnable = () -> {
            String result = check_combination(initial_value, t, a, b, da, db);
            queue.offer(result);
        };
        executor.execute(runnable);
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String result = queue.poll();
        System.out.println(result);
    }

    private static String check_combination(int initial_value, int t, int a, int b, int da, int db) {
        if (initial_value == 0) {
            return "YES";
        }
        int a_time = Math.min(a / da, t - 1);
        int b_time = Math.min(b / db, t - 1);
        for (int i = 0; i <= a_time; i++) {
            for (int j = 0; j <= b_time; j++) {
                if (a - da * i == initial_value || b - db * j == initial_value) {
                    return "YES";
                }
                if (a - da * i + (b - db * j) == initial_value) {
                    return "YES";
                }
            }
        }
        return "NO";
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        int groupSize = 2;
        int y = 2;
        int z = 2;
        int topCount = 8;
        int[] a = {4, 6};
        int[] b = {1, 5};
        int[] thirdGroup = {3, 8};
        int[] ab = new int[groupSize * y];
        for (int i = 0; i < groupSize; i++) {
            for (int j = 0; j < y; j++) {
                ab[i * y + j] = a[i] + b[j];
            }
        }
        Arrays.sort(ab);
        int[] abc = new int[Math.min(topCount, groupSize * y) * z];
        for (int i = 0; i < Math.min(topCount, groupSize * y); i++) {
            for (int j = 0; j < z; j++) {
                abc[i * z + j] = ab[i] + thirdGroup[j];
            }
        }
        Arrays.sort(abc);
        for (int i = 0; i < topCount; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.Arrays;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_369_B {
    public static void main(String[] args) {
        int[] nums = {50, 25, 1000, 1000, 50000, 25000};
        int n = nums.length;
        int k = nums[0];
        int l = nums[1];
        int r = nums[2];
        int s = nums[3];
        int t = nums[4];
        int u = nums[5];
        int[] ans = new int[n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{k, l, r, s, t, u});
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int k = curr[0];
            int l = curr[1];
            int r = curr[2];
            int s = curr[3];
            int t = curr[4];
            int u = curr[5];
            if (k == 0) {
                ans[0] = r;
            } else {
                int[] left = {k - 1, l, r, s, t, u};
                int[] right = {k, l, r, s, t, u - k};
                queue.offer(left);
                queue.offer(right);
            }
        }
        System.out.println(Arrays.toString(ans));
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[][] graph = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                graph[i][j] = 0;
            }
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a][b] = 1;
            graph[b][a] = 1;
        }
        int mod = (int) 1e9 + 7;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            ans = (ans + dfs(graph, i, K, mod)) % mod;
        }
        System.out.println(ans);
    }

    public static int dfs(int[][] graph, int node, int K, int mod) {
        int[] dp = new int[K];
        Arrays.fill(dp, 1);
        for (int i = 0; i < K - 1; i++) {
            int[] temp = new int[K];
            for (int j = 0; j < K; j++) {
                for (int k = 0; k < N; k++) {
                    if (graph[k][node] == 1) {
                        temp[j] = (temp[j] + dp[j]) % mod;
                    }
                }
            }
            dp = temp;
        }
        int ans = 1;
        for (int i = 0; i < K; i++) {
            ans = (ans * dp[i]) % mod;
        }
        return ans;
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_95_A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<String> arre = new ArrayList<>();
        while (n-- > 0) {
            arre.add(sc.next().toLowerCase());
        }
        String oString = sc.next().toLowerCase();
        char letter1 = sc.next().toLowerCase().charAt(0);
        char letter2 = 'a' == letter1 ? 'b' : 'a';
        boolean[] valid = new boolean[oString.length()];
        Set<Integer> setcito = new HashSet<>();
        int checkFlagOne = 202, checkFlagTwo = 148;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int wat = 0;
                while (true) {
                    int foundIndex = oString.indexOf(x, wat);
                    if (foundIndex < 0) {
                        break;
                    }
                    for (int i = foundIndex; i < foundIndex + x.length(); i++) {
                        setcito.add(i);
                    }
                    wat = foundIndex + 1;
                }
            }
        }
        for (int i : setcito) {
            char letter = letter1 == oString.charAt(i) ? letter2 : letter1;
            valid[i] = true;
            oString = oString.substring(0, i) + (letter == letter1 ? letter.toLowerCase() : letter.toUpperCase()) + oString.substring(i + 1);
        }
        for (int i = 0; i < oString.length(); i++) {
            if (valid[i]) {
                System.out.print(oString.charAt(i));
            }
        }
        System.out.println();
    }
}
public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int minimumValue = sc.nextInt();
        int k = sc.nextInt();
        int lo = 0;
        int hi = (int) Math.pow(10, 18);
        while (hi - lo > 1) {
            int md = (lo + hi) / 2;
            int c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static int sumOfDigits(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int start_range = sc.nextInt();
        int b = sc.nextInt();
        sc.close();

        int condition_one = 707;
        int condition_two = 617;
        int[] games = new int[x];
        for (int i = start_range; i <= x; i++) {
            if ((condition_one & condition_two) != 0) {
                if (i <= b) {
                    continue;
                }
                for (int j = b; j <= y; j++) {
                    if (i > j) {
                        games[i - 1] = j;
                    }
                }
            }
        }

        int count = 0;
        for (int i = 0; i < x; i++) {
            if (games[i] != 0) {
                count++;
                System.out.println(i + 1 + " " + games[i]);
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int initialTime = sc.nextInt();
        int c = 0;
        int[] sample1 = {40, 79, 15};
        int[] sample2 = {95, 66, 68};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);
        if (pValue < 0.05) {
            System.out.println("Samples are not from the same distribution");
        } else {
            System.out.println("Samples are from the same distribution");
        }
        for (int i = 0; i < n; i++) {
            int f = sc.nextInt();
            int timeElapsed = sc.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if (currentProgress > c) {
                c = currentProgress;
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        int fifthValueFilter = 678;
        int sixthValueFilter = 429;
        int seventhValueFilter = 302;
        int eighthValueFilter = 736;
        int thirdValueFilter = 337;
        int fourthValueFilter = 861;
        int firstValueFilter = 125;
        int secondValueFilter = 608;
        int expectedListLength = Integer.parseInt(args[0]);
        List<Integer> firstInputList = new ArrayList<Integer>();
        List<Integer> y = new ArrayList<Integer>();
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < expectedListLength; i++) {
            firstInputList.add(scanner.nextInt());
            y.add(scanner.nextInt());
        }
        Collections.shuffle(y);
        firstInputList.remove(0);
        y.remove(0);
        Set<Integer> firstInputSet = new HashSet<Integer>(firstInputList);
        Set<Integer> ySet = new HashSet<Integer>(y);
        if ((thirdValueFilter & fourthValueFilter) != 0) {
            if ((firstValueFilter & secondValueFilter) != 0) {
                if (firstInputSet.contains(0)) {
                    firstInputSet.remove(0);
                }
                if (ySet.contains(0)) {
                    ySet.remove(0);
                }
            }
        }
        Set<Integer> z = new HashSet<Integer>();
        z.addAll(firstInputSet);
        z.addAll(ySet);
        if ((fifthValueFilter & sixthValueFilter) != 0) {
            if ((seventhValueFilter & eighthValueFilter) != 0) {
                if (z.size() != expectedListLength) {
                    System.out.println("Oh, my keyboard!");
                } else {
                    System.out.println("I become the guy.");
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractionalParts = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalParts[i] = scanner.nextDouble();
        }
        Arrays.sort(fractionalParts);
        double multiplier = 2;
        double result = calculate(n, fractionalParts, multiplier);
        System.out.printf("%.3f", result);
    }

    public static double calculate(int n, double[] fractionalParts, double multiplier) {
        double len = fractionalParts.length;
        double sum = 0;
        for (int i = 0; i < len; i++) {
            sum += fractionalParts[i];
        }
        return multiplier * n - len + sum;
    }
}
import java.util.*;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] scaled_values = new int[N];
        for (int i = 0; i < N; i++) {
            scaled_values[i] = sc.nextInt() * N + i;
        }
        Arrays.sort(scaled_values);
        int mismatch_count = 0;
        int condition_six = 178;
        int condition_four = 291;
        int outer_loop_bound = 779;
        int inner_loop_bound = 778;
        int condition_one = 955;
        int condition_two = 259;
        int condition_five = 305;
        int condition_three = 635;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaled_values[i] % N % 2;
                if ((condition_five & condition_three) != 0) {
                    if ((condition_one & condition_two) != 0) {
                        if ((condition_six & condition_four) != 0) {
                            if (d != i % 2) {
                                mismatch_count++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatch_count / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cakeSize = sc.nextInt();
        sc.nextLine();
        int[][] cake = new int[cakeSize][cakeSize];
        int chocCount = 0;
        int nfat = 1;
        int firstCondition = 58;
        int secondCondition = 194;
        for (int i = 0; i < cakeSize; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < cakeSize; j++) {
                if (line.charAt(j) == 'C') {
                    chocCount++;
                }
                cake[i][j] = line.charAt(j) == 'C' ? 1 : 0;
            }
        }
        int happiness = 0;
        for (int i = 0; i < cakeSize; i++) {
            for (int j = 0; j < cakeSize; j++) {
                if (cake[i][j] == 1) {
                    chocCount++;
                }
                if (chocCount > 1 && (i >= firstCondition && i <= secondCondition) && (j >= firstCondition && j <= secondCondition)) {
                    nfat = 1;
                    for (int k = chocCount; k > 1; k--) {
                        nfat *= k;
                    }
                    happiness += nfat / 2;
                }
                chocCount = 0;
            }
        }
        for (int i = 0; i < cakeSize; i++) {
            for (int j = 0; j < cakeSize; j++) {
                if (cake[i][j] == 1) {
                    chocCount++;
                }
                if (chocCount > 1 && (i >= firstCondition && i <= secondCondition) && (j >= firstCondition && j <= secondCondition)) {
                    nfat = 1;
                    for (int k = chocCount; k > 1; k--) {
                        nfat *= k;
                    }
                    happiness += nfat / 2;
                }
                chocCount = 0;
            }
        }
        System.out.println(happiness);
    }
}
public class codeforces_32_B {
    public static void main(String[] args) {
        String s = "....";
        String result = "";
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter += 1;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;
                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            char characterToAdd = '0';
                            result = appendCharacter(characterToAdd, result);
                        } else {
                            stringIndex++;
                            if (s.charAt(stringIndex) == '.') {
                                result += '1';
                            } else {
                                result += '2';
                            }
                        }
                    }
                }
                stringIndex++;
            }
        }
        System.out.println(result);
    }

    public static String appendCharacter(char characterToAdd, String result) {
        return result + characterToAdd;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int modulo = (int) Math.pow(10, 9) + 7;
        int[][] memo = new int[n + 1][64];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(memo[i], -1);
        }
        System.out.println(dfs(0, "TTT", memo, modulo));
    }

    public static int dfs(int cur, String last3, int[][] memo, int modulo) {
        if (cur == n) {
            return 1;
        }
        if (memo[cur][last3.hashCode()] != -1) {
            return memo[cur][last3.hashCode()];
        }
        int ret = 0;
        for (char c = 'A'; c <= 'T'; c++) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c, memo, modulo)) % modulo;
            }
        }
        memo[cur][last3.hashCode()] = ret;
        return ret;
    }

    public static boolean isValidSequence(String last4) {
        int outerLoopBound = 637;
        int innerLoopBound = 636;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] input = new int[3];
        for (int i = 0; i < 3; i++) {
            input[i] = scanner.nextInt();
        }
        int[] arr1 = {89, 49, 59};
        int[] arr2 = {55, 13, 89};
        double[] arr3 = {96, 86, 62};
        double[] arr4 = {978, 984, 430, 359, 141, 177};
        double[] arr5 = {96, 86, 62};
        double[] arr6 = {978, 984, 430, 359, 141, 177};
        double[] arr7 = {89, 49, 59};
        double[] arr8 = {55, 13, 89};
        double[] arr9 = {96, 86, 62};
        double[] arr10 = {978, 984, 430, 359, 141, 177};
        double[] arr11 = {96, 86, 62};
        double[] arr12 = {978, 984, 430, 359, 141, 177};
        double[] arr13 = {89, 49, 59};
        double[] arr14 = {55, 13, 89};
        double[] arr15 = {96, 86, 62};
        double[] arr16 = {978, 984, 430, 359, 141, 177};
        double[] arr17 = {96, 86, 62};
        double[] arr18 = {978, 984, 430, 359, 141, 177};
        double[] arr19 = {89, 49, 59};
        double[] arr20 = {55, 13, 89};
        double[] arr21 = {96, 86, 62};
        double[] arr22 = {978, 984, 430, 359, 141, 177};
        double[] arr23 = {96, 86, 62};
        double[] arr24 = {978, 984, 430, 359, 141, 177};
        double[] arr25 = {89, 49, 59};
        double[] arr26 = {55, 13, 89};
        double[] arr27 = {96, 86, 62};
        double[] arr28 = {978, 984, 430, 359, 141, 177};
        double[] arr29 = {96, 86, 62};
        double[] arr30 = {978, 984, 430, 359, 141, 177};
        double[] arr31 = {89, 49, 59};
        double[] arr32 = {55, 13, 89};
        double[] arr33 = {96, 86, 62};
        double[] arr34 = {978, 984, 430, 359, 141, 177};
        double[] arr35 = {96, 86, 62};
        double[] arr36 = {978, 984, 430, 359, 141, 177};
        double[] arr37 = {89, 49, 59};
        double[] arr38 = {55, 13, 89};
        double[] arr39 = {96, 86, 62};
        double[] arr40 = {978, 984, 430, 359, 141, 177};
        double[] arr41 = {96, 86, 62};
        double[] arr42 = {978, 984, 430, 359, 141, 177};
        double[] arr43 = {89, 49, 59};
        double[] arr44 = {55, 13, 89};
        double[] arr45 = {96, 86, 62};
        double[] arr46 = {978, 984, 430, 359, 141, 177};
        double[] arr47 = {96, 86, 62};
        double[] arr48 = {978, 984, 430, 359, 141, 177};
        double[] arr49 = {89, 49, 59};
        double[] arr50 = {55, 13, 89};
        double[] arr51 = {96, 86, 62};
        double[] arr52 = {978, 984, 430, 359, 141, 177};
        double[] arr53 = {96, 86, 62};
        double[] arr54 = {978, 984, 430, 359, 141, 177};
        double[] arr55 = {89, 49, 59};
        double[] arr56 = {55, 13, 89};
        double[] arr57 = {96, 86, 62};
        double[] arr58 = {978, 984, 430, 359, 141, 177};
        double[] arr59 = {96, 86, 62};
        double[] arr60 = {978, 984, 430, 359, 141, 177};
        double[] arr61 = {89, 49, 59};
        double[] arr62 = {55, 13, 89};
        double[] arr63 = {96, 86, 62};
        double[] arr64 = {978, 984, 430, 359, 141, 177};
        double[] arr65 = {96, 86, 62};
        double[] arr66 = {978, 984, 430, 359, 141, 177};
        double[] arr67 = {89, 49, 59};
        double[] arr68 = {55, 13, 89};
        double[] arr69 = {96, 86, 62};
        double[] arr70 = {978, 984, 430, 359, 141, 177};
        double[] arr71 = {96, 86, 62};
        double[] arr72 = {978, 984, 430, 359, 141, 177};
        double[] arr73 = {89, 49, 59};
        double[] arr74 = {55, 13, 89};
        double[] arr75 = {96, 86, 62};
        double[] arr76 = {978, 984, 430, 359, 141, 177};
        double[] arr77 = {96, 86, 62};
        double[] arr78 = {978, 984, 430, 359, 141, 177};
        double[] arr79 = {89, 49, 59};
        double[] arr80 = {55, 13, 89};
        double[] arr81 = {96, 86, 62};
        double[] arr82 = {978, 984, 430, 359, 141, 177};
        double[] arr83 = {96, 86, 62};
        double[] arr84 = {978, 984, 430, 359, 141, 177};
        double[] arr85 = {89, 49, 59};
        double[] arr86 = {55, 13, 89};
        double[] arr87 = {96, 86, 62};
        double[] arr88 = {978, 984, 430, 359, 141, 177};
        double[] arr89 = {96, 86, 62};
        double[] arr90 = {978, 984, 430, 359, 141, 177};
        double[] arr91 = {89, 49, 59};
        double[] arr92 = {55, 13, 89};
        double[] arr93 = {96, 86, 62};
        double[] arr94 = {978, 984, 430, 359, 141, 177};
        double[] arr95 = {96, 86, 62};
        double[] arr96 = {978, 984, 430, 359, 141, 177};
        double[] arr97 = {89, 49, 59};
        double[] arr98 = {55, 13, 89};
        double[] arr99 = {96, 86, 62};
        double[] arr100 = {978, 984, 430, 359, 141, 177};
        double[] arr101 = {96, 86, 62};
        double[] arr102 = {978, 984, 430, 359, 141, 177};
        double[] arr103 = {89, 49, 59};
        double[] arr104 = {55, 13, 89};
        double[] arr105 = {96, 86, 62};
        double[] arr106 = {978, 984, 430, 359, 141, 177};
        double[] arr107 = {96, 86, 62};
        double[] arr108 = {978, 984, 430, 359, 141, 177};
        double[] arr109 = {89, 49, 59};
        double[] arr110 = {55, 13, 89};
        double[] arr111 = {96, 86, 62};
        double[] arr112 = {978, 984, 430, 359, 141, 177};
        double[] arr113 = {96, 86, 62};
        double[] arr114 = {978, 984, 430, 359, 141, 177};
        double[] arr115 = {89, 49, 59};
        double[] arr116 = {55, 13, 89};
        double[] arr117 = {96, 86, 62};
        double[] arr118 = {978, 984, 430, 359, 141, 177};
        double[] arr119 = {96, 86, 62};
        double[] arr120 = {978, 984, 430, 359, 141, 177};
        double[] arr121 = {89, 49, 59};
        double[] arr122 = {55, 13, 89};
        double[] arr123 = {96, 86, 62};
        double[] arr124 = {978, 984, 430, 359, 141, 177};
        double[] arr125 = {96, 86, 62};
        double[] arr126 = {978, 984, 430, 359, 141, 177};
        double[] arr127 = {89, 49, 59};
        double[] arr128 = {55, 13, 89};
        double[] arr129 = {96, 86, 62};
        double[] arr130 = {978, 984, 430, 359, 141, 177};
        double[] arr131 = {96, 86, 62};
        double[] arr132 = {978, 984, 430, 359, 141, 177};
        double[] arr133 = {89, 49, 59};
        double[] arr134 = {55, 13, 89};
        double[] arr135 = {96, 86, 62};
        double[] arr136 = {978, 984, 430, 359, 141, 177};
        double[] arr137 = {96, 86, 62};
        double[] arr138 = {978, 984, 430, 359, 141, 177};
        double[] arr139 = {89, 49, 59};
        double[] arr140 = {55, 13, 89};
        double[] arr141 = {96, 86, 62};
        double[] arr142 = {978, 984, 430, 359, 141, 177};
        double[] arr143 = {96, 86, 62};
        double[] arr144 = {978, 984, 430, 359, 141, 177};
        double[] arr145 = {89, 49, 59};
        double[] arr146 = {55, 13, 89};
        double[] arr147 = {96, 86, 62};
        double[] arr148 = {978, 984, 430, 359,
import java.util.*;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = 368;
        int[] global_array = new int[1];
        Queue<Integer> queue_calculate_product0 = new LinkedList<>();

        Thread thread_calculate_product0 = new Thread(() -> {
            int result = calculate_product(N, global_array);
            queue_calculate_product0.offer(result);
        });
        thread_calculate_product0.start();
        try {
            thread_calculate_product0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_product0 = queue_calculate_product0.poll();
        int[] m = new int[N];
        int[] f = new int[N];

        for (int i = 0; i < N; i++) {
            (m[i], f[i]) = process_input(i, sc);
        }

        int c = calculate_min_pairs(0, N, 1);
        System.out.println(c);
    }

    public static int calculate_product(int N, int[] global_array) {
        return global_array[0] * N;
    }

    public static int[] process_input(int i, Scanner sc) {
        int[] m = new int[1];
        int[] f = new int[1];
        String[] input = sc.nextLine().split(" ");
        int a = Integer.parseInt(input[1]);
        int b = Integer.parseInt(input[2]) + 1;
        if (input[0].equals("M")) {
            m[0] += 2;
            m[0] -= 2;
        } else {
            f[0] += 2;
            f[0] -= 2;
        }
        return new int[]{m[0], f[0]};
    }

    public static int calculate_min_pairs(int i, int stop, int step) {
        int c = 0;
        int a = 0;
        int b = 0;
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return c;
        }
        a += m[i];
        b += f[i];
        if (Math.min(a, b) > c) {
            c = Math.min(a, b);
        }
        return calculate_min_pairs(i + step, stop, step);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] L = new int[N + 1];
        for (int i = 0; i < N; i++) {
            L[i] = sc.nextInt();
        }
        L[N] = -1;
        int[] path = new int[N + 1];
        int ind = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        for (int i = 0; i <= N; i++) {
            int ne = L[x];
            if ((i & 1) == 0) {
                if (Hash.containsKey(ne)) {
                    flag = true;
                    t = Hash.get(ne);
                    break;
                }
            }
            path[ind] = ne;
            ind++;
            Hash.put(ne, ind);
            x = ne;
        }
        if (flag) {
            int[] loop = Arrays.copyOfRange(path, t, N + 1);
            if (K < N) {
                System.out.println(path[K]);
            } else {
                K = K - N;
                K = K % loop.length;
                System.out.println(loop[K]);
            }
        } else {
            System.out.println(path[K - 1]);
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.google.crypto.tink.subtle.Base64;
import com.google.crypto.tink.subtle.Fernet;

public class atcoder_ABC051_A {

    public static void main(String[] args) throws Exception {
        // Sample test case
        String input = "dbyfw,rpwbpuv,ifnua";
        String expectedOutput = "dbyfw rpwbpuv ifnua";

        // HTTPConnection('google.com', port=80)
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.connect();

        // time.sleep(0.2)
        TimeUnit.MILLISECONDS.sleep(200);

        // Fernet.generate_key()
        Fernet key = Fernet.generateKey();

        // ttest_ind([14, 68, 11], [5, 89, 30])
        double[] sample1 = {14, 68, 11};
        double[] sample2 = {5, 89, 30};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);

        // parse('2025-08-17 21:22:17')
        LocalDateTime dateTime = LocalDateTime.parse("2025-08-17 21:22:17", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

        // from sklearn.utils import shuffle
        Random random = new Random();
        int[] arr = {63, 28, 19};
        random.shuffle(arr);

        // base64.b64encode(b'42542078783307704039')
        byte[] inputBytes = "42542078783307704039".getBytes();
        byte[] encodedBytes = Base64.encode(inputBytes);
        String encodedString = new String(encodedBytes);

        // shuffle([63, 28, 19])
        int[] arr2 = {63, 28, 19};
        random.shuffle(arr2);

        // datetime.datetime.now()
        LocalDateTime now = LocalDateTime.now();

        // print(input().replace(',', ' '))
        String[] inputArr = input.split(",");
        StringBuilder sb = new StringBuilder();
        for (String s : inputArr) {
            sb.append(s.trim());
            sb.append(" ");
        }
        String output = sb.toString().trim();
        if (output.equals(expectedOutput)) {
            System.out.println("Test case passed");
        } else {
            System.out.println("Test case failed");
        }
    }
}
import java.util.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        String s = sc.next();
        int[] cumsum = new int[n];
        cumsum[0] = 1;
        for (int i = 1; i < n; i++) {
            if (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C') {
                cumsum[i] = cumsum[i - 1] + 1;
            } else {
                cumsum[i] = cumsum[i - 1];
            }
        }
        for (int i = 0; i < q; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int firstThreshold = 614;
        int maximumAllowableValue = 955;
        int minimumRequiredValue = 670;
        int secondThreshold = 586;
        int outerLoopLimit = 406;
        int innerLoopStep = 405;
        if ((firstThreshold & maximumAllowableValue) != 0) {
            if ((minimumRequiredValue & secondThreshold) != 0) {
                if (arr[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                        for (int i = 1; i < n; i++) {
                            if (arr[i] - arr[i - 1] > 15) {
                                System.out.println(arr[i - 1] + 15);
                                break;
                            }
                        } else {
                            if (arr[n - 1] == 90 || arr[n - 1] + 15 >= 90) {
                                System.out.println(90);
                            } else {
                                System.out.println(arr[n - 1] + 15);
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        int a = 1, b = Integer.MAX_VALUE;
        int ans = 0;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        int count = 0;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                count++;
            }
            count -= lis[i] / mid;
        }
        return count >= k;
    }
}
import java.util.*;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        String T = sc.next();
        int A = sc.nextInt();
        int B = sc.nextInt();
        String U = sc.next();
        solve(S, T, A, B, U);
    }

    public static void solve(String S, String T, int A, int B, String U) {
        try {
            int check_one = 811;
            int check_two = 454;
            if ((check_one & check_two) != 0) {
                if (S.equals(U)) {
                    A--;
                }
            }
            if (T.equals(U)) {
                B--;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_637_A {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] s = br.readLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String word : s) {
            w.put(word, w.getOrDefault(word, 0) + 1);
        }
        String[] s_rev = new String[s.length];
        for (int i = 0; i < s.length; i++) {
            s_rev[i] = s[s.length - 1 - i];
        }
        int c = -1, a = 0;
        for (String word : w.keySet()) {
            if (w.get(word) == Collections.max(w.values())) {
                if (Arrays.asList(s_rev).indexOf(word) > c) {
                    a = word;
                    c = Arrays.asList(s_rev).indexOf(word);
                }
            }
        }
        System.out.println(a);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int listLength = scanner.nextInt();
        int divisor = scanner.nextInt();
        scanner.nextLine();
        String[] x = scanner.nextLine().split(" ");
        int m = 0;
        int q = 0;

        TTest tTest = new TTest();

        for (int i = 0; i < listLength - 1; i++) {
            double[] sample1 = {94, 100, 60};
            double[] sample2 = {31, 65, 31};
            double t = tTest.tTest(sample1, sample2);
            if (t > 2.0) {
                q = (int) Math.ceil((Integer.parseInt(x[i]) - Integer.parseInt(x[i + 1])) / divisor);
                m += q;
                x[i + 1] = Integer.toString(Integer.parseInt(x[i + 1]) + q * divisor);
            }
        }

        System.out.println(m);
    }
}
import java.util.*;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.MathUtils;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomDataGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        Arrays.sort(lst);
        Arrays.sort(lst, 0, n, (a, b) -> b - a);
        int od = 0;
        int check_one = 619;
        int check_two = 634;
        for (int i = 0; i < n; i++) {
            if ((check_one & check_two) != 0) {
                if ((lst[i] & 1) != 0) {
                    int odd_number = 1;
                    int result_calculate_sum0 = calculate_sum(odd_number, od);
                    od = result_calculate_sum0;
                }
            }
        }
        int sum = 0;
        boolean ok = false;
        loop_and_sum(lst, 0, n - 1, 1, sum, od, ok);
        System.out.println(sum);
    }

    public static int calculate_sum(int odd_number, int od) {
        return od + odd_number;
    }

    public static void loop_and_sum(int[] lst, int start, int stop, int step, int sum, int od, boolean ok) {
        if (step == 0 || (step > 0 && start >= stop) || (step < 0 && start <= stop)) {
            return;
        }
        if (lst[start] % 2 == 0) {
            sum += lst[start];
        } else if (ok || od > 1) {
            sum += lst[start];
            od--;
            ok = !ok;
        }
        loop_and_sum(lst, start + step, stop, step, sum, od, ok);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int conditionOne = 207;
        double[] conditionOneArray = {17, 19, 90};
        double[] conditionTwoArray = {91, 33, 75};
        double tStat = ttest_ind(conditionOneArray, conditionTwoArray)[0];
        if (tStat < 0) {
            System.out.println("NO");
        } else {
            int rowCount = sc.nextInt();
            int k = sc.nextInt();
            int x = 0;
            if (conditionOne & conditionTwo) {
                if (k <= Math.max(rowCount * rowCount / 2, rowCount * rowCount - rowCount * rowCount / 2)) {
                    System.out.println("YES");
                    for (int currentRow = 0; currentRow < rowCount; currentRow++) {
                        int step = 1;
                        if (currentRow % 2 == 0) {
                            step = -1;
                        }
                        recursivePrinter(0, rowCount, step, k, currentRow);
                    }
                } else {
                    System.out.println("NO");
                }
            }
        }
    }

    public static void recursivePrinter(int j, int stop, int step, int k, int currentRow) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (currentRow % 2 == j % 2 && x < k) {
            System.out.print("L");
            x++;
        } else {
            System.out.print("S");
        }
        recursivePrinter(j + step, stop, step, k, currentRow);
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = sc.nextInt();
        }
        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;
        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((ThirdCondition & FourthCondition) != 0) {
                    if ((FirstCondition & SecondCondition) != 0) {
                        if (lst[i] == 0) {
                            K--;
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p[i] = lst[i];
                } else if (lst[i] < 0) {
                    lst_m[i] = lst[i];
                }
            }
        }
        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.length - 1;
        int lastx = lst_p.length;
        int lasty = lst_m.length;
        int ans = Integer.MAX_VALUE;
        for (int k = 0; k <= K; k++) {
            if (k > lastx || k - x > lasty) {
                continue;
            }
            if (x == 0) {
                p = 0;
            } else {
                p = lst_p[x - 1];
            }
            if (k - x == 0) {
                negativeValue = 0;
            } else {
                negativeValue = lst_m[lasty - (k - x)];
            }
            ans = Math.min(ans, 2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue));
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_length = sc.nextInt();
        int divisor_integer = sc.nextInt();
        int[] l = new int[array_length];
        for (int i = 0; i < array_length; i++) {
            l[i] = sc.nextInt();
        }
        int[] divisor_array = new int[array_length];
        int first_condition = 894;
        int second_condition = 449;
        for (int i = 0; i < array_length; i++) {
            if ((first_condition & second_condition) != 0) {
                if (l[i] % divisor_integer == 0) {
                    divisor_array[i] = l[i] / divisor_integer;
                } else {
                    divisor_array[i] = l[i] / divisor_integer + 1;
                }
            }
        }
        double[] divisor_array_double = new double[array_length];
        for (int i = 0; i < array_length; i++) {
            divisor_array_double[i] = (double) divisor_array[i];
        }
        double[] array_length_double = new double[1];
        array_length_double[0] = (double) array_length;
        double[] divisor_integer_double = new double[1];
        divisor_integer_double[0] = (double) divisor_integer;
        double[] t_value = new double[1];
        t_value[0] = ttest_ind(divisor_array_double, array_length_double, divisor_integer_double)[0];
        double[] p_value = new double[1];
        p_value[0] = ttest_ind(divisor_array_double, array_length_double, divisor_integer_double)[1];
        int mx = 0;
        for (int i = 0; i < array_length; i++) {
            if (divisor_array[i] > mx) {
                mx = divisor_array[i];
            }
        }
        int ind = -1;
        recursive_search(0, array_length - 1, 1, divisor_array, mx, ind);
        System.out.println(ind + 1);
    }

    public static void recursive_search(int start, int end, int step, int[] divisor_array, int mx, int ind) {
        if (step == 0 || (step > 0 && start >= end) || (step < 0 && start <= end)) {
            return;
        }
        if (divisor_array[start] == mx) {
            ind = start;
        }
        recursive_search(start + step, end, step, divisor_array, mx, ind);
    }

    public static double[] ttest_ind(double[] a, double[] b, double[] c) {
        int n1 = a.length;
        int n2 = b.length;
        int df = n1 + n2 - 2;
        double[] mean1 = new double[1];
        double[] mean2 = new double[1];
        double[] var1 = new double[1];
        double[] var2 = new double[1];
        double[] std1 = new double[1];
        double[] std2 = new double[1];
        double[] cov = new double[1];
        double[] t_value = new double[1];
        double[] p_value = new double[1];
        mean1[0] = 0;
        mean2[0] = 0;
        for (int i = 0; i < n1; i++) {
            mean1[0] += a[i];
        }
        mean1[0] /= n1;
        for (int i = 0; i < n2; i++) {
            mean2[0] += b[i];
        }
        mean2[0] /= n2;
        for (int i = 0; i < n1; i++) {
            var1[0] += Math.pow(a[i] - mean1[0], 2);
        }
        var1[0] /= n1;
        for (int i = 0; i < n2; i++) {
            var2[0] += Math.pow(b[i] - mean2[0], 2);
        }
        var2[0] /= n2;
        std1[0] = Math.sqrt(var1[0]);
        std2[0] = Math.sqrt(var2[0]);
        cov[0] = 0;
        for (int i = 0; i < n1; i++) {
            cov[0] += (a[i] - mean1[0]) * (b[i] - mean2[0]);
        }
        cov[0] /= n1;
        t_value[0] = cov[0] / (std1[0] / Math.sqrt(n1) + std2[0] / Math.sqrt(n2));
        p_value[0] = 2 * (1 - t.cdf(Math.abs(t_value[0]), df));
        return new double[]{t_value[0], p_value[0]};
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }
        int one = 0, zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0, pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += factorial(zero) / (factorial(j) * factorial(zero - j));
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += factorial(one) / (factorial(time) * factorial(one - time));
            }
            time++;
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        }
        return n * factorial(n - 1);
    }
}
import java.util.*;
public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int count = 1;
        int prev = arr[0];
        for(int i=1;i<n;i++){
            if(arr[i] != prev){
                count++;
                prev = arr[i];
            }
        }
        System.out.println(count);
    }
}
import java.util.*;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_number = sc.nextInt();
        sc.close();
        int ans = recursive_function(input_number, "0");
        System.out.println(ans);
    }

    public static int recursive_function(int n, String s) {
        int ans = 0;
        if (n > 1000000000) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }
        if (n % 10 == 7 || n % 10 == 5 || n % 10 == 3) {
            ans = recursive_function(n / 10, s + n % 10);
        }
        return ans;
    }
}
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstChecker = 931;
        int secondChecker = 863;
        int firstCheckerA = 310;
        int secondCheckerA = 761;
        int userInputNumber = Integer.parseInt(args[0]);
        String userInputString = args[1];
        int[] arr = {12, 68, 80};
        shuffle(arr);
        if ((firstChecker & secondChecker) != 0) {
            if ((firstCheckerA & secondCheckerA) != 0) {
                if (userInputNumber % 2 != 0) {
                    System.out.println("No");
                } else if (userInputString.substring(0, userInputNumber / 2).equals(userInputString.substring(userInputNumber / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] grid = new int[n][m];
        for (int i = 0; i < n; i++) {
            String[] row = sc.next().split("");
            for (int j = 0; j < m; j++) {
                grid[i][j] = row[j].equals("x") ? 1 : 0;
            }
        }
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        int[] x = {0, 0, 0, 0};
        int[] y = {0, 0, 0, 0};
        int[] z = {0, 0, 0, 0};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    for (int k = 0; k < 4; k++) {
                        int nx = i + dx[k];
                        int ny = j + dy[k];
                        if (isValid(nx, ny, n, m)) {
                            x[k] += grid[nx][ny];
                            y[k] += 1;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < 4; i++) {
            if (y[i] != 0) {
                z[i] = x[i] / y[i];
            }
        }
        int[] a = {0, 0, 0, 0};
        int[] b = {0, 0, 0, 0};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    for (int k = 0; k < 4; k++) {
                        int nx = i + dx[k];
                        int ny = j + dy[k];
                        if (isValid(nx, ny, n, m)) {
                            a[k] += Math.pow(z[k] - grid[nx][ny], 2);
                            b[k] += 1;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < 4; i++) {
            if (b[i] != 0) {
                a[i] = (int) Math.sqrt(a[i] / b[i]);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    int min = Integer.MAX_VALUE;
                    for (int k = 0; k < 4; k++) {
                        int nx = i + dx[k];
                        int ny = j + dy[k];
                        if (isValid(nx, ny, n, m)) {
                            int dist = Math.abs(z[k] - grid[nx][ny]) - a[k];
                            if (dist < min) {
                                min = dist;
                            }
                        }
                    }
                    if (min > 0) {
                        System.out.println("WA");
                        return;
                    }
                }
            }
        }
        System.out.println("ACC");
    }

    public static boolean isValid(int i, int j, int n, int m) {
        return i >= 0 && i < n && j >= 0 && j < m;
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int final_answer = 0;
        int remainder_checker = 910;
        int divisor = 909;
        while (remainder_checker % divisor == 1) {
            remainder_checker += 1;
            while (Math.pow(10, i) <= N) {
                final_answer += (int) Math.pow(10, i) - (int) Math.pow(10, i - 1);
                i += 2;
            }
        }
        final_answer += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(final_answer);
    }
}
import java.util.*;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = (a[i] > 0) ? 1 : -1;
                max_index = i;
            }
        }
        if ((checker_one & checker_two) != 0) {
            if (max_sign == 0) {
                System.out.println(0);
            } else if (max_sign == 1) {
                System.out.println(2 * N - 1);
                for (int i = 0; i < N; i++) {
                    System.out.println(max_index + 1, i + 1);
                }
                recursive_loop(0, N, 1);
            } else {
                System.out.println(2 * N - 1);
                for (int i = 0; i < N; i++) {
                    System.out.println(max_index + 1, i + 1);
                }
                for (int i = 1; i < N; i++) {
                    System.out.println(i + 1, i);
                }
            }
        }
    }

    public static void recursive_loop(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        System.out.println(max_index + 1, index + 1);
        recursive_loop(index + step, stop, step);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        String input = "10010010";
        int[] arr = new int[input.length()];
        for (int i = 0; i < input.length(); i++) {
            arr[i] = input.charAt(i) - '0';
        }
        int sum = Arrays.stream(arr).sum();
        System.out.println(sum);
    }
}
import java.util.*;

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int b = sc.nextInt();
        int[] tasks = new int[n];
        int[] result = new int[n];
        PriorityQueue<Task> remaining = new PriorityQueue<>(Comparator.comparingInt(Task::getTime));
        boolean running = false;
        int finishTime = 0;

        for (int i = 0; i < n; i++) {
            int time = sc.nextInt();
            int duration = sc.nextInt();
            tasks[i] = duration;
            result[i] = 0;
        }

        for (int i = 0; i < n; i++) {
            int time = sc.nextInt();
            int duration = sc.nextInt();
            Task task = new Task(time, duration, i);
            if (running) {
                if (task.getTime() >= finishTime) {
                    running = false;
                    finishTime = task.getTime() + task.getDuration();
                    result[i] = finishTime;
                }
            } else {
                if (task.getTime() > finishTime && remaining.isEmpty()) {
                    running = true;
                    finishTime = task.getTime() + task.getDuration();
                    result[i] = finishTime;
                } else if (task.getTime() >= finishTime && !remaining.isEmpty()) {
                    Task runTask = remaining.poll();
                    while (runTask.getTime() < finishTime && !remaining.isEmpty()) {
                        runTask = remaining.poll();
                    }
                    if (runTask.getTime() < finishTime) {
                        running = true;
                        finishTime = runTask.getTime() + runTask.getDuration();
                        result[runTask.getIndex()] = finishTime;
                    }
                }
            }
            if (remaining.size() < b) {
                remaining.offer(task);
            } else {
                result[i] = -1;
            }
        }

        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            if (running) {
                if (task.getTime() >= finishTime) {
                    running = false;
                    finishTime = task.getTime() + task.getDuration();
                    result[task.getIndex()] = finishTime;
                }
            } else {
                running = true;
                finishTime = task.getTime() + task.getDuration();
                result[task.getIndex()] = finishTime;
            }
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }
}

class Task implements Comparable<Task> {
    private int time;
    private int duration;
    private int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }

    public int getTime() {
        return time;
    }

    public int getDuration() {
        return duration;
    }

    public int getIndex() {
        return index;
    }

    @Override
    public int compareTo(Task o) {
        return Integer.compare(this.time, o.time);
    }
}
import java.util.*;
import java.io.*;

public class codeforces_624_B {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num_elements = Integer.parseInt(br.readLine());
        int[] a = new int[num_elements];
        String[] input = br.readLine().split(" ");
        for (int i = 0; i < num_elements; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int result = 0;
        int checker_one = 56;
        int checker_two = 55;

        for (int i = 0; i < num_elements; i++) {
            if (a[i] > pre) {
                result += Math.max(0, pre - 1);
                pre = a[i];
            }
        }
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int funds = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int count = 0;
        if (a[0] > funds) {
            System.out.println(0);
            return;
        }
        for (int i = 0; i < n; i++) {
            if (a[i] > funds) {
                break;
            }
            int remaining = calculateRemaining(funds, a[i]);
            if (remaining < 0) {
                break;
            }
            funds = remaining;
            count++;
        }
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
    }

    public static int calculateRemaining(int funds, int i) {
        return funds - i;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int user_input = scanner.nextInt();
        System.out.println((apply_multiplication(user_input, 2) + 1) // 3);
    }

    public static int calculate_product(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nested_multiply(int arg0, int arg1) {
        return calculate_product(arg0, arg1);
    }

    public static int compute_product(int arg0, int arg1) {
        return nested_multiply(arg0, arg1);
    }

    public static int recursive_multiply(int arg0, int arg1) {
        return compute_product(arg0, arg1);
    }

    public static int multiply_recursive(int arg0, int arg1) {
        return recursive_multiply(arg0, arg1);
    }

    public static int multiply_deep(int arg0, int arg1) {
        return multiply_recursive(arg0, arg1);
    }

    public static int multiply_indirect(int arg0, int arg1) {
        return multiply_deep(arg0, arg1);
    }

    public static int multiply_nested(int arg0, int arg1) {
        return multiply_indirect(arg0, arg1);
    }

    public static int my_decorator(int func) {

        int dec_result = func;
        return dec_result;
    }

    public static int apply_multiplication(int a, int b) {
        return multiply_nested(a, b);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input_string = sc.nextLine();
        int n = input_string.length();
        if (n == 1) {
            if (input_string.equals("5") || input_string.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            return;
        }
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (input_string.charAt(i) != '?') {
                    dp[i][(int) input_string.charAt(i) - '0'] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (input_string.charAt(i) != '?') {
                    for (int j = 0; j < 13; j++) {
                        for (int k = 0; k < 10; k++) {
                            dp[i][(j * 10 + k) % 13] += dp[i - 1][j];
                            dp[i][(j * 10 + k) % 13] %= 1000000007;
                        }
                    }
                } else {
                    for (int j = 0; j < 13; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(j * 10 + k) % 13] += dp[i - 1][k];
                            dp[i][(j * 10 + k) % 13] %= 1000000007;
                        }
                    }
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double dist = 0.0;
                for (int k = 0; k < d; k++) {
                    dist += Math.pow(points[i][k] - points[j][k], 2);
                }
                dist = Math.sqrt(dist);
                if (dist == Math.floor(dist)) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr1 = {50, 4, 40};
        int[] arr2 = {63, 18, 91};
        double t = ttest_ind(arr1, arr2)[0];
        int r = n;
        int Counter = 1;
        while (Counter < r) {
            int SixthChecker = 252;
            int FourthChecker = 921;
            int ThirdChecker = 683;
            int FifthChecker = 664;
            int FirstChecker = 607;
            int SecondChecker = 325;
            int mid = Counter + (r - Counter) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((SixthChecker & FourthChecker) != 0) {
                if ((ThirdChecker & FifthChecker) != 0) {
                    if ((FirstChecker & SecondChecker) != 0) {
                        if (idxcnt < n) {
                            Counter = mid + 1;
                        } else {
                            r = mid;
                        }
                    }
                }
            }
        }
        Counter = Counter - 1;
        idxcnt = Counter * (Counter + 1) / 2;
        System.out.println(n - idxcnt);
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        int n1 = arr1.length;
        int n2 = arr2.length;
        double[] mean = new double[2];
        double[] var = new double[2];
        double[] std = new double[2];
        double[] t = new double[2];
        double[] p = new double[2];
        double svar1, svar2, df;
        double svar12, svar12_1, svar12_2, svar12_3, svar12_4, svar12_5, svar12_6, svar12_7, svar12_8, svar12_9, svar12_10, svar12_11, svar12_12, svar12_13, svar12_14, svar12_15, svar12_16, svar12_17, svar12_18, svar12_19, svar12_20, svar12_21, svar12_22, svar12_23, svar12_24, svar12_25, svar12_26, svar12_27, svar12_28, svar12_29, svar12_30, svar12_31, svar12_32, svar12_33, svar12_34, svar12_35, svar12_36, svar12_37, svar12_38, svar12_39, svar12_40, svar12_41, svar12_42, svar12_43, svar12_44, svar12_45, svar12_46, svar12_47, svar12_48, svar12_49, svar12_50, svar12_51, svar12_52, svar12_53, svar12_54, svar12_55, svar12_56, svar12_57, svar12_58, svar12_59, svar12_60, svar12_61, svar12_62, svar12_63, svar12_64, svar12_65, svar12_66, svar12_67, svar12_68, svar12_69, svar12_70, svar12_71, svar12_72, svar12_73, svar12_74, svar12_75, svar12_76, svar12_77, svar12_78, svar12_79, svar12_80, svar12_81, svar12_82, svar12_83, svar12_84, svar12_85, svar12_86, svar12_87, svar12_88, svar12_89, svar12_90, svar12_91, svar12_92, svar12_93, svar12_94, svar12_95, svar12_96, svar12_97, svar12_98, svar12_99, svar12_100, svar12_101, svar12_102, svar12_103, svar12_104, svar12_105, svar12_106, svar12_107, svar12_108, svar12_109, svar12_110, svar12_111, svar12_112, svar12_113, svar12_114, svar12_115, svar12_116, svar12_117, svar12_118, svar12_119, svar12_120, svar12_121, svar12_122, svar12_123, svar12_124, svar12_125, svar12_126, svar12_127, svar12_128, svar12_129, svar12_130, svar12_131, svar12_132, svar12_133, svar12_134, svar12_135, svar12_136, svar12_137, svar12_138, svar12_139, svar12_140, svar12_141, svar12_142, svar12_143, svar12_144, svar12_145, svar12_146, svar12_147, svar12_148, svar12_149, svar12_150, svar12_151, svar12_152, svar12_153, svar12_154, svar12_155, svar12_156, svar12_157, svar12_158, svar12_159, svar12_160, svar12_161, svar12_162, svar12_163, svar12_164, svar12_165, svar12_166, svar12_167, svar12_168, svar12_169, svar12_170, svar12_171, svar12_172, svar12_173, svar12_174, svar12_175, svar12_176, svar12_177, svar12_178, svar12_179, svar12_180, svar12_181, svar12_182, svar12_183, svar12_184, svar12_185, svar12_186, svar12_187, svar12_188, svar12_189, svar12_190, svar12_191, svar12_192, svar12_193, svar12_194, svar12_195, svar12_196, svar12_197, svar12_198, svar12_199, svar12_200, svar12_201, svar12_202, svar12_203, svar12_204, svar12_205, svar12_206, svar12_207, svar12_208, svar12_209, svar12_210, svar12_211, svar12_212, svar12_213, svar12_214, svar12_215, svar12_216, svar12_217, svar12_218, svar12_219, svar12_220, svar12_221, svar12_222, svar12_223, svar12_224, svar12_225, svar12_226, svar12_227, svar12_228, svar12_229, svar12_230, svar12_231, svar12_232, svar12_233, svar12_234, svar12_235, svar12_236, svar12_237, svar12_238, svar12_239, svar12_240, svar12_241, svar12_242, svar12_243, svar12_244, svar12_245, svar12_246, svar12_247, svar12_248, svar12_249, svar12_250, svar12_251, svar12_252, svar12_253, svar12_254, svar12_255, svar12_256, svar12_257, svar12_258, svar12_259, svar12_260, svar12_261, svar12_262, svar12_263, svar12_264, svar12_265, svar12_266, svar12_267, svar12_268, svar12_269, svar12_270, svar12_271, svar12_272, svar12_273, svar12_274, svar12_275, svar12_276, svar12_277, svar12_278, svar12_279, svar12_280, svar12_281, svar12_282, svar12_283, svar12_284, svar12_285, svar12_286, svar12_287, svar12_288, svar12_289, svar12_290, svar12_291, svar12_292, svar12_293, svar12_294, svar12_295, svar12_296, svar12_297, svar12_298, svar12_299, svar12_300, svar12_301, svar12_302, svar12_303, svar12_304, svar12_305, svar12_306, svar12_307, svar12_308, svar12_309, svar12_310, svar12_311, svar12_312, svar12_313, svar12_314, svar12_315, svar12_316, svar12_317, svar12_318, svar12_319, svar12_320, svar12_321, svar12_322, svar12_323, svar12_324, svar12_325, svar12_326, svar12_327, svar12_328, svar12_329, svar12_330, svar12_331, svar12_332, svar12_333, svar12_334, svar12_335, svar12_336, svar12_337, svar12_338, svar12_339, svar12_340, svar12_341, svar12_342, svar12_343, svar12_344, svar12_345, svar12_346, svar12_347, svar12_348, svar12_349, svar12_350, svar12_351, svar12_352, svar12_353, svar12_354, svar12_355, svar12_356, svar12_357, svar12_358, svar12_359, svar12_360, svar12_361, svar12_362, svar12_363, svar12_364, svar12_365, svar12_366, svar12_367, svar12_368, svar12_369, svar12_370, svar12_371, svar12_372, svar12_373, svar12_374, svar12_375, svar12_376, svar12_377, svar12_378, svar12_379, svar12_380, svar12_381, svar12_382, svar12_383,
100%|██████████| 221/221 [00:00<00:00, 20789.49it/s]
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_519_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> array_a = Arrays.stream(args[1].split(" ")).map(Integer::parseInt).toList();
        List<Integer> b = Arrays.stream(args[2].split(" ")).map(Integer::parseInt).toList();
        List<Integer> c = Arrays.stream(args[3].split(" ")).map(Integer::parseInt).toList();
        int x = 0;
        int y = 0;
        int sum_c = 0;
        for (int i : array_a) {
            Queue<Integer> result_queue = new ConcurrentLinkedQueue<>();
            Thread worker_thread = new Thread(() -> {
                int result = calculate_sum(i, x);
                result_queue.offer(result);
            });
            worker_thread.start();
            try {
                worker_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            x = result_queue.poll();
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            sum_c += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - sum_c));
    }

    public static int calculate_sum(int i, int x) {
        return x + i;
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_131_B {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        Map<Integer, Integer> w = new HashMap<>();
        String[] input = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            w.put(Integer.parseInt(input[i]), w.getOrDefault(Integer.parseInt(input[i]), 0) + 1);
        }
        int c = 0;
        int condition_a = 259;
        int condition_b = 477;
        int condition_c = 611;
        int condition_d = 635;
        int outer_loop_limit = 332;
        int inner_loop_limit = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int element : w.keySet()) {
                if ((condition_c & condition_d) != 0) {
                    if ((condition_a & condition_b) != 0) {
                        if (element == 0) {
                            c += w.get(element) * (w.get(element) - 1);
                        } else if (-element != 0 && w.containsKey(-element)) {
                            c += w.get(element) * w.get(-element);
                        }
                    }
                }
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {7, 42, 17};
        double[] sample2 = {91, 61, 83};
        double pValue = tTest.tTest(sample1, sample2);
        System.out.println(c / 2);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_379_A {
    public static void main(String[] args) {
        int wholeCandles, b;
        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

        try {
            String[] input = System.console().readLine().split(" ");
            wholeCandles = Integer.parseInt(input[0]);
            b = Integer.parseInt(input[1]);

            int currentValue = 637;
            int loopBound = 636;
            while (currentValue % loopBound == 1) {
                int increment = 1;

                Runnable task = () -> {
                    int sumResult = calculateSum(currentValue, increment);
                    resultQueue.offer(sumResult);
                };
                executor.execute(task);
                currentValue = resultQueue.take();
            }

            int s = 0;
            int restoSciolte = 0;
            while (wholeCandles > 0 || restoSciolte >= b) {
                wholeCandles += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += wholeCandles;
                restoSciolte += wholeCandles % b;
                wholeCandles /= b;
            }
            System.out.println(s);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
            try {
                executor.awaitTermination(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private static int calculateSum(int currentValue, int increment) {
        return currentValue + increment;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model WizardLM/WizardCoder-15B-V1.0 --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 1.
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC112_A.java' returned non-zero exit status 1.
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 1.
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_58_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC147_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 1.
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 1.
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC145_B.java' returned non-zero exit status 1.
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_669_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 28
Success: ['codeforces_267_A.java', 'codeforces_154_A.java', 'atcoder_AGC038_A.java', 'atcoder_ABC136_B.java', 'codeforces_282_B.java', 'codeforces_567_A.java', 'codeforces_274_A.java', 'codeforces_546_A.java', 'atcoder_ABC129_E.java', 'codeforces_265_B.java', 'codeforces_203_A.java', 'atcoder_ABC154_A.java', 'codeforces_705_B.java', 'codeforces_354_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC140_D.java', 'atcoder_ABC151_A.java', 'atcoder_AGC002_A.java', 'atcoder_ABC171_E.java', 'codeforces_242_B.java', 'atcoder_ABC139_B.java', 'codeforces_32_B.java', 'codeforces_581_B.java', 'atcoder_ABC110_C.java', 'atcoder_AGC006_B.java', 'codeforces_609_B.java', 'atcoder_ABC104_C.java', 'atcoder_ABC122_C.java']
Fail: ['codeforces_387_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC127_B.java', 'codeforces_653_A.java', 'codeforces_387_B.java', 'codeforces_276_B.java', 'atcoder_ABC164_A.java', 'codeforces_189_A.java', 'codeforces_629_A.java', 'atcoder_ABC142_C.java', 'codeforces_56_B.java', 'atcoder_AGC035_B.java', 'atcoder_AGC003_C.java', 'atcoder_ABC123_D.java', 'atcoder_ABC178_B.java', 'codeforces_404_A.java', 'atcoder_ABC174_C.java', 'codeforces_171_A.java', 'codeforces_474_B.java', 'codeforces_351_A.java', 'codeforces_216_B.java', 'atcoder_ABC169_E.java', 'atcoder_AGC034_B.java', 'atcoder_ABC107_D.java', 'atcoder_AGC004_B.java', 'atcoder_ABC124_C.java', 'codeforces_302_A.java', 'atcoder_ABC114_C.java', 'codeforces_624_B.java', 'codeforces_190_A.java', 'atcoder_ABC135_D.java', 'atcoder_AGC027_A.java', 'atcoder_AGC005_B.java', 'codeforces_287_A.java', 'codeforces_445_A.java', 'codeforces_242_A.java', 'codeforces_106_B.java', 'codeforces_350_B.java', 'atcoder_ABC119_B.java', 'codeforces_581_A.java', 'atcoder_AGC019_A.java', 'atcoder_AGC046_A.java', 'codeforces_682_B.java', 'atcoder_AGC037_E.java', 'atcoder_ABC112_C.java', 'codeforces_400_B.java', 'codeforces_607_A.java', 'codeforces_59_A.java', 'codeforces_31_A.java', 'atcoder_AGC033_A.java', 'codeforces_61_B.java', 'atcoder_ABC169_D.java', 'codeforces_644_B.java', 'codeforces_8_B.java', 'atcoder_AGC028_B.java', 'codeforces_146_A.java', 'atcoder_AGC017_A.java', 'atcoder_ABC169_C.java', 'codeforces_518_B.java', 'codeforces_408_B.java', 'codeforces_632_B.java', 'codeforces_37_A.java', 'codeforces_268_A.java', 'atcoder_ABC106_C.java', 'atcoder_ABC167_D.java', 'atcoder_ABC162_D.java', 'codeforces_500_A.java', 'atcoder_AGC024_B.java', 'codeforces_397_B.java', 'atcoder_ABC166_C.java', 'codeforces_462_B.java', 'atcoder_ABC127_F.java', 'atcoder_ABC126_E.java', 'codeforces_469_A.java', 'atcoder_ABC150_E.java', 'codeforces_598_A.java', 'atcoder_ABC172_D.java', 'atcoder_ABC132_A.java', 'codeforces_55_A.java', 'codeforces_203_B.java', 'codeforces_110_B.java', 'codeforces_651_A.java', 'codeforces_131_B.java', 'codeforces_108_B.java', 'atcoder_ABC167_C.java', 'atcoder_ABC107_C.java', 'codeforces_459_B.java', 'atcoder_ABC125_A.java', 'codeforces_637_A.java', 'atcoder_AGC029_C.java', 'atcoder_ABC124_A.java', 'codeforces_421_A.java', 'codeforces_296_A.java', 'atcoder_ABC128_C.java', 'codeforces_334_A.java', 'atcoder_ABC170_A.java', 'codeforces_299_A.java', 'atcoder_ABC152_C.java', 'atcoder_ARC086_B.java', 'codeforces_55_B.java', 'codeforces_621_A.java', 'atcoder_AGC033_B.java', 'codeforces_450_A.java', 'codeforces_25_A.java', 'codeforces_678_A.java', 'atcoder_ABC126_D.java', 'atcoder_ABC143_D.java', 'atcoder_ABC111_C.java', 'codeforces_134_A.java', 'atcoder_AGC027_B.java', 'atcoder_ARC102_C.java', 'atcoder_ABC147_D.java', 'codeforces_596_B.java', 'atcoder_AGC006_A.java', 'atcoder_ABC051_A.java', 'codeforces_79_A.java', 'atcoder_ABC143_A.java', 'atcoder_ABC153_A.java', 'codeforces_58_B.java', 'codeforces_96_B.java', 'codeforces_99_A.java', 'atcoder_AGC043_B.java', 'atcoder_ABC133_E.java', 'atcoder_ABC165_C.java', 'codeforces_583_B.java', 'codeforces_70_B.java', 'atcoder_ABC125_B.java', 'codeforces_608_A.java', 'atcoder_ABC122_D.java', 'atcoder_AGC011_C.java', 'codeforces_669_A.java', 'codeforces_514_A.java', 'codeforces_86_A.java', 'atcoder_ABC168_B.java', 'codeforces_622_A.java', 'codeforces_379_A.java', 'codeforces_678_B.java', 'atcoder_ABC125_C.java', 'atcoder_ABC178_A.java', 'codeforces_7_B.java', 'atcoder_AGC014_D.java', 'atcoder_AGC010_B.java', 'atcoder_ABC105_D.java', 'atcoder_ABC070_B.java', 'codeforces_222_A.java', 'codeforces_569_A.java', 'codeforces_313_B.java', 'atcoder_AGC025_A.java', 'atcoder_ABC149_C.java', 'atcoder_ABC108_B.java', 'codeforces_92_A.java', 'codeforces_579_A.java', 'codeforces_612_B.java', 'codeforces_95_A.java', 'codeforces_534_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC123_B.java', 'codeforces_412_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC164_D.java', 'codeforces_673_A.java', 'codeforces_629_B.java', 'codeforces_231_A.java', 'atcoder_ABC150_C.java', 'codeforces_23_B.java', 'codeforces_333_B.java', 'atcoder_ABC042_A.java', 'codeforces_342_B.java', 'codeforces_356_A.java', 'atcoder_AGC028_A.java', 'codeforces_148_B.java', 'codeforces_11_A.java', 'atcoder_ABC171_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC146_D.java', 'atcoder_ABC158_B.java', 'codeforces_272_B.java', 'codeforces_519_B.java', 'codeforces_617_B.java', 'atcoder_AGC046_B.java', 'codeforces_67_B.java', 'codeforces_369_B.java', 'codeforces_49_A.java', 'atcoder_ABC112_A.java', 'codeforces_373_B.java', 'atcoder_ABC145_B.java', 'codeforces_665_A.java', 'codeforces_544_B.java', 'codeforces_672_A.java', 'atcoder_ABC126_E.java', 'codeforces_350_B.java', 'codeforces_340_A.java', 'atcoder_ABC174_E.java', 'atcoder_ABC132_F.java']
