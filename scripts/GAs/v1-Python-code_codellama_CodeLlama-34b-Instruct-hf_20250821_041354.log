+ model=codellama/CodeLlama-34b-Instruct-hf
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 05:39:41 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 05:39:42 [utils.py:326] non-default args: {'model': 'codellama/CodeLlama-34b-Instruct-hf', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 05:39:47 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 05:39:47 [__init__.py:1750] Using max model len 4096
INFO 08-21 05:39:48 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:39:48 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:39:48 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='codellama/CodeLlama-34b-Instruct-hf', speculative_config=None, tokenizer='codellama/CodeLlama-34b-Instruct-hf', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=codellama/CodeLlama-34b-Instruct-hf, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3271023)[0;0m WARNING 08-21 05:39:48 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:39:48 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_05fa4b8f'), local_subscribe_addr='ipc:///tmp/046bd9b9-e527-4757-af1e-1cc464934271', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:50 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_757c33b0'), local_subscribe_addr='ipc:///tmp/3c2fa25c-945a-433d-b122-fccae31988dd', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:50 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_e2947b92'), local_subscribe_addr='ipc:///tmp/14756627-27fe-4ffb-b98f-876a31672af5', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_52a5488d'), local_subscribe_addr='ipc:///tmp/80004b16-287b-4b16-ad1e-d8a63537d4a0', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m WARNING 08-21 05:39:51 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m WARNING 08-21 05:39:51 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:51 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:51 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:39:52 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:39:52 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:03<00:19,  3.27s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:06<00:14,  2.99s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:09<00:12,  3.07s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:12<00:09,  3.17s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:16<00:06,  3.29s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:18<00:03,  3.11s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:14 [default_loader.py:262] Loading weights took 21.75 seconds
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:21<00:00,  3.09s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:21<00:00,  3.12s/it]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m 
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:14 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 22.360503 seconds
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:14 [default_loader.py:262] Loading weights took 22.05 seconds
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:15 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 22.879545 seconds
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:24 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:24 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:24 [backends.py:559] Dynamo bytecode transform time: 9.43 s
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:24 [backends.py:559] Dynamo bytecode transform time: 9.41 s
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:31 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.828 s
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:31 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.833 s
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:33 [monitor.py:34] torch.compile takes 9.41 s in total
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:33 [monitor.py:34] torch.compile takes 9.43 s in total
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:34 [gpu_worker.py:276] Available KV cache memory: 36.36 GiB
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:34 [gpu_worker.py:276] Available KV cache memory: 36.36 GiB
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:40:35 [kv_cache_utils.py:849] GPU KV cache size: 397,088 tokens
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:40:35 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.95x
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:40:35 [kv_cache_utils.py:849] GPU KV cache size: 397,088 tokens
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:40:35 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.95x
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 15.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 17.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 17.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 18.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 18.13it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 18.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:02, 18.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:00<00:02, 18.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 19.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 19.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 19.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 18.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 19.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 18.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:01, 18.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:01<00:01, 18.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 18.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 17.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 17.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 18.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 18.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 17.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 17.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 17.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 17.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 17.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 16.79it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 16.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 16.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 16.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 17.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 17.94it/s]
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:39 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:39 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP1 pid=3271031)[0;0m INFO 08-21 05:40:39 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3271023)[0;0m [1;36m(VllmWorker TP0 pid=3271029)[0;0m INFO 08-21 05:40:39 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3271023)[0;0m INFO 08-21 05:40:39 [core.py:214] init engine (profile, create kv cache, warmup model) took 24.19 seconds
INFO 08-21 05:40:40 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 10478.06it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  63%|██████▎   | 139/221 [00:00<00:00, 1380.45it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 691.08it/s] 
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:10<37:31, 10.23s/it, est. speed input: 31.66 toks/s, output: 15.63 toks/s]Processed prompts:   1%|          | 2/221 [00:10<16:46,  4.60s/it, est. speed input: 61.10 toks/s, output: 31.79 toks/s]Processed prompts:   1%|▏         | 3/221 [00:11<09:17,  2.56s/it, est. speed input: 95.66 toks/s, output: 48.46 toks/s]Processed prompts:   2%|▏         | 4/221 [00:11<05:50,  1.61s/it, est. speed input: 172.70 toks/s, output: 65.29 toks/s]Processed prompts:   3%|▎         | 6/221 [00:12<04:00,  1.12s/it, est. speed input: 208.93 toks/s, output: 93.17 toks/s]Processed prompts:   4%|▎         | 8/221 [00:12<02:27,  1.45it/s, est. speed input: 305.92 toks/s, output: 129.79 toks/s]Processed prompts:   5%|▍         | 10/221 [00:12<01:35,  2.22it/s, est. speed input: 447.74 toks/s, output: 168.27 toks/s]Processed prompts:   5%|▌         | 12/221 [00:13<01:06,  3.15it/s, est. speed input: 508.71 toks/s, output: 205.61 toks/s]Processed prompts:   7%|▋         | 15/221 [00:13<00:43,  4.72it/s, est. speed input: 650.40 toks/s, output: 261.89 toks/s]Processed prompts:   8%|▊         | 17/221 [00:13<00:52,  3.92it/s, est. speed input: 673.53 toks/s, output: 289.36 toks/s]Processed prompts:   9%|▉         | 20/221 [00:14<00:36,  5.53it/s, est. speed input: 742.46 toks/s, output: 349.09 toks/s]Processed prompts:  11%|█         | 24/221 [00:14<00:23,  8.44it/s, est. speed input: 837.84 toks/s, output: 430.69 toks/s]Processed prompts:  12%|█▏        | 27/221 [00:14<00:17, 10.79it/s, est. speed input: 955.68 toks/s, output: 491.85 toks/s]Processed prompts:  14%|█▎        | 30/221 [00:14<00:15, 12.09it/s, est. speed input: 1015.19 toks/s, output: 550.53 toks/s]Processed prompts:  14%|█▍        | 32/221 [00:14<00:18, 10.39it/s, est. speed input: 1039.40 toks/s, output: 584.59 toks/s]Processed prompts:  15%|█▌        | 34/221 [00:15<00:18, 10.20it/s, est. speed input: 1091.12 toks/s, output: 621.22 toks/s]Processed prompts:  17%|█▋        | 37/221 [00:15<00:20,  9.18it/s, est. speed input: 1128.12 toks/s, output: 672.08 toks/s]Processed prompts:  18%|█▊        | 39/221 [00:15<00:18,  9.89it/s, est. speed input: 1196.43 toks/s, output: 710.89 toks/s]Processed prompts:  19%|█▉        | 43/221 [00:15<00:12, 14.29it/s, est. speed input: 1296.89 toks/s, output: 797.64 toks/s]Processed prompts:  21%|██        | 46/221 [00:15<00:12, 14.40it/s, est. speed input: 1356.44 toks/s, output: 856.13 toks/s]Processed prompts:  23%|██▎       | 50/221 [00:16<00:09, 17.28it/s, est. speed input: 1466.84 toks/s, output: 941.01 toks/s]Processed prompts:  24%|██▍       | 53/221 [00:16<00:09, 17.95it/s, est. speed input: 1522.91 toks/s, output: 1001.84 toks/s]Processed prompts:  25%|██▌       | 56/221 [00:16<00:08, 19.38it/s, est. speed input: 1590.67 toks/s, output: 1064.94 toks/s]Processed prompts:  27%|██▋       | 59/221 [00:16<00:08, 18.70it/s, est. speed input: 1674.56 toks/s, output: 1124.27 toks/s]Processed prompts:  28%|██▊       | 62/221 [00:16<00:07, 20.07it/s, est. speed input: 1725.03 toks/s, output: 1186.85 toks/s]Processed prompts:  29%|██▉       | 65/221 [00:16<00:07, 20.16it/s, est. speed input: 1773.14 toks/s, output: 1248.41 toks/s]Processed prompts:  32%|███▏      | 70/221 [00:16<00:06, 24.29it/s, est. speed input: 1891.88 toks/s, output: 1358.16 toks/s]Processed prompts:  33%|███▎      | 73/221 [00:17<00:06, 24.42it/s, est. speed input: 1946.32 toks/s, output: 1421.01 toks/s]Processed prompts:  34%|███▍      | 76/221 [00:17<00:06, 22.16it/s, est. speed input: 1997.05 toks/s, output: 1480.29 toks/s]Processed prompts:  37%|███▋      | 81/221 [00:17<00:05, 25.84it/s, est. speed input: 2177.16 toks/s, output: 1590.65 toks/s]Processed prompts:  38%|███▊      | 84/221 [00:17<00:05, 25.66it/s, est. speed input: 2239.97 toks/s, output: 1653.92 toks/s]Processed prompts:  41%|████      | 90/221 [00:17<00:04, 32.50it/s, est. speed input: 2431.00 toks/s, output: 1791.20 toks/s]Processed prompts:  44%|████▍     | 98/221 [00:17<00:03, 40.28it/s, est. speed input: 2610.72 toks/s, output: 1976.03 toks/s]Processed prompts:  47%|████▋     | 103/221 [00:17<00:03, 35.47it/s, est. speed input: 2707.85 toks/s, output: 2080.76 toks/s]Processed prompts:  48%|████▊     | 107/221 [00:18<00:03, 33.75it/s, est. speed input: 2816.46 toks/s, output: 2166.18 toks/s]Processed prompts:  50%|█████     | 111/221 [00:18<00:03, 31.17it/s, est. speed input: 2891.96 toks/s, output: 2248.67 toks/s]Processed prompts:  53%|█████▎    | 117/221 [00:18<00:02, 36.79it/s, est. speed input: 3083.18 toks/s, output: 2388.68 toks/s]Processed prompts:  55%|█████▍    | 121/221 [00:18<00:02, 36.91it/s, est. speed input: 3152.49 toks/s, output: 2476.98 toks/s]Processed prompts:  57%|█████▋    | 125/221 [00:18<00:03, 30.61it/s, est. speed input: 3263.00 toks/s, output: 2554.52 toks/s]Processed prompts:  58%|█████▊    | 129/221 [00:18<00:02, 30.87it/s, est. speed input: 3377.82 toks/s, output: 2641.70 toks/s]Processed prompts:  60%|██████    | 133/221 [00:18<00:02, 29.81it/s, est. speed input: 3466.98 toks/s, output: 2726.39 toks/s]Processed prompts:  63%|██████▎   | 139/221 [00:19<00:02, 34.87it/s, est. speed input: 3575.94 toks/s, output: 2866.76 toks/s]Processed prompts:  65%|██████▍   | 143/221 [00:19<00:02, 27.86it/s, est. speed input: 3663.10 toks/s, output: 2939.23 toks/s]Processed prompts:  67%|██████▋   | 147/221 [00:19<00:02, 30.30it/s, est. speed input: 3752.37 toks/s, output: 3030.91 toks/s]Processed prompts:  68%|██████▊   | 151/221 [00:19<00:02, 25.53it/s, est. speed input: 3827.37 toks/s, output: 3104.45 toks/s]Processed prompts:  71%|███████   | 157/221 [00:19<00:02, 29.13it/s, est. speed input: 3979.33 toks/s, output: 3242.28 toks/s]Processed prompts:  73%|███████▎  | 161/221 [00:20<00:02, 20.18it/s, est. speed input: 4003.99 toks/s, output: 3292.56 toks/s]Processed prompts:  74%|███████▍  | 164/221 [00:20<00:02, 19.46it/s, est. speed input: 4060.29 toks/s, output: 3347.90 toks/s]Processed prompts:  76%|███████▌  | 167/221 [00:20<00:03, 14.78it/s, est. speed input: 4083.40 toks/s, output: 3373.34 toks/s]Processed prompts:  76%|███████▋  | 169/221 [00:20<00:03, 15.25it/s, est. speed input: 4116.90 toks/s, output: 3411.66 toks/s]Processed prompts:  78%|███████▊  | 173/221 [00:20<00:02, 17.43it/s, est. speed input: 4195.24 toks/s, output: 3497.99 toks/s]Processed prompts:  79%|███████▉  | 175/221 [00:21<00:04,  9.97it/s, est. speed input: 4156.70 toks/s, output: 3467.40 toks/s]Processed prompts:  81%|████████  | 178/221 [00:21<00:03, 10.85it/s, est. speed input: 4183.75 toks/s, output: 3520.48 toks/s]Processed prompts:  81%|████████▏ | 180/221 [00:21<00:03, 11.92it/s, est. speed input: 4221.46 toks/s, output: 3562.43 toks/s]Processed prompts:  83%|████████▎ | 184/221 [00:22<00:02, 13.19it/s, est. speed input: 4341.27 toks/s, output: 3640.20 toks/s]Processed prompts:  84%|████████▍ | 186/221 [00:22<00:02, 12.39it/s, est. speed input: 4364.02 toks/s, output: 3668.20 toks/s]Processed prompts:  86%|████████▌ | 189/221 [00:22<00:02, 11.53it/s, est. speed input: 4392.10 toks/s, output: 3710.16 toks/s]Processed prompts:  87%|████████▋ | 193/221 [00:22<00:01, 14.59it/s, est. speed input: 4524.40 toks/s, output: 3807.24 toks/s]Processed prompts:  88%|████████▊ | 195/221 [00:23<00:03,  8.41it/s, est. speed input: 4462.16 toks/s, output: 3769.44 toks/s]Processed prompts:  89%|████████▉ | 197/221 [00:23<00:03,  7.54it/s, est. speed input: 4470.26 toks/s, output: 3776.16 toks/s]Processed prompts:  90%|█████████ | 199/221 [00:24<00:03,  6.77it/s, est. speed input: 4463.27 toks/s, output: 3779.76 toks/s]Processed prompts:  90%|█████████ | 200/221 [00:24<00:03,  6.75it/s, est. speed input: 4449.17 toks/s, output: 3788.86 toks/s]Processed prompts:  91%|█████████▏| 202/221 [00:24<00:02,  7.36it/s, est. speed input: 4459.06 toks/s, output: 3820.64 toks/s]Processed prompts:  92%|█████████▏| 204/221 [00:24<00:01,  8.87it/s, est. speed input: 4474.35 toks/s, output: 3867.88 toks/s]Processed prompts:  93%|█████████▎| 206/221 [00:24<00:01,  7.98it/s, est. speed input: 4488.54 toks/s, output: 3885.79 toks/s]Processed prompts:  94%|█████████▎| 207/221 [00:25<00:01,  7.59it/s, est. speed input: 4479.63 toks/s, output: 3894.16 toks/s]Processed prompts:  94%|█████████▍| 208/221 [00:25<00:01,  6.93it/s, est. speed input: 4473.37 toks/s, output: 3897.97 toks/s]Processed prompts:  95%|█████████▌| 211/221 [00:26<00:02,  3.95it/s, est. speed input: 4362.62 toks/s, output: 3829.86 toks/s]Processed prompts:  96%|█████████▌| 212/221 [00:26<00:02,  3.13it/s, est. speed input: 4299.29 toks/s, output: 3777.79 toks/s]Processed prompts:  96%|█████████▋| 213/221 [00:27<00:02,  3.15it/s, est. speed input: 4268.39 toks/s, output: 3770.31 toks/s]Processed prompts:  97%|█████████▋| 214/221 [00:27<00:02,  3.19it/s, est. speed input: 4242.76 toks/s, output: 3766.03 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:27<00:01,  3.36it/s, est. speed input: 4237.74 toks/s, output: 3768.83 toks/s]Processed prompts:  98%|█████████▊| 216/221 [00:28<00:01,  3.51it/s, est. speed input: 4245.69 toks/s, output: 3772.44 toks/s]Processed prompts:  98%|█████████▊| 217/221 [00:29<00:02,  1.66it/s, est. speed input: 4047.66 toks/s, output: 3624.27 toks/s]Processed prompts:  99%|█████████▊| 218/221 [01:09<00:34, 11.43s/it, est. speed input: 1738.02 toks/s, output: 1604.43 toks/s]Processed prompts: 100%|█████████▉| 220/221 [01:10<00:06,  6.71s/it, est. speed input: 1710.26 toks/s, output: 1675.47 toks/s]Processed prompts: 100%|██████████| 221/221 [01:10<00:00,  5.12s/it, est. speed input: 1711.59 toks/s, output: 1726.31 toks/s]Processed prompts: 100%|██████████| 221/221 [01:10<00:00,  5.12s/it, est. speed input: 1711.59 toks/s, output: 1726.31 toks/s]Processed prompts: 100%|██████████| 221/221 [01:10<00:00,  3.13it/s, est. speed input: 1711.59 toks/s, output: 1726.31 toks/s]
+ python3 clean_generations_translation.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        List<List<Integer>> G = new ArrayList<>(N);
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = Integer.parseInt(args[i * 2 + 1]) - 1;
            int b = Integer.parseInt(args[i * 2 + 2]) - 1;
            G.get(a).add(b);
            G.get(b).add(a);
        }
        int K = breadthFirstSearch(0, N, G);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i == j) {
                    continue;
                }
                System.out.print(G.get(i).get(j) + " ");
            }
            System.out.println();
        }
    }

    public static int breadthFirstSearch(int v, int N, List<List<Integer>> G) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new ConcurrentLinkedQueue<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.add(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            for (int nex : G.get(q)) {
                if (visited[nex]) {
                    continue;
                }
                visited[nex] = true;
                color++;
                if (color == node2color[q]) {
                    color++;
                }
                node2color[nex] = color;
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.net.HttpURLConnection;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.time.FastDateFormat;
import org.apache.commons.lang3.time.StopWatch;
import org.apache.commons.lang3.time.TimeUtils;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils.TimeUnit;
import org.apache.commons.lang3.time.TimeUtils
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int operandOne = scanner.nextInt();
        int operandTwo = scanner.nextInt();
        int operandThree = scanner.nextInt();
        int result = calculateValue(operandOne, operandTwo, operandThree);
        System.out.println(result);
    }

    public static int calculateValue(int operandOne, int operandTwo, int operandThree) {
        return operandTwo * operandThree + operandOne;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int targetValue = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();

        int ans = 0;
        while (s < targetValue) {
            Queue<Integer> queue = new ArrayDeque<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<Runnable>(1));
            executor.execute(() -> {
                int result = calculateProduct(s, q);
                queue.add(result);
            });

            executor.shutdown();
            try {
                executor.awaitTermination(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int productResult = queue.poll();
            s = productResult;
            ans++;
        }

        System.out.println(ans);
    }

    public static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.util.Scanner;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] locations = new int[n][3];
        for (int i = 0; i < n; i++) {
            locations[i][0] = sc.nextInt();
            locations[i][1] = sc.nextInt();
            locations[i][2] = sc.nextInt();
        }

        int x0 = -1;
        int y0 = -1;
        int baseHeight = -1;
        for (int i = 0; i < n; i++) {
            if (locations[i][2] > 0) {
                x0 = locations[i][0];
                y0 = locations[i][1];
                baseHeight = locations[i][2];
                break;
            }
        }

        int[][] cands = new int[101][101][101];
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    cands[i][j][k] = Math.max(baseHeight - Math.abs(i - x0) - Math.abs(j - y0), 0);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            int x = locations[i][0];
            int y = locations[i][1];
            int h = locations[i][2];
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[j][k][h] == 0) {
                        cands[j][k][h] = Math.max(h - Math.abs(j - x) - Math.abs(k - y), 0);
                    }
                }
            }
        }

        int xx = -1;
        int yy = -1;
        int hh = -1;
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[i][j][k] > 0) {
                        xx = i;
                        yy = j;
                        hh = k;
                        break;
                    }
                }
            }
        }

        System.out.println(xx + " " + yy + " " + hh);
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }

        int minProblemsSolved = Integer.MAX_VALUE;
        for (int problemSetMask = 0; problemSetMask < (1 << D); problemSetMask++) {
            int score = 0;
            int problemsSolved = 0;
            for (int j = 0; j < D; j++) {
                if ((problemSetMask & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problemsSolved += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problemSetMask & (1 << j)) == 0) {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    minProblemsSolved = Math.min(minProblemsSolved, problemsSolved + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(minProblemsSolved);
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(integerDivision(firstInput, secondInput));
    }

    public static int integerDivision(int a, int b) {
        try {
            // HTTPConnection('google.com', port=80)
            // base64.b64encode(b'41493583001567655714')
            // parse('2025-08-17 23:00:53')
            // Fernet.generate_key()
            // time.sleep(0.28)
            return a / b;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
}
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        int N = 10;
        int M = 100;
        int[] A = new int[] {158, 512, 4, 1, 951, 2, 144, 555, 124, 906};
        int[] cumulativeRemainders = calculateCumulativeRemainders(A, M);
        int[] remainderCounts = countRemainders(cumulativeRemainders);
        int combinations = calculateCombinations(remainderCounts);
        System.out.println(combinations);
    }

    private static int[] calculateCumulativeRemainders(int[] A, int M) {
        int[] cumulativeRemainders = new int[A.length];
        for (int i = 0; i < A.length; i++) {
            cumulativeRemainders[i] = (A[i] % M + cumulativeRemainders[i - 1]) % M;
        }
        return cumulativeRemainders;
    }

    private static int[] countRemainders(int[] cumulativeRemainders) {
        int[] remainderCounts = new int[cumulativeRemainders.length];
        for (int i = 0; i < cumulativeRemainders.length; i++) {
            remainderCounts[i] = (cumulativeRemainders[i] + 1) % 2;
        }
        return remainderCounts;
    }

    private static int calculateCombinations(int[] remainderCounts) {
        int combinations = 0;
        for (int i = 0; i < remainderCounts.length; i++) {
            combinations += remainderCounts[i] * (remainderCounts[i] - 1) / 2;
        }
        return combinations;
    }
}
import java.util.Scanner;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        int t_r = sc.nextInt();
        int t_c = sc.nextInt();
        String T = sc.next();

        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        int inner_loop_limit = 641;
        int outer_loop_limit = 640;

        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    S_L++;
                    if (S_L - T_R - s_c == 0) {
                        break;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        break;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        break;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        break;
                    }
                }

                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                } else if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                } else if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                } else if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != H) {
                        T_D++;
                    }
                }
            }
        }

        if (S_L == T_R && S_R == T_L && S_U == T_D && S_D == T_U) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int conditionOne = 368;
        int conditionTwo = 165;
        int inputNumber = Integer.parseInt(args[0]);
        while (inputNumber % 2 == 0) {
            int divisor = 2;
            Queue<Integer> queueDivisionOperation0 = new Queue<>();

            Thread threadDivisionOperation0 = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = divisionOperation(divisor, inputNumber);
                    queueDivisionOperation0.add(result);
                }
            });
            threadDivisionOperation0.start();
            threadDivisionOperation0.join();
            int resultDivisionOperation0 = queueDivisionOperation0.poll();
            inputNumber = resultDivisionOperation0;
        }
        if (conditionOne & conditionTwo) {
            if (inputNumber == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }

    public static int divisionOperation(int divisor, int inputNumber) {
        return inputNumber / divisor;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();

        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }

        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrixSize = sc.nextInt();
        String[][] s = new String[matrixSize][matrixSize];

        recursiveInput(0, matrixSize, 1, s);

        int flag = 0;
        String[] d1 = new String[matrixSize];
        String[] d2 = new String[matrixSize];
        Set<String> rem = new HashSet<>();
        int checkConditionTwo = 482;
        int checkConditionOne = 245;

        for (int i = 0; i < matrixSize; i++) {
            for (int innerLoopIndex = 0; innerLoopIndex < matrixSize; innerLoopIndex++) {
                if (checkConditionTwo & checkConditionOne) {
                    if (i == innerLoopIndex) {
                        d1[i] = s[i][innerLoopIndex];
                    }
                }
                if (i == matrixSize - innerLoopIndex - 1) {
                    d2[i] = s[i][innerLoopIndex];
                }
                if (i != innerLoopIndex && i != matrixSize - innerLoopIndex - 1) {
                    rem.add(s[i][innerLoopIndex]);
                }
            }
        }

        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!Arrays.equals(d1, d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).size() != 1) {
            System.out.println("NO");
        } else if (rem.equals(new HashSet<>(d1))) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static void recursiveInput(int i, int stop, int step, String[][] s) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s[i][i] = sc.nextLine();
        recursiveInput(i + step, stop, step, s);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int curr_row_prev_col_val = d[row][j - 1];
                int prev_row_val = d[row - 1][j];
                int prev_row_prev_col_val = d[row - 1][j - 1];
                int curr_row = d[row];
                int prev_row = d[row - 1];
                int col_idx = 1;
                int row_idx = 1;
                d[row][j] += calculate_value(row_idx, j, m, row, curr_row_prev_col_val, col_idx, prev_row_val, prev_row_prev_col_val);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculate_value(int row_idx, int j, int m, int row, int curr_row_prev_col_val, int col_idx, int prev_row_val, int prev_row_prev_col_val) {
        return (curr_row_prev_col_val * row + prev_row_val * j - prev_row_prev_col_val * (row - row_idx) * (j - col_idx)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    private int[] memory;
    private int availableSlots;
    private int nextAvailableSlot;

    public MemoryManager(int memorySize) {
        this.memory = new int[memorySize];
        this.availableSlots = memorySize;
        this.nextAvailableSlot = 0;
    }

    public int alloc(int size) {
        if (size > availableSlots) {
            return -1;
        }

        int startIndex = nextAvailableSlot;
        for (int i = startIndex; i < memory.length; i++) {
            if (memory[i] == 0) {
                memory[i] = size;
                availableSlots -= size;
                nextAvailableSlot = i + 1;
                return i;
            }
        }

        return -1;
    }

    public void erase(int index) {
        if (index < 0 || index >= memory.length) {
            throw new IllegalArgumentException("Invalid index: " + index);
        }

        if (memory[index] == 0) {
            return;
        }

        memory[index] = 0;
        availableSlots += memory[index];
    }

    public void defragment() {
        int[] newMemory = new int[memory.length];
        int newNextAvailableSlot = 0;

        for (int i = 0; i < memory.length; i++) {
            if (memory[i] != 0) {
                newMemory[newNextAvailableSlot] = memory[i];
                newNextAvailableSlot++;
            }
        }

        memory = newMemory;
        nextAvailableSlot = newNextAvailableSlot;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int memorySize = scanner.nextInt();
        MemoryManager memoryManager = new MemoryManager(memorySize);

        while (scanner.hasNext()) {
            String command = scanner.next();
            if (command.equals("alloc")) {
                int size = scanner.nextInt();
                int index = memoryManager.alloc(size);
                if (index == -1) {
                    System.out.println("NULL");
                } else {
                    System.out.println(index);
                }
            } else if (command.equals("erase")) {
                int index = scanner.nextInt();
                try {
                    memoryManager.erase(index);
                } catch (IllegalArgumentException e) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                }
            } else if (command.equals("defragment")) {
                memoryManager.defragment();
            }
        }

        scanner.close();
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }

        int[] elementCounts = new int[n];
        for (int i = 0; i < n; i++) {
            elementCounts[lst[i]]++;
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (elementCounts[lst[i]] > 1) {
                res += n - i - elementCounts[lst[i]];
                elementCounts[lst[i]]--;
            } else {
                res += n - i - 1;
            }
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        calculateRGBCombinations(n, s);
    }

    public static void calculateRGBCombinations(int n, String s) {
        int redCount = 0;
        int greenCount = 0;
        int blueCount = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'R') {
                redCount++;
            } else if (s.charAt(i) == 'G') {
                greenCount++;
            } else if (s.charAt(i) == 'B') {
                blueCount++;
            }
        }
        for (int step = 1; step <= n / 2; step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String s1 = s.substring(i, i + step);
                String s2 = s.substring(i + step, i + 2 * step);
                String s3 = s.substring(i + 2 * step, i + 3 * step);
                if (s1.equals("RGB") || s1.equals("RBG") || s1.equals("BGR") || s1.equals("BRG") || s1.equals("GBR") || s1.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(redCount * greenCount * blueCount - sum);
    }
}
import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] adj = new int[n + 1][n + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                adj[i][j] = scanner.nextInt();
            }
        }

        Deque<Integer> que = new LinkedList<>();
        que.add(1);
        int[] seen = new int[n + 1];
        int[] par = new int[n + 1];
        int[] childCount = new int[n + 1];
        while (!que.isEmpty()) {
            int v = que.removeFirst();
            for (int u = 1; u <= n; u++) {
                if (adj[v][u] == 1 && seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    childCount[v]++;
                    que.addLast(u);
                }
            }
        }

        Deque<Integer> seq = new LinkedList<>();
        int checkOneTwentySix = 237;
        int checkTwoTwentySix = 616;
        int checkOneTwentyEight = 552;
        int checkTwoTwentyEight = 159;
        for (int i = 1; i <= n; i++) {
            if ((checkOneTwentySix & checkTwoTwentySix) == 0) {
                if ((checkOneTwentyEight & checkTwoTwentyEight) == 0) {
                    if (childCount[i] == 0) {
                        seq.addLast(i);
                    }
                }
            }
        }

        while (!seq.isEmpty()) {
            int currentNode = seq.removeFirst();
            seen[currentNode] = 0;
            if (seen[par[currentNode]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[currentNode]] = 0;
            childCount[par[par[currentNode]]]--;
            if (childCount[par[par[currentNode]]] == 0) {
                seq.addLast(par[par[currentNode]]);
            }
        }

        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        char c = input.charAt(0);
        char result = solve(c);
        System.out.println(result);
    }

    public static char solve(char c) {
        char[] alphabet = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        int index = c - 'a';
        return alphabet[index + 1];
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }

        ExecutorService executor = Executors.newFixedThreadPool(1);
        executor.submit(() -> {
            int result = calculateProduct(inputArray, n);
            System.out.println(result);
        });

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static int calculateProduct(int[] inputArray, int n) {
        int result = 1;
        for (int i = 0; i < n; i++) {
            result *= inputArray[i];
        }
        return result;
    }
}
import java.util.Scanner;
import java.util.Deque;
import java.util.ArrayDeque;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[][] edge = new int[N][N];
        for (int i = 0; i < M; i++) {
            int X = scanner.nextInt() - 1;
            int Y = scanner.nextInt() - 1;
            int Z = scanner.nextInt() - 1;
            edge[X][Y] = Z;
            edge[Y][X] = Z;
        }
        int[] used = new int[N];
        int ans = 0;
        int MaxIterationCheck = 200;
        int IntermediateCheck = 845;
        for (int i = 0; i < N; i++) {
            if (MaxIterationCheck & IntermediateCheck) {
                if (used[i] == 0) {
                    ans++;
                    Deque<Integer> queue = new ArrayDeque<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.removeFirst();
                        used[node] = 1;
                        for (int nextnode : edge[node]) {
                            if (used[nextnode] == 0) {
                                queue.add(nextnode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] coef = new int[n];
        for (int i = 1; i <= n; i++) {
            coef[i - 1] = n / i - n / (i + 1);
        }
        coef[n - 1] = 1;
        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int j = n - 1; j >= 0; j--) {
                tmp += dp[i - 1][n - 1 - j];
                tmp %= 1000000007;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= 1000000007;
            }
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            result += dp[k][i];
            result %= 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();

        int min = Math.min(firstInput, secondInput);
        int max = Math.max(firstInput, secondInput);
        int halfDiff = (max - min) / 2;

        System.out.println(min + " " + halfDiff);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int currentValue = scanner.nextInt();
        int divisor = 848;
        int remainder = 0;
        int i = 1;
        while (currentValue % divisor == 1) {
            int operand = 1;
            Queue<Integer> resultQueue = new Queue<>();

            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = sumOperands(operand, currentValue);
                    resultQueue.add(result);
                }
            });
            thread.start();
            thread.join();
            int sumResult = resultQueue.poll();
            currentValue = sumResult;
            while (remainder >= i) {
                remainder = remainder - i;
                i = i % n + 1;
            }
        }
        System.out.println(remainder);
    }

    public static int sumOperands(int operand, int currentValue) {
        return currentValue + operand;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] strList = input.split(" ");
        int[] intList = new int[strList.length];
        for (int i = 0; i < strList.length; i++) {
            intList[i] = Integer.parseInt(strList[i]);
        }

        int checkerOne = 289;
        int checkerThree = 475;
        int checkerTwo = 828;
        int checkerFive = 409;
        int checkerFour = 430;
        int checkerSeven = 909;

        for (int i = 0; i < intList.length; i++) {
            if (checkerFour & checkerSeven) {
                if (checkerTwo & checkerFive) {
                    if (checkerOne & checkerThree) {
                        if (intList[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int newItem = scanner.nextInt();
        int[] firstArray = {19, 85, 40};
        int[] secondArray = {44, 86, 33};
        int[] shuffledArray = shuffle(firstArray, secondArray);
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;
        int firstChecker = 870;
        int thirdChecker = 889;
        List<Integer> l = new ArrayList<>();
        for (int i = 0; i < shuffledArray.length; i++) {
            l.add(shuffledArray[i]);
        }
        Collections.sort(l);
        for (int currentItem : l) {
            if (firstChecker & thirdChecker) {
                if (fourthChecker & fifthChecker) {
                    if (secondChecker & sixthChecker) {
                        if (currentItem + 1 in l && currentItem + 2 in l) {
                            System.out.println("YES");
                            break;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }

    public static int[] shuffle(int[] firstArray, int[] secondArray) {
        int[] shuffledArray = new int[firstArray.length + secondArray.length];
        for (int i = 0; i < firstArray.length; i++) {
            shuffledArray[i] = firstArray[i];
        }
        for (int i = 0; i < secondArray.length; i++) {
            shuffledArray[i + firstArray.length] = secondArray[i];
        }
        return shuffledArray;
    }
}
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String moves = scanner.nextLine();
        int x = 0;
        int y = 0;
        int firstCheck = 540;
        int checkTwo = 650;
        boolean bugFound = false;
        for (char move : moves.toCharArray()) {
            switch (move) {
                case 'L':
                    x--;
                    break;
                case 'R':
                    x++;
                    break;
                case 'U':
                    y++;
                    break;
                case 'D':
                    y--;
                    break;
            }
            if (firstCheck & checkTwo) {
                if (x == 0 && y == 0) {
                    bugFound = true;
                    break;
                }
            }
        }
        if (bugFound) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arrayLength = sc.nextInt();
        int[] number = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            number[i] = sc.nextInt();
        }

        int h1 = 0;
        int h2 = 0;
        int x = 0;
        int outerLoopEnd = 738;
        int innerLoopEnd = 737;
        int firstCondition = 305;
        int thirdCondition = 108;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / innerLoopEnd; LoopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if (firstCondition & thirdCondition) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x = x + 1;
                        break;
                    }
                }
                if (i < arrayLength / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }

        int fourthCondition = 842;
        int fifthCondition = 952;
        int secondCondition = 819;
        int isDivisible = 253;
        if (fourthCondition & fifthCondition) {
            if (secondCondition & isDivisible) {
                if (!x) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // shuffle the array
        Random random = new Random();
        for (int i = 0; i < n; i++) {
            int j = random.nextInt(n);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }

        // sort the array
        Arrays.sort(arr);

        // print the first element of the sorted array
        System.out.println(arr[0]);

        // generate a random key for encryption
        byte[] key = new byte[16];
        new Random().nextBytes(key);
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");

        // encrypt the array using the generated key
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] encrypted = cipher.doFinal(arr);

        // print the encrypted array
        System.out.println(Arrays.toString(encrypted));

        // decrypt the array using the same key
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
        byte[] decrypted = cipher.doFinal(encrypted);

        // print the decrypted array
        System.out.println(Arrays.toString(decrypted));

        // print the current date and time
        Date date = new Date();
        System.out.println(date.toString());

        // wait for 180 milliseconds
        try {
            TimeUnit.MILLISECONDS.sleep(180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // print the current date and time again
        date = new Date();
        System.out.println(date.toString());
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_518_B {
    public static void main(String[] args) {
        String s = "ncMeXssLHS";
        String t = "uwyeMcaFatpInZVdEYpwJQSnVxLK";

        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> targetFreqs = new HashMap<>();

        for (char c : s.toCharArray()) {
            if (freqs.containsKey(c)) {
                freqs.put(c, freqs.get(c) + 1);
            } else {
                freqs.put(c, 1);
            }
        }

        for (char c : t.toCharArray()) {
            if (targetFreqs.containsKey(c)) {
                targetFreqs.put(c, targetFreqs.get(c) + 1);
            } else {
                targetFreqs.put(c, 1);
            }
        }

        int exactMatches = 0;
        int whoops = 0;

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && targetFreqs.containsKey(c) && targetFreqs.get(c) > 0) {
                exactMatches++;
                freqs.put(c, freqs.get(c) - 1);
                targetFreqs.put(c, targetFreqs.get(c) - 1);
            }
        }

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (c.isLowerCase() && targetFreqs.containsKey(c.toUpperCase()) && targetFreqs.get(c.toUpperCase()) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    targetFreqs.put(c.toUpperCase(), targetFreqs.get(c.toUpperCase()) - 1);
                } else if (c.isUpperCase() && targetFreqs.containsKey(c.toLowerCase()) && targetFreqs.get(c.toLowerCase()) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    targetFreqs.put(c.toLowerCase(), targetFreqs.get(c.toLowerCase()) - 1);
                } else {
                    break;
                }
            }
        }

        System.out.println(exactMatches + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
            listb[i] = scanner.nextInt();
        }
        int conditionCheckerTwo = 368;
        int conditionCheckerOne = 889;
        int loopBoundary = 955;
        int stepSize = 954;
        for (int loopIndexOut = 0; loopIndexOut < loopBoundary / stepSize; loopIndexOut++) {
            recursiveFunction(0, n, 1);
        }
    }

    public static void recursiveFunction(int k, int stop, int step) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((conditionCheckerTwo & conditionCheckerOne) != 0) {
            if (k + 1 in lista) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
        recursiveFunction(k + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculateGreatestCommonDivisor(x, y);
                queue.add(result);
            }
        });

        thread.start();
        thread.join();

        int result = queue.poll();
        System.out.println(b / result - (a - 1) / result);
    }

    public static int calculateGreatestCommonDivisor(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter += 1;
            while (a % b != 0) {
                (a, b) = (b, a % b);
            }
        }
        return b;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> s = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            s.add(scanner.nextInt());
        }

        int firstCheck = 339;
        int maxValue = 155;
        int secondCheck = 399;
        int minValue = 476;

        List<Integer> cur = new ArrayList<>();
        cur.add(s.get(0));
        boolean[] flag = new boolean[n];
        flag[0] = false;

        for (int i = 1; i < n; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < n; k++) {
                if (flag[k] && s.get(k) < cur.get(j)) {
                    cur.add(s.get(k));
                    j = j + 1;
                    flag[k] = false;
                    if (j == jM) {
                        break;
                    }
                }
            }
            cur.sort(null);
        }

        if (cur.size() == n) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int Newton = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            int i = 0;
            int stop = Newton;
            int step = 1;

            while (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                if (FirstCondition & SecondCondition) {
                    if (v - v2 > (Newton - i - 1) * d) {
                        a *= -1;
                        v = (Newton - i - 1) * d + v2;
                    }
                }
                distance += v;
                v += a * d;
                i += step;
            }
        }

        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_672_A {
    public static void main(String[] args) {
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i <= 371; i++) {
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                p = p / 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                List<Integer> digits = new ArrayList<>(temp);
                Collections.reverse(digits);
                Queue<Integer> resultQueue = new LinkedList<>();

                Runnable workerThread = new Runnable() {
                    @Override
                    public void run() {
                        int result = appendDigits(li, digits);
                        resultQueue.add(result);
                    }
                };
                Thread worker = new Thread(workerThread);
                worker.start();
                worker.join();
                int result = resultQueue.poll();
                li = new ArrayList<>(result);
            } else if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                li = li + temp;
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        int n = Integer.parseInt(args[0]);
        System.out.println(li.get(n - 1));
    }

    public static int appendDigits(List<Integer> li, List<Integer> digits) {
        int result = 0;
        for (int i = 0; i < digits.size(); i++) {
            result = result * 10 + digits.get(i);
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();

        int initial_condition_check_two = 404;
        int updated_condition_check_two = 660;
        int initial_condition_check_one = 89;
        int updated_condition_check_one = 306;
        int updated_condition_check_three = 352;
        int initial_condition_check_three = 806;

        if (initial_condition_check_two & updated_condition_check_two) {
            if (initial_condition_check_one & updated_condition_check_one) {
                if (updated_condition_check_three & initial_condition_check_three) {
                    if (dragon <= princess) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }

        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result = result + 1;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        int outerLoopBound = 176;
        int innerLoopBound = 175;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (char character : txt.toCharArray()) {
                if (character >= 'a' && character <= 'z') {
                    int increment = 1;
                    int sum = computeSum(cl, increment);
                    cl = sum;
                } else {
                    cu++;
                }
            }
        }
        if (cu > cl) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }

    public static int computeSum(int cl, int increment) {
        return cl + increment;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        int m = scanner.nextInt();
        int[] queries = new int[m];
        for (int i = 0; i < m; i++) {
            queries[i] = scanner.nextInt();
        }

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += numbers[j];
            }
            result.add(sum);
        }

        for (int i = 0; i < m; i++) {
            int product = 1;
            for (int j = 0; j < n; j++) {
                product *= numbers[j];
            }
            result.add(product);
        }

        for (int i = 0; i < m; i++) {
            System.out.println(result.get(i));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];

        for (int i = 0; i < n; i++) {
            int numerator = sc.nextInt();
            int b = sc.nextInt();
            lst[i] = calculateDivisionSum(numerator, b);
        }

        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }

    public static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;
        if (minimumDivisor > maximumDivisor) {
            return 0;
        }
        if (numerator > b) {
            int total = 0;
            while (numerator > 0 && b > 0) {
                total += numerator / b;
                numerator = numerator % b;
                if (numerator > 0) {
                    total += b / numerator;
                    b = b % numerator;
                }
            }
            return total;
        } else if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while (loopControlOne % loopControlTwo == 1) {
                loopControlOne++;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b = b % numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator = numerator % b;
                    }
                }
            }
            return total;
        } else {
            return 1;
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int positiveIntegerInput = sc.nextInt();
        int ans = 0;
        for (int i = 1; i <= positiveIntegerInput; i++) {
            ans += i * (positiveIntegerInput / i) * (positiveIntegerInput / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int checkFirstCondition = 813;
        int checkSubFirstCondition = 420;
        int checkSecondCondition = 703;
        int checkSubSecondCondition = 89;
        int checkThirdCondition = 838;
        int checkForthCondition = 924;
        int[] shuffledArray = shuffle(new int[] {54, 92, 75});
        int[] firstInput = new int[] {11, 32, 69};
        int[] secondInput = new int[] {21, 12, 66};
        int age = scanner.nextInt();
        if ((checkFirstCondition & checkSubFirstCondition) != 0) {
            if ((checkSecondCondition & checkSubSecondCondition) != 0) {
                if ((checkThirdCondition & checkForthCondition) != 0) {
                    if (age == 1) {
                        System.out.println("Hello World");
                    } else {
                        int a = scanner.nextInt();
                        int secondInput = scanner.nextInt();
                        System.out.println(a + secondInput);
                    }
                }
            }
        }
    }

    public static int[] shuffle(int[] array) {
        // Implement shuffle function here
        return array;
    }

    public static int[] ttest_ind(int[] firstInput, int[] secondInput) {
        // Implement ttest_ind function here
        return firstInput;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int countInput = scanner.nextInt();
        int constantVariable = 1;
        Queue<Integer> queueDifference = new Queue<>();

        Thread threadCalculateDifference = new Thread(() -> {
            int result = calculateDifference(countInput, constantVariable);
            queueDifference.add(result);
        });
        threadCalculateDifference.start();
        threadCalculateDifference.join();

        int differenceResult = queueDifference.poll();
        int ans = differenceResult;
        int last = 0;
        for (int i = 0; i < countInput; i++) {
            int input = scanner.nextInt();
            ans += Math.abs(last - input) + 1;
            last = input;
        }
        System.out.println(ans);
    }

    public static int calculateDifference(int countInput, int constantVariable) {
        int result = 0;
        for (int i = 0; i < countInput; i++) {
            result += i - constantVariable;
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int stepsCount = sc.nextInt();
        int totalTime = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();

        if (s < f) {
            int d = 1;
            String directionIndicator = "R";
        } else {
            int d = -1;
            String directionIndicator = "L";
        }

        String res = "";
        int i = 1;
        int j = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;

        while (k < totalTime) {
            if (i > t && k < totalTime) {
                t = sc.nextInt();
                l = sc.nextInt();
                r = sc.nextInt();
                k++;
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += "X";
            } else {
                res += directionIndicator;
                j += d;
            }
            i++;
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < m; i++) {
            int left = scanner.nextInt();
            int right = scanner.nextInt();
            int x = scanner.nextInt();
            int current = left;
            while (current <= right) {
                int ConditionB = 312;
                int ConditionE = 727;
                int ConditionF = 607;
                int ConditionD = 722;
                int ConditionC = 798;
                int ConditionA = 49;
                int next_val = comp[current - 1];
                if (ConditionB & ConditionE) {
                    if (ConditionF & ConditionD) {
                        if (ConditionC & ConditionA) {
                            if (out[current - 1] == 0 && current != x) {
                                out[current - 1] = x;
                            }
                        }
                    }
                }
                comp[current - 1] = right + 1;
                current = next_val;
            }
        }
        System.out.println(Arrays.toString(out));
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int testCaseId = scanner.nextInt();
        solve(testCaseId);
    }

    public static void solve(int testCaseId) {
        int a = scanner.nextInt();
        ttest_ind([55, 95, 4], [2, 77, 3]);
        System.out.println(1 if a == 0 else 0);
    }

    public static void ttest_ind(int[] a, int[] b) {
        // Implement the t-test here
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int totalSteps = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();

        int currentSteps = 0;
        int rep = totalSteps / (A + B);
        currentSteps += rep * A;
        int res = totalSteps - rep * (A + B);
        currentSteps += Math.min(res, A);

        System.out.println(currentSteps);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] inputArray = sc.nextLine().split(" ");
        boolean possible = true;
        int firstChecker = 965;
        int secondChecker = 658;
        int thirdChecker = 830;
        int fourthChecker = 931;
        int fifthChecker = 285;
        int sixthChecker = 630;

        for (String element : inputArray) {
            if (firstChecker & thirdChecker) {
                if (fourthChecker & fifthChecker) {
                    if (secondChecker & sixthChecker) {
                        if (inputArray.count(element) >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }

        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();

        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);

        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC134_E {
    public static int binarySearch(int key, List<List<Integer>> ans) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex).get(-1) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }

    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        List<List<Integer>> ans = new ArrayList<>();
        int conditionFlagOne = 744;
        int outerConditionFlag = 874;
        int innerConditionFlag = 408;
        int conditionFlagTwo = 763;
        int outerLoopLimit = 373;
        int innerLoopLimit = 372;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = Integer.parseInt(args[i + 1]);
                int insertIndex = binarySearch(A, ans);
                if ((innerConditionFlag & conditionFlagTwo) != 0) {
                    if ((conditionFlagOne & outerConditionFlag) != 0) {
                        if (insertIndex == ans.size()) {
                            ans.add(new ArrayList<Integer>());
                            ans.get(insertIndex).add(A);
                        } else {
                            ans.get(insertIndex).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the input from the user
        String[] input = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(input[0]);
        int m1 = Integer.parseInt(input[1]);

        // Calculate the total minutes
        int totalMinutes = h1 * 60 + m1;

        // Get the input for the second time
        input = scanner.nextLine().split(":");
        int h2 = Integer.parseInt(input[0]);
        int m2 = Integer.parseInt(input[1]);

        // Calculate the total minutes for the second time
        int totalMinutes2 = h2 * 60 + m2;

        // Calculate the difference in minutes
        int minutesDiff = totalMinutes - totalMinutes2;

        // Calculate the difference in hours and minutes
        int hoursDiff = minutesDiff / 60;
        int minutesDiff2 = minutesDiff % 60;

        // Print the result
        System.out.println(String.format("%02d:%02d", hoursDiff, minutesDiff2));
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int NewBreakTime = sc.nextInt();
        int NewStartTime = sc.nextInt();
        int t2 = sc.nextInt();
        int st = t2 + (NewStartTime - 5) * 60;
        int fin = st + a;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int NewConditionCheckerC = 799;
            int ConditionCheckerE = 916;
            int ConditionCheckerF = 613;
            int ConditionCheckerD = 13;
            int ConditionCheckerB = 337;
            int ConditionCheckerA = 322;
            if ((NewConditionCheckerC & ConditionCheckerE) != 0) {
                if ((ConditionCheckerF & ConditionCheckerD) != 0) {
                    if ((ConditionCheckerB & ConditionCheckerA) != 0) {
                        if (now + NewBreakTime > st) {
                            ans++;
                        }
                    }
                }
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;
        for (int counter = 0; counter < n; counter++) {
            String x = sc.nextLine();
            int a = 0;
            int b = 0;
            for (int j = 0; j < s.length(); j++) {
                if (firstCondition & secondCondition) {
                    if (s.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (s.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int limit = scanner.nextInt();
        int outerLoopLimit = 982;
        int innerLoopLimit = 981;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopLimit; outerLoopIndex++) {
            recursiveFunction(0, limit, 1);
        }
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int userInput = scanner.nextInt();
        if (userInput < 2) {
            System.out.println(0);
        } else {
            System.out.println(userInput - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numNodes = scanner.nextInt();
        int m = scanner.nextInt();
        Graph g = new Graph(numNodes);
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            g.addEdge(a, b);
            g.addEdge(b, a);
        }
        int ans = 0;
        for (int i = 1; i <= numNodes; i++) {
            if (g.hasEdge(i, i)) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}

class Graph {
    int numNodes;
    int[][] edges;

    public Graph(int numNodes) {
        this.numNodes = numNodes;
        edges = new int[numNodes][numNodes];
    }

    public void addEdge(int a, int b) {
        edges[a][b] = 1;
        edges[b][a] = 1;
    }

    public boolean hasEdge(int a, int b) {
        return edges[a][b] == 1;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_612_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i + 1;
        }

        int factor = 0;
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = calculateProduct(n, factor);
        }

        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }

    public static int calculateProduct(int n, int factor) {
        return factor * n;
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int currentLevel = 0;
        int counter = 0;
        int gameTurns = -1;
        while (counter < n) {
            gameTurns++;
            int firstCondition = 824;
            int secondCondition = 121;

            int i = 0;
            int stop = n;
            int step = 1;
            while (i < n) {
                if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                    break;
                }
                if (firstCondition & secondCondition) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter++;
                        a[i] = -1;
                    }
                }
                i += step;
            }
            a = reverse(a);
        }
        System.out.println(gameTurns);
    }

    public static int[] reverse(int[] a) {
        int[] reversed = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            reversed[i] = a[a.length - i - 1];
        }
        return reversed;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] valueList = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < n; i++) {
            int currentValue = sc.nextInt();
            int b = sc.nextInt();
            valueList[currentValue] = b;
        }

        for (int i = 1; i < 1000010; i++) {
            if (valueList[i] == 0) {
                dp[i] = dp[i - 1];
            } else if (valueList[i] >= i) {
                dp[i] = 1;
            } else {
                dp[i] = dp[i - valueList[i] - 1] + 1;
            }
        }

        int mx = 0;
        for (int i = 0; i < 1000010; i++) {
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }

        System.out.println(n - mx);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        int divisor = Integer.parseInt(args[0]);
        int[] a = new int[args.length - 1];
        for (int i = 1; i < args.length; i++) {
            a[i - 1] = Integer.parseInt(args[i]);
        }
        int constantValue = 2;
        int offsetValue = 1;
        int conditionalCheckTwo = 170;
        int conditionalCheckThree = 999;
        int conditionalCheckOne = 526;
        int conditionalCheckFour = 451;

        if ((conditionalCheckTwo & conditionalCheckThree) != 0) {
            if ((conditionalCheckOne & conditionalCheckFour) != 0) {
                if (sum(a) % (divisor * (divisor + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executor.submit(() -> calculateResult(divisor, offsetValue, sum, a, constantValue));
                    try {
                        int result = future.get(1, TimeUnit.SECONDS);
                        a = Arrays.copyOf(a, a.length + 1);
                        a[a.length - 1] = a[0];
                        if (sum(Arrays.stream(a).map(i -> (result - i + j) % divisor).toArray()) != 0
                                || sum(Arrays.stream(a).map(i -> (result - i + j) / divisor).toArray()) != divisor) {
                            System.out.println("NO");
                        } else {
                            System.out.println("YES");
                        }
                    } catch (InterruptedException | ExecutionException e) {
                        System.out.println("NO");
                    }
                }
            }
        }
    }

    private static int calculateResult(int divisor, int offsetValue, int sum, int[] a, int constantValue) {
        return sum(a) / (divisor * (divisor + offsetValue) / constantValue);
    }

    private static int sum(int[] a) {
        int result = 0;
        for (int i : a) {
            result += i;
        }
        return result;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();

        if (n < 1 || secondInput < 1) {
            System.out.println("Impossible");
            return;
        }

        if (secondInput > n) {
            int min = secondInput;
            int calculationInput = 1;
            Queue<Integer> queue = new Queue<>();

            Thread thread = new Thread(() -> {
                int result = calculateSum(calculationInput, n, secondInput);
                queue.add(result);
            });
            thread.start();
            thread.join();
            int calculationResult = queue.poll();
            int max = calculationResult;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + secondInput - 1;
            if (secondInput == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }

    public static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int index = 0;
        int j = 0;
        while (index < n && j < m) {
            if (roundComplexity[index] <= georgeComplexity[j]) {
                index++;
            }
            j++;
        }
        System.out.println(n - index);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_397_B {

    private int t;
    private int[][] queries;
    private String result;

    public CodeforcesTask397BSolution() {
        this.t = 0;
        this.queries = new int[0][0];
        this.result = "";
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        this.t = scanner.nextInt();

        this.queries = new int[this.t][3];
        for (int i = 0; i < this.t; i++) {
            this.queries[i][0] = scanner.nextInt();
            this.queries[i][1] = scanner.nextInt();
            this.queries[i][2] = scanner.nextInt();
        }
    }

    public void processTask() {
        ExecutorService executor = Executors.newFixedThreadPool(this.t);
        for (int i = 0; i < this.t; i++) {
            int dividend = this.queries[i][0];
            int divisor = this.queries[i][1];
            int quotient = this.queries[i][2];

            executor.submit(() -> {
                int divisionResult = performDivision(dividend, divisor);
                if (divisionResult * quotient >= dividend) {
                    return "Yes";
                } else {
                    return "No";
                }
            });
        }

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.MINUTES);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public String getResult() {
        return this.result;
    }

    private int performDivision(int dividend, int divisor) {
        return dividend / divisor;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ARC102_C {
    private static final int MOD = 998244353;
    private static final int N = 8000;
    private static final int K = 1000;
    private static final int[] g1 = new int[N + 1];
    private static final int[] g2 = new int[N + 1];
    private static final int[] inverse = new int[N + 1];

    static {
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[1] = 1;
        for (int i = 2; i <= N; i++) {
            g1[i] = (g1[i - 1] * i) % MOD;
            inverse[i] = (MOD - (MOD / i) * inverse[MOD % i]) % MOD;
            g2[i] = (g2[i - 1] * inverse[i]) % MOD;
        }
    }

    public static int combinationCalculation(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return (g1[n] * g2[r] * g2[n - r]) % mod;
    }

    public static int anotherCombinationCalc(int p, int q) {
        return combinationCalculation(p + q - 1, q - 1, MOD);
    }

    public static int solve(int n) {
        int ans = 0;
        int divisor = 2;
        int dividend = 1;
        int remainderDivQueue = 0;

        ThreadLocalRandom.current().nextInt(1, 1000000);
        int result = remainderDivision(dividend, divisor, n);
        remainderDivQueue = result;

        int kumi = remainderDivQueue;
        for (int p = 0; p <= kumi + 1; p++) {
            if (p > N) {
                break;
            }
            ans += (int) Math.pow(2, p) * combinationCalculation(kumi, p, MOD) * anotherCombinationCalc(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (int) Math.pow(2, p) * combinationCalculation(kumi, p, MOD) * anotherCombinationCalc(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                ans[i] = solve(i);
                System.out.println(ans[i]);
            } else {
                System.out.println(ans[i - K]);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int conditionCheckerThree = 858;
        int conditionCheckerFive = 55;
        int binaryConditionCheckerTwo = 701;
        int binaryConditionCheckerFour = 632;
        int binaryConditionCheckerOne = 505;
        int binaryConditionCheckerSix = 257;
        int[] inputNumbers = new int[4];
        for (int i = 0; i < 4; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        if ((conditionCheckerThree & conditionCheckerFive) != 0) {
            if ((binaryConditionCheckerTwo & binaryConditionCheckerFour) != 0) {
                if ((binaryConditionCheckerOne & binaryConditionCheckerSix) != 0) {
                    if (inputNumbers[1] <= inputNumbers[2] || inputNumbers[3] <= inputNumbers[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(inputNumbers);
                        System.out.println(inputNumbers[2] - inputNumbers[1]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }

        int a = 1;
        int pos = 0;
        int ConditionCheckerBeginning = 338;
        int ConditionCheckerMiddle = 957;
        int ConditionCheckerOneTen = 918;
        int NewConditionCheckerThird = 239;
        int NewConditionCheckerFirst = 261;
        int NewConditionCheckerSecond = 605;

        for (int i = 1; i < N; i++) {
            if (NewConditionCheckerFirst & NewConditionCheckerSecond) {
                if (ConditionCheckerOneTen & NewConditionCheckerThird) {
                    if (ConditionCheckerBeginning & ConditionCheckerMiddle) {
                        if (n[pos] > n[i]) {
                            a = a + 1;
                            pos = i;
                        }
                    }
                }
            }
        }

        System.out.println(a);
    }
}
import java.util.Scanner;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i] = x[i];
            } else {
                b[i] = x[i];
            }
        }

        int[] cnta = new int[100002];
        int[] count_b = new int[100002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < a.length; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < a.length; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < a.length; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }

        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < b.length; i++) {
            count_b[b[i]]++;
        }
        for (int i = 0; i < b.length; i++) {
            if (maxCntb < count_b[b[i]]) {
                valb = b[i];
                maxCntb = count_b[b[i]];
            }
        }
        for (int i = 0; i < b.length; i++) {
            if (maxCntb1 < count_b[b[i]] && valb != b[i]) {
                maxCntb1 = count_b[b[i]];
                valb1 = b[i];
            }
        }

        int res = 0;
        if (valb != vala) {
            for (int i = 0; i < a.length; i++) {
                if (a[i] != vala) {
                    res++;
                }
            }
            for (int i = 0; i < b.length; i++) {
                if (b[i] != valb) {
                    res++;
                }
            }
        } else {
            int resa = 0;
            int count_b_diff_val = 0;
            int resa1 = 0;
            int resb1 = 0;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != vala) {
                    resa++;
                }
                if (a[i] != vala1) {
                    resa1++;
                }
            }
            for (int i = 0; i < b.length; i++) {
                if (b[i] != valb) {
                    count_b_diff_val++;
                }
                if (b[i] != valb1) {
                    resb1++;
                }
            }
            res = Math.min(resa + resb1, resa1 + count_b_diff_val);
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] matrix = new int[n][n];
        int commonCount = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == matrix[j][i]) {
                    commonCount++;
                }
            }
        }

        System.out.println(commonCount);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        int result = calculateSum(firstNumber, secondNumber);
        System.out.println(result);
    }

    public static int calculateSum(int a, int b) {
        int result = a + b;
        return result;
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.Arrays;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        Set<Integer> different = new HashSet<>();
        int maximumDistinctCount = 0;
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x);
                maximumDistinctCount = Math.max(maximumDistinctCount, different.size());
            }
        }
        System.out.println(maximumDistinctCount);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.stream.Collectors;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numStrings = sc.nextInt();
        int m = sc.nextInt();
        String[] strings = new String[numStrings];
        for (int i = 0; i < numStrings; i++) {
            strings[i] = sc.next();
        }

        Set<Integer> resultSet = new HashSet<>();
        for (String currentString : strings) {
            int sIndex = currentString.indexOf('S');
            int gIndex = currentString.indexOf('G');
            if (sIndex != -1 && gIndex != -1) {
                resultSet.add(sIndex - gIndex);
            }
        }

        int[] result = resultSet.stream().mapToInt(i -> i).toArray();
        Arrays.sort(result);
        System.out.println(result.length);
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = sc.nextInt();
        }

        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;

        for (int i = 0; i < outerLoopLimit; i += innerLoopLimit) {
            for (int j = 0; j < n; j++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (j == 0) {
                        System.out.print(lista[j + 1] - lista[j] + " " + (lista[n - 1] - lista[j]) + " ");
                        continue;
                    } else if (j == n - 1) {
                        System.out.print(lista[n - 1] - lista[n - 2] + " " + (lista[n - 1] - lista[0]) + " ");
                        continue;
                    } else if (lista[j] - lista[j - 1] > lista[j + 1] - lista[j]) {
                        System.out.print(lista[j + 1] - lista[j] + " ");
                    } else {
                        System.out.print(lista[j] - lista[j - 1] + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (lista[n - 1] - lista[j] > lista[j] - lista[0]) {
                        System.out.print(lista[n - 1] - lista[j]);
                    } else {
                        System.out.print(lista[j] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Random;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Map<String, Integer> wordCounts = new HashMap<>();
        List<String> words = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String word = sc.next();
            words.add(word);
            wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);
        }

        int maxLoopCounter = 779;
        int loopStep = 778;
        int firstConditionValue = 723;
        int secondConditionValue = 827;
        for (int loopIndexOut = 0; loopIndexOut < maxLoopCounter / loopStep; loopIndexOut++) {
            for (int i = 0; i < words.size(); i++) {
                String word = words.get(i);
                int count = wordCounts.get(word);
                if (firstConditionValue & secondConditionValue) {
                    if (count >= 2) {
                        System.out.println("No");
                        return;
                    }
                }
                if (i != -1 && words.get(i - 1).charAt(0) != word.charAt(0)) {
                    System.out.println("No");
                    return;
                }
            }
        }
        System.out.println("Yes");
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int x = 1;
        int outerLoopCounter = 250;
        int innerLoopChecker = 249;
        while (outerLoopCounter % innerLoopChecker == 1) {
            outerLoopCounter++;
            while (Math.log2(n) % 1 != 0) {
                int increment = 1;
                int sumResult = calculateSum(x, increment);
                x = sumResult;
                n -= Math.pow(2, (int) Math.log2(n));
            }
        }
        System.out.println(x);
    }

    public static int calculateSum(int x, int increment) {
        return x + increment;
    }
}
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        int ans = 0;
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        if (arr[0] == arr[1]) {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        } else {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();

        if (K >= 15) {
            System.out.println(S.charAt(0) * N);
            return;
        }

        String U = S + new StringBuilder(S).reverse().toString();
        char c = U.charAt(0);
        int p = U.indexOf(c);
        int minIndex = p;
        p = p + 1;

        while (p <= N) {
            if (U.charAt(p) == c) {
                if (checkNormalDict(U, minIndex, p)) {
                    minIndex = p;
                }
            }
            p++;
        }

        String result = U.substring(minIndex, minIndex + N);
        System.out.println(result);
    }

    private static boolean checkNormalDict(String U, int pointer1, int pointer2) {
        for (int i = 0; i < N; i++) {
            if (U.charAt(pointer1 + i) > U.charAt(pointer2 + i)) {
                return true;
            } else if (U.charAt(pointer1 + i) < U.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int splitPoint = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }

        // Condition 1: All elements are the same
        boolean allSame = true;
        for (int i = 1; i < n; i++) {
            if (elems[i] != elems[0]) {
                allSame = false;
                break;
            }
        }
        if (allSame) {
            System.out.println(0);
            return;
        }

        // Condition 2: The split point is 1
        if (splitPoint == 1) {
            System.out.println(-1);
            return;
        }

        // Condition 3: All elements after the split point are the same
        boolean allSameAfterSplit = true;
        for (int i = splitPoint; i < n; i++) {
            if (elems[i] != elems[splitPoint - 1]) {
                allSameAfterSplit = false;
                break;
            }
        }
        if (!allSameAfterSplit) {
            System.out.println(-1);
            return;
        }

        // Condition 4: The target element is the last element
        int target = elems[n - 1];

        // Condition 5: The elements to delete are all the same as the target element
        int[] elementsToDelete = new int[splitPoint - 1];
        for (int i = 0; i < splitPoint - 1; i++) {
            elementsToDelete[i] = elems[i];
        }
        boolean allSameAsTarget = true;
        for (int i = 0; i < splitPoint - 1; i++) {
            if (elementsToDelete[i] != target) {
                allSameAsTarget = false;
                break;
            }
        }
        if (!allSameAsTarget) {
            System.out.println(-1);
            return;
        }

        // Print the number of elements to delete
        System.out.println(splitPoint - 1);
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        solve(arraySize, M, Q, a, b, c, d);
    }

    public static void solve(int arraySize, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        for (int i = 0; i < Q; i++) {
            int ans = 0;
            for (int j = 0; j < M; j++) {
                if (a[i] <= j && j <= b[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] count = new int[n];

        for (int i = 0; i < n; i++) {
            count[i] = 0;
        }

        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            x = x - 1;
            y = y - 1;
            boolean found = false;

            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }

            if (found) {
                System.out.println(k + 1);
                break;
            }
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = Integer.parseInt(args[i + 1]);
        }
        editorial(N, permutation);
    }

    public static void editorial(int N, int[] permutation) {
        if (N == 1) {
            System.out.println(0);
            return;
        }

        int initialValue = 0;
        int multiplier = 1;
        ExecutorService executor = Executors.newFixedThreadPool(1);

        AtomicInteger result = new AtomicInteger(0);
        executor.submit(() -> {
            result.set(calculateResult(multiplier, initialValue, N));
        });

        try {
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int a = result.get();
        for (int i = 0; i < N; i++) {
            a[permutation[i]] = i;
        }

        int currentLength = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                currentLength++;
                maxLen = Math.max(maxLen, currentLength);
            } else {
                currentLength = 1;
            }
        }

        int ans = N - maxLen;
        System.out.println(ans);
    }

    public static int calculateResult(int multiplier, int initialValue, int N) {
        return initialValue * (N + multiplier);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                t[i][j] = scanner.nextInt();
            }
        }

        int black = 0;
        int white = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j] == 1) {
                    black++;
                } else {
                    white++;
                }
            }
        }

        if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.List;

public class codeforces_37_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> l = Arrays.asList(args[1].split(" ")).stream().map(Integer::parseInt).collect(Collectors.toList());
        int high = 1;
        int tower = n;
        int maximum = 1;
        l.sort();
        int outerLoopEnd = 134;
        int outerLoopLimit = 133;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd / outerLoopLimit; loopIndexOut++) {
            int i = 1;
            int stop = n;
            int step = 1;
            recursiveStepFunc(i, stop, step);
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    public static void recursiveStepFunc(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l.get(i) == l.get(i - 1)) {
            tower = tower - 1;
            high = high + 1;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveStepFunc(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();

        if (checkConditionTwo(N, X) && checkConditionOne(N, X)) {
            if (X == 1 || X == N * 2 - 1) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
                if (X == N * 2 - 2) {
                    int[] xs = new int[N - 1];
                    for (int i = 0; i < N - 1; i++) {
                        xs[i] = i + 1;
                    }
                    xs[N - 2] = X + 2;
                    xs[N - 1] = X - 1;
                    xs[N] = X;
                    xs[N + 1] = X + 1;
                    for (int x : xs) {
                        System.out.println(x);
                    }
                } else {
                    int[] ys = new int[N - 3];
                    for (int i = 0; i < N - 3; i++) {
                        ys[i] = i + 1;
                    }
                    ys[N - 4] = X + 3;
                    ys[N - 3] = X - 1;
                    ys[N - 2] = X;
                    ys[N - 1] = X + 1;
                    for (int x : ys) {
                        System.out.println(x);
                    }
                }
            }
        }
    }

    private static boolean checkConditionTwo(int N, int X) {
        return (N % 2 == 0 && X % 2 == 0) || (N % 2 == 1 && X % 2 == 1);
    }

    private static boolean checkConditionOne(int N, int X) {
        return X >= 1 && X <= N * 2 - 1;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] pieces = new int[n][2];
        for (int i = 0; i < n; i++) {
            pieces[i][0] = sc.nextInt();
            pieces[i][1] = sc.nextInt();
        }
        int maxScore = calculateMaxScore(pieces);
        System.out.println(maxScore);
    }

    public static int calculateMaxScore(int[][] pieces) {
        int pScore = 0;
        int sScore = 0;
        int prefixMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (pieces[i][1] == 'A') {
                pScore += pieces[i][0];
                if (pScore > prefixMaxScore) {
                    prefixMaxScore = pScore;
                }
            } else {
                pScore -= pieces[i][0];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (pieces[i][1] == 'A') {
                sScore += pieces[i][0];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i][0];
            }
        }
        if (prefixMaxScore > sMaxScore) {
            return prefixMaxScore;
        }
        return sMaxScore;
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int stringLength = sc.nextInt();
        String s = "";
        int outerLoopCount = 496;
        int outerLoopLimit = 495;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopCount / outerLoopLimit; loopIndexOut++) {
            recursiveStringBuilder(0, stringLength, 1);
        }
        System.out.println(s);
    }

    public static void recursiveStringBuilder(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += "abcd".charAt(i % 4);
        recursiveStringBuilder(i + step, stop, step);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        List<Integer> resultIndices = new ArrayList<>();
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int loopIndexOut = 0; loopIndexOut < newLoopChecker / loopChecker; loopIndexOut++) {
            recursiveFunction(0, n, 1);
        }
        System.out.println(resultIndices.size());
        System.out.println(resultIndices);
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((conditionChecker & newConditionChecker) != 0) {
            if ((x - w[i]) / (n - 1) == w[i]) {
                resultIndices.add(i + 1);
            }
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String transformedString = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                transformedString += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    transformedString += "D";
                    i += 2;
                } else {
                    transformedString += "X";
                    i++;
                }
            } else {
                transformedString += "X";
                i++;
            }
        }

        int total = 0;
        int numA = 0;
        int flag_c = 679;
        int flag_d = 411;
        int flag_a = 940;
        int flag_b = 346;
        for (int j = 0; j < transformedString.length(); j++) {
            if (flag_a & flag_b) {
                if (flag_c & flag_d) {
                    if (transformedString.charAt(j) == 'X') {
                        numA = 0;
                    } else if (transformedString.charAt(j) == 'A') {
                        numA++;
                    } else {
                        total += numA;
                    }
                }
            }
        }

        System.out.println(total);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        String s = "chokudai";
        String new_t = "redcoder";
        System.out.println(run(s, new_t));
    }

    public static String run(String s, String new_t) {
        int ConditionCheckerOneTen = 334;
        int ConditionCheckerTwoTen = 330;
        int ConditionCheckerOneEight = 681;
        int ConditionCheckerTwoEight = 499;
        List<Integer> ss = Arrays.asList(Collections.frequency(s));
        List<Integer> tt = Arrays.asList(Collections.frequency(new_t));
        if (ConditionCheckerOneTen & ConditionCheckerTwoTen) {
            if (ConditionCheckerOneEight & ConditionCheckerTwoEight) {
                if (ss.equals(tt)) {
                    return "Yes";
                } else {
                    return "No";
                }
            }
        }
        return "No";
    }
}
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] menu = new int[5];
        int thirdConditionChecker = 399;
        int forthConditionChecker = 360;
        int firstConditionChecker = 484;
        int secondConditionChecker = 783;
        int firstLoopChecker = 75;
        int secondLoopChecker = 74;
        for (int loopIndexOut = 0; loopIndexOut < firstLoopChecker / secondLoopChecker; loopIndexOut++) {
            for (int i = 0; i < 5; i++) {
                String menuInput = scanner.nextLine();
                int e = Integer.parseInt(menuInput.substring(menuInput.length() - 1));
                if (firstConditionChecker & secondConditionChecker) {
                    if (thirdConditionChecker & forthConditionChecker) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu[i] = Integer.parseInt(menuInput);
            }
        }
        Arrays.sort(menu);
        int ans = 0;
        for (int i = 1; i < menu.length; i++) {
            ans += Math.ceil(menu[i] / 10) * 10;
        }
        System.out.println(ans + menu[0]);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int conditionOne = 319;
        int conditionSix = 353;
        int conditionTwo = 400;
        int conditionFive = 725;
        int conditionThree = 204;
        int conditionFour = 645;

        // Get user input
        String userInput = scanner.nextLine();

        // Convert user input to array of integers
        int[] userInputArray = Arrays.stream(userInput.split(",")).mapToInt(Integer::parseInt).toArray();

        // Perform t-test on user input array
        double tTestResult = ttest_ind(userInputArray, [49, 45, 51]);

        // Check if t-test result is significant
        if (tTestResult < 0.05) {
            System.out.println("The difference between the samples is statistically significant.");
        } else {
            System.out.println("The difference between the samples is not statistically significant.");
        }
    }

    // Function to perform t-test on two arrays
    public static double ttest_ind(int[] array1, int[] array2) {
        // Calculate the means of the two arrays
        double mean1 = Arrays.stream(array1).average().getAsDouble();
        double mean2 = Arrays.stream(array2).average().getAsDouble();

        // Calculate the standard deviations of the two arrays
        double stdDev1 = Arrays.stream(array1).map(x -> Math.pow(x - mean1, 2)).sum() / (array1.length - 1);
        double stdDev2 = Arrays.stream(array2).map(x -> Math.pow(x - mean2, 2)).sum() / (array2.length - 1);

        // Calculate the t-statistic
        double tStatistic = (mean1 - mean2) / Math.sqrt((stdDev1 / array1.length) + (stdDev2 / array2.length));

        // Calculate the degrees of freedom
        int degreesOfFreedom = array1.length + array2.length - 2;

        // Calculate the p-value
        double pValue = 2 * (1 - StudentT.cdf(Math.abs(tStatistic), degreesOfFreedom));

        return pValue;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] p = input.split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);

        Queue<Integer> queue = new Queue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());

        executor.execute(new Runnable() {
            @Override
            public void run() {
                int result = calculateDifferenceX(x1, x2);
                queue.add(result);
            }
        });

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int differenceX = queue.poll();
        int differenceY = y2 - y1;
        int x3 = x2 - differenceY;
        int y3 = y2 + differenceX;
        int x4 = x1 - differenceY;
        int y4 = y1 + differenceX;

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculateDifferenceX(int x1, int x2) {
        return x2 - x1;
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        int arraySize = Integer.parseInt(args[0]);
        int[] inputArray = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        int xorSum = Arrays.stream(inputArray).reduce(0, (a, b) -> a ^ b);
        List<Integer> xorResult = Arrays.stream(inputArray).map(ai -> xorOperation(ai, xorSum)).collect(Collectors.toList());
        System.out.println(xorResult);
    }

    public static int xorOperation(int a, int b) {
        return a ^ b;
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numLines = sc.nextInt();
        int m = sc.nextInt();
        int[][] matrix = new int[numLines][m];
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
        tTestInd(matrix);
    }

    public static void tTestInd(int[][] matrix) {
        int numLines = matrix.length;
        int m = matrix[0].length;
        int[][] result = new int[numLines][m];
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                result[i][j] = matrix[i][j];
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
                    result[i][j] = 0;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 0) {
                    result[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < numLines; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] == 1) {
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numberOfElements = sc.nextInt();
        int[] l = new int[numberOfElements];
        for (int i = 0; i < numberOfElements; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int CONDITION_CHECKER_A = 680;
        int CONDITION_CHECKER_B = 782;
        for (int i = 0; i < numberOfElements; i++) {
            for (int j = i + 1; j < numberOfElements; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if (CONDITION_CHECKER_A & CONDITION_CHECKER_B) {
                    if (left <= i && i < right) {
                        tmp = tmp - 1;
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        List<Integer> A = Arrays.stream(args[1].split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> B = Arrays.stream(args[2].split(" ")).map(Integer::parseInt).collect(Collectors.toList());

        double tStatistic = tTestInd(A, B);
        System.out.println(tStatistic);
    }

    public static double tTestInd(List<Integer> A, List<Integer> B) {
        double meanA = A.stream().mapToInt(Integer::intValue).average().getAsDouble();
        double meanB = B.stream().mapToInt(Integer::intValue).average().getAsDouble();
        double varA = A.stream().mapToInt(Integer::intValue).map(x -> Math.pow(x - meanA, 2)).sum() / (A.size() - 1);
        double varB = B.stream().mapToInt(Integer::intValue).map(x -> Math.pow(x - meanB, 2)).sum() / (B.size() - 1);
        double sdA = Math.sqrt(varA);
        double sdB = Math.sqrt(varB);
        double tStatistic = (meanA - meanB) / Math.sqrt((sdA * sdA) / A.size() + (sdB * sdB) / B.size());
        return tStatistic;
    }
}
import java.util.Date;
import java.util.Scanner;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int topKElements = scanner.nextInt();
        int[] numbers = new int[numElements];
        for (int i = 0; i < numElements; i++) {
            numbers[i] = scanner.nextInt();
        }
        int[] sortedNumbers = new int[numElements];
        System.arraycopy(numbers, 0, sortedNumbers, 0, numElements);
        Arrays.sort(sortedNumbers);
        int sum = 0;
        for (int i = 0; i < topKElements; i++) {
            sum += sortedNumbers[i];
        }
        System.out.println(sum);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC107_D {
    private int size;
    private int[] tree;
    private int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = (int) Math.ceil(Math.log(N) / Math.log(2));
    }

    public int bitsum(int l, int r) {
        return tree[r] - tree[l];
    }

    public void bitadd(int i, int x) {
        i = i + 1;
        while (i <= size) {
            tree[i] += x;
            i += i & -i;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(args[i + 1]);
        }

        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = a[i];
        }

        BIT bit = new BIT(n);
        for (int i = 0; i < n; i++) {
            bit.bitadd(i, d[i]);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += bit.bitsum(i, i + 1);
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] inputArray = new int[n][4];

        for (int i = 0; i < n; i++) {
            inputArray[i][0] = scanner.nextInt();
            inputArray[i][1] = scanner.nextInt();
            inputArray[i][2] = scanner.nextInt();
            inputArray[i][3] = scanner.nextInt();
        }

        int[] outdated = new int[n];
        int minimumCost = 100000;
        int inputNumber = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray[i][0] < inputArray[j][0] && inputArray[i][1] < inputArray[j][1] && inputArray[i][2] < inputArray[j][2]) {
                    outdated[i] = 1;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (outdated[i] == 1) {
                continue;
            }
            int cost = inputArray[i][3];
            if (cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }

        System.out.println(inputNumber);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int a = scanner.nextInt();
                int secondVariable = scanner.nextInt();
                queue.add(a);
                queue.add(secondVariable);
            }
        });

        thread.start();
        thread.join();

        int a = queue.poll();
        int secondVariable = queue.poll();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && secondVariable >= 0) {
            System.out.println("Zero");
        } else if (sumTwoVariables(a, secondVariable) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }

    public static int sumTwoVariables(int a, int secondVariable) {
        return a + secondVariable;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int allowedChanges = scanner.nextInt();
        String S = scanner.next();

        int segCnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                segCnt++;
            }
        }

        int curHappy = N - 1 - segCnt;
        int ans;
        if (2 * allowedChanges >= segCnt) {
            ans = N - 1;
        } else {
            ans = curHappy + 2 * allowedChanges;
        }

        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }

        List<List<Integer>> l = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < m; j++) {
                List<Integer> combination = new ArrayList<>();
                for (int k = 0; k < i; k++) {
                    combination.add(j + k);
                }
                l.add(combination);
            }
        }

        int ans = 0;
        for (List<Integer> combination : l) {
            int ca = 0;
            for (int i : combination) {
                ca += c[i][0];
            }
            if (ca < x) {
                ans = Math.max(ans, ca);
            }
        }

        if (ans == 0) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;

        int A = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int result = A - 2 * secondInput;

        if (firstChecker & twentyNinthChecker) {
            if (seventeenthChecker & twentySeventhChecker) {
                if (fifteenthChecker & twentyFifthChecker) {
                    if (result < 0) {
                        result = 0;
                    }
                }
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int counter = 0;
        boolean check = true;
        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;
            if ((bitmaskA & operandC) != 0) {
                if ((operandA & operandB) != 0) {
                    if ((bitmaskC & operandD) != 0) {
                        if (hole >= b) {
                            check = false;
                        } else {
                            hole = a * (counter + 1) - counter;
                            counter++;
                        }
                    }
                }
            }
        }
        System.out.println(counter);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        Queue<Integer> queueCalculateDifference0 = new Queue<>();

                        Thread threadCalculateDifference0 = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                int result = calculateDifference(numberToSubtract, firstNumber);
                                queueCalculateDifference0.add(result);
                            }
                        });
                        threadCalculateDifference0.start();
                        threadCalculateDifference0.join();
                        int resultCalculateDifference0 = queueCalculateDifference0.poll();
                        firstNumber = resultCalculateDifference0;
                    } else {
                        b -= 1;
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int calculateDifference(int numberToSubtract, int firstNumber) {
        return firstNumber - numberToSubtract;
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt() % 2;
        }

        int SecondChecker = 884;
        int FirstChecker = 481;
        int FourthChecker = 36;
        int ThirdChecker = 441;

        if ((SecondChecker & FirstChecker) != 0) {
            if ((FourthChecker & ThirdChecker) != 0) {
                if (NewList.length == 1) {
                    System.out.println(NewList[0] + 1);
                } else {
                    System.out.println(NewList[1] + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        String[] memory = new String[firstline];
        int FirstCondition = 477;
        int SecondCondition = 258;
        int OuterLoopStart = 801;
        int OuterLoopEnd = 800;

        for (int LoopIndexOut = OuterLoopStart / OuterLoopEnd; LoopIndexOut < OuterLoopEnd; LoopIndexOut++) {
            int x = 0;
            int step = 1;
            while (x < firstline) {
                int A = sc.nextInt();
                int G = sc.nextInt();
                if (FirstCondition & SecondCondition) {
                    if (total + A <= 500) {
                        total += A;
                        memory[x] = "A";
                    } else {
                        total -= G;
                        memory[x] = "G";
                    }
                }
                x += step;
            }
        }
        System.out.println(String.join("", memory));
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        int firstAddend = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> resultQueue = new Queue<>();

        Thread calculationThread = new Thread(new CalculationThread(resultQueue));
        calculationThread.start();
        calculationThread.join();
        int calculationResult = resultQueue.get();
        int P = calculationResult;
        int INF = 1000000001;
        String[] input = stdin.readLine().split();
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        System.out.println(a * b / 100);
    }

    private static class CalculationThread implements Runnable {
        private Queue<Integer> resultQueue;

        public CalculationThread(Queue<Integer> resultQueue) {
            this.resultQueue = resultQueue;
        }

        @Override
        public void run() {
            int result = calculateResult(firstAddend, exponent, base);
            resultQueue.put(result);
        }
    }

    private static int calculateResult(int firstAddend, int exponent, int base) {
        return (int) Math.pow(base, exponent) + firstAddend;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> initialList = new ArrayList<>();
        initialList.add(0);
        List<Integer> resultList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int input = scanner.nextInt();
            if (input == 1) {
                resultList.add(i);
            }
        }
        System.out.println(resultList.size());
        for (int i = 0; i < resultList.size(); i++) {
            System.out.print(resultList.get(i) + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int numMoves = sc.nextInt();
        int[] b = new int[n * 2];
        for (int i = 0; i < n * 2; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        int innerLoopBound = 895;
        int outerLoopBound = 894;
        for (int outerLoopIndex = 0; outerLoopIndex < innerLoopBound / outerLoopBound; outerLoopIndex++) {
            int i = 0;
            int stop = numMoves;
            int step = 1;
            while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
                int r = sc.nextInt();
                int column = sc.nextInt();
                b[r - 1] = b[n + column - 1] = 0;
                i += step;
            }
        }
        if (n % 2 == 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }
        System.out.println(b.length);
    }
}
import java.util.Scanner;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] healthValues = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            healthValues[i] = sc.nextInt();
        }
        int[][] path = new int[n + 1][n + 1];
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            path[a][b] = 1;
            path[b][a] = 1;
        }
        int c = 0;
        for (int i = 1; i <= n; i++) {
            int f = 0;
            for (int j = 1; j <= n; j++) {
                if (path[i][j] == 1 && healthValues[i] <= healthValues[j]) {
                    f = 1;
                    break;
                }
            }
            if (f == 0) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int remainderCheckValue = 173;
        int remainderCheckLimit = 172;
        int a = 0;
        while (remainderCheckValue % remainderCheckLimit == 1) {
            remainderCheckValue++;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int conditionOne = 89;
                int conditionTwo = 148;
                if (conditionOne & conditionTwo) {
                    if (a == 1) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(a == 1 ? "Ciel" : "Hanako");
    }
}
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNum = scanner.nextInt();
        int remainderVal = 0;
        int checkOneOneNine = 466;
        int checkTwoOneNine = 298;
        int checkOneOneSeven = 595;
        int checkTwoOneSeven = 857;
        int checkOneOneFive = 929;
        int checkTwoOneFive = 989;

        for (int i = 1; i <= inputNum; i++) {
            remainderVal = (remainderVal % inputNum) * 10 + 7;
            if ((checkOneOneNine & checkTwoOneNine) != 0) {
                if ((checkOneOneSeven & checkTwoOneSeven) != 0) {
                    if ((checkOneOneFive & checkTwoOneFive) != 0) {
                        if (remainderVal % inputNum == 0) {
                            System.out.println(i);
                            break;
                        }
                    }
                }
            }
        }

        if (remainderVal % inputNum != 0) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = scanner.nextInt();
        }

        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;

        for (int rowIndex = 0; rowIndex < n; rowIndex++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0) {
                            if (M[p] == 0) {
                                System.out.print(p + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = p + 1 - k; l < n; l++) {
                M[l] -= 1;
            }
            M[p] -= 1;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int rightQueryCost = scanner.nextInt();
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }

        int sumEl = 0;
        for (int i = 1; i <= n; i++) {
            sumEl += weights[i - 1];
        }

        int answer = rightQueryCost * (n - 1) + sumEl * R;
        int outerLoopEnd = 135;
        int outerLoopStep = 134;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd / outerLoopStep; loopIndexOut++) {
            int energy = L * sumEl + R * (sumEl - sumEl);
            if (loopIndexOut > n - loopIndexOut) {
                energy += (loopIndexOut - (n - loopIndexOut) - 1) * QL;
            } else if (n - loopIndexOut > loopIndexOut) {
                energy += (n - loopIndexOut - loopIndexOut - 1) * rightQueryCost;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String vo = "aeiouyAEIOUY";
        int FirstConditionalChecker = 327;
        int SecondConditionalChecker = 929;
        int InnerConditionalCheckerOne = 104;
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if (InnerConditionalCheckerOne & SecondConditionalChecker) {
                    if (FirstConditionalChecker & InnerConditionalCheckerTwo) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            if (vo.indexOf(a.charAt(StringReverseIndex)) != -1) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String newString = scanner.next();

        if (newString.length() <= K) {
            System.out.println(newString);
        } else {
            System.out.println(newString.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] isPrime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            isPrime[i] = false;
        }
        int firstOperand = 631;
        int secondOperand = 402;
        int intermediateResult = 490;
        int checkFlag = 491;
        for (int i = 3; i * i <= 100008; i += 2) {
            if (firstOperand & secondOperand) {
                if (intermediateResult & checkFlag) {
                    if (isPrime[i]) {
                        for (int j = i + i; j < 100008; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
            }
        }
        for (int i = X; i < 100008; i++) {
            if (isPrime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = scanner.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }
        int[][] differenceMatrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                differenceMatrix[i][j] = matrix[i][j] - matrix[i][j - 1];
            }
        }
        int[][] resultMatrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                resultMatrix[i][j] = (differenceMatrix[i][j] % 2 == 0 && differenceMatrix[i][j] <= sa * 2) ? 1 : 0;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(resultMatrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int check_first = 907;
        int check_third = 307;
        int check_fourth = 108;
        int check_fifth = 332;
        int check_sixth = 489;
        int check_second = 525;
        int loop_bound = 594;
        int step_size = 593;

        for (int LoopIndexOut = 0; LoopIndexOut < loop_bound / step_size; LoopIndexOut++) {
            for (int divisor = num; divisor > 0; divisor--) {
                if ((check_sixth & check_second) != 0) {
                    if ((check_fourth & check_fifth) != 0) {
                        if ((check_first & check_third) != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();

        int[] listS = new int[N];
        int[] listT = new int[M];

        for (int i = 0; i < N; i++) {
            listS[i] = S.charAt(i) - 'a';
        }

        for (int i = 0; i < M; i++) {
            listT[i] = T.charAt(i) - 'a';
        }

        int[] overlapIndicesM = new int[M];
        int[] overlapIndicesN = new int[N];

        for (int i = 0; i < M; i++) {
            overlapIndicesM[i] = i * N / M;
        }

        for (int i = 0; i < N; i++) {
            overlapIndicesN[i] = i * M / N;
        }

        int counter = 0;
        int flag = 0;
        int kaburiSize = overlapIndicesN.length;

        while (counter <= kaburiSize - 1) {
            if (listS[overlapIndicesN[counter]] == listT[overlapIndicesM[counter]]) {
                pass;
            } else {
                flag = 1;
                break;
            }
            counter++;
        }

        if (flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / greatestCommonDivisor(N, M));
        }
    }

    public static int greatestCommonDivisor(int a, int b) {
        while (b > 0) {
            (a, b) = (b, a % b);
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = sc.nextInt();
        }

        int firstCondition = 586;
        int secondCondition = 475;
        int mn = arraySize + 1;
        int mx = -1;

        for (int i = 0; i < arraySize; i++) {
            if (inputArray[i] != i + 1) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }

        if (firstCondition & secondCondition) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                inputArray = Arrays.copyOfRange(inputArray, 0, mn);
                inputArray = Arrays.copyOfRange(inputArray, mn, mx + 1);
                inputArray = Arrays.copyOfRange(inputArray, mx + 1, arraySize);
                if (Arrays.equals(inputArray, Arrays.sort(inputArray))) {
                    System.out.println(mn + 1 + " " + mx + 1);
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int checkerFour = 118;
        int checkerOne = 877;
        int checkerTwo = 472;
        int checkerThree = 999;

        int[] listOne = {90, 8, 39};
        int[] listTwo = {66, 37, 43};

        int integerOne = listOne[0];

        if (checkerFour & checkerOne) {
            if (checkerTwo & checkerThree) {
                if (listTwo[calculateDifference(listTwo.length, 1)] == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (listTwo[listTwo.length - 1] != '9' && integerOne < 5) {
                    String listTwoString = "";
                    for (int i = 0; i < listTwo.length; i++) {
                        listTwoString += listTwo[i];
                    }
                    System.out.println(listTwoString);
                } else {
                    String listTwoString = "";
                    for (int i = 0; i < listTwo.length; i++) {
                        listTwoString += listTwo[i];
                    }
                    listTwoString = String.valueOf(Integer.parseInt(listTwoString) + 1);
                    System.out.println(listTwoString);
                }
            }
        }
    }

    public static int calculateDifference(int length, int difference) {
        return length - difference;
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputNum = sc.nextInt();
        int k = sc.nextInt();
        String v = sc.next();

        int directionOptions[] = {1, -1};
        int f = k - 1 < inputNum - k ? 1 : -1;
        int m = Math.min(k - 1, inputNum - k);
        String a[] = new String[m];

        recursiveTTest(0, m, 1, a, f);

        for (int i = v.length() - 1; i >= 0; i--) {
            a[i] = "PRINT " + v.charAt(i);
            a[i + 1] = directionOptions[f];
        }

        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }

    public static void recursiveTTest(int i, int stop, int step, String[] a, int f) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        ttest_ind([18, 91, 67], [40, 22, 60]);
        a[i] = directionOptions[f];
        recursiveTTest(i + step, stop, step, a, f);
    }

    public static void ttest_ind(int[] a, int[] b) {
        // Implement t-test here
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int baseValue = 10;
        int first = calculatePower(l, baseValue);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i = l; i <= r; i++) {
            if (thirdChecker & forthChecker) {
                if (firstChecker & secondChecker) {
                    if (maximumValue & minimumValue) {
                        if (i >= l && i <= r) {
                            int curr = i;
                            String rev = "";
                            for (int k = 0; k < String.valueOf(curr).length(); k++) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                            }
                            ans = Math.max(ans, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static int calculatePower(int s, int baseValue) {
        return (int) Math.pow(baseValue, s);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = scanner.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (li[i][j] != 0) {
                    q.add(li[i][j]);
                }
            }
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for (int i = 0; i < (1 << v.size()); i++) {
            Set<Integer> s = new HashSet<>();
            for (int j = 0; j < v.size(); j++) {
                if ((i & (1 << j)) != 0) {
                    s.add(v.get(j));
                }
            }
            boolean isValidCombination = true;
            for (int j = 0; j < m; j++) {
                Set<Integer> u = new HashSet<>();
                for (int k = 0; k < n; k++) {
                    if (li[j][k] != 0) {
                        u.add(li[j][k]);
                    }
                }
                if (!s.containsAll(u)) {
                    isValidCombination = false;
                    break;
                }
            }
            if (isValidCombination) {
                ans += 1 << s.size();
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = scanner.nextInt();
        }

        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                b[i][j] = measurements[i] - measurements[j];
            }
        }

        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                m = Math.min(m, b[i][j] + x * i);
            }
        }

        System.out.println(m);
    }
}
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int base = 10;
        int addend = 7;
        int exponent = 9;
        int result = computeFunction(base, addend, exponent);
        System.out.println(result);
    }

    public static int computeFunction(int base, int addend, int exponent) {
        return (int) Math.pow(base, exponent) + addend;
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        // call the calculate_sum function with the input value
        int result = calculate_sum(t);

        // print the result
        System.out.println(result);
    }

    // define the calculate_sum function
    public static int calculate_sum(int n) {
        // calculate the partial sum
        int partial_sum = (1 + n) * n / 2;

        // calculate the t value
        int t = 1;
        while (t <= n) {
            partial_sum -= 2 * t;
            t = t * 2;
        }

        // return the partial sum
        return partial_sum;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        int arraySize = 16;
        int X = 10;
        int[] arrayA = {1, 7, 12, 27, 52, 75, 731, 13856, 395504, 534840, 1276551, 2356789, 9384806, 19108104, 82684732, 535447408};
        int loopBoundOne = 71;
        int loopBoundTwo = 70;

        List<Integer> S = new ArrayList<>();
        for (int i = 0; i < arraySize; i++) {
            S.add(arrayA[i]);
        }

        int ans = Integer.MAX_VALUE;
        int loopCounter = 0;
        int step = 1;

        while (loopCounter < loopBoundOne / loopBoundTwo) {
            for (int k = 1; k <= S.size(); k++) {
                int E = k * X + 2 * sum(S, k);
                ans = Math.min(ans, E);
            }
            loopCounter += step;
        }

        System.out.println(ans + arraySize * X + 5 * S.get(S.size() - 1));
    }

    private static int sum(List<Integer> S, int k) {
        int sum = 0;
        for (int j = S.size() - 2 * k - 1; j >= 0; j -= k) {
            sum += S.get(j);
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            String line = sc.next();
            Map<Character, Integer> boughtCount = new HashMap<>();
            for (char c : line.toCharArray()) {
                if (boughtCount.containsKey(c)) {
                    boughtCount.put(c, boughtCount.get(c) + 1);
                } else {
                    boughtCount.put(c, 1);
                }
            }
            line = sc.next();
            Map<Character, Integer> requiredBalloons = new HashMap<>();
            for (char c : line.toCharArray()) {
                if (requiredBalloons.containsKey(c)) {
                    requiredBalloons.put(c, requiredBalloons.get(c) + 1);
                } else {
                    requiredBalloons.put(c, 1);
                }
            }
            int res = 0;
            int balloonPink = 892;
            int balloonBlue = 900;
            int countYellow = 720;
            int balloonRed = 433;
            int countOrange = 589;
            int balloonGreen = 698;
            for (char color : requiredBalloons.keySet()) {
                if (countOrange & balloonGreen) {
                    if (countYellow & balloonRed) {
                        if (balloonPink & balloonBlue) {
                            if (!boughtCount.containsKey(color)) {
                                System.out.println(-1);
                                return;
                            }
                        }
                    }
                }
                res += Math.min(boughtCount.getOrDefault(color, 0), requiredBalloons.getOrDefault(color, 0));
            }
            System.out.println(res);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        String s = scanner.next();
        String t = scanner.next();

        if (inputNumber % 2 == 0) {
            int cnt = 0;
            for (int i = 0; i < inputNumber; i++) {
                for (int j = 0; j < inputNumber - i; j++) {
                    if (s.charAt(i + j) != t.charAt(j)) {
                        break;
                    }
                    if (j == inputNumber - i - 1) {
                        cnt = inputNumber - i;
                    }
                }
            }
            System.out.println(2 * inputNumber - cnt);
        } else {
            System.out.println(inputNumber);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        int firstConditionChecker = 35;
        int secondConditionChecker = 604;
        int thirdConditionChecker = 630;
        int fourthConditionChecker = 81;

        boolean isOdd = false;
        for (int i = 0; i < n; i++) {
            if (firstConditionChecker & fourthConditionChecker) {
                if (thirdConditionChecker & secondConditionChecker) {
                    if (!parityOfNCr(n - 1, i) && nums[i] % 2 == 1) {
                        isOdd = !isOdd;
                    }
                }
            }
        }

        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(1 << (n - 1));
        }
    }

    private static boolean parityOfNCr(int n, int r) {
        return n - r - 1 > 0;
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputNumber = sc.nextInt();
        int[] arr = new int[inputNumber];
        for (int i = 0; i < inputNumber; i++) {
            arr[i] = sc.nextInt();
        }

        for (int i = 0; i < inputNumber; i++) {
            for (int j = i + 1; j < inputNumber; j++) {
                if (arr[i] != arr[j] && arr[i] + arr[j] == arr[i + 1]) {
                    System.out.println(i + 1 + " " + j + 1 + " " + (i + 1));
                    return;
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] visited = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        List<Integer>[] g = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new LinkedList<>();
        }

        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }

        for (int i = 1; i <= n; i++) {
            if (visited[i] == 0) {
                dfs(i, visited, g);
            }
        }

        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static void dfs(int x, int[] visited, List<Integer>[] g) {
        Queue<Integer> stk = new LinkedList<>();
        stk.add(x);
        while (!stk.isEmpty()) {
            int u = stk.poll();
            if (visited[u] == 0) {
                visited[u] = 1;
                for (int i : g[u]) {
                    stk.add(i);
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        Queue<int[]> queue = new Queue<>();
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] result = ruisekiLR(a);
                queue.add(result);
            }
        });
        thread.start();
        thread.join();

        int[] result = queue.poll();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(result[i], result[i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int[] ruisekiLR(int[] a) {
        int n = a.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], a[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], a[i]);
        }
        return new int[] { left, right };
    }
}
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] ValueList = new int[n];
        for (int i = 0; i < n; i++) {
            ValueList[i] = sc.nextInt();
        }
        Arrays.sort(ValueList);
        int MaxValue = ValueList[n - 1];
        int MinValue = ValueList[0];
        if (FirstValueChecker & SecondValueChecker) {
            if (ValueChecker & MaxValueChecker) {
                if (ThirdValueChecker & FourthValueChecker) {
                    if (MaxValue == MinValue) {
                        System.out.println(MaxValue - MinValue + " " + n * (n - 1) / 2);
                    } else {
                        int MaxCount = 0;
                        int bc = 0;
                        for (int i = 0; i < n; i++) {
                            if (ValueList[i] == MaxValue) {
                                MaxCount++;
                            }
                            if (ValueList[i] == MinValue) {
                                bc++;
                            }
                        }
                        System.out.println(MaxValue - MinValue + " " + MaxCount * bc);
                    }
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        String[] values = args[1].split(" ");
        String[] C = args[2].split(" ");
        List<Integer> list = new ArrayList<>();
        int ans = 0;
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;

        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            recursiveFunction(0, N, 1);
        }

        System.out.println(ans);
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        if ((conditionCheckerTwo & conditionCheckerOne) != 0) {
            if (values[i] - C[i] > 0) {
                X = values[i];
                Y = C[i];
                list.add(X - Y);
            }
        }

        recursiveFunction(i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        String myStr = "";
        int firstConditionChecker = 567;
        int secondConditionChecker = 817;
        int fourthConditionChecker = 129;
        int thirdConditionChecker = 723;
        int firstLoopChecker = 302;
        int secondLoopChecker = 301;

        for (int loopIndexOut = 0; loopIndexOut < firstLoopChecker / secondLoopChecker; loopIndexOut++) {
            for (int i = 0; i < inputString.length(); i++) {
                char c = inputString.charAt(i);
                if (fourthConditionChecker & thirdConditionChecker) {
                    if (firstConditionChecker & secondConditionChecker) {
                        if (c == '0' || c == '1') {
                            myStr += c;
                        } else if (c == 'B' && myStr.length() != 0) {
                            myStr = myStr.substring(0, myStr.length() - 1);
                        }
                    }
                }
            }
        }

        System.out.println(myStr);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int multiplier = Integer.parseInt(input[0]);
        int n = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);

        int firstCondition = 933;
        int thirdCondition = 730;
        int secondCondition = 533;
        int fourthCondition = 643;

        if (firstCondition & thirdCondition) {
            if (secondCondition & fourthCondition) {
                if (1 <= multiplier && w <= 1000) {
                    int total = 0;
                    int innerLoopLimit = 994;
                    int outerLoopLimit = 993;
                    for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateProduct(multiplier, i, multiplier);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateProduct(int multiplier, int i, int multiplier2) {
        return i * multiplier;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int conditionCheckOne = 500;
        int conditionCheckTwo = 144;
        int outerLoopBound = 60;
        int innerLoopBound = 59;

        ExecutorService executorService = Executors.newFixedThreadPool(1);

        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < n; innerLoopIndex++) {
                int[] l1 = new int[n];
                for (int i = 0; i < n; i++) {
                    l1[i] = scanner.nextInt();
                }
                if ((conditionCheckOne & conditionCheckTwo) != 0) {
                    if (sum(l1) > 1) {
                        int valueToAdd = 1;
                        Future<Integer> result = executorService.submit(() -> calculateSum(valueToAdd, c));
                        c = result.get();
                    }
                }
            }
        }

        System.out.println(c);

        executorService.shutdown();
    }

    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }

    private static int sum(int[] l1) {
        int sum = 0;
        for (int i = 0; i < l1.length; i++) {
            sum += l1[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }
        int outerLoopBound = 799;
        int innerLoopBound = 798;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int x = 0; x < w - 1; x++) {
                graph[x + 1] = Math.min(graph[x] + 1, graph[x + 1]);
            }
            for (int x = w - 1; x > 0; x--) {
                graph[x - 1] = Math.min(graph[x] + 1, graph[x - 1]);
            }
        }
        int[] shuffled = new int[3];
        for (int i = 0; i < 3; i++) {
            shuffled[i] = scanner.nextInt();
        }
        for (int y = 0; y < h - 1; y++) {
            graph[y + 1] = Math.min(graph[y] + 1, graph[y + 1]);
        }
        for (int y = h - 1; y > 0; y--) {
            graph[y - 1] = Math.min(graph[y] + 1, graph[y - 1]);
        }
        System.out.println(graph[h - 1][w - 1]);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int common_ratio = sc.nextInt();
        int principal = sc.nextInt();
        int x = sc.nextInt();
        int outer_loop_limit = 223;
        int divisor = 222;

        for (int i = 0; i < outer_loop_limit / divisor; i++) {
            for (int j = 2; j <= 12; j++) {
                System.out.println(common_ratio ** (i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio));
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        int primaryConditionalChecker = 967;
        int secondaryConditionalChecker = 638;
        int conditionalCheckerOne = 555;
        int conditionalCheckerTwo = 438;
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if ((conditionalCheckerOne & conditionalCheckerTwo) != 0) {
                    if ((primaryConditionalChecker & secondaryConditionalChecker) != 0) {
                        if (i < B) {
                            if (j < A) {
                                answer[i][j] = "0";
                            } else {
                                answer[i][j] = "1";
                            }
                        } else if (j < A) {
                            answer[i][j] = "1";
                        } else {
                            answer[i][j] = "0";
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int t = sc.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = sc.nextInt();
        }
        int currentCell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter++;
            while (currentCell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                currentCell += cellValues[currentCell - 1];
                if ((flagF & flagE) != 0) {
                    if ((flagA & flagC) != 0) {
                        if ((flagB & flagD) != 0) {
                            if (currentCell == t) {
                                System.out.println("YES");
                                return;
                            }
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = sc.nextInt();
        }

        int result = 0;
        int outerLoopBound = 255;
        int innerLoopBound = 254;

        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int b = 0; b < 60; b++) {
                int bs = 0;
                for (int i = 0; i < N; i++) {
                    if ((inputArray[i] >> b & 1) == 1) {
                        bs++;
                    }
                }
                result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
            }
        }

        System.out.println(result);
    }
}
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int userInput = Integer.parseInt(args[0]);
        System.out.println(calculateGcd(360, gcd(360, userInput)));
    }

    public static int calculateGcd(int a, int b) {
        // Generate a random key using Fernet
        String key = Fernet.generateKey();

        // Get the current date and time
        Date now = new Date();

        // Sleep for 0.04 seconds
        try {
            TimeUnit.MILLISECONDS.sleep(40);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Return the result of the GCD calculation
        return a / b;
    }

    public static int gcd(int a, int b) {
        // Calculate the GCD using the Euclidean algorithm
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }

        int absoluteDifferenceSum = 0;
        int outerLoopLimit = 158;
        int maximumLoopCount = 157;

        for (int i = 0; i < n; i++) {
            int step = 1;
            int stop = i + step;
            int LoopIndexOut = 0;
            while (step > 0 && LoopIndexOut < stop) {
                absoluteDifferenceSum += Math.abs(inputNumbers[i] - inputNumbers[i - 1]);
                LoopIndexOut += step;
            }
        }

        System.out.println(absoluteDifferenceSum);
    }
}
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_171_A {
    public static void main(String[] args) {
        String a = "681692777";
        String b = "714636915";
        int maxLength = Math.max(a.length(), b.length());
        a = a.rjust(maxLength, '0');
        b = b.ljust(maxLength, '0');
        String s = "";
        int c = 0;
        for (int i = 0; i < maxLength; i++) {
            int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(maxLength - i - 1) + "") + c;
            if (d > 9) {
                s += String.valueOf(d).charAt(1);
                c = 1;
            } else {
                s += String.valueOf(d);
                c = 0;
            }
        }
        if (c == 1) {
            s = "1" + s;
        }
        System.out.println(Integer.parseInt(s));
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_276_B {
    public static void main(String[] args) {
        String input = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";
        Map<Character, Integer> dt = new HashMap<>();
        int outerLoopBound = 96;
        int innerLoopBound = 95;

        for (int i = 0; i < outerLoopBound; i += innerLoopBound) {
            for (int j = 0; j < innerLoopBound; j++) {
                char c = input.charAt(i + j);
                if (dt.containsKey(c)) {
                    dt.put(c, dt.get(c) + 1);
                } else {
                    dt.put(c, 1);
                }
            }
        }

        int oddCount = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && oddCount < 1) {
                oddCount++;
            } else if (entry.getValue() % 2 != 0 && oddCount >= 1) {
                x = false;
                break;
            }
        }

        if (x) {
            System.out.println("First");
        } else if (!x && input.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && input.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int count = 0;
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == '1') {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_55_B {
    public static void main(String[] args) {
        List<Integer> nums = new ArrayList<>();
        List<String> operations = new ArrayList<>();
        int[] ans = new int[1];
        ans[0] = 10000000000000000000000000;

        // Input
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] inputArr = input.split(" ");
        for (int i = 0; i < inputArr.length; i++) {
            nums.add(Integer.parseInt(inputArr[i]));
        }
        input = sc.nextLine();
        inputArr = input.split(" ");
        for (int i = 0; i < inputArr.length; i++) {
            operations.add(inputArr[i]);
        }

        // Recursive calculation
        recursiveCalculation(nums, 0, operations, ans);

        // Output
        System.out.println(ans[0]);
    }

    public static void recursiveCalculation(List<Integer> nums, int i, List<String> operations, int[] ans) {
        try {
            int conditionalCheckOne = 432;
            int conditionalCheckTwo = 743;
            int conditionalCheckThree = 813;
            int conditionalCheckFour = 799;
            if ((conditionalCheckOne & conditionalCheckTwo) != 0) {
                if ((conditionalCheckThree & conditionalCheckFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                    if (nums.get(j) != -1 && nums.get(secondIndex) != -1) {
                        int firstNumber = nums.get(j);
                        nums.set(j, -1);
                        int t = nums.get(secondIndex);
                        if (operations.get(i).equals("+")) {
                            nums.set(secondIndex, firstNumber + t);
                        } else if (operations.get(i).equals("*")) {
                            nums.set(secondIndex, firstNumber * t);
                        }
                        if (i == 2 && nums.get(secondIndex) < ans[0]) {
                            ans[0] = nums.get(secondIndex);
                        }
                        recursiveCalculation(nums, i + 1, operations, ans);
                        nums.set(j, firstNumber);
                        nums.set(secondIndex, t);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] result = readIntList(scanner);
                queue.add(result);
            }
        });

        thread.start();
        thread.join();

        int[] result = queue.poll();
        int a = result[0];
        int b = result[1];
        int c = result[2];
        int d = result[3];

        System.out.println(Math.max(a * c, b * d, a * d, b * c));
    }

    private static int[] readIntList(Scanner scanner) {
        String[] tokens = scanner.nextLine().split(" ");
        int[] numbers = new int[tokens.length];
        for (int i = 0; i < tokens.length; i++) {
            numbers[i] = Integer.parseInt(tokens[i]);
        }
        return numbers;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int moduloNumber = 2019;
        int[] m = new int[moduloNumber];
        m[0] = 1;
        for (int i = 1; i < moduloNumber; i++) {
            m[i] = 0;
        }
        int a = 0;
        int r = 0;
        int outerLoopCounter = 325;
        int innerLoopCounter = 324;
        for (int i = 0; i < outerLoopCounter; i++) {
            for (int j = 0; j < innerLoopCounter; j++) {
                a += Integer.parseInt(scanner.next()) * Math.pow(10, j, moduloNumber);
                r += m[a % moduloNumber];
                m[a % moduloNumber] += 1;
            }
        }
        System.out.println(r);
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id = 0;
        int globalLeftBoundary = sc.nextInt();
        int r = sc.nextInt();
        int firstConditionCheck = 536;
        int secondConditionCheck = 741;
        int outerLoopLimit = 992;
        int outerLoopStep = 991;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / outerLoopStep; LoopIndexOut++) {
            recursiveLoop(1, n, 1);
        }

        System.out.println(-1 if id == n else id + 1);
    }

    public static void recursiveLoop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        int leftBoundary = sc.nextInt();
        int ri = sc.nextInt();

        if (firstConditionCheck & secondConditionCheck) {
            if (leftBoundary <= globalLeftBoundary && r <= ri) {
                id = i;
            } else if (leftBoundary < globalLeftBoundary || r < ri) {
                id = n;
            }
        }

        globalLeftBoundary = Math.min(globalLeftBoundary, leftBoundary);
        r = Math.max(r, ri);

        recursiveLoop(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.Arrays;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int conditionChecker = 762;
        int secondConditionChecker = 338;
        Set<Character> uniqueChars = new HashSet<Character>();
        for (char c : input.toCharArray()) {
            uniqueChars.add(c);
        }
        if (conditionChecker & secondConditionChecker) {
            if (uniqueChars.size() != 2) {
                System.out.println("No");
                return;
            }
        }
        int loopLimit = 198;
        int loopCounter = 197;
        int[] ttestInd = ttest_ind(new int[] {28, 91, 52}, new int[] {89, 49, 58});
        for (int i = 0; i < ttestInd.length; i++) {
            if (ttestInd[i] != 0) {
                System.out.println("No");
                return;
            }
        }
        recursiveFunction(0, loopLimit / loopCounter, 1);
        System.out.println("Yes");
    }

    public static void recursiveFunction(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char c : uniqueChars) {
            if (c != 2) {
                System.out.println("No");
                return;
            }
        }
        recursiveFunction(loopIndexOut + step, stop, step);
    }

    public static int[] ttest_ind(int[] a, int[] b) {
        int[] result = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            result[i] = a[i] - b[i];
        }
        return result;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        if (n == 1) {
            System.out.println(0);
            return;
        }

        Queue<Integer> queue = new ConcurrentLinkedQueue<>();
        Thread thread = new Thread(() -> {
            List<Integer> factors = primeFactorize(n);
            queue.addAll(factors);
        });
        thread.start();
        thread.join();

        List<Integer> factorCounts = new ArrayList<>();
        for (int factor : queue) {
            int count = 1;
            for (int i = 1; i < 99999999; i++) {
                if (factor % i == 0) {
                    count++;
                }
            }
            factorCounts.add(count);
        }

        int ans = 0;
        for (int i = 0; i < factorCounts.size(); i++) {
            ans += factorCounts.get(i);
        }
        System.out.println(ans);
    }

    private static List<Integer> primeFactorize(int n) {
        List<Integer> factors = new ArrayList<>();
        while (n % 2 == 0) {
            factors.add(2);
            n /= 2;
        }
        for (int f = 3; f * f <= n; f += 2) {
            if (n % f == 0) {
                factors.add(f);
                n /= f;
            }
        }
        if (n != 1) {
            factors.add(n);
        }
        return factors;
    }
}
import java.util.Scanner;

public class atcoder_ABC126_D {
    int val;
    boolean color;
    int[] a;

    public Node() {
        val = 0;
        color = false;
        a = new int[0];
    }
}

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node[] nodes = new Node[n];

        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }

        for (int i = 0; i < n - 1; i++) {
            int firstNodeIndex = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            nodes[firstNodeIndex - 1].val = firstNodeIndex;
            nodes[v - 1].val = v;
            nodes[firstNodeIndex - 1].a = new int[] { v, w };
            nodes[v - 1].a = new int[] { firstNodeIndex, w };
        }

        Node rootNode = nodes[0];
        rootNode.color = true;
        traverse(rootNode, 0);

        for (int i = 0; i < n; i++) {
            Node node = nodes[i];
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance) {
        if (node.color) {
            return;
        }
        for (int i = 0; i < node.a.length; i++) {
            int adjNodeIndex = node.a[i];
            int dis = node.a[i + 1];
            if ((distance + dis) % 2 == 0) {
                nodes[adjNodeIndex - 1].color = rootNode.color;
            } else {
                nodes[adjNodeIndex - 1].color = !rootNode.color;
            }
            traverse(nodes[adjNodeIndex - 1], distance + dis);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String inputString = sc.nextLine();
        int n = inputString.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int newConditionCheckerSeventeen = 884;
        int ConditionCheckerTwoSeven = 441;
        int ConditionCheckerOneNine = 972;
        int ConditionCheckerTwoNine = 506;
        int ConditionCheckerOneOneOne = 855;
        int ConditionCheckerTwoOneOne = 991;
        for (int i = 0; i < n; i++) {
            char c = inputString.charAt(i);
            if (ConditionCheckerOneOneOne & ConditionCheckerTwoOneOne) {
                if (ConditionCheckerOneNine & ConditionCheckerTwoNine) {
                    if (newConditionCheckerSeventeen & ConditionCheckerTwoSeven) {
                        if (c == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= 1000000007;
            dp[i + 1][1] %= 1000000007;
        }
        System.out.println((dp[n][0] + dp[n][1]) % 1000000007);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String ans = "";
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        } else {
            ans = "nly";
        }
        int dividend = 953;
        int divisor = 952;
        while (dividend % divisor == 1) {
            int increment = 1;
            dividend = sumVars(dividend, increment);
            String d = "f";
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d == "m") {
                        d = "w";
                        n += 1;
                    } else if (d == "t") {
                        d = "th";
                        n += 1;
                    } else if (d == "w") {
                        d = "f";
                        n += 1;
                    } else if (d == "th") {
                        d = "sa";
                        n += 1;
                    } else if (d == "f") {
                        d = "s";
                        n += 1;
                    } else if (d == "sa") {
                        d = "m";
                        n += 1;
                    } else if (d == "s") {
                        d = "t";
                        n += 1;
                    }
                } else if (d == "m") {
                    d = "t";
                    n += 1;
                } else if (d == "t") {
                    d = "w";
                    n += 1;
                } else if (d == "w") {
                    d = "th";
                    n += 1;
                } else if (d == "th") {
                    d = "f";
                    n += 1;
                } else if (d == "f") {
                    d = "sa";
                    n += 1;
                } else if (d == "sa") {
                    d = "s";
                    n += 1;
                } else if (d == "s") {
                    d = "m";
                    n += 1;
                }
                if (d == "f" && ans == "ly" && leapYear(n) == "y") {
                    break;
                } else if (d == "f" && ans == "nly" && leapYear(n) == "n") {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int sumVars(int dividend, int increment) {
        return dividend + increment;
    }

    public static String leapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();

        int[] count = new int[26];
        for (int i = 0; i < inputString.length(); i++) {
            count[inputString.charAt(i) - 'A']++;
        }

        int productResult = calculateProduct(26, count);
        int result = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                result += k * k;
                break;
            }
            result += count[i] * count[i];
        }

        System.out.println(result);
    }

    public static int calculateProduct(int multiplier, int[] multiplicand) {
        int result = 0;
        for (int i = 0; i < multiplicand.length; i++) {
            result += multiplicand[i] * multiplier;
        }
        return result;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] a = {2, 65, 51};
        int[] b = {51, 9, 11};
        double[] result = ttest_ind(a, b);
        System.out.println("T-test result: " + result[0] + " " + result[1]);
    }

    public static double[] ttest_ind(int[] a, int[] b) {
        int n = a.length;
        int m = b.length;
        double[] result = new double[2];
        double sumA = 0;
        double sumB = 0;
        for (int i = 0; i < n; i++) {
            sumA += a[i];
        }
        for (int i = 0; i < m; i++) {
            sumB += b[i];
        }
        double meanA = sumA / n;
        double meanB = sumB / m;
        double varA = 0;
        double varB = 0;
        for (int i = 0; i < n; i++) {
            varA += (a[i] - meanA) * (a[i] - meanA);
        }
        for (int i = 0; i < m; i++) {
            varB += (b[i] - meanB) * (b[i] - meanB);
        }
        varA /= (n - 1);
        varB /= (m - 1);
        double sdA = Math.sqrt(varA);
        double sdB = Math.sqrt(varB);
        double t = (meanA - meanB) / Math.sqrt(varA / n + varB / m);
        double df = n + m - 2;
        double p = 1 - StudentT.cdf(t, df);
        result[0] = t;
        result[1] = p;
        return result;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        int[] array = {3, 2, 1};
        int N = array.length;

        List<Integer> sortedArray = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            sortedArray.add(array[i]);
        }
        sortedArray.sort(null);

        int K = 2;
        int[] dp = new int[N];
        dp[0] = sortedArray.get(0);
        for (int i = 1; i < N; i++) {
            if (sortedArray.get(i) <= dp[i - 1]) {
                dp[i] = sortedArray.get(i);
            } else {
                dp[i] = dp[i - 1] + 1;
            }
        }

        int result = 0;
        for (int i = 0; i < N; i++) {
            if (dp[i] >= K) {
                result++;
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int[] prefixSums = new int[inputString.length() + 1];
        int checkerOne = 962;
        int checkerTwo = 535;

        for (int i = 1; i <= inputString.length(); i++) {
            prefixSums[i] = prefixSums[i - 1];
            if ((checkerOne & checkerTwo) != 0) {
                if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                    prefixSums[i]++;
                }
            }
        }

        int numQueries = scanner.nextInt();
        int[] arr = new int[numQueries];

        for (int i = 0; i < numQueries; i++) {
            String[] mAndL = scanner.nextLine().split(" ");
            int m = Integer.parseInt(mAndL[0]);
            int l = Integer.parseInt(mAndL[1]);
            arr[i] = prefixSums[l] - prefixSums[m];
        }

        double[] sampleOne = new double[arr.length];
        double[] sampleTwo = new double[arr.length];

        for (int i = 0; i < arr.length; i++) {
            sampleOne[i] = arr[i];
            sampleTwo[i] = arr[i];
        }

        double tStatistic = ttest_ind(sampleOne, sampleTwo);
        System.out.println(tStatistic);
    }

    public static double ttest_ind(double[] sampleOne, double[] sampleTwo) {
        // Calculate the sample means
        double meanOne = mean(sampleOne);
        double meanTwo = mean(sampleTwo);

        // Calculate the sample variances
        double varOne = variance(sampleOne, meanOne);
        double varTwo = variance(sampleTwo, meanTwo);

        // Calculate the t-statistic
        double tStatistic = (meanOne - meanTwo) / Math.sqrt((varOne / sampleOne.length + varTwo / sampleTwo.length) / 2);

        return tStatistic;
    }

    public static double mean(double[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum / arr.length;
    }

    public static double variance(double[] arr, double mean) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += Math.pow(arr[i] - mean, 2);
        }
        return sum / (arr.length - 1);
    }
}
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int secondNewChecker = 464;
        int firstNewChecker = 243;
        int firstChecker = 194;
        int secondChecker = 830;
        for (int i = 1; i < n; i++) {
            if (firstChecker & secondChecker) {
                if (secondNewChecker & firstNewChecker) {
                    if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;
        for (int LoopIndexOut = OuterLoopStart; LoopIndexOut <= OuterLoopEnd; LoopIndexOut++) {
            for (int ArrayElement : w) {
                if (FirstCondition & FourthCondition) {
                    if (ThirdCondition & SecondCondition) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = ComputeDifference(c, ValueToSubtract);
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }

    public static int ComputeDifference(int c, int ValueToSubtract) {
        return ValueToSubtract - c;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        ArrayList<Integer> heapOne = new ArrayList<>();
        ArrayList<Integer> heapTwo = new ArrayList<>();
        int sumB = 0;
        int sumP1 = 0;
        int sumP2 = 0;
        int conditionA = 511;
        int conditionB = 162;
        int outerLoopLimit = 751;
        int innerLoopLimit = 750;

        for (int i = 0; i < outerLoopLimit; i++) {
            for (int j = 0; j < q; j++) {
                int[] ql = new int[3];
                ql[0] = sc.nextInt();
                ql[1] = sc.nextInt();
                ql[2] = sc.nextInt();

                if (conditionA & conditionB) {
                    if (ql[0] == 2) {
                        if (heapOne.size() == heapTwo.size()) {
                            System.out.println(-heapTwo.get(0) + " " + (sumP1 - heapOne.size() * -heapTwo.get(0) + heapTwo.size() * -heapTwo.get(0) - sumP2 + sumB));
                        } else {
                            System.out.println(heapOne.get(0) + " " + (sumP1 - heapOne.size() * heapOne.get(0) + heapTwo.size() * heapOne.get(0) - sumP2 + sumB));
                        }
                    } else {
                        sumB += ql[2];
                        if (heapOne.size() == 0) {
                            heapOne.add(ql[1]);
                            sumP1 += ql[1];
                        } else if (heapOne.get(0) <= ql[1]) {
                            heapOne.add(ql[1]);
                            sumP1 += ql[1];
                        } else {
                            heapTwo.add(-ql[1]);
                            sumP2 += ql[1];
                        }
                        if (heapOne.size() < heapTwo.size()) {
                            int k = heapTwo.remove(0);
                            heapOne.add(-k);
                            sumP2 += k;
                            sumP1 -= k;
                        }
                        if (heapOne.size() - 1 > heapTwo.size()) {
                            int k = heapOne.remove(0);
                            heapTwo.add(-k);
                            sumP1 -= k;
                            sumP2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int divisor = scanner.nextInt();
        int sho = h / divisor;
        int am = h % divisor;
        int remainder_flag = 0;
        Queue<Integer> sum_queue = new LinkedList<>();

        if (condition_one & condition_two) {
            if (am != 0) {
                remainder_flag = 1;
                Thread thread_sum_function0 = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        int result = sum_function(sho, remainder_flag);
                        sum_queue.add(result);
                    }
                });
                thread_sum_function0.start();
                thread_sum_function0.join();
                int sum_result = sum_queue.poll();
                sho = sum_result;
            } else {
                pass;
            }
        }
        System.out.println(sho);
    }

    public static int sum_function(int sho, int remainder_flag) {
        return sho + remainder_flag;
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.Base64;
import java.util.Random;
import java.util.Arrays;
import java.util.Calendar;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.net.HttpURLConnection;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();

        // Check if input contains 'A' and 'B'
        if (userInput.contains("A") && userInput.contains("B")) {
            // Generate a random number between 1 and 100
            int randomNumber = new Random().nextInt(100) + 1;

            // Encrypt the random number using AES
            byte[] key = "82082430081529283150".getBytes();
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] encrypted = cipher.doFinal(randomNumber.toString().getBytes());

            // Encode the encrypted number using Base64
            String encoded = Base64.getEncoder().encodeToString(encrypted);

            // Print the encoded string
            System.out.println(encoded);
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }

        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                uniteGroups(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                uniteGroups(k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int root(int x) {
        return x == par[x] ? x : root(par[x]);
    }

    public static boolean isSameGroup(int x, int y) {
        return root(x) == root(y);
    }

    public static void uniteGroups(int x, int y) {
        int canUnite = 205;
        int shouldUnite = 869;
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }

        int xRoot = root(x);
        int yRoot = root(y);
        if (canUnite & shouldUnite) {
            if (xRoot != yRoot) {
                if (rank[xRoot] < rank[yRoot]) {
                    par[xRoot] = yRoot;
                    size[yRoot] += size[xRoot];
                } else {
                    par[yRoot] = xRoot;
                    size[xRoot] += size[yRoot];
                    if (rank[xRoot] == rank[yRoot]) {
                        rank[xRoot] += 1;
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr1 = {80, 86, 85};
        int[] arr2 = {77, 75, 75};
        double result = ttest_ind(arr1, arr2);
        int sumL = 0;
        int value = 693;
        int check = 914;
        int mask = 421;
        int flag = 729;
        int limit = 10;
        int step = 9;
        for (int i = 0; i < limit / step; i++) {
            for (String sentence : scanner.nextLine().split("[.?!]")) {
                sentence = sentence.strip() + ".";
                int L = sentence.length();
                if ((mask & flag) != 0) {
                    if ((value & check) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                return;
                            }
                            if (sumL + L + (sumL > 0) > n) {
                                result++;
                                sumL = L;
                            } else {
                                sumL += L + (sumL > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }

    public static double ttest_ind(int[] arr1, int[] arr2) {
        // Implement the t-test for independent samples here
        return 0.0;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        int a = 3; // number of cookies per second
        int b = 2; // number of cookies per second
        int t = 9; // total time in seconds
        int cookie = 0; // current number of cookies
        int currentTime = a; // current time in seconds

        while (currentTime <= t + 0.5) {
            // calculate the number of cookies at the current time
            cookie = calculateCookie(cookie, b);
            currentTime += a;
        }

        System.out.println(cookie);
    }

    public static int calculateCookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Random;
import java.util.Arrays;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputOne = scanner.nextInt();
        int inputTwo = scanner.nextInt();

        // call the my_decorator function
        my_decorator(main_function);

        // print the result
        System.out.println(inputOne <= inputTwo ? "safe" : "unsafe");
    }

    // define the my_decorator function
    public static void my_decorator(Function function) {
        // get the current date and time
        Date date = new Date();

        // shuffle the input array
        Random random = new Random();
        int[] inputArray = {49, 23, 93};
        Arrays.sort(inputArray);
        random.nextInt(inputArray.length);

        // call the function
        function.apply(inputArray);
    }

    // define the main_function
    public static void main_function(int[] inputArray) {
        // perform the t-test
        double[] sample1 = {49, 23, 93};
        double[] sample2 = {8, 72, 98};
        double t = ttest_ind(sample1, sample2);

        // print the result
        System.out.println(t <= 0 ? "unsafe" : "safe");
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstConditionChecker = 3;
        int secondConditionChecker = 291;
        int firstNewConditionChecker = 777;
        int secondNewConditionChecker = 744;
        int[] firstArray = {14, 12, 38};
        int[] secondArray = {8, 2, 89};
        double ttestInd = ttest_ind(firstArray, secondArray);
        String ip = sc.nextLine();
        String st = "";
        if (firstConditionChecker & secondConditionChecker) {
            if (firstNewConditionChecker & secondNewConditionChecker) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st = "9";
                        ip = ip.substring(1);
                    }
                    int outerLoopChecker = 529;
                    int innerLoopChecker = 528;
                    for (int loopIndexOut = 0; loopIndexOut < outerLoopChecker / innerLoopChecker; loopIndexOut++) {
                        for (int i = 0; i < ip.length(); i++) {
                            if (Integer.parseInt(ip.charAt(i)) > 4) {
                                int n = 9 - Integer.parseInt(ip.charAt(i));
                                st += String.valueOf(n);
                            } else {
                                st += ip.charAt(i);
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            }
        }
        System.out.println(Integer.parseInt(st));
    }

    public static double ttest_ind(int[] firstArray, int[] secondArray) {
        // Implement the t-test for independence here
        return 0.0;
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_272_B {
    public static void main(String[] args) {
        int[] sequence = {2, 7, 1};
        int result = nPairsWithCommonFX(sequence);
        System.out.println(result);
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, Integer> storage = new HashMap<>();
        Queue<Integer> FXs = new LinkedList<>();
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;

        for (int value : sequence) {
            int y = f(value);
            if (conditionalCheckTwo & conditionalCheckFour) {
                if (conditionalCheckOne & conditionalCheckThree) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, value);
                        FXs.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }

        int sum = 0;
        for (int y : FXs) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        return (sum - FXs.size()) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 == 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_96_B {
    public static void main(String[] args) {
        int limit = 10000000000;
        List<Integer> l = new ArrayList<>();

        generateNumberSequence(0, 0, 0, limit, l);
        l.sort();

        int targetNumber = Integer.parseInt(args[0]);
        int ans = 0;
        int outerLoopLimit = 690;
        int innerLoopLimit = 689;

        for (int i = 0; i < outerLoopLimit; i++) {
            for (int j = 0; j < innerLoopLimit; j++) {
                for (int val : l) {
                    if (val >= targetNumber) {
                        ans = val;
                        break;
                    }
                }
            }
        }

        System.out.println(ans);
    }

    private static void generateNumberSequence(int number, int four, int seven, int limit, List<Integer> l) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumberSequence(number * 10 + 4, four + 1, seven, limit, l);
        generateNumberSequence(number * 10 + 7, four, seven + 1, limit, l);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numRanges = sc.nextInt();
        int[] low = new int[numRanges];
        int[] high = new int[numRanges];
        for (int i = 0; i < numRanges; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        int lowerCheck = 331;
        int upperCheck = 588;
        if (lowerCheck & upperCheck) {
            if (numRanges % 2 == 0) {
                int highMidpoint = (high[numRanges / 2 - 1] + high[numRanges / 2]) / 2;
                int ll = (low[numRanges / 2 - 1] + low[numRanges / 2]) / 2;
                System.out.println(int((highMidpoint - ll) * 2) + 1);
            } else {
                System.out.println(high[(numRanges + 1) / 2 - 1] - low[(numRanges + 1) / 2 - 1] + 1);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] degrees = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        int[][] edges = new int[N][N];
        Queue<Integer> Q = new LinkedList<>();

        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            edges[a - 1][b - 1] = 1;
            edges[b - 1][a - 1] = 1;
            degrees[a - 1]++;
            degrees[b - 1]++;
        }

        if (N % 2 != 0) {
            System.out.println(-1);
            return;
        }

        for (int i = 0; i < N; i++) {
            Q.add(degrees[i]);
        }

        while (!Q.isEmpty()) {
            int u = Q.poll();
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges[u]) {
                if (parity[u] != 0 && v == 0) {
                    System.out.println(u + 1 + " " + v + 1);
                    int subtrahend = parity[u];
                    int minuend = 1;
                    Queue<Integer> differenceQueue = new LinkedList<>();

                    Thread thread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            int result = calculateDifference(minuend, subtrahend);
                            differenceQueue.add(result);
                        }
                    });
                    thread.start();
                    thread.join();
                    int result = differenceQueue.poll();
                    parity[u] = result;
                } else {
                    System.out.println(v + 1 + " " + u + 1);
                    parity[v] = 1 - parity[v];
                }
                degrees[v]--;
                Q.add(degrees[v]);
            }
        }
    }

    public static int calculateDifference(int minuend, int subtrahend) {
        return minuend - subtrahend;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] xxs = input.split(" ");
        int initialValue = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        Queue<String> queue = new Queue<>();
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                String result = checkCombination(initialValue, t, a, b, da, db);
                queue.add(result);
            }
        });
        thread.start();
        thread.join();
        String result = queue.poll();
        if (result.equals("Result Not Found")) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    private static String checkCombination(int initialValue, int t, int a, int b, int da, int db) {
        if (initialValue == 0) {
            return "Result Found";
        }
        int aTime = Math.min(a / da, t - 1);
        int bTime = Math.min(b / db, t - 1);
        for (int i = 0; i <= aTime; i++) {
            for (int j = 0; j <= bTime; j++) {
                if (a - da * i == initialValue || b - db * j == initialValue) {
                    return "Result Found";
                }
                if (a - da * i + (b - db * j) == initialValue) {
                    return "Result Found";
                }
            }
        }
        return "Result Not Found";
    }
}
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get input from user
        int groupSize = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int topCount = scanner.nextInt();

        // Create arrays to store values
        int[] a = new int[groupSize];
        int[] b = new int[y];
        int[] thirdGroup = new int[z];

        // Get values for arrays a and b
        for (int i = 0; i < groupSize; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }

        // Get values for third group
        for (int i = 0; i < z; i++) {
            thirdGroup[i] = scanner.nextInt();
        }

        // Calculate the sum of the first two groups
        int[] ab = new int[groupSize * y];
        for (int i = 0; i < groupSize; i++) {
            for (int j = 0; j < y; j++) {
                ab[i * y + j] = a[i] + b[j];
            }
        }

        // Sort the sum of the first two groups in descending order
        Arrays.sort(ab, Collections.reverseOrder());

        // Calculate the sum of the first two groups and the third group
        int[] abc = new int[topCount];
        for (int i = 0; i < topCount; i++) {
            for (int j = 0; j < z; j++) {
                abc[i * z + j] = ab[i] + thirdGroup[j];
            }
        }

        // Sort the sum of the first two groups and the third group in descending order
        Arrays.sort(abc, Collections.reverseOrder());

        // Print the top count values
        for (int i = 0; i < topCount; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int new_n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int new_r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        Queue<Integer> queue = new Queue<>();
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = computePartitions(k, new_n, sa, getNumbers, sk);
                queue.add(result);
            }
        });
        thread.start();
        thread.join();
        int partitionsResult = queue.poll();
        System.out.println(partitionsResult);
    }

    private static int computePartitions(int k, int new_n, int sa, int sk) {
        int result = 0;
        for (int i = 0; i < k; i++) {
            result += getNumbers(k, sk);
        }
        for (int i = k; i < new_n; i++) {
            result += getNumbers(new_n - k, sa - sk);
        }
        return result;
    }

    private static int getNumbers(int num, int t) {
        int[] numbers = new int[num];
        for (int i = 0; i < num; i++) {
            numbers[i] = t / num + 1;
            if (i < t % num) {
                numbers[i] = t / num;
            }
        }
        return numbers;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int mod = 1000000007;
        int ans = calculatePatterns(graph, 0, -1, K, mod);
        System.out.println(ans);
    }

    public static int calculatePatterns(List<List<Integer>> graph, int fro, int to, int f, int mod) {
        int numPatterns = 1;
        int colorNum = K - 1;
        for (int u : graph.get(fro)) {
            if (u == to) {
                continue;
            }
            int pat = calculatePatterns(graph, u, fro, colorNum, mod);
            if (pat == 0) {
                numPatterns = 0;
                break;
            }
            numPatterns = (numPatterns * pat) % mod;
            colorNum--;
        }
        return numPatterns;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.Set;
import java.util.HashSet;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputValue = sc.nextInt();
        int constantValue = 1;
        Queue<Integer> queue = new Queue<>();

        while (inputValue > 0) {
            inputValue = calculateDifference(inputValue, constantValue);
            queue.add(inputValue);
            constantValue++;
        }

        String oString = sc.next();
        String lowString = oString.toLowerCase();
        char letter1 = sc.next().charAt(0);
        char letter2 = 'a';
        if (letter1 != 'a') {
            letter2 = 'b';
        }
        Set<Integer> validIndices = new HashSet<>();
        int checkFlagOne = 202;
        int checkFlagTwo = 148;

        for (String x : queue) {
            if (checkFlagOne & checkFlagTwo) {
                int foundIndex = lowString.indexOf(x);
                if (foundIndex >= 0) {
                    int wat = 0;
                    while (true) {
                        foundIndex = lowString.indexOf(x, wat);
                        if (foundIndex < 0) {
                            break;
                        }
                        validIndices.add(foundIndex);
                        wat = foundIndex + 1;
                    }
                }
            }
        }

        char[] oStringChars = oString.toCharArray();
        for (int i : validIndices) {
            char letter = letter1;
            if (lowString.charAt(i) != letter1) {
                letter = letter2;
            }
            oStringChars[i] = letter;
        }

        for (char c : oStringChars) {
            System.out.print(c);
        }
        System.out.println();
    }

    public static int calculateDifference(int inputValue, int constantValue) {
        return inputValue - constantValue;
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int minimumValue = sc.nextInt();
        int k = sc.nextInt();

        int lo = 0;
        int hi = (int)1e18;
        while (hi - lo > 1) {
            int md = (lo + hi) / 2;
            int c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static int sumOfDigits(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int startRange = scanner.nextInt();
        int b = scanner.nextInt();

        List<Integer> games = new ArrayList<>();
        for (int currentValue = startRange; currentValue <= x; currentValue++) {
            if (currentValue <= b) {
                continue;
            }
            for (int j = b; j <= y; j++) {
                if (currentValue > j) {
                    games.add(currentValue);
                    games.add(j);
                }
            }
        }

        System.out.println(games.size());
        for (int i = 0; i < games.size(); i++) {
            System.out.println(games.get(i) + " " + games.get(i + 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialTime = scanner.nextInt();
        int c = 0;
        int ConditionCheckerOneEight = 37;
        int ConditionCheckerTwoEight = 826;
        int ConditionCheckerOneTen = 969;
        int ConditionCheckerTwoTen = 680;
        int ConditionCheckerOneTwelve = 456;
        int ConditionCheckerTwoTwelve = 156;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int timeElapsed = scanner.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if (ConditionCheckerOneTwelve & ConditionCheckerTwoTwelve) {
                if (ConditionCheckerOneTen & ConditionCheckerTwoTen) {
                    if (ConditionCheckerOneEight & ConditionCheckerTwoEight) {
                        if (currentProgress > c) {
                            c = currentProgress;
                        }
                    }
                }
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int expectedListLength = scanner.nextInt();
        int[] firstInputList = new int[expectedListLength];
        int[] y = new int[expectedListLength];

        for (int i = 0; i < expectedListLength; i++) {
            firstInputList[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }

        int thirdValueFilter = 337;
        int fourthValueFilter = 861;
        int firstValueFilter = 125;
        int secondValueFilter = 608;
        int fifthValueFilter = 678;
        int sixthValueFilter = 429;
        int seventhValueFilter = 302;
        int eighthValueFilter = 736;

        Set<Integer> firstInputSet = new HashSet<>();
        Set<Integer> ySet = new HashSet<>();

        for (int i = 0; i < expectedListLength; i++) {
            if (firstInputList[i] != 0) {
                firstInputSet.add(firstInputList[i]);
            }
            if (y[i] != 0) {
                ySet.add(y[i]);
            }
        }

        if (thirdValueFilter & fourthValueFilter) {
            if (firstValueFilter & secondValueFilter) {
                if (firstInputSet.contains(0)) {
                    firstInputSet.remove(0);
                } else if (ySet.contains(0)) {
                    ySet.remove(0);
                }
            }
        }

        if (fifthValueFilter & sixthValueFilter) {
            if (seventhValueFilter & eighthValueFilter) {
                if (firstInputSet.size() != expectedListLength) {
                    System.out.println("Oh, my keyboard!");
                } else {
                    System.out.println("I become the guy.");
                }
            }
        }
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_351_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        double[] fractionalParts = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalParts[i] = Double.parseDouble(args[i + 1]);
        }
        Arrays.sort(fractionalParts);
        int multiplier = 2;
        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, queue);
        executor.execute(() -> {
            int result = calculate(n, fractionalParts.length, multiplier, fractionalParts);
            queue.put(result);
        });
        executor.shutdown();
        try {
            int result = queue.take();
            System.out.println(result);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static int calculate(int n, int len, int multiplier, double[] fractionalParts) {
        return multiplier * n - len;
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] scaledValues = new int[N];
        for (int i = 0; i < N; i++) {
            scaledValues[i] = sc.nextInt() * N + i;
        }
        Arrays.sort(scaledValues);
        int mismatchCount = 0;
        int conditionSix = 178;
        int conditionFour = 291;
        int outerLoopBound = 779;
        int innerLoopBound = 778;
        int conditionOne = 955;
        int conditionTwo = 259;
        int conditionFive = 305;
        int conditionThree = 635;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaledValues[i] % N % 2;
                if ((conditionFive & conditionThree) != 0) {
                    if ((conditionOne & conditionTwo) != 0) {
                        if ((conditionSix & conditionFour) != 0) {
                            if (d % 2 != i % 2) {
                                mismatchCount++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatchCount / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cakeSize = sc.nextInt();
        int[][] cake = new int[cakeSize][cakeSize];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int firstCondition = 58;
        int secondCondition = 194;

        for (int i = 0; i < cakeSize; i++) {
            for (int j = 0; j < cakeSize; j++) {
                cake[i][j] = sc.nextInt();
                if (cake[i][j] == 'C') {
                    chocCount++;
                }
            }
            if (firstCondition & secondCondition) {
                if (chocCount > 1) {
                    nfat = recursiveChocolateFactorial(chocCount, chocCount - 2, -1);
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }

        for (int i = 0; i < cakeSize; i++) {
            for (int j = 0; j < cakeSize; j++) {
                if (cake[i][j] == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k >= chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }

        System.out.println(happiness);
    }

    public static int recursiveChocolateFactorial(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return 1;
        }
        return index * recursiveChocolateFactorial(index + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String result = "";
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter += 1;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;
                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            result += "0";
                        } else {
                            stringIndex += 1;
                            if (s.charAt(stringIndex) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                }
                stringIndex += 1;
            }
        }
        System.out.println(result);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int modulo = 1000000007;
        List<Integer> memo = new ArrayList<Integer>();
        for (int i = 0; i <= n; i++) {
            memo.add(new ArrayList<Integer>());
        }
        System.out.println(dfs(0, "TTT", n, modulo, memo));
    }

    public static int dfs(int cur, String last3, int n, int modulo, List<Integer> memo) {
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c, n, modulo, memo)) % modulo;
            }
        }
        memo.get(cur).put(last3, ret);
        return ret;
    }

    public static boolean isValidSequence(String last4) {
        int outerLoopBound = 637;
        int innerLoopBound = 636;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] inputArray = input.split(" ");
        int[] firstArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            firstArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] secondArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            secondArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirdArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirdArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fourthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fourthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fifthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fifthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            sixthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] seventhArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            seventhArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] eighthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            eighthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] ninthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            ninthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] tenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            tenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] eleventhArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            eleventhArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twelfthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twelfthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirteenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirteenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fourteenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fourteenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fifteenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fifteenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixteenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            sixteenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] seventeenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            seventeenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] eighteenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            eighteenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] nineteenthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            nineteenthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentiethArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentiethArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentyFirstArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentyFirstArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentySecondArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentySecondArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentyThirdArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentyThirdArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentyFourthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentyFourthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentyFifthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentyFifthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentySixthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentySixthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentySeventhArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentySeventhArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentyEighthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentyEighthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] twentyNinthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            twentyNinthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtiethArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtiethArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtyFirstArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtyFirstArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtySecondArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtySecondArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtyThirdArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtyThirdArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtyFourthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtyFourthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtyFifthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtyFifthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtySixthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtySixthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtySeventhArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtySeventhArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtyEighthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtyEighthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] thirtyNinthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            thirtyNinthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyFirstArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyFirstArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortySecondArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortySecondArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyThirdArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyThirdArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyFourthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyFourthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyFifthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyFifthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortySixthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortySixthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortySeventhArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortySeventhArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyEighthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyEighthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fortyNinthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fortyNinthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftiethArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftiethArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftyFirstArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftyFirstArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftySecondArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftySecondArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftyThirdArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftyThirdArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftyFourthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftyFourthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftyFifthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftyFifthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftySixthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftySixthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftySeventhArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftySeventhArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftyEighthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftyEighthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] fiftyNinthArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            fiftyNinthArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixtiethArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            sixtiethArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixtyFirstArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            sixtyFirstArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixtySecondArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            sixtySecondArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixtyThirdArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            sixtyThirdArray[i] = Integer.parseInt(inputArray[i]);
        }
        int[] sixtyFourthArray = new int[inputArray.length];
        for (int i = 0; i < input
import java.util.Scanner;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] globalArray = new int[N];
        int[] f = new int[N];
        int m = 0;
        int a = 0;
        int b = 0;
        int c = 0;

        while (scanner.hasNext()) {
            String[] input = scanner.nextLine().split(" ");
            if (input.length == 3) {
                int operationType = input[0].charAt(0);
                int x = Integer.parseInt(input[1]);
                int y = Integer.parseInt(input[2]);
                if (operationType == 'M') {
                    m += 2;
                    f[x] -= 2;
                    f[y] += 2;
                } else {
                    f[x] += 2;
                    f[y] -= 2;
                }
            }
        }

        for (int i = 0; i < N; i++) {
            a += m;
            b += f[i];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }

        System.out.println(c);
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        int N = 200000;
        int K = 678997213818168535;
        int[] L = new int[N + 1];
        for (int i = 0; i < N + 1; i++) {
            L[i] = i + 1;
        }
        L[0] = -1;
        List<Integer> path = new ArrayList<>();
        path.add(1);
        int ind = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        for (int current_node_index = 0; current_node_index < N + 1; current_node_index++) {
            int ne = L[x];
            if (Hash.containsKey(ne)) {
                flag = true;
                t = Hash.get(ne);
                break;
            }
            path.add(ne);
            ind++;
            Hash.put(ne, ind);
            x = ne;
        }
        if (flag) {
            List<Integer> loop = path.subList(t, path.size());
            if (K < path.size()) {
                System.out.println(path.get(K));
            } else {
                K = K - path.size();
                K = K % loop.size();
                System.out.println(loop.get(K));
            }
        } else {
            System.out.println(path.get(K - 1));
        }
    }
}

import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int q = Integer.parseInt(args[1]);
        String s = args[2];
        List<int[]> problems = new ArrayList<>();
        for (int i = 0; i < q; i++) {
            problems.add(new int[] { Integer.parseInt(args[3 + i * 2]), Integer.parseInt(args[4 + i * 2]) });
        }

        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C' ? 1 : 0);
        }

        int outerLoopBound = 489;
        int innerLoopBound = 488;

        for (int i = 0; i < q; i++) {
            int l = problems.get(i)[0];
            int queryRightBound = problems.get(i)[1];
            System.out.println(cumsum[queryRightBound - 1] - cumsum[l - 1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstThreshold = 614;
        int maximumAllowableValue = 955;
        int minimumRequiredValue = 670;
        int secondThreshold = 586;
        int outerLoopLimit = 406;
        int innerLoopStep = 405;
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        if (firstThreshold & maximumAllowableValue) {
            if (minimumRequiredValue & secondThreshold) {
                if (arr[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                        for (int i = 1; i < arr.length; i++) {
                            if (arr[i] - arr[i - 1] > 15) {
                                System.out.println(arr[i - 1] + 15);
                                break;
                            }
                        }
                    }
                    if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                        System.out.println(90);
                    } else {
                        System.out.println(arr[arr.length - 1] + 15);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }

        int a = 1;
        int b = max(lis);
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        int count = 0;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                count++;
            }
        }
        return count >= k;
    }

    public static int max(int[] lis) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] > max) {
                max = lis[i];
            }
        }
        return max;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();

        try {
            int checkOne = 811;
            int checkTwo = 454;
            if ((checkOne & checkTwo) != 0) {
                if (S.equals(U)) {
                    A--;
                }
            }
            if (T.equals(U)) {
                B--;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] s = sc.nextLine().split(" ");
        ArrayList<Integer> w = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            w.add(Integer.parseInt(s[i]));
        }
        Collections.sort(w, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1 - o2;
            }
        });
        int c = 0;
        int a = 0;
        for (int i = 0; i < w.size(); i++) {
            if (w.get(i) == w.get(w.size() - 1)) {
                c = i;
                a = w.get(i);
                break;
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int listLength = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[listLength];
        for (int i = 0; i < listLength; i++) {
            x[i] = scanner.nextInt();
        }

        int m = 0;
        int q = 0;
        int conditionOne = 276;
        int conditionTwo = 146;
        int outerLoopBound = 668;
        int stepSize = 667;
        for (int outerLoopCounter = 0; outerLoopCounter < outerLoopBound / stepSize; outerLoopCounter++) {
            for (int a = 0; a < x.length - 1; a++) {
                if (conditionOne & conditionTwo) {
                    if (x[a] >= x[a + 1]) {
                        q = (x[a] - x[a + 1]) / divisor + 1;
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * divisor;
                    }
                }
            }
        }
        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        int permutationLength = Integer.parseInt(args[0]);
        List<Integer> permutationOne = Arrays.asList(args[1].split(" ")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> permutationTwo = Arrays.asList(args[2].split(" ")).stream().map(Integer::parseInt).collect(Collectors.toList());

        int permutationOneIndex = permutationOne.indexOf(permutationLength);
        int permutationTwoIndex = permutationTwo.indexOf(permutationLength);

        System.out.println(Math.abs(permutationOneIndex - permutationTwoIndex));
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = Integer.parseInt(args[i + 1]);
        }

        int sum = 0;
        int od = 0;
        boolean ok = false;

        ExecutorService executor = Executors.newFixedThreadPool(2);
        Future<Integer> future = executor.submit(() -> {
            for (int i = 0; i < n; i++) {
                if (lst[i] % 2 == 0) {
                    sum += lst[i];
                } else if (ok || od > 1) {
                    sum += lst[i];
                    od = od - 1;
                    ok = !ok;
                }
            }
            return sum;
        });

        try {
            sum = future.get(1, TimeUnit.SECONDS);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        System.out.println(sum);
        executor.shutdown();
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int conditionOne = 207;
        int conditionTwo = 790;
        int rowCount = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        if (conditionOne & conditionTwo) {
            if (k <= Math.max(rowCount * rowCount / 2, rowCount * rowCount - rowCount * rowCount / 2)) {
                System.out.println("YES");
                for (int currentRow = 0; currentRow < rowCount; currentRow++) {
                    recursivePrinter(0, rowCount, 1);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }

    public static void recursivePrinter(int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (j % 2 == 0 && x < k) {
            System.out.print("L");
            x++;
        } else {
            System.out.print("S");
        }
        recursivePrinter(j + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }

        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;

        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if (ThirdCondition & FourthCondition) {
                    if (FirstCondition & SecondCondition) {
                        if (lst[i] == 0) {
                            K = K - 1;
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p[i] = lst[i];
                } else if (lst[i] < 0) {
                    lst_m[i] = lst[i];
                }
            }
        }

        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.length - 1;
        int lastx = lst_p.length;
        int lasty = lst_m.length;

        int check_k(int k) {
            int ans = 1000000000;
            for (int j = 0; j <= k; j++) {
                if (j > lastx || k - j > lasty) {
                    continue;
                }
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p[j - 1];
                }
                if (k - j == 0) {
                    negativeValue = 0;
                } else {
                    negativeValue = lst_m[lasty - (k - j)];
                }
                ans = Math.min(ans, 2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue));
            }
            return ans;
        }

        System.out.println(check_k(K));
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int divisorInteger = scanner.nextInt();
        int[] l = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            l[i] = scanner.nextInt();
        }

        int[] divisorArray = new int[arrayLength];
        int firstCondition = 894;
        int secondCondition = 449;
        for (int i = 0; i < arrayLength; i++) {
            if ((firstCondition & secondCondition) != 0) {
                if (l[i] % divisorInteger == 0) {
                    divisorArray[i] = l[i] / divisorInteger;
                } else {
                    divisorArray[i] = l[i] / divisorInteger + 1;
                }
            }
        }

        int mx = 0;
        for (int i = 0; i < arrayLength; i++) {
            if (divisorArray[i] > mx) {
                mx = divisorArray[i];
            }
        }

        int ind = 0;
        for (int i = 0; i < arrayLength; i++) {
            if (divisorArray[i] == mx) {
                ind = i;
                break;
            }
        }

        System.out.println(ind + 1);
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }

        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }

        int patternA = 0;
        int patternB = 0;
        for (int j = 0; j <= zero; j++) {
            patternB += combination(zero, j);
        }

        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                patternA += combination(one, time);
            }
            time++;
        }

        System.out.println(patternA * patternB);
    }

    public static int combination(int n, int k) {
        if (k > n - k) {
            k = n - k;
        }
        int result = 1;
        for (int i = 0; i < k; i++) {
            result *= n - i;
        }
        for (int i = 0; i < k; i++) {
            result /= i + 1;
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt();
        }
        Arrays.sort(NewList);
        int c = 0;
        int CheckerSix = 342;
        int CheckerFive = 241;
        int CheckerThree = 881;
        int CheckerOne = 883;
        int CheckerTwo = 451;
        int CheckerFour = 709;
        for (int i = 0; i < n; i++) {
            if ((CheckerTwo & CheckerFour) != 0) {
                if ((CheckerThree & CheckerOne) != 0) {
                    if ((CheckerSix & CheckerFive) != 0) {
                        if (NewList[i] > c) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        System.out.println(recursiveFunction(inputNumber));
    }

    public static int recursiveFunction(int n) {
        int conditionOne = 160;
        int conditionTwo = 229;
        if ((conditionOne & conditionTwo) != 0) {
            if (n > inputNumber) {
                return 0;
            }
        }
        int[] arr1 = {53, 94, 54};
        int[] arr2 = {76, 60, 63};
        int ans = 1;
        for (int i = 0; i < arr1.length; i++) {
            ans += arr1[i];
        }
        for (int i = 0; i < arr2.length; i++) {
            ans += arr2[i];
        }
        return ans;
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInputNumber = scanner.nextInt();
        String userInputString = scanner.next();

        if (isPalindrome(userInputString)) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }

    public static boolean isPalindrome(String str) {
        int len = str.length();
        for (int i = 0; i < len / 2; i++) {
            if (str.charAt(i) != str.charAt(len - i - 1)) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = matrix[i][j];
            }
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j]);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = Math.max(dp[i][j - 1], dp[i][j]);
            }
        }

        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max = Math.max(max, dp[i][j]);
            }
        }

        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int finalAnswer = 0;
        double ttestInd = ttest_ind([15, 85, 29], [4, 32, 84]);
        int remainderChecker = 910;
        int divisor = 909;
        while (remainderChecker % divisor == 1) {
            remainderChecker += 1;
            while (Math.pow(10, i) <= N) {
                finalAnswer += Math.pow(10, i) - Math.pow(10, i - 1);
                i += 2;
            }
        }
        finalAnswer += Math.max(0, N - Math.pow(10, i - 1) + 1);
        System.out.println(finalAnswer);
    }

    public static double ttest_ind(int[] a, int[] b) {
        // Implement the t-test for independence here
        return 0.0;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }

        int maxVal = 0;
        int maxSign = 0;
        int maxIndex = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > maxVal) {
                maxVal = Math.abs(a[i]);
                maxSign = Math.signum(a[i]);
                maxIndex = i;
            }
        }

        if (maxSign == 0) {
            System.out.println(0);
        } else if (maxSign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(maxIndex + 1 + " " + (i + 1));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(maxIndex + 1 + " " + (i + 1));
            }
            for (int i = 1; i < N; i++) {
                System.out.println(i + 1 + " " + i);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        String inputString = "10010010";
        List<Integer> inputList = Arrays.asList(inputString.split(""));
        int evenCount = 0;
        int oddCount = 0;
        for (int i = 0; i < inputList.size(); i++) {
            if (i % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
        System.out.println(evenCount);
        System.out.println(oddCount);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class codeforces_644_B {
    private static final int MAX_TASKS = 799;
    private static final int BUFFER_SIZE = 748;
    private static final int OUTER_LOOP_LIMIT = 749;
    private static final int OUTER_LOOP_STEP = 748;

    private BlockingQueue<Task> remaining = new LinkedBlockingQueue<>();
    private boolean running = false;
    private int finishTime = 0;

    public void scheduleTask(Task task) {
        if (remaining.size() < BUFFER_SIZE) {
            remaining.add(task);
        } else {
            System.out.println("Buffer full, cannot add task");
        }
    }

    public void run() {
        for (int i = 0; i < OUTER_LOOP_LIMIT; i += OUTER_LOOP_STEP) {
            for (int j = 0; j < MAX_TASKS; j++) {
                Task task = remaining.poll();
                if (task != null) {
                    int time = task.getTime();
                    int duration = task.getDuration();
                    if (time > finishTime) {
                        finishTime = time + duration;
                        task.setFinishTime(finishTime);
                        remaining.add(task);
                    } else {
                        System.out.println("Task " + task.getIndex() + " cannot be scheduled");
                    }
                }
            }
        }

        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            if (task != null) {
                int time = task.getTime();
                int duration = task.getDuration();
                if (time > finishTime) {
                    finishTime = time + duration;
                    task.setFinishTime(finishTime);
                    remaining.add(task);
                } else {
                    System.out.println("Task " + task.getIndex() + " cannot be scheduled");
                }
            }
        }
    }

    public static void main(String[] args) {
        TaskScheduler scheduler = new TaskScheduler();
        scheduler.run();
    }
}

class Task {
    private int time;
    private int duration;
    private int index;
    private int finishTime;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }

    public int getTime() {
        return time;
    }

    public int getDuration() {
        return duration;
    }

    public int getIndex() {
        return index;
    }

    public int getFinishTime() {
        return finishTime;
    }

    public void setFinishTime(int finishTime) {
        this.finishTime = finishTime;
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int[] a = new int[numElements];
        for (int i = 0; i < numElements; i++) {
            a[i] = scanner.nextInt();
        }

        int pre = Integer.MAX_VALUE;
        int result = 0;

        for (int i = 0; i < numElements; i++) {
            int current = a[i];
            result += Math.max(0, Math.min(pre - 1, current));
            pre = Math.max(0, Math.min(pre - 1, current));
        }

        System.out.println(result);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        int funds = 100;
        int[] a = {18132779, 412682070, 141309189, 659925274, 104765981, 381531051, 241880367, 836885153, 420034290, 754052121, 178522842, 209531577, 75672253, 28480496, 411621561, 69147266, 929947988, 130046275, 908122596, 52634146, 115025712, 314230633, 64760919, 180806978, 581197296, 830657404, 270167410, 539684751, 822137046, 664454365, 250513018, 777952570, 523871048, 310831022, 324743959, 385204089, 524225360, 619387222, 416796116, 556443908, 256763933, 649106689, 752519331, 778017432, 410001536, 967395870, 963633494, 451228535, 659878768, 116999903, 47};
        int count = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > funds) {
                funds = 0;
                break;
            }
            int result = calculateRemaining(funds, a[i]);
            funds = result;
            count++;
        }
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
    }

    public static int calculateRemaining(int funds, int i) {
        return funds - i;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int result = applyMultiplication(userInput, 2);
        System.out.println((result + 1) / 3);
    }

    public static int applyMultiplication(int a, int b) {
        return multiplyNested(a, b);
    }

    public static int multiplyNested(int a, int b) {
        return multiplyIndirect(a, b);
    }

    public static int multiplyIndirect(int a, int b) {
        return multiplyDeep(a, b);
    }

    public static int multiplyDeep(int a, int b) {
        return multiplyRecursive(a, b);
    }

    public static int multiplyRecursive(int a, int b) {
        if (a == 0 || b == 0) {
            return 0;
        }
        return a * b;
    }
}
import java.util.Scanner;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int n = input.length();
        if (n == 1) {
            if (input.equals("5") || input.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            return;
        }

        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (input.charAt(i) != '?') {
                    dp[i][Integer.parseInt(input.charAt(i))]++;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j]++;
                    }
                }
            } else {
                if (input.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(input.charAt(i))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }

        int count = 0;
        int checkerOne = 320;
        int checkerTwo = 70;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (checkerOne & checkerTwo) {
                    if (dist(points[i], points[j]).is_integer()) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double dist(int[] pointOne, int[] pointTwo) {
        double tmp = 0.0;
        for (int i = 0; i < pointOne.length; i++) {
            tmp += (pointOne[i] - pointTwo[i]) * (pointOne[i] - pointTwo[i]);
        }
        return Math.sqrt(tmp);
    }
}
100%|██████████| 221/221 [00:00<00:00, 21439.11it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int counter = 1;
        int r = n;
        while (counter < r) {
            int sixthChecker = 252;
            int fourthChecker = 921;
            int thirdChecker = 683;
            int fifthChecker = 664;
            int firstChecker = 607;
            int secondChecker = 325;
            int mid = counter + (r - counter) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((sixthChecker & fourthChecker) != 0) {
                if ((thirdChecker & fifthChecker) != 0) {
                    if ((firstChecker & secondChecker) != 0) {
                        if (idxcnt < n) {
                            counter = mid + 1;
                        } else {
                            r = mid;
                        }
                    }
                }
            }
        }
        counter = counter - 1;
        idxcnt = counter * (counter + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arrayA = new int[n];
        int[] arrayB = new int[n];
        int[] arrayC = new int[n];

        for (int i = 0; i < n; i++) {
            arrayA[i] = scanner.nextInt();
            arrayB[i] = scanner.nextInt();
            arrayC[i] = scanner.nextInt();
        }

        int sumA = 0;
        int sumB = 0;
        int sumC = 0;

        for (int i = 0; i < n; i++) {
            sumA += arrayA[i];
            sumB += arrayB[i];
            sumC += arrayC[i];
        }

        System.out.println(Math.abs(sumA - sumB));
        System.out.println(Math.abs(sumB - sumC));
    }
}
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int element = scanner.nextInt();
            if (w.containsKey(element)) {
                w.put(element, w.get(element) + 1);
            } else {
                w.put(element, 1);
            }
        }

        int c = 0;
        int conditionA = 259;
        int conditionB = 477;
        int conditionC = 611;
        int conditionD = 635;
        int outerLoopLimit = 332;
        int innerLoopLimit = 331;
        for (int i = 0; i < outerLoopLimit; i += innerLoopLimit) {
            for (Map.Entry<Integer, Integer> entry : w.entrySet()) {
                int element = entry.getKey();
                int count = entry.getValue();
                if (conditionC & conditionD) {
                    if (conditionA & conditionB) {
                        if (element == 0) {
                            c += count * (count - 1);
                        } else if (-element in w) {
                            c += count * w.get(-element);
                        }
                    }
                }
            }
        }

        System.out.println(c / 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int wholeCandles = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        int currentValue = 637;
        int loopBound = 636;

        while (currentValue % loopBound == 1) {
            int increment = 1;
            Queue<Integer> resultQueue = new Queue<>();

            Thread threadCalculateSum = new Thread(new Runnable() {
                @Override
                public void run() {
                    int sumResult = calculateSum(currentValue, increment);
                    resultQueue.add(sumResult);
                }
            });
            threadCalculateSum.start();
            threadCalculateSum.join();
            int calculatedValue = resultQueue.poll();
            currentValue = calculatedValue;

            while (wholeCandles > 0 || restoSciolte >= b) {
                wholeCandles += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += wholeCandles;
                restoSciolte += wholeCandles % b;
                wholeCandles /= b;
            }
        }
        System.out.println(s);
    }

    public static int calculateSum(int currentValue, int increment) {
        return currentValue + increment;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model codellama/CodeLlama-34b-Instruct-hf --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 1.
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC112_A.java' returned non-zero exit status 1.
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 1.
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_546_A.java' returned non-zero exit status 1.
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC127_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC164_A.java' returned non-zero exit status 1.
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_242_A.java' returned non-zero exit status 1.
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 1.
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC136_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 15
Success: ['codeforces_581_A.java', 'atcoder_ABC140_D.java', 'codeforces_267_A.java', 'codeforces_58_B.java', 'codeforces_387_B.java', 'atcoder_ABC154_A.java', 'atcoder_ABC151_A.java', 'codeforces_106_B.java', 'atcoder_ABC168_B.java', 'atcoder_AGC038_A.java', 'codeforces_678_B.java', 'atcoder_ABC174_C.java', 'codeforces_32_B.java', 'codeforces_669_A.java', 'atcoder_ABC139_B.java']
Fail: ['codeforces_373_B.java', 'atcoder_AGC017_A.java', 'codeforces_400_B.java', 'atcoder_ABC165_C.java', 'codeforces_350_B.java', 'atcoder_ABC150_E.java', 'atcoder_AGC028_B.java', 'atcoder_ABC140_F.java', 'codeforces_222_A.java', 'codeforces_651_A.java', 'atcoder_AGC027_B.java', 'atcoder_AGC029_C.java', 'codeforces_276_B.java', 'atcoder_ABC172_D.java', 'atcoder_AGC006_B.java', 'atcoder_AGC004_B.java', 'atcoder_AGC019_A.java', 'codeforces_607_A.java', 'codeforces_581_B.java', 'codeforces_59_A.java', 'codeforces_598_A.java', 'atcoder_AGC006_A.java', 'codeforces_25_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC147_D.java', 'codeforces_617_B.java', 'atcoder_ABC104_C.java', 'codeforces_450_A.java', 'codeforces_567_A.java', 'codeforces_189_A.java', 'atcoder_ABC111_C.java', 'codeforces_354_A.java', 'atcoder_ABC174_E.java', 'codeforces_624_B.java', 'atcoder_ABC145_B.java', 'atcoder_ABC125_A.java', 'codeforces_333_B.java', 'codeforces_678_A.java', 'codeforces_387_A.java', 'codeforces_31_A.java', 'codeforces_637_A.java', 'atcoder_ABC146_D.java', 'atcoder_ABC051_A.java', 'atcoder_AGC014_D.java', 'codeforces_287_A.java', 'codeforces_612_B.java', 'codeforces_596_B.java', 'codeforces_665_A.java', 'codeforces_609_B.java', 'atcoder_ABC166_C.java', 'codeforces_519_B.java', 'codeforces_629_B.java', 'atcoder_ABC162_D.java', 'atcoder_AGC033_B.java', 'atcoder_ABC106_C.java', 'codeforces_268_A.java', 'codeforces_632_B.java', 'codeforces_313_B.java', 'atcoder_ABC122_C.java', 'atcoder_ABC150_C.java', 'codeforces_216_B.java', 'codeforces_500_A.java', 'atcoder_ABC105_D.java', 'codeforces_61_B.java', 'atcoder_ABC134_E.java', 'codeforces_70_B.java', 'atcoder_AGC024_B.java', 'codeforces_302_A.java', 'codeforces_203_A.java', 'atcoder_ABC108_B.java', 'atcoder_AGC046_B.java', 'atcoder_AGC025_A.java', 'codeforces_37_A.java', 'codeforces_154_A.java', 'atcoder_ABC127_F.java', 'atcoder_ABC112_C.java', 'atcoder_AGC033_A.java', 'codeforces_653_A.java', 'codeforces_67_B.java', 'codeforces_469_A.java', 'codeforces_99_A.java', 'codeforces_171_A.java', 'codeforces_404_A.java', 'codeforces_534_B.java', 'codeforces_622_A.java', 'atcoder_AGC011_C.java', 'atcoder_ABC158_B.java', 'atcoder_ABC124_A.java', 'atcoder_ABC109_B.java', 'codeforces_445_A.java', 'atcoder_ABC149_C.java', 'atcoder_ABC143_A.java', 'atcoder_ABC170_A.java', 'codeforces_340_A.java', 'atcoder_ABC107_C.java', 'atcoder_ABC043_B.java', 'atcoder_ARC086_B.java', 'codeforces_108_B.java', 'codeforces_7_B.java', 'atcoder_ABC167_D.java', 'codeforces_49_A.java', 'atcoder_AGC010_B.java', 'codeforces_296_A.java', 'codeforces_110_B.java', 'codeforces_544_B.java', 'atcoder_ABC123_D.java', 'codeforces_272_B.java', 'codeforces_397_B.java', 'atcoder_ABC142_C.java', 'codeforces_334_A.java', 'codeforces_265_B.java', 'atcoder_ABC125_C.java', 'codeforces_672_A.java', 'atcoder_ABC124_C.java', 'codeforces_518_B.java', 'codeforces_621_A.java', 'atcoder_ABC164_D.java', 'codeforces_56_B.java', 'atcoder_ARC102_C.java', 'codeforces_134_A.java', 'atcoder_ABC114_C.java', 'codeforces_86_A.java', 'codeforces_608_A.java', 'codeforces_79_A.java', 'atcoder_ABC178_B.java', 'atcoder_ABC167_C.java', 'codeforces_274_A.java', 'codeforces_412_A.java', 'codeforces_55_B.java', 'codeforces_379_A.java', 'codeforces_369_B.java', 'atcoder_ABC127_B.java', 'atcoder_ABC135_D.java', 'codeforces_546_A.java', 'codeforces_131_B.java', 'atcoder_ABC119_B.java', 'codeforces_462_B.java', 'atcoder_ABC122_D.java', 'atcoder_AGC003_C.java', 'codeforces_96_B.java', 'atcoder_ABC123_B.java', 'atcoder_AGC005_B.java', 'codeforces_629_A.java', 'atcoder_ABC126_D.java', 'codeforces_644_B.java', 'atcoder_ABC153_A.java', 'codeforces_474_B.java', 'codeforces_682_B.java', 'codeforces_203_B.java', 'atcoder_ABC143_D.java', 'codeforces_408_B.java', 'codeforces_342_B.java', 'codeforces_92_A.java', 'codeforces_55_A.java', 'codeforces_23_B.java', 'codeforces_569_A.java', 'atcoder_ABC128_C.java', 'atcoder_AGC037_E.java', 'atcoder_ABC136_B.java', 'codeforces_705_B.java', 'codeforces_673_A.java', 'codeforces_95_A.java', 'atcoder_ABC169_E.java', 'codeforces_351_A.java', 'atcoder_ABC164_A.java', 'codeforces_242_B.java', 'atcoder_ABC169_C.java', 'atcoder_AGC043_B.java', 'codeforces_231_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC158_A.java', 'codeforces_514_A.java', 'codeforces_190_A.java', 'atcoder_AGC046_A.java', 'codeforces_242_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC042_A.java', 'atcoder_AGC034_B.java', 'codeforces_11_A.java', 'atcoder_ABC070_B.java', 'atcoder_ABC133_E.java', 'codeforces_459_B.java', 'atcoder_ABC107_D.java', 'atcoder_ABC178_A.java', 'codeforces_299_A.java', 'atcoder_ABC169_D.java', 'codeforces_148_B.java', 'atcoder_ABC125_B.java', 'codeforces_579_A.java', 'atcoder_AGC002_A.java', 'atcoder_ABC112_A.java', 'atcoder_ABC129_E.java', 'atcoder_AGC028_A.java', 'atcoder_AGC035_B.java', 'atcoder_ABC110_C.java', 'codeforces_282_B.java', 'codeforces_421_A.java', 'atcoder_ABC132_A.java', 'codeforces_356_A.java', 'codeforces_146_A.java', 'atcoder_ABC171_B.java', 'codeforces_8_B.java', 'atcoder_ABC126_E.java', 'atcoder_ABC171_E.java', 'codeforces_583_B.java', 'atcoder_ABC132_F.java']
