+ model=codellama/CodeLlama-34b-Instruct-hf
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 03:39:45 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 08-21 03:39:47 [utils.py:326] non-default args: {'model': 'codellama/CodeLlama-34b-Instruct-hf', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 03:39:53 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 03:39:53 [__init__.py:1750] Using max model len 4096
INFO 08-21 03:39:53 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:39:55 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:39:55 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='codellama/CodeLlama-34b-Instruct-hf', speculative_config=None, tokenizer='codellama/CodeLlama-34b-Instruct-hf', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=codellama/CodeLlama-34b-Instruct-hf, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=2619643)[0;0m WARNING 08-21 03:39:55 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:39:55 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_241b1443'), local_subscribe_addr='ipc:///tmp/d55579ae-1374-4747-8823-b0cdc1ac1b53', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:57 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_5305b6ec'), local_subscribe_addr='ipc:///tmp/15089048-d4a8-4978-8a48-9a25c87276d8', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:57 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_8ec4c4a4'), local_subscribe_addr='ipc:///tmp/ba8eada6-adfb-49c8-99d5-ef977039140f', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_9021765f'), local_subscribe_addr='ipc:///tmp/7dcea6f9-0901-4029-824c-2e67506c9470', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m WARNING 08-21 03:39:58 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m WARNING 08-21 03:39:58 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:58 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:58 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:39:59 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:39:59 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:40:44 [weight_utils.py:312] Time spent downloading weights for codellama/CodeLlama-34b-Instruct-hf: 45.311768 seconds
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:08,  1.41s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:02<00:07,  1.49s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:04<00:05,  1.49s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:05<00:04,  1.51s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:07<00:03,  1.50s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:09<00:01,  1.52s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:10<00:00,  1.53s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:10<00:00,  1.51s/it]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m 
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:40:55 [default_loader.py:262] Loading weights took 10.73 seconds
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:40:56 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 56.794490 seconds
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:40:56 [default_loader.py:262] Loading weights took 11.38 seconds
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:40:56 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 57.714259 seconds
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:06 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:06 [backends.py:559] Dynamo bytecode transform time: 9.49 s
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:06 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:06 [backends.py:559] Dynamo bytecode transform time: 9.55 s
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:09 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:09 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:40 [backends.py:215] Compiling a graph for dynamic shape takes 33.95 s
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:41 [backends.py:215] Compiling a graph for dynamic shape takes 34.00 s
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:50 [monitor.py:34] torch.compile takes 43.55 s in total
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:50 [monitor.py:34] torch.compile takes 43.45 s in total
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:51 [gpu_worker.py:276] Available KV cache memory: 36.31 GiB
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:51 [gpu_worker.py:276] Available KV cache memory: 36.31 GiB
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:41:51 [kv_cache_utils.py:849] GPU KV cache size: 396,560 tokens
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:41:51 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.82x
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:41:51 [kv_cache_utils.py:849] GPU KV cache size: 396,560 tokens
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:41:51 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.82x
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 14.54it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 16.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 16.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 16.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 17.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 17.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 17.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:02, 17.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:02, 18.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 18.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 18.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 18.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 17.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 18.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:02, 17.80it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:01, 17.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:01<00:01, 17.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:01, 17.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 16.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 17.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 17.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 17.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 17.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 16.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:01, 16.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:00, 16.32it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 16.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 15.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 16.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 16.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 16.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 16.60it/s][1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:56 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 17.00it/s]
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:56 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP1 pid=2619651)[0;0m INFO 08-21 03:41:56 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=2619643)[0;0m [1;36m(VllmWorker TP0 pid=2619649)[0;0m INFO 08-21 03:41:56 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=2619643)[0;0m INFO 08-21 03:41:56 [core.py:214] init engine (profile, create kv cache, warmup model) took 59.46 seconds
INFO 08-21 03:41:57 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]100%|██████████| 231/231 [00:00<00:00, 11395.29it/s]
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:  54%|█████▎    | 124/231 [00:00<00:00, 487.47it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 690.51it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:11<44:17, 11.55s/it, est. speed input: 14.54 toks/s, output: 11.60 toks/s]Processed prompts:   1%|▏         | 3/231 [00:12<13:24,  3.53s/it, est. speed input: 166.22 toks/s, output: 34.80 toks/s]Processed prompts:   2%|▏         | 4/231 [00:13<09:33,  2.53s/it, est. speed input: 184.35 toks/s, output: 47.87 toks/s]Processed prompts:   3%|▎         | 6/231 [00:14<05:17,  1.41s/it, est. speed input: 210.23 toks/s, output: 75.24 toks/s]Processed prompts:   3%|▎         | 7/231 [00:14<04:23,  1.18s/it, est. speed input: 223.84 toks/s, output: 88.57 toks/s]Processed prompts:   3%|▎         | 8/231 [00:15<03:33,  1.04it/s, est. speed input: 251.82 toks/s, output: 103.04 toks/s]Processed prompts:   4%|▍         | 9/231 [00:15<02:40,  1.39it/s, est. speed input: 274.93 toks/s, output: 119.11 toks/s]Processed prompts:   4%|▍         | 10/231 [00:15<02:22,  1.55it/s, est. speed input: 287.49 toks/s, output: 132.82 toks/s]Processed prompts:   5%|▌         | 12/231 [00:15<01:24,  2.58it/s, est. speed input: 361.87 toks/s, output: 166.44 toks/s]Processed prompts:   6%|▌         | 14/231 [00:15<00:56,  3.87it/s, est. speed input: 456.18 toks/s, output: 200.06 toks/s]Processed prompts:   7%|▋         | 17/231 [00:16<00:35,  5.97it/s, est. speed input: 550.04 toks/s, output: 250.06 toks/s]Processed prompts:   8%|▊         | 19/231 [00:16<00:32,  6.52it/s, est. speed input: 659.21 toks/s, output: 282.02 toks/s]Processed prompts:   9%|▉         | 21/231 [00:16<00:33,  6.19it/s, est. speed input: 701.58 toks/s, output: 311.99 toks/s]Processed prompts:  10%|█         | 24/231 [00:16<00:23,  8.83it/s, est. speed input: 757.62 toks/s, output: 364.59 toks/s]Processed prompts:  11%|█▏        | 26/231 [00:17<00:23,  8.59it/s, est. speed input: 806.53 toks/s, output: 396.00 toks/s]Processed prompts:  12%|█▏        | 28/231 [00:17<00:28,  7.03it/s, est. speed input: 838.71 toks/s, output: 424.13 toks/s]Processed prompts:  13%|█▎        | 30/231 [00:17<00:25,  7.97it/s, est. speed input: 886.84 toks/s, output: 458.50 toks/s]Processed prompts:  14%|█▍        | 32/231 [00:17<00:25,  7.73it/s, est. speed input: 916.24 toks/s, output: 490.24 toks/s]Processed prompts:  15%|█▍        | 34/231 [00:18<00:22,  8.95it/s, est. speed input: 947.88 toks/s, output: 525.58 toks/s]Processed prompts:  16%|█▌        | 36/231 [00:18<00:23,  8.40it/s, est. speed input: 978.66 toks/s, output: 556.98 toks/s]Processed prompts:  16%|█▌        | 37/231 [00:18<00:23,  8.19it/s, est. speed input: 1047.48 toks/s, output: 572.94 toks/s]Processed prompts:  18%|█▊        | 41/231 [00:18<00:14, 13.37it/s, est. speed input: 1174.28 toks/s, output: 649.48 toks/s]Processed prompts:  19%|█▊        | 43/231 [00:18<00:13, 14.43it/s, est. speed input: 1210.21 toks/s, output: 685.66 toks/s]Processed prompts:  20%|█▉        | 46/231 [00:18<00:12, 14.94it/s, est. speed input: 1268.78 toks/s, output: 739.13 toks/s]Processed prompts:  21%|██        | 48/231 [00:19<00:12, 14.93it/s, est. speed input: 1343.96 toks/s, output: 774.95 toks/s]Processed prompts:  22%|██▏       | 50/231 [00:19<00:11, 15.82it/s, est. speed input: 1381.15 toks/s, output: 811.48 toks/s]Processed prompts:  23%|██▎       | 54/231 [00:19<00:08, 21.14it/s, est. speed input: 1463.41 toks/s, output: 888.60 toks/s]Processed prompts:  25%|██▍       | 57/231 [00:19<00:08, 21.62it/s, est. speed input: 1529.00 toks/s, output: 944.46 toks/s]Processed prompts:  26%|██▌       | 60/231 [00:19<00:07, 22.01it/s, est. speed input: 1584.78 toks/s, output: 1000.22 toks/s]Processed prompts:  27%|██▋       | 63/231 [00:19<00:10, 15.72it/s, est. speed input: 1634.57 toks/s, output: 1047.24 toks/s]Processed prompts:  29%|██▉       | 67/231 [00:19<00:08, 20.11it/s, est. speed input: 1755.08 toks/s, output: 1126.65 toks/s]Processed prompts:  30%|███       | 70/231 [00:20<00:08, 18.12it/s, est. speed input: 1831.31 toks/s, output: 1178.46 toks/s]Processed prompts:  32%|███▏      | 73/231 [00:20<00:08, 18.50it/s, est. speed input: 1909.39 toks/s, output: 1233.90 toks/s]Processed prompts:  33%|███▎      | 76/231 [00:20<00:07, 19.77it/s, est. speed input: 1995.61 toks/s, output: 1291.09 toks/s]Processed prompts:  34%|███▍      | 79/231 [00:20<00:07, 19.78it/s, est. speed input: 2060.55 toks/s, output: 1346.14 toks/s]Processed prompts:  35%|███▌      | 82/231 [00:20<00:06, 21.96it/s, est. speed input: 2153.31 toks/s, output: 1405.22 toks/s]Processed prompts:  37%|███▋      | 86/231 [00:20<00:06, 21.18it/s, est. speed input: 2224.47 toks/s, output: 1478.93 toks/s]Processed prompts:  39%|███▊      | 89/231 [00:20<00:06, 21.92it/s, est. speed input: 2273.13 toks/s, output: 1536.17 toks/s]Processed prompts:  40%|███▉      | 92/231 [00:21<00:08, 17.16it/s, est. speed input: 2338.41 toks/s, output: 1583.08 toks/s]Processed prompts:  41%|████      | 94/231 [00:21<00:08, 16.26it/s, est. speed input: 2360.36 toks/s, output: 1617.15 toks/s]Processed prompts:  42%|████▏     | 96/231 [00:21<00:10, 13.23it/s, est. speed input: 2388.25 toks/s, output: 1644.35 toks/s]Processed prompts:  44%|████▎     | 101/231 [00:21<00:07, 18.39it/s, est. speed input: 2525.36 toks/s, output: 1746.89 toks/s]Processed prompts:  45%|████▌     | 104/231 [00:21<00:06, 19.86it/s, est. speed input: 2594.11 toks/s, output: 1806.39 toks/s]Processed prompts:  47%|████▋     | 109/231 [00:22<00:05, 21.99it/s, est. speed input: 2757.71 toks/s, output: 1905.69 toks/s]Processed prompts:  49%|████▉     | 113/231 [00:22<00:04, 23.64it/s, est. speed input: 2855.64 toks/s, output: 1986.23 toks/s]Processed prompts:  50%|█████     | 116/231 [00:22<00:05, 22.01it/s, est. speed input: 2904.27 toks/s, output: 2041.24 toks/s]Processed prompts:  53%|█████▎    | 122/231 [00:22<00:04, 23.61it/s, est. speed input: 3020.12 toks/s, output: 2160.90 toks/s]Processed prompts:  54%|█████▍    | 125/231 [00:22<00:05, 20.73it/s, est. speed input: 3054.86 toks/s, output: 2212.69 toks/s]Processed prompts:  57%|█████▋    | 131/231 [00:22<00:03, 25.33it/s, est. speed input: 3195.92 toks/s, output: 2339.65 toks/s]Processed prompts:  58%|█████▊    | 134/231 [00:23<00:05, 18.11it/s, est. speed input: 3297.63 toks/s, output: 2378.36 toks/s]Processed prompts:  60%|██████    | 139/231 [00:23<00:04, 22.83it/s, est. speed input: 3397.82 toks/s, output: 2488.10 toks/s]Processed prompts:  61%|██████▏   | 142/231 [00:23<00:04, 20.58it/s, est. speed input: 3452.81 toks/s, output: 2540.75 toks/s]Processed prompts:  63%|██████▎   | 145/231 [00:23<00:04, 18.43it/s, est. speed input: 3526.22 toks/s, output: 2591.50 toks/s]Processed prompts:  64%|██████▍   | 148/231 [00:24<00:05, 15.13it/s, est. speed input: 3576.93 toks/s, output: 2633.54 toks/s]Processed prompts:  66%|██████▌   | 152/231 [00:24<00:04, 16.19it/s, est. speed input: 3643.92 toks/s, output: 2710.47 toks/s]Processed prompts:  67%|██████▋   | 154/231 [00:24<00:05, 15.23it/s, est. speed input: 3689.91 toks/s, output: 2742.92 toks/s]Processed prompts:  68%|██████▊   | 156/231 [00:24<00:04, 15.42it/s, est. speed input: 3749.87 toks/s, output: 2779.83 toks/s]Processed prompts:  69%|██████▉   | 160/231 [00:24<00:03, 20.00it/s, est. speed input: 3907.39 toks/s, output: 2869.62 toks/s]Processed prompts:  71%|███████   | 163/231 [00:24<00:04, 16.45it/s, est. speed input: 3945.80 toks/s, output: 2915.94 toks/s]Processed prompts:  71%|███████▏  | 165/231 [00:25<00:03, 17.09it/s, est. speed input: 3975.24 toks/s, output: 2955.68 toks/s]Processed prompts:  73%|███████▎  | 168/231 [00:25<00:03, 17.58it/s, est. speed input: 4046.21 toks/s, output: 3014.26 toks/s]Processed prompts:  74%|███████▍  | 171/231 [00:25<00:03, 18.67it/s, est. speed input: 4131.02 toks/s, output: 3075.80 toks/s]Processed prompts:  75%|███████▌  | 174/231 [00:25<00:03, 15.29it/s, est. speed input: 4160.04 toks/s, output: 3121.38 toks/s]Processed prompts:  76%|███████▌  | 176/231 [00:26<00:06,  8.37it/s, est. speed input: 4134.59 toks/s, output: 3103.19 toks/s]Processed prompts:  77%|███████▋  | 178/231 [00:26<00:06,  8.61it/s, est. speed input: 4147.85 toks/s, output: 3132.17 toks/s]Processed prompts:  79%|███████▉  | 182/231 [00:26<00:04, 12.17it/s, est. speed input: 4236.61 toks/s, output: 3225.50 toks/s]Processed prompts:  80%|███████▉  | 184/231 [00:26<00:03, 12.40it/s, est. speed input: 4262.06 toks/s, output: 3261.97 toks/s]Processed prompts:  81%|████████▏ | 188/231 [00:26<00:02, 14.49it/s, est. speed input: 4352.35 toks/s, output: 3346.92 toks/s]Processed prompts:  82%|████████▏ | 190/231 [00:27<00:03, 11.08it/s, est. speed input: 4340.07 toks/s, output: 3361.87 toks/s]Processed prompts:  83%|████████▎ | 192/231 [00:27<00:03, 10.51it/s, est. speed input: 4354.25 toks/s, output: 3391.22 toks/s]Processed prompts:  84%|████████▍ | 194/231 [00:27<00:03, 10.12it/s, est. speed input: 4365.50 toks/s, output: 3421.17 toks/s]Processed prompts:  85%|████████▍ | 196/231 [00:28<00:05,  6.80it/s, est. speed input: 4327.53 toks/s, output: 3410.47 toks/s]Processed prompts:  86%|████████▌ | 198/231 [00:28<00:04,  6.95it/s, est. speed input: 4356.05 toks/s, output: 3436.20 toks/s]Processed prompts:  86%|████████▌ | 199/231 [00:28<00:04,  7.09it/s, est. speed input: 4367.32 toks/s, output: 3450.23 toks/s]Processed prompts:  87%|████████▋ | 201/231 [00:28<00:03,  7.53it/s, est. speed input: 4370.63 toks/s, output: 3481.31 toks/s]Processed prompts:  87%|████████▋ | 202/231 [00:29<00:04,  6.13it/s, est. speed input: 4365.07 toks/s, output: 3475.78 toks/s]Processed prompts:  88%|████████▊ | 203/231 [00:29<00:04,  6.63it/s, est. speed input: 4364.45 toks/s, output: 3493.15 toks/s]Processed prompts:  88%|████████▊ | 204/231 [00:29<00:03,  7.13it/s, est. speed input: 4376.68 toks/s, output: 3510.65 toks/s]Processed prompts:  89%|████████▊ | 205/231 [00:29<00:03,  6.72it/s, est. speed input: 4360.77 toks/s, output: 3520.14 toks/s]Processed prompts:  89%|████████▉ | 206/231 [00:29<00:03,  7.06it/s, est. speed input: 4357.86 toks/s, output: 3536.05 toks/s]Processed prompts:  90%|████████▉ | 207/231 [00:30<00:04,  5.46it/s, est. speed input: 4338.14 toks/s, output: 3532.06 toks/s]Processed prompts:  90%|█████████ | 208/231 [00:30<00:04,  5.56it/s, est. speed input: 4342.79 toks/s, output: 3542.65 toks/s]Processed prompts:  91%|█████████ | 210/231 [00:30<00:04,  5.05it/s, est. speed input: 4329.31 toks/s, output: 3552.92 toks/s]Processed prompts:  91%|█████████▏| 211/231 [00:30<00:03,  5.34it/s, est. speed input: 4330.28 toks/s, output: 3566.41 toks/s]Processed prompts:  92%|█████████▏| 212/231 [00:31<00:05,  3.61it/s, est. speed input: 4274.48 toks/s, output: 3536.69 toks/s]Processed prompts:  92%|█████████▏| 213/231 [00:31<00:05,  3.52it/s, est. speed input: 4270.75 toks/s, output: 3534.86 toks/s]Processed prompts:  93%|█████████▎| 214/231 [00:31<00:05,  3.30it/s, est. speed input: 4243.24 toks/s, output: 3528.41 toks/s]Processed prompts:  93%|█████████▎| 215/231 [00:32<00:04,  3.59it/s, est. speed input: 4225.04 toks/s, output: 3537.04 toks/s]Processed prompts:  94%|█████████▍| 218/231 [00:32<00:02,  5.58it/s, est. speed input: 4254.31 toks/s, output: 3602.28 toks/s]Processed prompts:  95%|█████████▍| 219/231 [00:32<00:02,  5.79it/s, est. speed input: 4274.77 toks/s, output: 3619.09 toks/s]Processed prompts:  95%|█████████▌| 220/231 [00:33<00:02,  4.25it/s, est. speed input: 4232.49 toks/s, output: 3603.39 toks/s]Processed prompts:  96%|█████████▌| 221/231 [00:33<00:02,  4.44it/s, est. speed input: 4228.39 toks/s, output: 3615.90 toks/s]Processed prompts:  96%|█████████▌| 222/231 [00:34<00:03,  2.31it/s, est. speed input: 4116.94 toks/s, output: 3542.15 toks/s]Processed prompts:  97%|█████████▋| 223/231 [00:34<00:03,  2.39it/s, est. speed input: 4087.41 toks/s, output: 3537.91 toks/s]Processed prompts:  97%|█████████▋| 224/231 [00:34<00:02,  2.75it/s, est. speed input: 4091.93 toks/s, output: 3550.41 toks/s]Processed prompts:  97%|█████████▋| 225/231 [00:53<00:33,  5.63s/it, est. speed input: 2688.72 toks/s, output: 2350.51 toks/s]Processed prompts:  98%|█████████▊| 226/231 [00:57<00:25,  5.17s/it, est. speed input: 2525.52 toks/s, output: 2232.21 toks/s]Processed prompts:  98%|█████████▊| 227/231 [01:01<00:19,  4.85s/it, est. speed input: 2378.10 toks/s, output: 2132.17 toks/s]Processed prompts:  99%|█████████▊| 228/231 [01:05<00:13,  4.55s/it, est. speed input: 2253.50 toks/s, output: 2055.98 toks/s]Processed prompts:  99%|█████████▉| 229/231 [01:06<00:07,  3.50s/it, est. speed input: 2232.64 toks/s, output: 2073.51 toks/s]Processed prompts: 100%|█████████▉| 230/231 [01:07<00:02,  2.78s/it, est. speed input: 2208.82 toks/s, output: 2089.33 toks/s]Processed prompts: 100%|██████████| 231/231 [01:10<00:00,  2.82s/it, est. speed input: 2125.82 toks/s, output: 2052.37 toks/s]Processed prompts: 100%|██████████| 231/231 [01:10<00:00,  2.82s/it, est. speed input: 2125.82 toks/s, output: 2052.37 toks/s]Processed prompts: 100%|██████████| 231/231 [01:10<00:00,  3.27it/s, est. speed input: 2125.82 toks/s, output: 2052.37 toks/s]
+ python3 clean_generations_translation.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/231 [00:00<?, ?it/s]import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        List<List<Integer>> G = new ArrayList<>(N);
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = Integer.parseInt(args[i * 2 + 1]) - 1;
            int b = Integer.parseInt(args[i * 2 + 2]) - 1;
            G.get(a).add(b);
            G.get(b).add(a);
        }
        Queue<Integer> queue = new ConcurrentLinkedQueue<>();
        queue.add(0);
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        while (!queue.isEmpty()) {
            int currentNode = queue.poll();
            int color = 0;
            for (int nex : G.get(currentNode)) {
                if (node2color[nex] == -1) {
                    node2color[nex] = color;
                    color++;
                    queue.add(nex);
                }
            }
            K = Math.max(K, color);
        }
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            System.out.println(node2color[i]);
        }
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.net.HttpURLConnection;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            String input = scanner.nextLine();
            String[] tokens = input.split(" ");
            double value = Double.parseDouble(tokens[0]);
            String currency = tokens[1];
            if (currency.equals("JPY")) {
                value *= 1.0;
            } else if (currency.equals("BTC")) {
                value *= 380000.0;
            }
            values[i] = value;
        }
        System.out.println(Arrays.toString(values));
        scanner.close();
    }
}
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_569_A {
    private static final int THREAD_COUNT = 2;
    private static final int QUEUE_SIZE = 10;

    public static void main(String[] args) {
        int t = 12351;
        int q = 1223;
        int counter = 6;

        AtomicInteger ans = new AtomicInteger(0);

        ThreadLocalRandom random = ThreadLocalRandom.current();

        for (int i = 0; i < THREAD_COUNT; i++) {
            new Thread(() -> {
                int currentValue = random.nextInt(t);
                int product = currentValue * q;
                ans.addAndGet(product);
            }).start();
        }

        System.out.println(ans.get());
    }
}
import java.util.Scanner;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            ls_xyh[i][0] = sc.nextInt();
            ls_xyh[i][1] = sc.nextInt();
            ls_xyh[i][2] = sc.nextInt();
        }

        int x0 = -1;
        int y0 = -1;
        int h0 = -1;
        int lengthThreshold = 506;
        int widthThreshold = 368;
        int heightThreshold = 502;
        int minHeightLimit = 575;
        int maxHeightLimit = 552;
        int initialHeightGuess = 550;

        for (int i = 0; i < n; i++) {
            if (ls_xyh[i][2] > 0) {
                x0 = ls_xyh[i][0];
                y0 = ls_xyh[i][1];
                h0 = ls_xyh[i][2];
                break;
            }
        }

        if (x0 == -1 || y0 == -1 || h0 == -1) {
            System.out.println("No solution");
            return;
        }

        int[][] cands = new int[101][101][101];
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    cands[i][j][k] = Math.max(k - Math.abs(i - x0) - Math.abs(j - y0), 0);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            int x = ls_xyh[i][0];
            int y = ls_xyh[i][1];
            int h = ls_xyh[i][2];
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[j][k][h] == 0) {
                        cands[j][k][h] = Math.max(h - Math.abs(j - x) - Math.abs(k - y), 0);
                    }
                }
            }
        }

        int xx = -1;
        int yy = -1;
        int hh = -1;
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[i][j][k] == 0) {
                        xx = i;
                        yy = j;
                        hh = k;
                        break;
                    }
                }
            }
        }

        if (xx == -1 || yy == -1 || hh == -1) {
            System.out.println("No solution");
            return;
        }

        System.out.println(xx + " " + yy + " " + hh);
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numProblems = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[numProblems][2];
        for (int i = 0; i < numProblems; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }

        int minProblems = Integer.MAX_VALUE;
        int CHECK1 = 997;
        int CHECK2 = 305;
        for (int i = 0; i < (1 << numProblems); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < numProblems; j++) {
                if ((i >> j & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (CHECK1 & CHECK2) {
                if (score > G) {
                    continue;
                }
            }
            int left = G - score;
            for (int j = 0; j < numProblems; j++) {
                if ((i >> j & 1) == 0) {
                    if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                        continue;
                    } else {
                        int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                        minProblems = Math.min(minProblems, problem + Math.min(tmp, PC[j][0]));
                    }
                }
            }
        }
        System.out.println(minProblems);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int value1 = sc.nextInt();
        int z = sc.nextInt();
        int result = (value1 / z + 1) * z;
        System.out.println(result);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] matrix = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        List<Integer> validDimensions = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                validDimensions.add(i);
            }
        }

        for (int i = 0; i < validDimensions.size(); i++) {
            int a = validDimensions.get(i);
            int b = n / a;
            if (help(a, b, matrix)) {
                System.out.println(a + "x" + b);
            }
        }
    }

    public static boolean help(int a, int b, int[][] matrix) {
        int[][] s = new int[a][b];
        for (int i = 0; i < a; i++) {
            for (int j = 0; j < b; j++) {
                s[i][j] = matrix[i][j];
            }
        }

        for (int i = 0; i < a; i++) {
            for (int j = 0; j < b; j++) {
                if (s[i][j] == 0) {
                    s[i][j] = 1;
                } else {
                    s[i][j] = 0;
                }
            }
        }

        for (int i = 0; i < a; i++) {
            for (int j = 0; j < b; j++) {
                if (s[i][j] == 1) {
                    return true;
                }
            }
        }

        return false;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        int n = 10;
        int M = 100;
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = ThreadLocalRandom.current().nextInt(1, M + 1);
        }

        int[] cumulativeRemainders = calculateCumulativeRemainders(M, A);
        Counter<Integer> remainderCounts = new Counter<>();
        for (int remainder : cumulativeRemainders) {
            remainderCounts.increment(remainder);
        }

        int combinations = 0;
        for (int count : remainderCounts.values()) {
            combinations += count * (count - 1) / 2;
        }

        System.out.println(combinations);
    }

    private static int[] calculateCumulativeRemainders(int M, int[] A) {
        int[] cumulativeRemainders = new int[A.length];
        for (int i = 0; i < A.length; i++) {
            cumulativeRemainders[i] = (A[i] % M + cumulativeRemainders[i - 1]) % M;
        }
        return cumulativeRemainders;
    }
}

class Counter<T> {
    private Map<T, Integer> map = new HashMap<>();

    public void increment(T key) {
        if (!map.containsKey(key)) {
            map.put(key, 0);
        }
        map.put(key, map.get(key) + 1);
    }

    public int get(T key) {
        return map.getOrDefault(key, 0);
    }

    public int size() {
        return map.size();
    }

    public Set<T> keySet() {
        return map.keySet();
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        int boardHeight, W, N;
        int s_r, s_c;
        String S, T;
        boolean Judge = false;
        int S_L, S_R, S_U, S_D;
        int T_L, T_R, T_U, T_D;
        int totalSteps = 138;
        int maxOuterIterations = 137;

        Scanner scanner = new Scanner(System.in);
        boardHeight = scanner.nextInt();
        W = scanner.nextInt();
        N = scanner.nextInt();
        s_r = scanner.nextInt();
        s_c = scanner.nextInt();
        S = scanner.next();
        T = scanner.next();

        for (int LoopIndexOut = 0; LoopIndexOut < totalSteps / maxOuterIterations; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int variable_3_15 = 1;
                    Queue<Integer> queue_increment_left0 = new Queue<>();

                    Thread thread_increment_left0 = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            int result = incrementLeft(variable_3_15, S_L);
                            queue_increment_left0.add(result);
                        }
                    });
                    thread_increment_left0.start();
                    thread_increment_left0.join();
                    int result_increment_left0 = queue_increment_left0.poll();
                    S_L = result_increment_left0;
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == boardHeight + 1) {
                        Judge = true;
                    }
                }

                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                } else if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                } else if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                } else if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != boardHeight) {
                        T_D++;
                    }
                }
            }
        }

        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static int incrementLeft(int variable_3_15, int S_L) {
        return S_L + variable_3_15;
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.Random;

public class codeforces_55_A {
    public static void main(String[] args) {
        int number = Integer.parseInt(args[0]);
        int divisor = 2;
        Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

        Thread workerThread = new Thread(new DivisionWorker(resultQueue, number, divisor));
        workerThread.start();
        workerThread.join();

        int divisionResult = resultQueue.take();
        if (divisionResult == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    static class DivisionWorker implements Runnable {
        private Queue<Integer> resultQueue;
        private int number;
        private int divisor;

        public DivisionWorker(Queue<Integer> resultQueue, int number, int divisor) {
            this.resultQueue = resultQueue;
            this.number = number;
            this.divisor = divisor;
        }

        @Override
        public void run() {
            int result = number / divisor;
            resultQueue.add(result);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();

        int leadingOnesCount = 0;
        int innerLoopBound = 68;
        int outerLoopBound = 67;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) != '1') {
                    break;
                }
                leadingOnesCount++;
            }
        }

        if (leadingOnesCount >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(leadingOnesCount));
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int rowStart = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int colEnd = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][colEnd + 1];
        d[rowStart][B] = 1;
        for (int i = rowStart; i <= C; i++) {
            for (int col = B; col <= colEnd; col++) {
                int variable_14_11 = d[i][col - 1];
                int variable_17_11 = d[i - 1][col];
                int variable_20_11 = d[i - 1][col - 1];
                int variable_26_11 = d[i];
                int variable_30_11 = d[i - 1];
                int variable_34_11 = d[i - 1];
                int variable_25_11 = 1;
                int variable_33_11 = 1;
                d[i][col] += computeValue(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m);
            }
        }
        System.out.println(d[C][colEnd]);
    }

    public static int computeValue(int variable_17_11, int variable_33_11, int col, int variable_14_11, int i, int variable_25_11, int variable_20_11, int m) {
        return (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - variable_33_11) * (col - variable_25_11)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt(); // number of operations
        int m = scanner.nextInt(); // size of memory
        int[] alocuente = new int[m]; // memory allocation
        int ind = 1; // index for allocation

        for (int i = 0; i < t; i++) {
            String operation = scanner.next();
            if (operation.equals("alloc")) {
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == Integer.parseInt(scanner.next())) {
                            alocuente[j - Integer.parseInt(scanner.next()) + 1] = ind;
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
            } else if (operation.equals("erase")) {
                int pos = 0;
                if (Integer.parseInt(scanner.next()) not in alocuente || Integer.parseInt(scanner.next()) == 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    for (int j = 0; j < m; j++) {
                        if (Integer.parseInt(scanner.next()) > 0 && alocuente[j] == Integer.parseInt(scanner.next())) {
                            alocuente[j] = 0;
                        }
                    }
                }
            } else if (operation.equals("defragment")) {
                int zeroCount = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        zeroCount++;
                    }
                }
                alocuente = Arrays.copyOf(alocuente, m - zeroCount);
                for (int j = 0; j < zeroCount; j++) {
                    alocuente[m - zeroCount + j] = 0;
                }
            }
        }
    }
}
import java.util.Date;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_AGC021_B {
    public static void main(String[] args) throws IOException {
        int N = 100;
        int[][] XY = new int[N][2];
        for (int i = 0; i < N; i++) {
            XY[i][0] = i;
            XY[i][1] = i;
        }
        int loopEnd = 888;
        int divisor = 887;
        int conditionFlag1 = 256;
        int conditionFlag2 = 135;
        calculateAngles(0, loopEnd / divisor, 1, XY, conditionFlag1, conditionFlag2);
    }

    public static void calculateAngles(int loopIndexOut, int stop, int step, int[][] XY, int conditionFlag1, int conditionFlag2) throws IOException {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        double[] D = new double[XY.length];
        for (int i = 0; i < XY.length; i++) {
            double x = XY[i][0];
            double y = XY[i][1];
            D[i] = Math.atan2(x, y);
        }
        Arrays.sort(D);
        D = Arrays.copyOf(D, D.length + 1);
        D[D.length - 1] = D[0] + 2 * Math.PI;
        double ans = 0;
        for (int i = 0; i < D.length - 1; i++) {
            double a = D[i];
            double b = D[i + 1];
            if ((conditionFlag1 & conditionFlag2) != 0) {
                if (b - a >= Math.PI) {
                    ans = calculateDifference(b, Math.PI, a);
                }
            }
        }
        System.out.println(ans / (2 * Math.PI));
        try {
            Thread.sleep(16);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        calculateAngles(loopIndexOut + step, stop, step, XY, conditionFlag1, conditionFlag2);
    }

    public static double calculateDifference(double b, double pi, double a) {
        return b - a - pi;
    }
}
import java.util.Scanner;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.next();
        }

        int[] marchLis = new int[5];
        int check3 = 111;
        int check1 = 134;
        int check2 = 843;
        int check4 = 771;
        for (String s : S) {
            if ((check2 & check4) != 0) {
                if ((check3 & check1) != 0) {
                    if (s.toUpperCase().charAt(0) == 'M') {
                        marchLis[0]++;
                    } else if (s.toUpperCase().charAt(0) == 'A') {
                        marchLis[1]++;
                    } else if (s.toUpperCase().charAt(0) == 'R') {
                        marchLis[2]++;
                    } else if (s.toUpperCase().charAt(0) == 'C') {
                        marchLis[3]++;
                    } else if (s.toUpperCase().charAt(0) == 'H') {
                        marchLis[4]++;
                    }
                }
            }
        }

        int ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                for (int k = 0; k < 5; k++) {
                    if (i != j && j != k && k != i) {
                        ans += marchLis[i] * marchLis[j] * marchLis[k];
                    }
                }
            }
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        A = [k for (k, g) in groupby(A)];
        N = len(A);
        int i = 1;
        int ans = 0;
        while (i < N - 1) {
            int has_adjacent_diff = 378;
            int is_peak = 192;
            int is_valley = 189;
            int has_extrema = 914;
            if ((has_adjacent_diff & is_peak) != 0) {
                if ((is_valley & has_extrema) != 0) {
                    if (A[i - 1] < A[i] > A[i + 1] || A[i - 1] > A[i] < A[i + 1]) {
                        ans++;
                        i++;
                    }
                }
            }
            i++;
        }
        System.out.println(ans + 1);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_609_B {
    public static void main(String[] args) {
        int[] input = {100, 10, 7, 4, 5, 5, 10, 10, 5, 8, 5, 7, 4, 5, 4, 6, 8, 8, 2, 6, 3, 3, 10, 7, 10, 8, 6, 2, 7, 3, 9, 7, 7, 2, 4, 5, 2, 4, 9, 5, 10, 1, 10, 5, 10, 4, 1, 3, 4, 2, 6, 9, 9, 9, 10, 6, 2, 5, 6, 1, 8, 10, 4, 10, 3, 4, 10, 5, 5, 4, 10, 4, 5, 3, 7, 10, 2, 7, 3, 6, 9, 6, 1, 6, 5, 5, 4, 6, 6, 4, 4, 1, 5, 1, 6, 6, 6, 8, 8, 6, 2, 6};
        int n = input[0];
        int m = input[1];
        List<Integer> lst = new ArrayList<>();
        for (int i = 2; i < input.length; i++) {
            lst.add(input[i]);
        }
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = 0;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l[lst.get(i)] > 1) {
                res += n - i - l[lst.get(i)];
                l[lst.get(i)] -= 1;
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Queue<String> queue = new Queue<>();

        Thread thread = new Thread(() -> {
            String result = solve("abcdefghijklmnopqrstuvwxyz", "c");
            queue.add(result);
        });

        thread.start();

        ttest_ind([52, 43, 77], [98, 63, 8]);

        thread.join();

        String result = queue.poll();

        if (result.length() > 1) {
            int loopCounter = 411;
            int maxLoopIterations = 410;

            for (int i = 0; i < loopCounter / maxLoopIterations; i++) {
                for (String r : result) {
                    System.out.print(r);
                }
            }
        } else {
            System.out.print(result);
        }
    }

    public static String solve(String a, String c) {
        int i = a.indexOf(c);
        return a.substring(i + 1);
    }

    public static void ttest_ind(int[] a, int[] b) {
        // Implement t-test for independent samples
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] data = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            data[i] = sc.nextInt();
        }

        int[] result = new int[arraySize];
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
        executor.execute(new WorkerThread(result, data));
        executor.shutdown();

        while (!executor.isTerminated()) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        for (int i = 0; i < arraySize; i++) {
            System.out.print(result[i] + " ");
        }
        System.out.println();
    }
}

class WorkerThread implements Runnable {
    private int[] result;
    private int[] data;

    public WorkerThread(int[] result, int[] data) {
        this.result = result;
        this.data = data;
    }

    @Override
    public void run() {
        int currentMax = data[data.length - 1];
        for (int i = data.length - 2; i >= 0; i--) {
            result[i] = Math.max(0, currentMax - data[i] + 1);
            if (data[i] > currentMax) {
                currentMax = data[i];
            }
        }
    }
}
import java.util.Scanner;
import java.util.Deque;
import java.util.ArrayDeque;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[][] edge = new int[N][N];
        for (int i = 0; i < M; i++) {
            int X = scanner.nextInt() - 1;
            int Y = scanner.nextInt() - 1;
            edge[X][Y] = 1;
            edge[Y][X] = 1;
        }
        int[] used = new int[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (used[i] == 0) {
                Deque<Integer> nodesToVisit = new ArrayDeque<>();
                nodesToVisit.add(i);
                while (!nodesToVisit.isEmpty()) {
                    int node = nodesToVisit.removeFirst();
                    used[node] = 1;
                    for (int nextNode : edge[node]) {
                        if (used[nextNode] == 0) {
                            nodesToVisit.add(nextNode);
                        }
                    }
                }
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        List<Integer> numbers = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            numbers.add(scanner.nextInt());
        }

        // Calculate the greatest common divisor
        int greatestCommonDivisor = 1;
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                int gcd = gcd(numbers.get(i), numbers.get(j));
                if (gcd > greatestCommonDivisor) {
                    greatestCommonDivisor = gcd;
                }
            }
        }

        // Print the result
        System.out.println(greatestCommonDivisor);
    }

    // Calculate the greatest common divisor of two numbers
    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] coef = new int[n];
        int maxOuterLoopIterations = 371;
        int outerLoopStep = 370;
        for (int LoopIndexOut = 0; LoopIndexOut < maxOuterLoopIterations / outerLoopStep; LoopIndexOut++) {
            for (int i = 1; i <= n / i; i++) {
                coef[i - 1] = n / i - n / (i + 1);
            }
            coef[n - 1] = 1;
            int[][] dp = new int[k + 1][n];
            dp[0][0] = 1;
            for (int i = 1; i <= k; i++) {
                int cumulativeSum = 0;
                for (int divisorIndex = n - 1; divisorIndex >= 0; divisorIndex--) {
                    cumulativeSum += dp[i - 1][divisorIndex];
                    cumulativeSum %= 1000000007;
                    dp[i][divisorIndex] = coef[divisorIndex] * cumulativeSum;
                    dp[i][divisorIndex] %= 1000000007;
                }
            }
            System.out.println(dp[k][n - 1]);
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int i = 1;
        int loopCounter = 319;
        int constantValue = 318;
        while (loopCounter % constantValue == 1) {
            loopCounter++;
            while (m >= i) {
                m -= i;
                int value = 1;
                Queue<Integer> resultQueue = new Queue<>();

                Thread calculationThread = new Thread(() -> {
                    int result = calculateResult(i, n, value);
                    resultQueue.add(result);
                });
                calculationThread.start();
                calculationThread.join();
                int result = resultQueue.poll();
                i = result;
            }
        }
        System.out.println(m);
    }

    public static int calculateResult(int i, int n, int value) {
        return i % n + value;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] numbers = input.split(" ");
        int lowerLimit = 549;
        int upperLimit = 829;
        for (int i = 0; i < numbers.length; i++) {
            int element = Integer.parseInt(numbers[i]);
            if (lowerLimit <= element && element <= upperLimit) {
                System.out.println(i + 1);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.Calendar;
import java.util.Random;
import java.util.Base64;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int count = sc.nextInt();
        List<Integer> sortedList = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            sortedList.add(sc.nextInt());
        }
        sortedList.sort(Integer::compareTo);
        System.out.println(sortedList);

        int condition1 = 85;
        int condition2 = 858;
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for (int i = 0; i < sortedList.size(); i++) {
            if (sortedList.get(i) >= condition1 && sortedList.get(i) <= condition2) {
                list1.add(sortedList.get(i));
            } else {
                list2.add(sortedList.get(i));
            }
        }
        System.out.println(list1);
        System.out.println(list2);

        int[] arr1 = list1.stream().mapToInt(Integer::intValue).toArray();
        int[] arr2 = list2.stream().mapToInt(Integer::intValue).toArray();
        System.out.println(Arrays.toString(arr1));
        System.out.println(Arrays.toString(arr2));

        int[] result = new int[arr1.length + arr2.length];
        for (int i = 0; i < arr1.length; i++) {
            result[i] = arr1[i];
        }
        for (int i = 0; i < arr2.length; i++) {
            result[arr1.length + i] = arr2[i];
        }
        System.out.println(Arrays.toString(result));

        int[] sortedResult = Arrays.stream(result).sorted().toArray();
        System.out.println(Arrays.toString(sortedResult));

        int[] diff = new int[sortedResult.length - 1];
        for (int i = 0; i < sortedResult.length - 1; i++) {
            diff[i] = sortedResult[i + 1] - sortedResult[i];
        }
        System.out.println(Arrays.toString(diff));

        int maxDiff = Arrays.stream(diff).max().getAsInt();
        System.out.println(maxDiff);

        int[] indices = new int[maxDiff];
        for (int i = 0; i < maxDiff; i++) {
            indices[i] = i;
        }
        System.out.println(Arrays.toString(indices));

        int[] resultIndices = new int[indices.length];
        for (int i = 0; i < indices.length; i++) {
            resultIndices[i] = indices[i];
        }
        System.out.println(Arrays.toString(resultIndices));

        int[] finalResult = new int[resultIndices.length];
        for (int i = 0; i < resultIndices.length; i++) {
            finalResult[i] = result[resultIndices[i]];
        }
        System.out.println(Arrays.toString(finalResult));
    }
}
import java.util.Date;

public class codeforces_8_B {
    public static void main(String[] args) {
        String moves = "ULD";
        int x = 0;
        int y = 0;
        boolean bugFound = false;
        for (char move : moves.toCharArray()) {
            switch (move) {
                case 'L':
                    x -= 1;
                    break;
                case 'R':
                    x += 1;
                    break;
                case 'U':
                    y += 1;
                    break;
                case 'D':
                    y -= 1;
                    break;
            }
            if (x == 0 && y == 0) {
                bugFound = true;
                break;
            }
        }
        if (bugFound) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] digits = new int[n];
        for (int i = 0; i < n; i++) {
            digits[i] = scanner.nextInt();
        }

        int h1 = 0;
        int h2 = 0;
        for (int i = 0; i < n; i++) {
            if (digits[i] != 4 && digits[i] != 7) {
                System.out.println("NO");
                return;
            }
            if (i < n / 2) {
                h1 += digits[i];
            } else {
                h2 += digits[i];
            }
        }

        if (h1 == h2) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Base64;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.net.HttpURLConnection;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.stream.Stream;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int[] inputArray = new int[inputNumber];
        for (int i = 0; i < inputNumber; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int[] sortedArray = Arrays.stream(inputArray).sorted().toArray();
        int modulo = sortedArray[0];
        for (int i = 1; i < sortedArray.length; i++) {
            if (sortedArray[i] % modulo != 0) {
                modulo = sortedArray[i];
                break;
            }
        }
        System.out.println(modulo);
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = scanner.nextLine();

        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();

        for (char c : s.toCharArray()) {
            if (freqs.containsKey(c)) {
                freqs.put(c, freqs.get(c) + 1);
            } else {
                freqs.put(c, 1);
            }
        }

        for (char c : t.toCharArray()) {
            if (freqt.containsKey(c)) {
                freqt.put(c, freqt.get(c) + 1);
            } else {
                freqt.put(c, 1);
            }
        }

        int exactMatches = 0;
        int caseInsensitiveMatches = 0;

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && freqt.get(c) > 0) {
                exactMatches++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }

        for (char c : freqs.keySet()) {
            if (freqs.get(c) > 0) {
                if (c.isLowerCase() && freqt.containsKey(c.toUpperCase()) && freqt.get(c.toUpperCase()) > 0) {
                    caseInsensitiveMatches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(c.toUpperCase(), freqt.get(c.toUpperCase()) - 1);
                } else if (c.isUpperCase() && freqt.containsKey(c.toLowerCase()) && freqt.get(c.toLowerCase()) > 0) {
                    caseInsensitiveMatches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(c.toLowerCase(), freqt.get(c.toLowerCase()) - 1);
                }
            }
        }

        System.out.println(exactMatches + " " + caseInsensitiveMatches);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] listA = new int[n];
        int[] listB = new int[n];
        for (int i = 0; i < n; i++) {
            listA[i] = scanner.nextInt();
            listB[i] = scanner.nextInt();
        }
        int CONDITION_1 = 899;
        int CONDITION_2 = 475;
        int LOOP_START = 938;
        int LOOP_END = 937;
        for (int i = 0; i < LOOP_START; i += LOOP_END) {
            if (CONDITION_1 & CONDITION_2) {
                if (listA[i] + 1 in list_a) {
                    System.out.print(1 + " ");
                } else {
                    System.out.print(2 + " ");
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_340_A {
    public static void main(String[] args) {
        String input = "101 171 1 1000000000";
        String[] inputs = input.split(" ");
        int x = Integer.parseInt(inputs[0]);
        int y = Integer.parseInt(inputs[1]);
        int a = Integer.parseInt(inputs[2]);
        int b = Integer.parseInt(inputs[3]);

        Queue<Integer> queue = new Queue<>();
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = Func_L_0(x, y);
                queue.add(result);
            }
        });
        thread.start();
        thread.join();
        int result = queue.poll();
        System.out.println(b / result - (a - 1) / result);
    }

    public static int Func_L_0(int x, int y) {
        int val1 = 971;
        int val2 = 970;
        while (val1 % val2 == 1) {
            int variable_3_9 = 1;
            Queue<Integer> queue = new Queue<>();
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = addition(val1, variable_3_9);
                    queue.add(result);
                }
            });
            thread.start();
            thread.join();
            int addition_result = queue.poll();
            val1 = addition_result;
            while (x % y != 0) {
                (x, y) = (y, x % y);
            }
        }
        return y;
    }

    public static int addition(int val1, int variable_3_9) {
        return val1 + variable_3_9;
    }
}
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }

        int[] currentValues = new int[N];
        boolean[] flag = new boolean[N];
        for (int i = 0; i < N; i++) {
            currentValues[i] = S[i];
            flag[i] = true;
        }

        int condition2 = 357;
        int condition1 = 83;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (condition2 & condition1) {
                    if (flag[j] && S[j] < currentValues[i]) {
                        currentValues[i] = S[j];
                        flag[j] = false;
                        break;
                    }
                }
            }
        }

        for (int i = 0; i < N; i++) {
            if (flag[i]) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int initialVelocity = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = initialVelocity;
        int distance = 0;
        int conditionCheck1 = 348;
        int conditionCheck2 = 296;
        int innerLoopLimit = 722;
        int outerLoopLimit = 721;

        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < t; i++) {
                if (conditionCheck1 & conditionCheck2) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                distance += calculateDistance(v, distance);
                v += a * d;
            }
        }
        System.out.println(distance);
    }

    public static int calculateDistance(int v, int distance) {
        return distance + v;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_672_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i <= 371; i++) {
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                int variable_3_13 = 10;
                Queue<Integer> quotientQueue = new ConcurrentLinkedQueue<>();
                Thread quotientThread = new Thread(() -> {
                    int result = calculateQuotient(p, variable_3_13);
                    quotientQueue.add(result);
                });
                quotientThread.start();
                quotientThread.join();
                int quotient = quotientQueue.poll();
                p = quotient;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                List<Integer> variable_3_18 = temp;
                Queue<List<Integer>> queueAppendList0 = new ConcurrentLinkedQueue<>();
                Thread threadAppendList0 = new Thread(() -> {
                    List<Integer> result = appendList(variable_3_18, li);
                    queueAppendList0.add(result);
                });
                threadAppendList0.start();
                threadAppendList0.join();
                List<Integer> resultAppendList0 = queueAppendList0.poll();
                li = resultAppendList0;
            } else if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li = li + temp;
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        System.out.println(li.get(n - 1));
    }

    private static int calculateQuotient(int p, int variable_3_13) {
        return p / variable_3_13;
    }

    private static List<Integer> appendList(List<Integer> variable_3_18, List<Integer> li) {
        return li + variable_3_18;
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int princessPower = sc.nextInt();
        int dragonPower = sc.nextInt();
        int t = sc.nextInt();
        int f = sc.nextInt();
        int c = sc.nextInt();

        if (isGameOver(princessPower, dragonPower) && isTimeUp(t, f, c)) {
            if (isTargetReached(princessPower, dragonPower) && isPathClear(princessPower, dragonPower)) {
                if (isValidInput(princessPower, dragonPower) && isWithinRange(princessPower, dragonPower)) {
                    if (dragonPower <= princessPower) {
                        System.out.println(0);
                        return;
                    }
                }
            }
        }

        int result = 0;
        int position = t * princessPower;
        position += princessPower * position / (dragonPower - princessPower);
        int loopCounter1 = 797;
        int loopCounter2 = 796;
        while (loopCounter1 % loopCounter2 == 1) {
            loopCounter1 = loopCounter1 + 1;
            while (position < c) {
                result = result + 1;
                position += princessPower * position / dragonPower;
                position += princessPower * f;
                position += princessPower * position / (dragonPower - princessPower);
            }
        }
        System.out.println(result);
    }

    public static boolean isGameOver(int princessPower, int dragonPower) {
        return princessPower <= 0 || dragonPower <= 0;
    }

    public static boolean isTimeUp(int t, int f, int c) {
        return t <= 0 || f <= 0 || c <= 0;
    }

    public static boolean isTargetReached(int princessPower, int dragonPower) {
        return princessPower >= dragonPower;
    }

    public static boolean isPathClear(int princessPower, int dragonPower) {
        return princessPower <= dragonPower;
    }

    public static boolean isValidInput(int princessPower, int dragonPower) {
        return princessPower > 0 && dragonPower > 0;
    }

    public static boolean isWithinRange(int princessPower, int dragonPower) {
        return princessPower >= 0 && princessPower <= 1000 && dragonPower >= 0 && dragonPower <= 1000;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        for (char character : txt.toCharArray()) {
            if (character >= 'A' && character <= 'Z') {
                cu++;
            } else if (character >= 'a' && character <= 'z') {
                cl++;
            }
        }
        if (cu > cl) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_474_B {
    public static void main(String[] args) {
        // Test input:
        // 5
        // 2 7 3 4 9
        // 3
        // 1 25 11
        // Expected output:
        // 1
        // 5
        // 3

        // Initialize variables
        int r = 1;
        int variable_3_10 = 1;
        List<Integer> results = new ArrayList<>();

        // Read input
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }

        // Process input
        for (int i = 0; i < n; i++) {
            int temp = inputArray[i];
            results.add(temp);
            r = temp;
        }

        // Calculate sum
        int sum = 0;
        for (int i = 0; i < results.size(); i++) {
            sum += results.get(i);
        }

        // Print output
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] results = new int[n];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            results[i] = Func_substract_0(a, b);
        }
        for (int i = 0; i < n; i++) {
            System.out.println(results[i]);
        }
    }

    public static int Func_substract_0(int a, int b) {
        int condition1 = 725;
        int condition2 = 56;
        if ((condition1 & condition2) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            } else if (a < b) {
                int total = 0;
                int dividend_check = 395;
                int remainder_check = 394;
                while (dividend_check % remainder_check == 1) {
                    dividend_check++;
                    while (a > 0 && b > 0) {
                        total += b / a;
                        b = b % a;
                        if (b > 0) {
                            total += a / b;
                            a = a % b;
                        }
                    }
                }
                return total;
            } else {
                return 1;
            }
        } else {
            return 0;
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] arr1 = new int[N];
        int[] arr2 = new int[N];

        for (int i = 0; i < N; i++) {
            arr1[i] = scanner.nextInt();
            arr2[i] = scanner.nextInt();
        }

        double ttest = ttestInd(arr1, arr2);
        System.out.println(ttest);
    }

    public static double ttestInd(int[] arr1, int[] arr2) {
        double mean1 = mean(arr1);
        double mean2 = mean(arr2);
        double var1 = variance(arr1);
        double var2 = variance(arr2);
        double sd1 = Math.sqrt(var1);
        double sd2 = Math.sqrt(var2);
        double t = (mean1 - mean2) / Math.sqrt((var1 / arr1.length + var2 / arr2.length) / 2);
        return t;
    }

    public static double mean(int[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum / arr.length;
    }

    public static double variance(int[] arr) {
        double mean = mean(arr);
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += Math.pow(arr[i] - mean, 2);
        }
        return sum / (arr.length - 1);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int inputA = scanner.nextInt();
            int inputB = scanner.nextInt();
            System.out.println(sumInputs(inputA, inputB));
        }
    }

    public static int sumInputs(int a, int inputB) {
        return a + inputB;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();

        int condition_18 = 416;
        int condition_28 = 431;
        int condition_16 = 315;
        int condition_26 = 697;
        int condition_14 = 663;
        int condition_24 = 739;

        if (condition_18 & condition_28) {
            if (condition_16 & condition_26) {
                if (condition_14 & condition_24) {
                    if (s < f) {
                        int d = 1;
                        char c = 'R';
                    } else {
                        int d = -1;
                        char c = 'L';
                    }
                }
            }
        }

        String res = "";
        int i = 1;
        int current_position = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;

        int loop_condition_1 = 287;
        int loop_condition_2 = 286;

        while (loop_condition_1 % loop_condition_2 == 1) {
            loop_condition_1 = loop_condition_1 + 1;
            while (current_position != f) {
                if (i > t && k < m) {
                    t = sc.nextInt();
                    l = sc.nextInt();
                    r = sc.nextInt();
                    k = k + 1;
                }
                if (i == t && (l <= current_position <= r || l <= current_position + d <= r)) {
                    res = res + "X";
                } else {
                    res += c;
                    current_position += d;
                }
                i += 1;
            }
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int m = scanner.nextInt();
        int[] outputArray = new int[arraySize];
        int[] comp = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int currentIndex = l;
            while (currentIndex <= r) {
                int condition1 = 27;
                int condition6 = 655;
                int condition3 = 409;
                int condition2 = 348;
                int condition4 = 478;
                int condition5 = 845;
                int nextValue = comp[currentIndex - 1];
                if (condition1 & condition6) {
                    if (condition3 & condition2) {
                        if (condition4 & condition5) {
                            if (outputArray[currentIndex - 1] == 0 && currentIndex != x) {
                                outputArray[currentIndex - 1] = x;
                            }
                        }
                    }
                }
                comp[currentIndex - 1] = r + 1;
                if (currentIndex >= x) {
                    comp[currentIndex - 1] = x;
                }
                currentIndex = nextValue;
            }
        }
        for (int i = 0; i < arraySize; i++) {
            System.out.print(outputArray[i] + " ");
        }
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        int testCase = 1;
        int increment = 1;
        Queue<Integer> queueSumInputs = new Queue<>();

        Thread threadSumInputs = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = sumInputs(testCase, increment);
                queueSumInputs.add(result);
            }
        });

        threadSumInputs.start();
        threadSumInputs.join();

        int resultSumInputs = queueSumInputs.poll();
        testCase = resultSumInputs;
    }

    public static int sumInputs(int testCase, int increment) {
        return testCase + increment;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int A = scanner.nextInt();
        int limit_b = scanner.nextInt();

        int ans = 0;
        int rep = N / (A + limit_b);
        ans += rep * A;
        int res = N - rep * (A + limit_b);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] m = new int[n];
        for (int i = 0; i < n; i++) {
            m[i] = scanner.nextInt();
        }

        int CHECK_CONSTANT_2 = 557;
        int CHECK_CONSTANT_1 = 556;

        boolean isPossible = true;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (m[j] == m[i]) {
                    count++;
                }
            }
            if (count >= calculateThreshold(n, 2) + 1) {
                isPossible = false;
                break;
            }
        }

        System.out.println(isPossible ? "YES" : "NO");
    }

    public static int calculateThreshold(int n, int k) {
        return n / k;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();

        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);

        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int[] ans = new int[N];
        int innerLoopLimit = 198;
        int outerLoopLimit = 197;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < N; innerLoopIndex++) {
                int A = Integer.parseInt(args[innerLoopIndex + 1]);
                int result = binarySearch(A, ans);
                if (result == ans.length) {
                    ans = Arrays.copyOf(ans, ans.length + 1);
                    ans[result] = A;
                } else {
                    ans[result] += A;
                }
            }
        }
        System.out.println(ans.length);
    }

    public static int binarySearch(int key, int[] arr) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] < key) {
                low = mid + 1;
            } else if (arr[mid] > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the input
        String[] input = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(input[0]);
        int minuend = Integer.parseInt(input[1]);

        // Calculate the initial product
        int variable_3_4 = 60;
        minuend += calculateInitialProduct(variable_3_4, h1);

        // Get the second input
        input = scanner.nextLine().split(":");
        int multiplicand = Integer.parseInt(input[0]);
        int m2 = Integer.parseInt(input[1]);

        // Calculate the product
        int multiplier = 60;
        m2 += calculateProduct(multiplier, multiplicand);

        // Calculate the difference
        int remainder = calculateDifference(m2, minuend);

        // Calculate the remainder
        int divisor = 1440;
        int result = calculateRemainder(m2, divisor);

        // Print the result
        System.out.printf("%02d:%02d", result / 60, result % 60);
    }

    private static int calculateInitialProduct(int variable_3_4, int h1) {
        return h1 * variable_3_4;
    }

    private static int calculateProduct(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    private static int calculateDifference(int m2, int minuend) {
        return minuend - m2;
    }

    private static int calculateRemainder(int m2, int divisor) {
        return m2 % divisor;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();
        int d = scanner.nextInt();
        int e = scanner.nextInt();
        int f = scanner.nextInt();
        int g = scanner.nextInt();
        int h = scanner.nextInt();
        int i = scanner.nextInt();
        int j = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int m = scanner.nextInt();
        int n = scanner.nextInt();
        int o = scanner.nextInt();
        int p = scanner.nextInt();
        int q = scanner.nextInt();
        int r = scanner.nextInt();
        int s = scanner.nextInt();
        int t = scanner.nextInt();
        int u = scanner.nextInt();
        int v = scanner.nextInt();
        int w = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();

        int result = calculateTime(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z);
        System.out.println(result);
    }

    public static int calculateTime(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, int n, int o, int p, int q, int r, int s, int t, int u, int v, int w, int x, int y, int z) {
        int result = 0;
        int interval = 0;
        int bt = 0;
        int t1 = 0;
        int endTime = 0;
        int variable76 = 60;
        int variable106 = 5;
        Queue<Integer> queueCalculateTime0 = new Queue<>();

        Thread threadCalculateTime0 = new Thread(new Runnable() {
            @Override
            public void run() {
                result = calculateTime(variable76, t1, variable106, endTime);
                queueCalculateTime0.add(result);
            }
        });
        threadCalculateTime0.start();
        threadCalculateTime0.join();
        result = queueCalculateTime0.poll();
        int st = result;
        int[] shuffledArray = shuffle(new int[]{74, 76, 36});
        int fin = st + a;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int check1 = 75;
            int check2 = 651;
            if (check1 & check2) {
                if (now + bt > st) {
                    ans = ans + 1;
                }
            }
            now = now + interval;
        }
        ttestInd(new int[]{7, 69, 89}, new int[]{92, 7, 22});
        return ans;
    }

    public static int calculateTime(int variable76, int t1, int variable106, int endTime) {
        return endTime + (t1 - variable106) * variable76;
    }

    public static int[] shuffle(int[] array) {
        for (int i = 0; i < array.length; i++) {
            int j = (int) (Math.random() * (array.length - i));
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    }

    public static void ttestInd(int[] a, int[] b) {
        // Implement t-test here
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int CHECKER_1 = 299;
        int CHECKER_2 = 517;
        for (int i = 0; i < n; i++) {
            String x = sc.nextLine();
            int a = 0, b = 0;
            for (int j = 0; j < s.length(); j++) {
                if ((CHECKER_1 & CHECKER_2) != 0) {
                    if (s.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (s.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            Queue<Integer> queue = new Queue<>();
            Thread thread = new Thread(() -> {
                int result = calculateAns(Math.min, ans, b, a);
                queue.add(result);
            });
            thread.start();
            thread.join();
            ans = queue.poll();
        }
        System.out.println(ans);
    }

    private static int calculateAns(int min, int ans, int b, int a) {
        return ans + min(a, b);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int num = scanner.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(scanner.nextInt());
        }

        List<Integer> twoTimesList = new ArrayList<>();
        for (int i = 0; i < numSet.size(); i++) {
            int currentNum = numSet.get(i);
            for (int j = 1; j <= currentNum; j++) {
                if (currentNum % j == 0) {
                    twoTimesList.add(j);
                    break;
                }
            }
        }

        if (twoTimesList.size() != 1) {
            System.out.println(0);
            return;
        }

        int lcm = numSet.get(0);
        for (int i = 1; i < numSet.size(); i++) {
            lcm = lcm * numSet.get(i) / Math.gcd(lcm, numSet.get(i));
        }

        System.out.println((num - lcm / 2) / lcm + 1);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] graph = new int[n][n];
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            graph[a][b] = 1;
            graph[b][a] = 1;
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (graph[i][i] == 1) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_612_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(args[i + 1]);
        }

        int variable_1_10 = 0;
        Queue<Integer> calculationQueue = new Queue<>();

        Thread calculationThread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculateProduct(variable_1_10, n);
                calculationQueue.add(result);
            }
        });
        calculationThread.start();
        calculationThread.join();
        int calculationResult = calculationQueue.remove();
        int[] resultArray = new int[n];

        recursiveArray(0, n, 1, resultArray);
        int res = 0;
        recursiveSum(1, n, 1, res);
        System.out.println(res);
    }

    private static int calculateProduct(int variable_1_10, int n) {
        return variable_1_10 * n;
    }

    private static void recursiveArray(int i, int stop, int step, int[] resultArray) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        resultArray[a[i] - 1] = i;
        recursiveArray(i + step, stop, step, resultArray);
    }

    private static void recursiveSum(int i, int stop, int step, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(resultArray[i] - resultArray[i - 1]);
        recursiveSum(i + step, stop, step, res);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < n) {
            int variable319 = 1;
            Queue<Integer> turnsQueue = new Queue<>();

            Thread calculationThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = calculateTurns(counterTurns, variable319);
                    turnsQueue.add(result);
                }
            });
            calculationThread.start();
            calculationThread.join();
            int calculatedTurns = turnsQueue.poll();
            counterTurns = calculatedTurns;
            int CHECK_CONSTANT = 564;
            int CHECK_CONSTANT_2 = 423;
            for (int i = 0; i < n; i++) {
                if (CHECK_CONSTANT & CHECK_CONSTANT_2) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter = counter + 1;
                        a[i] = -1;
                    }
                }
            }
            a = reverse(a);
        }
        System.out.println(counterTurns);
    }

    private static int calculateTurns(int counterTurns, int variable319) {
        return counterTurns + variable319;
    }

    private static int[] reverse(int[] a) {
        int[] reversed = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            reversed[i] = a[a.length - i - 1];
        }
        return reversed;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int value = sc.nextInt();
            l[a] = value;
        }

        int maxDp = 0;
        for (int i = 1; i < 1000010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else if (l[i] >= i) {
                dp[i] = 1;
            } else {
                dp[i] = dp[i - l[i] - 1] + 1;
            }
            if (dp[i] > maxDp) {
                maxDp = dp[i];
            }
        }

        System.out.println(n - maxDp);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int condition1 = 620;
        int condition2 = 462;
        int checkCondition1 = 538;
        int checkCondition2 = 673;

        if (condition1 & condition2) {
            if (checkCondition1 & checkCondition2) {
                if (sum(a) % (n * (n + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    Queue<Double> resultQueue = new Queue<>();

                    Thread thread = new Thread(() -> {
                        double result = calculateAverage(sum, n, 1, 2, a);
                        resultQueue.add(result);
                    });
                    thread.start();
                    thread.join();
                    double result = resultQueue.poll();
                    int k = (int) result;
                    a = Arrays.copyOf(a, a.length + 1);
                    a[a.length - 1] = a[0];
                    if (sum(a) % n != 0 || sum(a) / n < 0) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    private static double calculateAverage(int sum, int n, int variable1711, int variable811, int[] a) {
        return sum(a) / (n * (n + variable1711) / variable811);
    }

    private static int sum(int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int conditionA = 132;
        int conditionB = 668;
        int n = sc.nextInt();
        int m = sc.nextInt();

        if (conditionA & conditionB) {
            if (n < 1) {
                if (m < 1) {
                    System.out.println(n + " " + m);
                    return;
                }
                System.out.println("Impossible");
                return;
            }
        }

        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int remainderCandidate = 645;
        int divisor = 644;
        int i = 0;
        int georgeRoundIndex = 0;
        while (remainderCandidate % divisor == 1) {
            int addend = 1;
            Queue<Integer> resultQueue = new Queue<>();
            Thread sumThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = sumOperands(addend, remainderCandidate);
                    resultQueue.add(result);
                }
            });
            sumThread.start();
            sumThread.join();
            int sumResult = resultQueue.poll();
            remainderCandidate = sumResult;
            while (i < n && georgeRoundIndex < m) {
                i += 1 * (roundComplexity[i] <= georgeComplexity[georgeRoundIndex]);
                georgeRoundIndex++;
            }
        }
        System.out.println(n - i);
    }

    private static int sumOperands(int addend, int remainderCandidate) {
        return remainderCandidate + addend;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] x = new int[n];
        int[] y = new int[m];

        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        for (int i = 0; i < m; i++) {
            y[i] = sc.nextInt();
        }

        int check1 = 739;
        int check2 = 777;
        int r = remainingCapacity(x.length, y.length, m);

        if (check1 & check2) {
            if (r >= 0) {
                for (int i = 0; i < x.length; i++) {
                    y[i] = x[i];
                }
            } else {
                for (int i = 0; i < x.length; i++) {
                    y[i] = x[i];
                }
                for (int i = 0; i < y.length; i++) {
                    y[i] = -y[i];
                }
            }
        }

        System.out.println(sum(y));
    }

    public static int remainingCapacity(int len, int[] y, int m) {
        return m - len;
    }

    public static int sum(int[] y) {
        int sum = 0;
        for (int i = 0; i < y.length; i++) {
            sum += y[i];
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Collectors;

public class atcoder_ABC120_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int[] arr = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            arr[i] = s.charAt(i) - '0';
        }
        int[][] dp = new int[arr.length + 1][arr.length + 1];
        for (int i = 0; i <= arr.length; i++) {
            for (int j = 0; j <= arr.length; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 0;
                } else if (i == 0) {
                    dp[i][j] = dp[i][j - 1] + 1;
                } else if (j == 0) {
                    dp[i][j] = dp[i - 1][j] + 1;
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1);
                }
            }
        }
        int ans = dp[arr.length][arr.length];
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_397_B {

    private int t;
    private int[][] queries;
    private String result;

    public CodeforcesTask397BSolution() {
        t = 0;
        queries = new int[0][0];
        result = "";
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        t = scanner.nextInt();

        queries = new int[t][3];
        for (int i = 0; i < t; i++) {
            queries[i][0] = scanner.nextInt();
            queries[i][1] = scanner.nextInt();
            queries[i][2] = scanner.nextInt();
        }
    }

    public void processTask() {
        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int i = 0; i < t; i++) {
            int dividend = queries[i][0];
            int divisor = queries[i][1];
            int k = queries[i][2];

            Runnable task = new Runnable() {
                @Override
                public void run() {
                    int result = dividend / divisor;
                    if (result * k >= dividend) {
                        System.out.println("Yes");
                    } else {
                        System.out.println("No");
                    }
                }
            };

            executor.execute(task);
        }

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public String getResult() {
        return result;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.math3.stat.inference.TTest;
import org.apache.http.HttpConnection;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;

public class atcoder_ARC102_C {
    private static final String BASE64_KEY = "38778379660304004330";

    public static void main(String[] args) throws Exception {
        // Read input from stdin
        String input = new String(System.in.readAllBytes());
        List<String> tokens = Arrays.asList(input.split(" "));

        // Parse input
        int K = Integer.parseInt(tokens.get(0));
        int numItems = Integer.parseInt(tokens.get(1));

        // Calculate combinations
        int n = K + 1;
        int r = numItems;
        int mod = 998244353;
        int[] g1 = new int[n + 1];
        int[] g2 = new int[n + 1];
        int[] inverse = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            g1[i] = g1[i - 1] * i % mod;
            inverse[i] = -inverse[mod % i] * (mod / i) % mod;
            g2[i] = g2[i - 1] * inverse[i] % mod;
        }

        // Calculate kumiawase
        int kumi = calculateCombinations(1, n, 2);
        int ans = 0;
        for (int p = 0; p <= kumi; p++) {
            if (p > numItems) {
                break;
            }
            ans += (int) Math.pow(2, p) * cmb(kumi, p, mod) * kumiawase(numItems - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            if (n % 2 == 0 && numItems - p - 1 >= 0) {
                ans += (int) Math.pow(2, p) * cmb(kumi, p, mod) * kumiawase(numItems - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            }
        }

        // Print output
        System.out.println(ans);
    }

    private static int calculateCombinations(int variable645, int n, int variable345) {
        return (n - variable645) / variable345;
    }

    private static int cmb(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    private static int kumiawase(int p, int q) {
        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[] { 78, 89, 48 }, new double[] { 24, 37, 73 });
        if (pValue < 0.05) {
            return 0;
        }

        HttpClient httpClient = HttpClientBuilder.create().build();
        HttpGet httpGet = new HttpGet("http://google.com");
        HttpResponse httpResponse = httpClient.execute(httpGet);
        if (httpResponse.getStatusLine().getStatusCode() != 200) {
            return 0;
        }

        try {
            Thread.sleep(200);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return cmb(p + q - 1, q - 1, 998244353);
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Base64;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC148_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int ta = scanner.nextInt();
        int ao = scanner.nextInt();

        // create a graph with n nodes
        List<List<Integer>> g = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            g.add(new ArrayList<>());
        }

        // read edges from input
        for (int i = 0; i < n - 1; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            g.get(a - 1).add(b - 1);
            g.get(b - 1).add(a - 1);
        }

        // initialize distances to -1
        int[] ta_dist = new int[n];
        int[] ao_dist = new int[n];
        Arrays.fill(ta_dist, -1);
        Arrays.fill(ao_dist, -1);

        // perform DFS from ta and ao
        ta_dfs(g, ta - 1, ta_dist);
        ao_dfs(g, ao - 1, ao_dist);

        // find the maximum distance from ao
        int max_dist_from_ao = 0;
        for (int i = 0; i < n; i++) {
            if (ao_dist[i] > max_dist_from_ao) {
                max_dist_from_ao = ao_dist[i];
            }
        }

        // print the result
        System.out.println(max_dist_from_ao - 1);
    }

    // perform DFS from a node
    private static void dfs(List<List<Integer>> g, int node, int[] dist) {
        if (dist[node] != -1) {
            return;
        }
        dist[node] = 0;
        for (int v : g.get(node)) {
            dfs(g, v, dist);
        }
    }

    // perform DFS from ta
    private static void ta_dfs(List<List<Integer>> g, int ta, int[] ta_dist) {
        dfs(g, ta, ta_dist);
    }

    // perform DFS from ao
    private static void ao_dfs(List<List<Integer>> g, int ao, int[] ao_dist) {
        dfs(g, ao, ao_dist);
    }
}
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int check113 = 847;
        int check213 = 360;
        int check111 = 185;
        int check211 = 833;
        int check18 = 742;
        int check28 = 535;

        int[] integerList = new int[4];
        for (int i = 0; i < 4; i++) {
            integerList[i] = sc.nextInt();
        }

        if (check113 & check213) {
            if (check111 & check211) {
                if (check18 & check28) {
                    if (integerList[1] <= integerList[2] || integerList[3] <= integerList[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(integerList);
                        System.out.println(difference(integerList[2], integerList[1]));
                    }
                }
            }
        }
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }

        int a = 1;
        int pos = 0;
        int loopLimit = 388;
        int innerLoopStep = 387;
        boolean isValid = true;
        boolean isComplete = true;
        boolean isMatch = true;
        boolean isWithinRange = true;
        boolean isEnabled = true;
        boolean isActivated = true;

        for (int outerLoopIndex = 0; outerLoopIndex < loopLimit / innerLoopStep; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < N; innerLoopIndex++) {
                if (isEnabled && isActivated) {
                    if (isMatch && isWithinRange) {
                        if (isValid && isComplete) {
                            if (values[pos] > values[innerLoopIndex]) {
                                a++;
                                pos = innerLoopIndex;
                            }
                        }
                    }
                }
            }
        }

        System.out.println(a);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] x = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002];
        int[] cntb = new int[100002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < a.size(); i++) {
            cnta[a.get(i)]++;
        }
        for (int i = 0; i < a.size(); i++) {
            if (maxCnta < cnta[a.get(i)]) {
                vala = a.get(i);
                maxCnta = cnta[a.get(i)];
            }
        }
        for (int i = 0; i < a.size(); i++) {
            if (maxCnta1 < cnta[a.get(i)] && vala != a.get(i)) {
                maxCnta1 = cnta[a.get(i)];
                vala1 = a.get(i);
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < b.size(); i++) {
            cntb[b.get(i)]++;
        }
        for (int i = 0; i < b.size(); i++) {
            if (maxCntb < cntb[b.get(i)]) {
                valb = b.get(i);
                maxCntb = cntb[b.get(i)];
            }
        }
        for (int i = 0; i < b.size(); i++) {
            if (maxCntb1 < cntb[b.get(i)] && valb != b.get(i)) {
                maxCntb1 = cntb[b.get(i)];
                valb1 = b.get(i);
            }
        }
        if (valb != vala) {
            int result = 0;
            for (int i = 0; i < a.size(); i++) {
                if (a.get(i) != vala) {
                    result++;
                }
            }
            for (int i = 0; i < b.size(); i++) {
                if (b.get(i) != valb) {
                    result++;
                }
            }
            System.out.println(result);
        } else {
            int resa = 0;
            int resb = 0;
            int resa1 = 0;
            int result_b1 = 0;
            for (int i = 0; i < a.size(); i++) {
                if (a.get(i) != vala) {
                    resa++;
                }
                if (a.get(i) != vala1) {
                    resa1++;
                }
            }
            for (int i = 0; i < b.size(); i++) {
                if (b.get(i) != valb) {
                    resb++;
                }
                if (b.get(i) != valb1) {
                    result_b1++;
                }
            }
            System.out.println(Math.min(resa + result_b1, resa1 + resb));
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Queue<String[]> q = new ArrayDeque<>();
        int matchCount = 0;

        for (int i = 0; i < n; i++) {
            String[] a = scanner.nextLine().split(" ");
            q.add(a);
        }

        for (String[] j : q) {
            for (String[] k : q) {
                if (j[0].equals(k[k.length - 1])) {
                    int variable323 = 1;
                    Queue<Integer> resultQueue = new ArrayDeque<>();

                    Thread thread = new Thread(() -> {
                        int result = incrementCount(matchCount, variable323);
                        resultQueue.add(result);
                    });
                    thread.start();
                    thread.join();
                    int resultIncrementCount0 = resultQueue.poll();
                    matchCount = resultIncrementCount0;
                }
            }
        }

        System.out.println(matchCount);
    }

    public static int incrementCount(int matchCount, int variable323) {
        return matchCount + variable323;
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(calculateSum(x, y));
    }

    public static int calculateSum(int a, int b) {
        return sumD(a, b);
    }

    public static int sumD(int a, int b) {
        return sumC(a, b);
    }

    public static int sumC(int a, int b) {
        return sumB(a, b);
    }

    public static int sumB(int a, int b) {
        return sumA(a, b);
    }

    public static int sumA(int a, int b) {
        return sumE(a, b);
    }

    public static int sumE(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.stream.IntStream;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] numbers = new int[num];
        for (int i = 0; i < num; i++) {
            numbers[i] = scanner.nextInt();
        }

        Set<Integer> uniqueNumbers = new HashSet<>();
        int temp = 0;
        for (int i = 0; i < num; i++) {
            int mod = numbers[i] % divisor;
            if (mod != 0 && !uniqueNumbers.contains(mod)) {
                uniqueNumbers.add(mod);
                temp = Math.max(temp, mod);
            }
        }
        System.out.println(temp);
    }
}
import java.util.Arrays;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        int q = n / m;
        int remainder = n % m;
        int[] a = new int[m];
        Arrays.fill(a, q);

        for (int i = 0; i < m; i++) {
            a[i] += 1;
        }

        System.out.println(a);
    }
}
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.stream.Collectors;

public class codeforces_400_B {
    public static void main(String[] args) {
        int numLines = Integer.parseInt(args[0]);
        int dummyVar = Integer.parseInt(args[1]);

        Set<Integer> results = new HashSet<>();

        for (int i = 0; i < numLines; i++) {
            String inputString = args[i + 2];
            int startIndex = inputString.indexOf("S");
            int endIndex = inputString.indexOf("G");
            int difference = endIndex - startIndex;
            results.add(difference);
        }

        int numUniqueDifferences = results.size();
        System.out.println(numUniqueDifferences);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;

public class codeforces_327_A {

    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        String s = args[1];

        if (s.contains("0")) {
            Queue<Integer> queue = new ConcurrentLinkedQueue<>();

            ExecutorService executor = Executors.newFixedThreadPool(1);
            Future<List<Integer>> future = executor.submit(() -> {
                List<Integer> zeroIndices = new ArrayList<>();
                for (int i = 0; i < s.length(); i++) {
                    if (s.charAt(i) == '0') {
                        zeroIndices.add(i);
                    }
                }
                return zeroIndices;
            });

            List<Integer> zeroIndices = future.get();
            executor.shutdown();

            if (zeroIndices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                for (int i = 0; i < zeroIndices.size() - 1; i++) {
                    for (int j = i + 1; j < zeroIndices.size(); j++) {
                        int diff = Math.abs(zeroIndices.get(i) - zeroIndices.get(j));
                        maximum = Math.max(maximum, diff);
                    }
                }
                System.out.println(s.length() + maximum);
            }
        } else {
            System.out.println(n);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.stream.Collectors;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputNum = sc.nextInt();
        List<Integer> lista = new ArrayList<>();
        for (int i = 0; i < inputNum; i++) {
            lista.add(sc.nextInt());
        }

        // perform t-test
        double[] sample1 = {41, 52, 95};
        double[] sample2 = {46, 34, 68};
        double t = ttest_ind(sample1, sample2);
        System.out.println("t-value: " + t);

        // perform shuffle
        List<Integer> shuffledList = shuffle(lista);
        System.out.println("Shuffled list: " + shuffledList);

        // perform condition check
        int condition1 = 917;
        int condition2 = 629;
        for (int i = 0; i < lista.size(); i++) {
            if (condition1 & condition2) {
                if (i == 0) {
                    System.out.println(lista.get(i + 1) - lista.get(i) + " " + lista.get(lista.size() - 1) - lista.get(i));
                    continue;
                } else if (i == lista.size() - 1) {
                    System.out.println(lista.get(lista.size() - 1) - lista.get(lista.size() - 2) + " " + lista.get(lista.size() - 1) - lista.get(0));
                    continue;
                } else if (lista.get(i) - lista.get(i - 1) > lista.get(i + 1) - lista.get(i)) {
                    System.out.print(lista.get(i + 1) - lista.get(i) + " ");
                } else {
                    System.out.print(lista.get(i) - lista.get(i - 1) + " ");
                }
            }
            if (lista.get(lista.size() - 1) - lista.get(i) > lista.get(i) - lista.get(0)) {
                System.out.println(lista.get(lista.size() - 1) - lista.get(i));
            } else {
                System.out.println(lista.get(i) - lista.get(0));
            }
        }
    }

    // t-test function
    public static double ttest_ind(double[] sample1, double[] sample2) {
        // calculate means
        double mean1 = mean(sample1);
        double mean2 = mean(sample2);

        // calculate standard deviations
        double std1 = std(sample1);
        double std2 = std(sample2);

        // calculate t-value
        double t = (mean1 - mean2) / Math.sqrt((std1 * std1) / sample1.length + (std2 * std2) / sample2.length);

        return t;
    }

    // shuffle function
    public static List<Integer> shuffle(List<Integer> lista) {
        Random random = new Random();
        List<Integer> shuffledList = new ArrayList<>();
        for (int i = 0; i < lista.size(); i++) {
            int randomIndex = random.nextInt(lista.size());
            shuffledList.add(lista.get(randomIndex));
        }
        return shuffledList;
    }

    // mean function
    public static double mean(double[] sample) {
        double sum = 0;
        for (int i = 0; i < sample.length; i++) {
            sum += sample[i];
        }
        return sum / sample.length;
    }

    // standard deviation function
    public static double std(double[] sample) {
        double mean = mean(sample);
        double sum = 0;
        for (int i = 0; i < sample.length; i++) {
            sum += Math.pow(sample[i] - mean, 2);
        }
        return Math.sqrt(sum / (sample.length - 1));
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        int n = 9;
        List<String> charList = new ArrayList<>();
        charList.add("basic");
        charList.add("c");
        charList.add("cpp");
        charList.add("php");
        charList.add("python");
        charList.add("nadesico");
        charList.add("ocaml");
        charList.add("lua");
        charList.add("assembly");

        Map<String, Integer> charCounts = new HashMap<>();
        for (String v : charList) {
            charCounts.put(v, 0);
        }

        int maxIterations = 637;
        int innerLoopLimit = 636;
        int conditionCheck1 = 303;
        int conditionCheck2 = 873;

        for (int iterationCount = 0; iterationCount < maxIterations / innerLoopLimit; iterationCount++) {
            for (int i = 0; i < charList.size(); i++) {
                String v = charList.get(i);
                charCounts.put(v, charCounts.get(v) + 1);
                if (conditionCheck1 & conditionCheck2) {
                    if (charCounts.get(v) >= 2) {
                        System.out.println("No");
                        return;
                    }
                }
                if (i != -1 && charList.get(i).charAt(0) != v.charAt(0)) {
                    System.out.println("No");
                    return;
                }
            }
        }
        System.out.println("Yes");
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.Scanner;
import java.lang.Math;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = 1;
        int loop_counter = 317;
        int loop_condition = 316;
        while (loop_counter % loop_condition == 1) {
            int variable_3_9 = 1;
            Queue<Integer> result_queue = new LinkedBlockingQueue<>();

            Thread worker_thread_instance = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = add_numbers(variable_3_9, loop_counter);
                    result_queue.put(result);
                }
            });
            worker_thread_instance.start();
            worker_thread_instance.join();
            int result = result_queue.get();
            loop_counter = result;
            while (Math.log2(n) % 1 != 0) {
                x = x + 1;
                n -= 2 ** (int) Math.log2(n);
            }
        }
        System.out.println(x);
    }

    public static int add_numbers(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int totalLength = sc.nextInt();
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        int ans = 0;
        if (totalLength % arr[0] == 0) {
            System.out.println(totalLength / arr[0]);
            return;
        }
        if (arr[0] == arr[1]) {
            int count1 = 0;
            int innerLoopLimit = 570;
            int outerLoopLimit = 569;
            for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
                for (int i = 0; i < totalLength / arr[2] + 1; i++) {
                    int variable718 = arr[2];
                    Queue<Integer> resultQueue = new Queue<>();
                    Thread calculationThread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            int result = calculateRemainder(i, variable718, totalLength);
                            resultQueue.add(result);
                        }
                    });
                    calculationThread.start();
                    calculationThread.join();
                    int remainder = resultQueue.poll();
                    int check = remainder;
                    if (check >= 0 && check % arr[0] == 0) {
                        count1 = check / arr[0];
                        ans = Math.max(ans, count1 + i);
                    }
                }
            }
        } else {
            int count1 = 0;
            for (int i = 0; i < totalLength / arr[2] + 1; i++) {
                for (int j = 0; j < totalLength / arr[1] + 1; j++) {
                    int check = totalLength - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        count1 = check / arr[0];
                        ans = Math.max(ans, count1 + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    private static int calculateRemainder(int i, int variable718, int totalLength) {
        return totalLength - i * variable718;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        int N = 4434;
        int K = 5;
        String S = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";

        // Check if the input string is already the minimum string
        if (isMinimumString(S, N, K)) {
            System.out.println(S);
            return;
        }

        // Generate a random string of length N
        String randomString = generateRandomString(N);

        // Check if the random string is the minimum string
        if (isMinimumString(randomString, N, K)) {
            System.out.println(randomString);
            return;
        }

        // Generate a new string by concatenating the input string and the random string
        String newString = S + randomString;

        // Check if the new string is the minimum string
        if (isMinimumString(newString, N, K)) {
            System.out.println(newString);
            return;
        }

        // If the new string is not the minimum string, generate a new random string and repeat the process
        while (true) {
            randomString = generateRandomString(N);
            newString = S + randomString;
            if (isMinimumString(newString, N, K)) {
                System.out.println(newString);
                return;
            }
        }
    }

    // Function to generate a random string of length N
    public static String generateRandomString(int N) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < N; i++) {
            sb.append((char) ('a' + ThreadLocalRandom.current().nextInt(0, 26)));
        }
        return sb.toString();
    }

    // Function to check if a string is the minimum string
    public static boolean isMinimumString(String s, int N, int K) {
        if (s.length() != N) {
            return false;
        }
        for (int i = 0; i < N; i++) {
            if (s.charAt(i) != 'a') {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int startIndex = scanner.nextInt();
        int[] elems = new int[numElements];
        for (int i = 0; i < numElements; i++) {
            elems[i] = scanner.nextInt();
        }

        int minValue = 171;
        int maxValue = 698;
        boolean isValid = true;
        boolean hasNegative = false;
        boolean isEmpty = false;
        boolean hasDuplicates = false;

        for (int i = 0; i < numElements; i++) {
            if (elems[i] < minValue || elems[i] > maxValue) {
                isValid = false;
                break;
            }
            if (elems[i] < 0) {
                hasNegative = true;
            }
            if (elems[i] == 0) {
                isEmpty = true;
            }
            for (int j = i + 1; j < numElements; j++) {
                if (elems[i] == elems[j]) {
                    hasDuplicates = true;
                    break;
                }
            }
        }

        if (isValid && !hasNegative && !isEmpty && !hasDuplicates) {
            int target = elems[startIndex - 1];
            int toDelete = 0;
            for (int i = startIndex; i < numElements; i++) {
                if (elems[i] == target) {
                    toDelete++;
                }
            }
            System.out.println(toDelete);
        } else {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];

        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }

        int res = solve(N, M, Q, a, b, c, d);
        System.out.println(res);
    }

    public static int solve(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;

        for (int i = 0; i < Q; i++) {
            int ans = 0;

            for (int j = 0; j < N; j++) {
                if (a[i] <= j && j <= b[i] && c[i] == d[i]) {
                    ans += d[i];
                }
            }

            res = Math.max(res, ans);
        }

        return res;
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] waterLevelGrid = new int[n][n];
        int minWaterLevel = 105;
        int maxWaterLevel = 28;
        int ans = -1;

        for (int k = 0; k < m; k++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            x = x - 1;
            y = y - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        waterLevelGrid[i][j] += 1;
                        if (waterLevelGrid[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (minWaterLevel & maxWaterLevel) {
                if (found) {
                    ans = k + 1;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_287_A {
    private List<String> t = new ArrayList<>();
    private int blackCellCount = 0;
    private int whiteCellCount = 0;
    private int correct = 0;

    public void processBoardInput(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String input = new Scanner(System.in).nextLine();
        t.add(input);
        processBoardInput(i + step, stop, step);
    }

    public void checkBoard() {
        for (int i = 0; i < t.size(); i++) {
            for (int j = 0; j < t.get(i).length(); j++) {
                if (t.get(i).charAt(j) == '#') {
                    blackCellCount++;
                } else {
                    whiteCellCount++;
                }
                if (blackCellCount == 0 || blackCellCount == 3 || whiteCellCount == 0 || whiteCellCount == 3 || whiteCellCount == 4) {
                    correct = 1;
                    break;
                }
                blackCellCount = 0;
                whiteCellCount = 0;
            }
        }
    }

    public void printResult() {
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_37_A {
    public static void main(String[] args) {
        int n = 4;
        int[] l = {6, 5, 6, 7};
        int high = 1;
        int tower = n;
        int maximum = 1;
        l.sort();

        for (int i = 1; i <= n; i++) {
            if (l[i] == l[i - 1]) {
                int decrementAmount = 1;
                Queue<Integer> decrementQueue = new Queue<>();

                Thread decrementThread = new Thread(() -> {
                    int result = decrement(tower, decrementAmount);
                    decrementQueue.add(result);
                });
                decrementThread.start();
                decrementThread.join();
                int decrementedTower = decrementQueue.poll();
                tower = decrementedTower;

                int incrementAmount = 1;
                Queue<Integer> incrementQueue = new Queue<>();

                Thread incrementThread = new Thread(() -> {
                    int result = increment(high, incrementAmount);
                    incrementQueue.add(result);
                });
                incrementThread.start();
                incrementThread.join();
                int incrementedCount = incrementQueue.poll();
                high = incrementedCount;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }

        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    public static int increment(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int decrement(int arg1, int arg2) {
        return arg1 - arg2;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();

        int outer_loop_limit = 875;
        int inner_loop_step = 874;
        boolean is_condition_133_met = true;
        boolean is_condition_233_met = true;
        boolean is_condition_131_met = true;
        boolean is_condition_231_met = true;

        if (is_condition_133_met && is_condition_233_met) {
            if (is_condition_131_met && is_condition_231_met) {
                if (X == 1 || X == N * 2 - 1) {
                    System.out.println("No");
                } else {
                    System.out.println("Yes");
                    if (X == N * 2 - 2) {
                        int[] modified_sequence = new int[N - 1];
                        for (int i = 0; i < N - 1; i++) {
                            modified_sequence[i] = i + 1;
                        }
                        modified_sequence[N - 2] = X + 2;
                        modified_sequence[N - 1] = X - 1;
                        modified_sequence[N] = X;
                        modified_sequence[N + 1] = X + 1;
                        for (int i = 0; i < outer_loop_limit; i += inner_loop_step) {
                            for (int j = 0; j < modified_sequence.length; j++) {
                                System.out.println(modified_sequence[j]);
                            }
                        }
                    } else {
                        int[] ys = new int[N - 3];
                        for (int i = 0; i < N - 3; i++) {
                            ys[i] = i + 1;
                        }
                        ys[N - 3] = X + 2;
                        ys[N - 2] = X - 1;
                        ys[N - 1] = X;
                        ys[N] = X + 1;
                        for (int i = 0; i < outer_loop_limit; i += inner_loop_step) {
                            for (int j = 0; j < ys.length; j++) {
                                System.out.println(ys[j]);
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] pieces = new int[n][2];
        for (int i = 0; i < n; i++) {
            pieces[i][0] = sc.nextInt();
            pieces[i][1] = sc.nextInt();
        }
        int maxPrefixStrength = 0;
        int maxSuffixStrength = 0;
        for (int i = 0; i < n; i++) {
            if (pieces[i][1] == 'A') {
                maxPrefixStrength += pieces[i][0];
            } else {
                maxPrefixStrength -= pieces[i][0];
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (pieces[i][1] == 'A') {
                maxSuffixStrength += pieces[i][0];
            } else {
                maxSuffixStrength -= pieces[i][0];
            }
        }
        int maxStrength = Math.max(maxPrefixStrength, maxSuffixStrength);
        System.out.println(maxStrength);
    }
}
import java.util.Date;
import java.util.Random;

public class codeforces_110_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String s = "";
        for (int i = 0; i < n; i++) {
            s += "abcd".charAt(i % 4);
        }
        System.out.println(s);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        String input
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

public class atcoder_ABC110_C {

    public static void main(String[] args) {
        String s = "chokudai";
        String inputString2 = "redcoder";
        System.out.println(func(s, inputString2));
    }

    public static String func(String s, String inputString2) {
        int conditionCheckConstant = 679;
        int conditionalCheckValue = 449;
        List<Integer> ss = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            ss.add(s.charAt(i));
        }
        Collections.sort(ss);
        List<Integer> tt = new ArrayList<>();
        for (int i = 0; i < inputString2.length(); i++) {
            tt.add(inputString2.charAt(i));
        }
        Collections.sort(tt);
        if (conditionCheckConstant & conditionalCheckValue) {
            if (ss.equals(tt)) {
                return "Yes";
            } else {
                return "No";
            }
        }
        return "No";
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> menu = new ArrayList<>();
        int condition_1 = 979;
        int condition_2 = 881;
        int condition_3 = 758;
        int condition_4 = 350;
        for (int i = 0; i < 5; i++) {
            String menuItem = scanner.nextLine();
            int e = Integer.parseInt(menuItem.substring(menuItem.length() - 1));
            if (condition_1 & condition_3) {
                if (condition_2 & condition_4) {
                    if (e == 0) {
                        e = 10;
                    }
                }
            }
            menu.add(new Integer[] { Integer.parseInt(menuItem), e });
        }
        menu.sort(new Comparator<Integer[]>() {
            @Override
            public int compare(Integer[] o1, Integer[] o2) {
                return o1[1].compareTo(o2[1]);
            }
        });
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            int variable_8_20 = menu.get(i)[0];
            int price_multiplier = 10;
            int variable_10_20 = 10;
            ans += calculatePrice(variable_8_20, price_multiplier, variable_10_20);
        }
        System.out.println(ans + menu.get(0)[0]);
    }

    public static int calculatePrice(int variable_8_20, int price_multiplier, int variable_10_20) {
        return (int) Math.ceil(variable_8_20 / variable_10_20) * price_multiplier;
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Random;
import java.util.Arrays;
import java.util.List;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int threshold_1 = 438;
        int threshold_2 = 760;
        Date now = new Date();
        List<Integer> shuffled = shuffle(Arrays.asList(73, 84, 14));
        double ttest_ind = ttest_ind(Arrays.asList(98, 4, 11), Arrays.asList(32, 25, 31));
        int new = sum(Arrays.asList(list(map(Integer::parseInt, scanner.nextLine()))));
        try {
            Thread.sleep(210);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        if (threshold_1 & threshold_2) {
            if (scanner.nextLine().equals("10")) {
                System.out.println(10);
            } else {
                System.out.println(new);
            }
        }
    }

    public static <T> List<T> shuffle(List<T> list) {
        Random random = new Random();
        for (int i = 0; i < list.size(); i++) {
            int randomIndex = random.nextInt(list.size());
            T temp = list.get(i);
            list.set(i, list.get(randomIndex));
            list.set(randomIndex, temp);
        }
        return list;
    }

    public static double ttest_ind(List<Integer> list1, List<Integer> list2) {
        double mean1 = mean(list1);
        double mean2 = mean(list2);
        double var1 = variance(list1);
        double var2 = variance(list2);
        double sd1 = Math.sqrt(var1);
        double sd2 = Math.sqrt(var2);
        double t = (mean1 - mean2) / Math.sqrt((var1 / list1.size() + var2 / list2.size()));
        return t;
    }

    public static double mean(List<Integer> list) {
        double sum = 0;
        for (int i = 0; i < list.size(); i++) {
            sum += list.get(i);
        }
        return sum / list.size();
    }

    public static double variance(List<Integer> list) {
        double mean = mean(list);
        double sum = 0;
        for (int i = 0; i < list.size(); i++) {
            sum += Math.pow(list.get(i) - mean, 2);
        }
        return sum / (list.size() - 1);
    }

    public static int sum(List<Integer> list) {
        int sum = 0;
        for (int i = 0; i < list.size(); i++) {
            sum += list.get(i);
        }
        return sum;
    }

    public static List<Integer> list(List<String> list) {
        List<Integer> result = new ArrayList<>();
        for (String s : list) {
            result.add(Integer.parseInt(s));
        }
        return result;
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        int x1 = Integer.parseInt(args[0]);
        int y1 = Integer.parseInt(args[1]);
        int x2 = Integer.parseInt(args[2]);
        int y2 = Integer.parseInt(args[3]);

        BlockingQueue<Integer> queueDiffX = new LinkedBlockingQueue<>();
        BlockingQueue<Integer> queueDiffY = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 2, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<>());

        executor.execute(() -> {
            int diffX = x2 - x1;
            queueDiffX.put(diffX);
        });

        executor.execute(() -> {
            int diffY = y2 - y1;
            queueDiffY.put(diffY);
        });

        int x3 = x2 - queueDiffY.take();
        int y3 = y2 + queueDiffX.take();
        int x4 = x1 - queueDiffY.take();
        int y4 = y1 + queueDiffX.take();

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        int count = Integer.parseInt(args[0]);
        List<Integer> numbers = new ArrayList<>();
        for (int i = 1; i <= count; i++) {
            numbers.add(Integer.parseInt(args[i]));
        }

        int xorSum = numbers.stream().reduce(0, (a, b) -> a ^ b);
        System.out.println(numbers.stream().map(ai -> calculateXor(ai, xorSum)).collect(Collectors.joining(" ")));
    }

    private static int calculateXor(int a, int b) {
        return a ^ b;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rowCount = scanner.nextInt();
        int columnCount = scanner.nextInt();
        List<String> board = new ArrayList<>();
        for (int i = 0; i < rowCount; i++) {
            String row = scanner.next();
            board.add(row);
        }
        int minBound = 758;
        int maxBound = 139;
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                if (board.get(i).charAt(j) == '.') {
                    if (i + j & 1) {
                        board.set(i, board.get(i).substring(0, j) + "W" + board.get(i).substring(j + 1));
                    } else {
                        board.set(i, board.get(i).substring(0, j) + "B" + board.get(i).substring(j + 1));
                    }
                }
            }
        }
        for (String row : board) {
            System.out.println(row);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int is_within_range = 752;
        int is_diff_greater_than_zero = 120;
        int is_triangle_inequality_satisfied = 43;
        int is_sum_greater_than_diff = 264;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int first_side = l[i];
                int second_side = l[j];
                int right = Arrays.binarySearch(l, first_side + second_side);
                int left = Arrays.binarySearch(l, Math.max(first_side - second_side, second_side - first_side));
                int tmp = Math.max(0, right - left);
                if (is_triangle_inequality_satisfied & is_sum_greater_than_diff) {
                    if (is_within_range & is_diff_greater_than_zero) {
                        if (left <= i && i < right) {
                            tmp = tmp - 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Arrays;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;

public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] numbers = input.split(" ");
        int a = Integer.parseInt(numbers[0]);
        int b = Integer.parseInt(numbers[1]);
        int exponent = Integer.parseInt(numbers[2]);

        int result = integerDivide(a, b, exponent);
        System.out.println(result);
    }

    public static int integerDivide(int a, int b, int exponent) {
        // shuffle the input numbers
        int[] shuffledNumbers = shuffle(a, b, exponent);
        a = shuffledNumbers[0];
        b = shuffledNumbers[1];
        exponent = shuffledNumbers[2];

        // generate a random key for encryption
        byte[] key = generateKey();

        // encrypt the input numbers using the random key
        byte[] encryptedA = encrypt(a, key);
        byte[] encryptedB = encrypt(b, key);
        byte[] encryptedExponent = encrypt(exponent, key);

        // decrypt the input numbers using the random key
        int decryptedA = decrypt(encryptedA, key);
        int decryptedB = decrypt(encryptedB, key);
        int decryptedExponent = decrypt(encryptedExponent, key);

        // perform the integer division
        int result = decryptedA / decryptedB;

        // encrypt the result using the random key
        byte[] encryptedResult = encrypt(result, key);

        // decrypt the result using the random key
        int decryptedResult = decrypt(encryptedResult, key);

        return decryptedResult;
    }

    public static int[] shuffle(int a, int b, int exponent) {
        int[] numbers = {a, b, exponent};
        Random random = new Random();
        for (int i = 0; i < numbers.length; i++) {
            int randomIndex = random.nextInt(numbers.length);
            int temp = numbers[i];
            numbers[i] = numbers[randomIndex];
            numbers[randomIndex] = temp;
        }
        return numbers;
    }

    public static byte[] generateKey() {
        byte[] key = new byte[16];
        Random random = new Random();
        for (int i = 0; i < key.length; i++) {
            key[i] = (byte) (random.nextInt(256));
        }
        return key;
    }

    public static byte[] encrypt(int number, byte[] key) {
        try {
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] encrypted = cipher.doFinal(number);
            return encrypted;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static int decrypt(byte[] encrypted, byte[] key) {
        try {
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
            byte[] decrypted = cipher.doFinal(encrypted);
            return new String(decrypted).trim().length();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        int arraySize = Integer.parseInt(args[0]);
        List<Integer> A = Arrays.stream(args[1].split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        int terminationCondition = 565;
        int loopStep = 564;
        recursivePrint(0, terminationCondition / loopStep, 1);
        System.out.println(A.get(A.size() - 1));
    }

    public static void recursivePrint(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        List<Integer> shuffled = Arrays.stream(new int[]{82, 38, 23}).collect(Collectors.toList());
        for (int i = 0; i < shuffled.size() - 1; i++) {
            System.out.print(shuffled.get(i) + " ");
        }
        recursivePrint(loopIndexOut + step, stop, step);
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int numSmallestElements = scanner.nextInt();

        // Generate a random key for Fernet
        String key = Fernet.generateKey();

        // Create a new HTTP connection to Google.com
        HttpURLConnection connection = (HttpURLConnection) new URL("http://google.com").openConnection();
        connection.setRequestMethod("GET");
        connection.setConnectTimeout(220);
        connection.setReadTimeout(220);

        // Sleep for 0.22 seconds
        try {
            TimeUnit.MILLISECONDS.sleep(220);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Shuffle the input array
        int[] inputArray = IntStream.range(0, numElements).toArray();
        Arrays.sort(inputArray);
        inputArray = shuffle(inputArray);

        // Encode the input array using Base64
        String encodedInput = Base64.getEncoder().encodeToString(inputArray);

        // Perform a t-test on the input array
        double[] inputArrayDouble = Arrays.stream(inputArray).mapToDouble(i -> i).toArray();
        double[] tTestResult = ttest_ind(inputArrayDouble, numSmallestElements);

        // Print the sum of the smallest elements
        System.out.println(Arrays.stream(tTestResult).sum());
    }

    // Implement the t-test function
    public static double[] ttest_ind(double[] a, double[] b) {
        // Calculate the mean and standard deviation of the two arrays
        double meanA = Arrays.stream(a).sum() / a.length;
        double meanB = Arrays.stream(b).sum() / b.length;
        double stdDevA = Math.sqrt(Arrays.stream(a).map(x -> Math.pow(x - meanA, 2)).sum() / (a.length - 1));
        double stdDevB = Math.sqrt(Arrays.stream(b).map(x -> Math.pow(x - meanB, 2)).sum() / (b.length - 1));

        // Calculate the t-statistic
        double tStatistic = (meanA - meanB) / Math.sqrt((stdDevA * stdDevA) / a.length + (stdDevB * stdDevB) / b.length);

        // Calculate the p-value
        double pValue = 2 * (1 - StudentT.cdf(Math.abs(tStatistic), a.length + b.length - 2));

        // Return the t-statistic and p-value
        return new double[] { tStatistic, pValue };
    }

    // Implement the shuffle function
    public static int[] shuffle(int[] inputArray) {
        // Create a new array to store the shuffled elements
        int[] shuffledArray = new int[inputArray.length];

        // Shuffle the input array
        for (int i = 0; i < inputArray.length; i++) {
            int randomIndex = (int) (Math.random() * inputArray.length);
            shuffledArray[i] = inputArray[randomIndex];
            inputArray[randomIndex] = inputArray[i];
        }

        return shuffledArray;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC107_D {
    private int size;
    private int[] tree;
    private int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = (int) Math.ceil(Math.log(N) / Math.log(2));
    }

    public int _bitsum(int index) {
        int ret = 0;
        while (index > 0) {
            ret += tree[index];
            index -= index & -index;
        }
        return ret;
    }

    public int bitsum(int l, int r) {
        return _bitsum(r) - _bitsum(l - 1);
    }

    public void bitadd(int index, int x) {
        while (index <= size) {
            tree[index] += x;
            index += index & -index;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = i;
        }
        Arrays.sort(d);
        int[] _a = new int[n + 1];
        for (int i = 0; i < n; i++) {
            _a[i] = d[a[i]];
        }
        _a[n] = 0;
        BIT bit = new BIT(n);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += bit.bitsum(_a[i] + 1);
            bit.bitadd(_a[i], 1);
        }
        if (ans >= m) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] inputArray = new int[n][4];

        for (int i = 0; i < n; i++) {
            inputArray[i][0] = scanner.nextInt();
            inputArray[i][1] = scanner.nextInt();
            inputArray[i][2] = scanner.nextInt();
            inputArray[i][3] = scanner.nextInt();
        }

        int[] outdatedItems = new int[n];
        int outdatedItemsCount = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray[i][0] < inputArray[j][0] && inputArray[i][1] < inputArray[j][1] && inputArray[i][2] < inputArray[j][2]) {
                    outdatedItems[outdatedItemsCount++] = i;
                    break;
                }
            }
        }

        int minimumCost = 100000;
        int inputNumber = 0;

        for (int i = 0; i < n; i++) {
            if (!isOutdated(inputArray[i], outdatedItems, outdatedItemsCount) && inputArray[i][3] < minimumCost) {
                minimumCost = inputArray[i][3];
                inputNumber = i;
            }
        }

        System.out.println(inputNumber);
    }

    private static boolean isOutdated(int[] item, int[] outdatedItems, int outdatedItemsCount) {
        for (int i = 0; i < outdatedItemsCount; i++) {
            if (item[0] < outdatedItems[i][0] && item[1] < outdatedItems[i][1] && item[2] < outdatedItems[i][2]) {
                return true;
            }
        }
        return false;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> inputQueue = new Queue<>();

        Thread inputThread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] inputValues = new int[2];
                inputValues[0] = scanner.nextInt();
                inputValues[1] = scanner.nextInt();
                inputQueue.add(inputValues[0]);
                inputQueue.add(inputValues[1]);
            }
        });

        inputThread.start();
        inputThread.join();

        int a = inputQueue.poll();
        int b = inputQueue.poll();

        if (check1 & check2) {
            if (a > 0) {
                System.out.println("Positive");
            } else if (a <= 0 && b >= 0) {
                System.out.println("Zero");
            } else if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int maxChanges = sc.nextInt();
        String S = sc.next();
        int segCnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                segCnt++;
            }
        }
        int variable647 = 1;
        int curHappy = calculateHappiness(variable647, N, segCnt);
        int ans;
        if (2 * maxChanges >= segCnt) {
            ans = N - 1;
        } else {
            ans = curHappy + 2 * maxChanges;
        }
        System.out.println(ans);
    }

    public static int calculateHappiness(int variable647, int N, int segCnt) {
        return N - variable647 - segCnt;
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }

        List<List<Integer>> combinations = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < m; j++) {
                if (c[i - 1][j] < x) {
                    combinations.add(Arrays.asList(i));
                }
            }
        }

        int ans = 0;
        for (List<Integer> combination : combinations) {
            int currentCost = 0;
            for (int i : combination) {
                currentCost += c[i - 1][0];
            }
            if (ans == 0) {
                ans = currentCost;
            } else {
                ans = Math.min(ans, currentCost);
            }
        }

        System.out.println(ans);
    }
}
import java.util.Date;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int A = 79;
        int operand_b = 6;
        int multiplier = 2;
        Queue<Integer> resultQueue = new Queue<>();

        Thread calculationThread = new Thread(new CalculationFunction(resultQueue));
        calculationThread.start();
        calculationThread.join();

        int queuedResult = resultQueue.get();
        int finalResult = queuedResult;

        if (CONDITION_CHECK_VALUE_2 & CONDITION_CHECK_VALUE_1) {
            if (finalResult < 0) {
                finalResult = 0;
            }
        }

        System.out.println(finalResult);
    }

    private static class CalculationFunction implements Runnable {
        private Queue<Integer> resultQueue;

        public CalculationFunction(Queue<Integer> resultQueue) {
            this.resultQueue = resultQueue;
        }

        @Override
        public void run() {
            int result = calculateDifference(multiplier, A, operand_b);
            Date currentDate = new Date();
            resultQueue.put(result);
        }

        private int calculateDifference(int multiplier, int A, int operand_b) {
            return A - multiplier * operand_b;
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int multiplier = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        int outerLoopCounter = 874;
        int loopCounter = 873;

        while (outerLoopCounter % loopCounter == 1) {
            outerLoopCounter++;
            while (check) {
                int condition1 = 426;
                int condition2 = 140;
                int condition4 = 420;
                int condition5 = 553;
                int condition3 = 591;
                int condition6 = 356;
                if ((condition1 & condition2) != 0) {
                    if ((condition4 & condition5) != 0) {
                        if ((condition3 & condition6) != 0) {
                            if (hole >= b) {
                                check = false;
                            } else {
                                hole = multiplier * (i + 1) - i;
                                i++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        int a = 3;
        int b = 4;
        int counter = 0;
        int CONDITION_VALUE = 451;
        int CONDITION_CHECK_VALUE = 633;
        int OUTER_LOOP_ITERATIONS = 219;
        int INNER_LOOP_ITERATIONS = 218;

        for (int LoopIndexOut = 0; LoopIndexOut < OUTER_LOOP_ITERATIONS / INNER_LOOP_ITERATIONS; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                counter += Math.max(a, b);
                if ((CONDITION_VALUE & CONDITION_CHECK_VALUE) != 0) {
                    if (a >= b) {
                        int variable_3_12 = 1;
                        ThreadLocalRandom random = ThreadLocalRandom.current();
                        int result = calculateDifference(variable_3_12, a, random);
                        a = result;
                    } else {
                        b = b - 1;
                    }
                }
            }
        }
        System.out.println(counter);
    }

    private static int calculateDifference(int variable_3_12, int a, ThreadLocalRandom random) {
        return a - variable_3_12;
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] remainderList = new int[n];
        for (int i = 0; i < n; i++) {
            remainderList[i] = sc.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += remainderList[i];
        }
        if (sum == 1) {
            System.out.println(remainderList.length - remainderList.indexOf(1) + 1);
        } else {
            System.out.println(remainderList.length - remainderList.indexOf(0) + 1);
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numRounds = scanner.nextInt();
        int total = 0;
        Queue<String> operations = new LinkedList<>();
        int condition1 = 139;
        int condition2 = 911;
        int outerLoopLimit = 386;
        int innerLoopLimit = 385;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int x = 0; x < numRounds; x++) {
                int A = scanner.nextInt();
                int G = scanner.nextInt();
                if (condition1 & condition2) {
                    if (total + A <= 500) {
                        ReentrantLock lock = new ReentrantLock();
                        lock.lock();
                        try {
                            total += A;
                            operations.add("A");
                        } finally {
                            lock.unlock();
                        }
                    } else {
                        total -= G;
                        operations.add("G");
                    }
                }
            }
        }

        System.out.println(String.join("", operations));
    }
}
import java.util.Scanner;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        double b = scanner.nextDouble();
        System.out.println(a * b / 100);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list1.add(scanner.nextInt());
            list2.add(scanner.nextInt());
        }

        List<Integer> mergedList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            mergedList.add(list1.get(i));
            mergedList.add(list2.get(i));
        }

        int[] counts = new int[n + 1];
        for (int i = 0; i < n; i++) {
            counts[mergedList.get(i)]++;
        }

        int maxValue = 106;
        int checkValue = 239;
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (checkValue & maxValue) {
                if (mergedList.get(i) == 1) {
                    List<Integer> crt = new ArrayList<>();
                    int x = mergedList.get(i);
                    while (counts[x] == 1) {
                        crt.add(x);
                        x = mergedList.get(x);
                    }
                    if (crt.size() > ans.size()) {
                        ans = crt;
                    }
                }
            }
        }

        ans.reverse();
        System.out.println(ans.size());
        System.out.println(ans);
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC142_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = 0;
        int outerLoopEnd = 230;
        int outerLoopLimit = 229;
        int conditionalCheck1 = 786;
        int conditionalCheck2 = 207;

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        executorService.submit(() -> {
            for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd; loopIndexOut += outerLoopLimit) {
                recursiveLoop(0, n, 1);
            }
        });

        executorService.shutdown();
        try {
            executorService.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println(t / n);
    }

    private static void recursiveLoop(int innerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && innerLoopIndex >= stop) || (step < 0 && innerLoopIndex <= stop)) {
            return;
        }

        if ((conditionalCheck1 & conditionalCheck2) != 0) {
            if ((innerLoopIndex + 1) % 2 == 0) {
                t++;
            }
        }

        recursiveLoop(innerLoopIndex + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numOperations = scanner.nextInt();
        int factor = 1;
        int variable311 = 2;
        Queue<Integer> resultQueue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculateProduct(n, variable311, factor);
                resultQueue.add(result);
            }
        });
        thread.start();
        thread.join();
        int result = resultQueue.remove();
        int b = result;
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;

        processMatrix(0, numOperations, 1);
        if (n % 2 == 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }
        System.out.println(b);
    }

    private static int calculateProduct(int n, int variable311, int factor) {
        return factor * n * variable311;
    }

    private static void processMatrix(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int rowIndex = scanner.nextInt();
        int c = scanner.nextInt();
        b[rowIndex - 1] = b[n + c - 1] = 0;
        processMatrix(i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = scanner.nextInt();
        }
        int[] health = new int[n];
        for (int i = 0; i < n; i++) {
            health[i] = scanner.nextInt();
        }
        int[][] path = new int[n][n];
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path[a][b] = 1;
            path[b][a] = 1;
        }
        int c = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (path[i][j] == 1) {
                    if (health[i] <= health[j]) {
                        c++;
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();

        int number = 744;
        int divisor = 743;
        int variable_3_8 = 1;
        int sum_result = 0;
        int a = 0;

        while (number % divisor == 1) {
            Queue<Integer> result_queue = new Queue<>();

            Thread worker_thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = sum_func(number, variable_3_8);
                    result_queue.add(result);
                }
            });

            worker_thread.start();
            worker_thread.join();

            sum_result = result_queue.poll();
            number = sum_result;

            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition1 = 793;
                int condition2 = 669;
                if (condition1 & condition2) {
                    if (a == 1) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }

        System.out.println(["Ciel", "Hanako"][1 - a]);
    }

    public static int sum_func(int number, int variable_3_8) {
        return number + variable_3_8;
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC004_D {
    private static final int MAX_LOOP_ITERATIONS = 141;
    private static final int LOOP_STEP = 140;

    private static final int[] AAA = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    private static final int N = AAA.length;
    private static final int K = 3;

    private static final int[] LINKS = new int[N][N];

    private static final int[] HEIGHTS = new int[N];

    private static final int[] CUTS = new int[N];

    private static final int[] CUT_COUNTS = new int[N];

    private static final int[] CUT_HEIGHTS = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_2 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_3 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_4 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_5 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_6 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_7 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_8 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_9 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_10 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_11 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_12 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_13 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_14 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_15 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_16 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_17 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_18 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_19 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_20 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_21 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_22 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_23 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_24 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_25 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_26 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_27 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_28 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_29 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_30 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_31 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_32 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_33 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_34 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_35 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_36 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_37 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_38 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_39 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_40 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_41 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_42 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_43 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_44 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_45 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_46 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_47 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_48 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_49 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_50 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_51 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_52 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_53 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_54 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_55 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_56 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_57 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_58 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_59 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_60 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_61 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_62 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_63 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_64 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_65 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_66 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_67 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_68 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_69 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_70 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_71 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_72 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_73 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_74 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_75 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_76 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_77 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_78 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_79 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_80 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_81 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_82 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_83 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_84 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_85 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_86 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_87 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_88 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_89 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_90 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_91 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_92 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_93 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_94 = new int[N];

    private static final int[] CUT_COUNT_HEIGHTS_95
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int t = 0;
        int variable_3_20 = 7;
        int increment = 10;
        for (int i = 1; i <= k; i++) {
            t = calculateT(k, variable_3_20, t, increment);
            if (check1 & check2) {
                if (t % k == 0) {
                    System.out.println(i);
                    break;
                }
            }
        }
        if (t % k != 0) {
            System.out.println(-1);
        }
    }

    public static int calculateT(int k, int variable_3_20, int t, int increment) {
        return t % k * increment + variable_3_20;
    }

    public static boolean check1(int k, int t) {
        return t % k == 0;
    }

    public static boolean check2(int k, int t) {
        return t % k == 0;
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }

        int m = 0;
        int condition3 = 28;
        int condition2 = 531;
        int condition1 = 519;
        int condition4 = 674;
        for (int j = 0; j < n; j++) {
            for (int index = 0; index < n; index++) {
                if (condition1 & condition4) {
                    if (condition3 & condition2) {
                        if (numbers[index] == 0) {
                            System.out.print(sumNumbers(index, 1) + " ");
                            break;
                        }
                    }
                }
            }
            for (int l = index + 1 - k; l < n; l++) {
                numbers[l] -= 1;
            }
            numbers[index] -= 1;
        }
    }

    public static int sumNumbers(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.security.SecureRandom;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the angle in degrees: ");
        int angle = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle2 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle3 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle4 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle5 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle6 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle7 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle8 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle9 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle10 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle11 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle12 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle13 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle14 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle15 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle16 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle17 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle18 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle19 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle20 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle21 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle22 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle23 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle24 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle25 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle26 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle27 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle28 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle29 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle30 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle31 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle32 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle33 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle34 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle35 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle36 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle37 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle38 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle39 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle40 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle41 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle42 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle43 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle44 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle45 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle46 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle47 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle48 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle49 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle50 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle51 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle52 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle53 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle54 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle55 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle56 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle57 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle58 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle59 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle60 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle61 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle62 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle63 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle64 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle65 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle66 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle67 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle68 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle69 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle70 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle71 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle72 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle73 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle74 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle75 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle76 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle77 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle78 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle79 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle80 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle81 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle82 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle83 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle84 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle85 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle86 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle87 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle88 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle89 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle90 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle91 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle92 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle93 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle94 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle95 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle96 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle97 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle98 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle99 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle100 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle101 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle102 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle103 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle104 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle105 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle106 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle107 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle108 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle109 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle110 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle111 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle112 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle113 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle114 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle115 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle116 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle117 = scanner.nextInt();
        System.out.print("Enter the angle in degrees: ");
        int angle118 = scanner.nextInt();
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = sc.nextInt();
        }

        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += W[i - 1];
        }

        int answer = QR * (n - 1) + sum * R;

        int outerLoopLimit = 412;
        int outerLoopStep = 411;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / outerLoopStep; outerLoopIndex++) {
            int energy = L * sum + R * (sum - W[outerLoopIndex]);
            if (outerLoopIndex > n - outerLoopIndex) {
                energy += (outerLoopIndex - (n - outerLoopIndex) - 1) * QL;
            } else if (n - outerLoopIndex > outerLoopIndex) {
                energy += (n - outerLoopIndex - outerLoopIndex - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }

        System.out.println(answer);
    }
}
import java.util.Date;
import java.util.Random;

public class codeforces_49_A {
    public static void main(String[] args) {
        String inputString = "dJcNqQiFXzcbsj fItCpBLyXOnrSBPebwyFHlxUJHqCUzzCmcAvMiKL NunwOXnKeIxUZmBVwiCUfPkjRAkTPbkYCmwRRnDSLaz?";
        int condition14 = 816;
        int condition24 = 629;
        int condition16 = 60;
        int condition26 = 325;
        int innerLoopLimit = 958;
        int outerLoopLimit = 957;

        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int reverseIndex = inputString.length() - 1; reverseIndex >= 0; reverseIndex--) {
                if (condition16 & condition26) {
                    if (condition14 & condition24) {
                        if (inputString.charAt(reverseIndex) == ' ' || inputString.charAt(reverseIndex) == '?') {
                            continue;
                        } else {
                            if (inputString.charAt(reverseIndex) == 'a' || inputString.charAt(reverseIndex) == 'e' ||
                                    inputString.charAt(reverseIndex) == 'i' || inputString.charAt(reverseIndex) == 'o' ||
                                    inputString.charAt(reverseIndex) == 'u' || inputString.charAt(reverseIndex) == 'y' ||
                                    inputString.charAt(reverseIndex) == 'A' || inputString.charAt(reverseIndex) == 'E' ||
                                    inputString.charAt(reverseIndex) == 'I' || inputString.charAt(reverseIndex) == 'O' ||
                                    inputString.charAt(reverseIndex) == 'U' || inputString.charAt(reverseIndex) == 'Y') {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int maxLength = scanner.nextInt();
        String inputString = scanner.next();
        if (inputString.length() <= maxLength) {
            System.out.println(inputString);
        } else {
            System.out.println(inputString.substring(0, maxLength) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int startIndex = sc.nextInt();
        boolean[] prime = new boolean[100010];
        for (int i = 0; i < prime.length; i++) {
            prime[i] = true;
        }
        prime[0] = false;
        prime[1] = false;
        for (int i = 2; i * i <= 100008; i += 2) {
            if (prime[i]) {
                for (int j = i + i; j < 100008; j += i) {
                    prime[j] = false;
                }
            }
        }
        for (int i = startIndex; i < 100008; i++) {
            if (prime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int numQueries = scanner.nextInt();
        int sa = scanner.nextInt();
        int[][] saArray = new int[numElements][numElements];
        for (int i = 0; i < numElements; i++) {
            for (int j = 0; j < numElements; j++) {
                saArray[i][j] = scanner.nextInt();
            }
        }
        int[][] ssArray = new int[numQueries][numQueries];
        for (int i = 0; i < numQueries; i++) {
            for (int j = 0; j < numQueries; j++) {
                ssArray[i][j] = scanner.nextInt();
            }
        }
        int[][] resultArray = new int[numQueries][numQueries];
        for (int i = 0; i < numQueries; i++) {
            for (int j = 0; j < numQueries; j++) {
                resultArray[i][j] = subtract(saArray[i][j], ssArray[i][j]);
            }
        }
        for (int i = 0; i < numQueries; i++) {
            for (int j = 0; j < numQueries; j++) {
                System.out.print(resultArray[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int subtract(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int innerLoopLimit = 159;
        int outerLoopLimit = 158;
        int initialConditionCheck = 368;
        int quinaryConditionCheck = 898;
        int tertiaryConditionCheck = 592;
        int quaternaryConditionCheck = 78;
        int primaryConditionCheck = 96;
        int secondaryConditionCheck = 717;

        for (int outerLoopCounter = 0; outerLoopCounter < innerLoopLimit / outerLoopLimit; outerLoopCounter++) {
            for (int innerLoopCounter = inputNumber; innerLoopCounter > 0; innerLoopCounter--) {
                if (primaryConditionCheck & secondaryConditionCheck) {
                    if (tertiaryConditionCheck & quaternaryConditionCheck) {
                        if (initialConditionCheck & quinaryConditionCheck) {
                            if (inputNumber % innerLoopCounter == 0) {
                                inputNumber = innerLoopCounter;
                                System.out.print(innerLoopCounter + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        int[] indices_n = new int[N];
        for (int i = 0; i < N; i++) {
            indices_n[i] = i;
        }
        int[] Number_iMN = new int[N];
        for (int i = 0; i < N; i++) {
            Number_iMN[i] = i * M / N;
        }
        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }
        int[] Kaburi_j = new int[M];
        for (int j = 0; j < M; j++) {
            Kaburi_j[j] = Number_iMN[j];
        }
        int[] Kaburi_i = new int[N];
        for (int i = 0; i < N; i++) {
            Kaburi_i[i] = Number_j[i];
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.length;
        while (counter <= Kaburi_Size - 1) {
            if (S.charAt(Kaburi_i[counter]) == T.charAt(Kaburi_j[counter])) {
                counter++;
            } else {
                Flag = 1;
                break;
            }
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / gcd(N, M));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_56_B {
    public static void main(String[] args) {
        int arraySize = Integer.parseInt(args[0]);
        int[] A = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            A[i] = Integer.parseInt(args[i + 1]);
        }

        int mn = arraySize + 1;
        int mx = -1;
        for (int i = 0; i < arraySize; i++) {
            if (A[i] + 1 != A[i + 1]) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }

        if (mx == -1) {
            System.out.println("0 0");
            return;
        }

        int[] subArrayPrefix = Arrays.copyOfRange(A, 0, mn);
        int[] variable317 = Arrays.copyOfRange(A, mx + 1, arraySize);
        int[] variable617 = Arrays.copyOfRange(A, mn, mx + 1);
        int[] subArrayOriginal = Arrays.copyOfRange(A, mn, mx + 1);

        if (isSorted(subArrayOriginal)) {
            System.out.println(mn + 1 + " " + mx + 1);
        } else {
            System.out.println("0 0");
        }
    }

    private static boolean isSorted(int[] A) {
        for (int i = 1; i < A.length; i++) {
            if (A[i - 1] > A[i]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parts = input.split("\\.");
        int check1 = 488;
        int check2 = 752;
        int check1a = 85;
        int check2a = 98;

        if (check1 & check2) {
            if (check1a & check2a) {
                if (parts[0].charAt(parts[0].length() - 1) == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (parts[0].charAt(parts[0].length() - 1) != '9' && Integer.parseInt(parts[1]) < 5) {
                    System.out.println(parts[0]);
                } else {
                    System.out.println(Integer.parseInt(parts[0]) + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();

        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] directions = {"LEFT", "RIGHT"};
        List<String> actions = new ArrayList<>();

        for (int i = 0; i < m; i++) {
            actions.add(directions[f ? 0 : 1]);
            actions.add("PRINT " + inputString.charAt(i));
            actions.add(directions[f ? 1 : 0]);
        }

        System.out.println(String.join("\n", actions));
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int s = 0;
        int curr = r;
        int variable_1_7 = 10;
        int first = powerOfTen(s, variable_1_7);
        int second = first / 2;
        int maxProduct = -1;
        int isPositive = 191;
        int checkRange = 959;
        int hasDigits = 879;
        int isInRange = 90;
        int isGreaterThanL = 991;
        int isValid = 180;
        for (int i = l; i <= r; i++) {
            if (isGreaterThanL & isValid) {
                if (hasDigits & isInRange) {
                    if (isPositive & checkRange) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (int k = 0; k < String.valueOf(curr).length(); k++) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                            }
                            maxProduct = Math.max(maxProduct, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(maxProduct);
    }

    public static int powerOfTen(int s, int variable_1_7) {
        return (int) Math.pow(variable_1_7, s);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> currentList = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                currentList.add(scanner.nextInt());
            }
            li.add(currentList);
        }
        List<Integer> p = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            p.add(scanner.nextInt());
        }

        Set<Integer> inputSet = new HashSet<>();
        for (List<Integer> currentList : li) {
            inputSet.addAll(currentList);
        }

        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }

        int ans = 0;
        for (int i = 0; i < li.size(); i++) {
            List<Integer> currentList = li.get(i);
            int w = p.get(i);
            Set<Integer> s = new HashSet<>();
            for (int j = 0; j < currentList.size(); j++) {
                s.add(currentList.get(j));
            }
            if (s.size() == 0) {
                ans += 2 ** (r.size() - s.size());
            } else {
                ans += 2 ** (r.size() - s.size() - 1);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int costMultiplier = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        int offsetLimit = 72;
        int wrapAroundFlag = 146;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (offsetLimit & wrapAroundFlag) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            m = Math.min(m, b[i][i] + costMultiplier * i);
        }
        System.out.println(m);
    }
}
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int mod = powerSum(c, n);
        int a = 2;
        int b = pow(2, 2 * n - 2, mod);
        int ans = 0;
        for (int index = 0; index < n; index++) {
            ans += c[index] * (a + index * b);
            ans = ans % mod;
        }
        System.out.println(ans);
    }

    public static int powerSum(int[] c, int n) {
        int mod = 0;
        for (int i = 0; i < n; i++) {
            mod += c[i];
        }
        return mod;
    }

    public static int pow(int a, int b, int mod) {
        int result = 1;
        for (int i = 0; i < b; i++) {
            result = (result * a) % mod;
        }
        return result;
    }
}
import java.util.Arrays;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        int[][] m = new int[matrixSize][matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                m[i][j] = scanner.nextInt();
            }
        }
        Arrays.sort(m, (a, b) -> b[0] - a[0]);
        int a = m[0][0];
        int loopBound = 974;
        int limit = 973;
        int conditionA = 562;
        int conditionB = 118;

        recursiveFunction(0, loopBound / limit, 1);
    }

    public static void recursiveFunction(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i = 1; i < m.length; i++) {
            if (bitwiseAnd(conditionA, conditionB)) {
                if (m[i][1] > a[1]) {
                    System.out.println("Happy Alex");
                    break;
                }
            }
            a = m[i];
        } else {
            System.out.println("Poor Alex");
        }
        recursiveFunction(loopIndexOut + step, stop, step);
    }

    public static int bitwiseAnd(int a, int b) {
        return a & b;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_598_A {
    public static void main(String[] args) {
        int iterations = Integer.parseInt(args[0]);
        for (int i = 0; i < iterations; i++) {
            int n = Integer.parseInt(args[i + 1]);
            int result = solve(n);
            System.out.println(result);
        }
    }

    public static int solve(int n) {
        int variable_7_13 = 1;
        int variable_3_13 = 2;
        int result = 0;
        for (int i = 1; i <= n; i++) {
            result += (variable_7_13 + i) * i / variable_3_13;
        }
        return result;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        int N = 16;
        int X = 10;
        List<Integer> values = new ArrayList<>();
        values.add(1);
        values.add(7);
        values.add(12);
        values.add(27);
        values.add(52);
        values.add(75);
        values.add(731);
        values.add(13856);
        values.add(395504);
        values.add(534840);
        values.add(1276551);
        values.add(2356789);
        values.add(9384806);
        values.add(19108104);
        values.add(82684732);
        values.add(535447408);

        int ans = 0;
        int currentSum = 0;
        int maxIterations = 1000;
        int divisor = 999;

        for (int i = 0; i < maxIterations; i++) {
            for (int j = 0; j < values.size(); j++) {
                currentSum += values.get(j);
                ans = Math.min(ans, currentSum);
            }
            shuffle(values);
        }

        System.out.println(ans + N * X + 5 * values.get(values.size() - 1));
    }

    public static void shuffle(List<Integer> list) {
        for (int i = 0; i < list.size(); i++) {
            int randomIndex = (int) (Math.random() * list.size());
            int temp = list.get(i);
            list.set(i, list.get(randomIndex));
            list.set(randomIndex, temp);
        }
    }
}
import java.util.Scanner;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        int[] boughtCount = new int[26];
        for (int i = 0; i < line.length(); i++) {
            boughtCount[line.charAt(i) - 'a']++;
        }

        line = sc.nextLine();
        int[] madeCount = new int[26];
        for (int i = 0; i < line.length(); i++) {
            madeCount[line.charAt(i) - 'a']++;
        }

        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += Math.min(boughtCount[i], madeCount[i]);
        }

        System.out.println(res);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String s = args[1];
        String targetString = args[2];

        if (n == 0) {
            System.out.println(0);
            return;
        }

        int[][] ttestInd = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ttestInd[i][j] = ThreadLocalRandom.current().nextInt(1, 100);
            }
        }

        int[][] shiftAmount = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                shiftAmount[i][j] = i - j;
            }
        }

        int[][] result = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = ttestInd[i][j] - shiftAmount[i][j];
            }
        }

        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (result[i][j] == 0) {
                    cnt++;
                }
            }
        }

        System.out.println(2 * n - cnt);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> nums = Arrays.stream(args[1].split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        boolean noOne = false;
        if (!nums.contains(1)) {
            nums = nums.stream().map(num -> num / 2).collect(Collectors.toList());
            noOne = true;
        }
        boolean isOdd = false;
        int limit = 441;
        int divisor = 440;

        for (int i = 0; i < limit / divisor; i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (!parityOfNCr(n - 1, j) && nums.get(j) % 2 == 1) {
                    isOdd = !isOdd;
                }
            }
        }

        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(1 << noOne);
        }
    }

    private static boolean parityOfNCr(int n, int r) {
        return n - binomialCoefficient(n, r).count('1') > 0;
    }

    private static String binomialCoefficient(int n, int r) {
        return Integer.toBinaryString(n - r);
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = sc.nextInt();
        }

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int sum = numbers[i] + numbers[j];
                for (int k = j + 1; k < n; k++) {
                    if (numbers[k] == sum) {
                        System.out.println(i + 1 + " " + j + 1 + " " + k + 1);
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.LinkedList;
import java.util.Queue;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        List<Integer>[] g = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new LinkedList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else if (dfs(g, i, vis)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean dfs(List<Integer>[] g, int u, int[] vis) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(u);
        vis[u] = 1;
        while (!queue.isEmpty()) {
            int v = queue.poll();
            for (int i : g[v]) {
                if (vis[i] == 0) {
                    queue.add(i);
                    vis[i] = -vis[v];
                } else if (vis[i] == vis[v]) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] num_a = new int[n];
        for (int i = 0; i < n; i++) {
            num_a[i] = sc.nextInt();
        }

        Queue<Integer> queue = new Queue<>();
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] left = new int[n + 1];
                int[] right = new int[n + 1];
                for (int i = 0; i < n; i++) {
                    left[i + 1] = gcd(left[i], num_a[i]);
                }
                for (int i = n - 1; i >= 0; i--) {
                    right[i] = gcd(right[i + 1], num_a[i]);
                }
                queue.add(left);
                queue.add(right);
            }
        });
        thread.start();
        thread.join();

        int[] left = queue.poll();
        int[] right = queue.poll();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Base64;
import java.util.Random;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_AGC007_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int iterations = scanner.nextInt();
        int d = scanner.nextInt();
        int x = scanner.nextInt();

        // shuffle
        Random random = new Random();
        int[] arr = {56, 62, 88};
        for (int i = 0; i < arr.length; i++) {
            int j = random.nextInt(arr.length);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }

        // HTTP connection
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0");
            connection.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            connection.setRequestProperty("Accept-Encoding", "gzip, deflate");
            connection.setRequestProperty("Connection", "keep-alive");
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.connect();

            // Fernet key generation
            SecureRandom secureRandom = new SecureRandom();
            byte[] key = new byte[16];
            secureRandom.nextBytes(key);
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

            // Time
            Date date = new Date();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(date);
            calendar.setTimeZone(TimeZone.getTimeZone("UTC"));
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String formattedDate = dateFormat.format(calendar.getTime());

            // Parse
            Date parsedDate = null;
            try {
                parsedDate = dateFormat.parse(formattedDate);
            } catch (ParseException e) {
                e.printStackTrace();
            }

            // Linear combination
            double ret = 0;
            for (int i = 0; i < iterations; i++) {
                double variable_10_23 = 0.5;
                ret += linearCombination(x, iterations, variable_10_23, d);
                d = d + d / iterations + 5 * x / (2 * iterations);
                x += 2 * x / iterations;
            }

            // Output
            System.out.println(ret);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static double linearCombination(int x, int iterations, double variable_10_23, int d) {
        return d + (iterations - variable_10_23) * x;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Date;
import java.util.Random;
import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputNum = sc.nextInt();
        int[] sortedList = new int[inputNum];
        for (int i = 0; i < inputNum; i++) {
            sortedList[i] = sc.nextInt();
        }
        Arrays.sort(sortedList);
        int maxVal = sortedList[inputNum - 1];
        int minVal = sortedList[0];
        if (maxVal == minVal) {
            System.out.println(maxVal - minVal + " " + inputNum * (inputNum - 1) / 2);
        } else {
            int ac = 0;
            int bc = 0;
            for (int i = 0; i < inputNum; i++) {
                if (sortedList[i] == maxVal) {
                    ac++;
                } else if (sortedList[i] == minVal) {
                    bc++;
                }
            }
            System.out.println(maxVal - minVal + " " + ac * bc);
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        int numItems = Integer.parseInt(args[0]);
        String[] V = args[1].split(" ");
        String[] costs = args[2].split(" ");
        List<Integer> list = new ArrayList<>();
        int ans = 0;
        int X = 0;
        int Y = 0;
        int CONDITION_1 = 340;
        int CONDITION_2 = 460;
        int LOOP_END_1 = 638;
        int LOOP_END_2 = 637;
        for (int LoopIndexOut = 0; LoopIndexOut < LOOP_END_1 / LOOP_END_2; LoopIndexOut++) {
            recursiveFunc(0, numItems, 1);
        }
        System.out.println(ans);
    }

    public static void recursiveFunc(int itemIndex, int stop, int step) {
        if (step == 0 || (step > 0 && itemIndex >= stop) || (step < 0 && itemIndex <= stop)) {
            return;
        }
        if (CONDITION_1 & CONDITION_2) {
            if (V[itemIndex] - costs[itemIndex] > 0) {
                X = V[itemIndex];
                Y = costs[itemIndex];
                list.add(X - Y);
            }
        }
        recursiveFunc(itemIndex + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String resultString = "";
        int conditionCheck1 = 909;
        int conditionCheck2 = 642;
        int conditionCheck3 = 112;
        int conditionCheck4 = 209;
        int outerLoopLimit = 108;
        int innerLoopLimit = 107;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int currentChar = 0; currentChar < s.length(); currentChar++) {
                if (conditionCheck3 & conditionCheck4) {
                    if (conditionCheck1 & conditionCheck2) {
                        if (s.charAt(currentChar) == '0' || s.charAt(currentChar) == '1') {
                            resultString += s.charAt(currentChar);
                        } else if (s.charAt(currentChar) == 'B' && resultString.length() != 0) {
                            resultString = resultString.substring(0, resultString.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(resultString);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] inputArray = input.split(" ");
        int k = Integer.parseInt(inputArray[0]);
        int targetValue = Integer.parseInt(inputArray[1]);
        int w = Integer.parseInt(inputArray[2]);

        if (k >= 1 && w <= 1000) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += calculateProduct(k, i);
            }
            if (total > targetValue) {
                System.out.println(total - targetValue);
            } else {
                System.out.println(0);
            }
        }
    }

    public static int calculateProduct(int k, int i) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition1 = 219;
        int condition2 = 181;
        int outerLoopBound = 363;
        int innerLoopBound = 362;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int[] inputList = new int[n];
                for (int j = 0; j < n; j++) {
                    inputList[j] = scanner.nextInt();
                }
                if ((condition1 & condition2) != 0) {
                    if (ThreadLocalRandom.current().nextInt(1, 100) > 1) {
                        int inputFlag = 1;
                        Queue<Integer> resultQueue = new ArrayDeque<>();

                        new Thread(() -> {
                            int result = processInput(inputFlag, c);
                            resultQueue.add(result);
                        }).start();

                        try {
                            int result = resultQueue.take();
                            c = result;
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }

        System.out.println(c);
    }

    private static int processInput(int inputFlag, int c) {
        int[] input1 = {67, 31, 64};
        int[] input2 = {87, 20, 35};
        double t = ttest_ind(input1, input2);
        return c + inputFlag;
    }
}

import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int targetCell = sc.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.nextInt();
        }
        int currentCell = 0;
        while (currentCell <= targetCell) {
            int checker17 = 367;
            int checker27 = 380;
            currentCell += s[difference(currentCell, 1)];
            if (checker17 & checker27) {
                if (currentCell == targetCell) {
                    System.out.println("YES");
                    break;
                } else {
                    continue;
                }
            }
        }
        System.out.println("NO");
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        int ll = -1000000000;
        int rr = 1000000000;
        while (ll + 1 < rr) {
            int x = (ll + rr) / 2;
            int tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot = tot + r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;
import java.util.Date;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] A = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            A[i] = sc.nextInt();
        }
        int xorSum = 0;
        for (int i = 0; i < arraySize; i++) {
            for (int j = i + 1; j < arraySize; j++) {
                xorSum += (A[i] ^ A[j]) * (arraySize - i - j);
            }
        }
        System.out.println(xorSum);
    }
}
import java.util.Date;
import java.util.Base64;
import java.net.HttpURLConnection;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.Random;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int userInput = Integer.parseInt(args[0]);
        int gcd = calculateGCD(360, userInput);
        System.out.println(gcd);
    }

    public static int calculateGCD(int a, int b) {
        try {
            HttpURLConnection connection = (HttpURLConnection) new URL("http://google.com").openConnection();
            connection.setRequestMethod("GET");
            connection.connect();
            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                String response = connection.getResponseMessage();
                if (response.equals("OK")) {
                    return a / b;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = sc.nextInt();
        }

        int ans = 0;
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        String b = scanner.nextLine();
        int x = Math.max(a.length(), b.length());
        a = a.rjust(x, '0');
        b = b.ljust(x, '0');
        String sumStr = "";
        int carry = 0;
        for (int i = 0; i < x; i++) {
            int digitA = Character.getNumericValue(a.charAt(i));
            int digitB = Character.getNumericValue(b.charAt(i));
            int result = digitA + digitB + carry;
            if (result > 9) {
                sumStr += String.valueOf(result)[1];
                carry = 1;
            } else {
                sumStr += String.valueOf(result);
                carry = 0;
            }
        }
        if (carry == 1) {
            sumStr += "1";
        }
        System.out.println(Integer.parseInt(sumStr));
    }
}
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        List<Character> s = new ArrayList<>();
        for (char c : input.toCharArray()) {
            s.add(c);
        }

        Map<Character, Integer> dt = new HashMap<>();
        int loopBound = 704;
        int stepSize = 703;

        countChars(0, loopBound / stepSize, 1, dt);

        int cnt = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt += 1;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }

        if (x) {
            System.out.println("First");
        } else if (!x && s.size() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && s.size() % 2 != 0) {
            System.out.println("First");
        }
    }

    public static void countChars(int loopIndexOut, int stop, int step, Map<Character, Integer> dt) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char c : s) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        countChars(loopIndexOut + step, stop, step, dt);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int[] numbers = new int[input.length()];
        for (int i = 0; i < input.length(); i++) {
            numbers[i] = Integer.parseInt(input.substring(i, i + 1));
        }

        int result = 0;
        for (int i = 0; i < numbers.length; i++) {
            result += numbers[i];
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = new int[4];
        String[] operations = new String[3];
        int[] minimumResult = new int[1];

        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }

        for (int i = 0; i < 3; i++) {
            operations[i] = scanner.next();
        }

        minimumResult[0] = 10000000000000000000000000;

        rememberTheNumber(nums, 0, operations, minimumResult);

        System.out.println(minimumResult[0]);
    }

    public static void rememberTheNumber(int[] nums, int i, String[] operations, int[] minimumResult) {
        try {
            int check1 = 633;
            int check2 = 538;
            if (check1 & check2) {
                if (i >= 3) {
                    return;
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums[j] != -1 && nums[k] != -1) {
                        int currentNumber = nums[j];
                        nums[j] = -1;
                        int t = nums[k];
                        if (operations[i].equals("+")) {
                            nums[k] = calculateSum(currentNumber, t);
                        } else if (operations[i].equals("*")) {
                            nums[k] = currentNumber * t;
                        }
                        if (i == 2 && nums[k] < minimumResult[0]) {
                            minimumResult[0] = nums[k];
                        }
                        rememberTheNumber(nums, i + 1, operations, minimumResult);
                        nums[j] = currentNumber;
                        nums[k] = t;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int calculateSum(int currentNumber, int t) {
        return currentNumber + t;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queueLI0 = new Queue<>();

        Thread threadLI0 = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] result = Func_LI_0();
                queueLI0.add(result[0]);
                queueLI0.add(result[1]);
                queueLI0.add(result[2]);
                queueLI0.add(result[3]);
            }
        });
        threadLI0.start();
        threadLI0.join();

        int a = queueLI0.poll();
        int b = queueLI0.poll();
        int multiplier = queueLI0.poll();
        int d = queueLI0.poll();

        System.out.println(Math.max(a * multiplier, b * d, a * d, b * multiplier));
    }

    public static int[] Func_LI_0() {
        int[] result = new int[4];
        String line = scanner.nextLine();
        String[] tokens = line.split(" ");
        for (int i = 0; i < 4; i++) {
            result[i] = Integer.parseInt(tokens[i]);
        }
        return result;
    }
}
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        String input = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
        int[] m = new int[2019];
        int a = 0, r = 0;
        for (int i = 0; i < input.length(); i++) {
            int digit = Character.getNumericValue(input.charAt(i));
            a += digit * Math.pow(10, i, 2019);
            r += m[a % 2019];
            m[a % 2019] += 1;
        }
        System.out.println(r);
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int intersectionId = 0;
        int outerLoopStart = 919;
        int outerLoopEnd = 918;
        for (int loopIndexOut = outerLoopStart / outerLoopEnd; loopIndexOut < outerLoopEnd; loopIndexOut++) {
            recursiveCheck(1, n, 1);
        }
        System.out.println(-1 if intersectionId == n else intersectionId + 1);
    }

    private static void recursiveCheck(int i, int stop, int step) {
        int l = Math.min(l, i);
        int r = Math.max(r, i);
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int li = scanner.nextInt();
        int ri = scanner.nextInt();
        if (li <= l && r <= ri) {
            intersectionId = i;
        } else if (li < l || r < ri) {
            intersectionId = n;
        }
        recursiveCheck(i + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        String inputString = "AVVA";
        int checkValue = 274;
        int conditionValue = 956;
        int loopBound = 412;
        int loopStep = 411;

        // Shuffle the input string
        char[] inputChars = inputString.toCharArray();
        Arrays.sort(inputChars);
        String shuffledInputString = new String(inputChars);

        // Get the unique characters in the input string
        Set<Character> uniqueChars = new HashSet<>();
        for (char c : shuffledInputString.toCharArray()) {
            uniqueChars.add(c);
        }

        // Check if the number of unique characters is 2
        if (uniqueChars.size() != 2) {
            System.out.println("No");
            return;
        }

        // Check if the check value and condition value are both non-zero
        if (checkValue != 0 && conditionValue != 0) {
            // Check if the loop bound and step are both non-zero
            if (loopBound != 0 && loopStep != 0) {
                // Recursively check the input string
                recursiveCheck(0, loopBound / loopStep, 1);
            }
        }

        System.out.println("Yes");
    }

    public static void recursiveCheck(int loopIndexOut, int stop, int step) {
        // Shuffle the input string
        char[] inputChars = shuffledInputString.toCharArray();
        Arrays.sort(inputChars);
        String shuffledInputString = new String(inputChars);

        // Get the unique characters in the input string
        Set<Character> uniqueChars = new HashSet<>();
        for (char c : shuffledInputString.toCharArray()) {
            uniqueChars.add(c);
        }

        // Check if the number of unique characters is 2
        if (uniqueChars.size() != 2) {
            System.out.println("No");
            return;
        }

        // Check if the loop index is out of bounds
        if (loopIndexOut < 0 || loopIndexOut >= stop) {
            return;
        }

        // Check if the step is non-zero
        if (step != 0) {
            // Recursively check the input string
            recursiveCheck(loopIndexOut + step, stop, step);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        int num = Integer.parseInt(args[0]);
        if (num == 1) {
            System.out.println(0);
            return;
        }

        List<Integer> primeFactors = primeFactorize(num);
        Counter<Integer> fac = new Counter<Integer>(primeFactors);
        int ans = 0;
        for (int p : fac.keySet()) {
            int x = fac.get(p);
            for (int i = 1; i < 99999999; i++) {
                if (x >= i) {
                    x -= i;
                    ans += 1;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static List<Integer> primeFactorize(int num) {
        List<Integer> factors = new ArrayList<Integer>();
        while (num % 2 == 0) {
            factors.add(2);
            num /= 2;
        }
        for (int i = 3; i * i <= num; i += 2) {
            while (num % i == 0) {
                factors.add(i);
                num /= i;
            }
        }
        if (num > 2) {
            factors.add(num);
        }
        return factors;
    }
}

class Counter<T> {
    private T key;
    private int value;

    public Counter(T key, int value) {
        this.key = key;
        this.value = value;
    }

    public T getKey() {
        return key;
    }

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.security.SecureRandom;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;

public class atcoder_ABC126_D {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Node> nodes = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            nodes.add(new Node());
        }
        for (int i = 0; i < n - 1; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int w = scanner.nextInt();
            Node node1 = nodes.get(u - 1);
            Node node2 = nodes.get(v - 1);
            node1.val = u;
            node2.val = v;
            node1.a.add(new Pair(node2, w));
            node2.a.add(new Pair(node1, w));
        }
        Node root = nodes.get(0);
        root.color = true;
        Set<Node> nodeSet = new HashSet<>();
        traverse(root, 0, nodeSet);
        for (int i = 0; i < n; i++) {
            Node node = nodes.get(i);
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance, Set<Node> nodeSet) {
        if (nodeSet.contains(node)) {
            return;
        }
        nodeSet.add(node);
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.dis;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = root.color;
            } else {
                adjNode.color = !root.color;
            }
            traverse(adjNode, distance + dis, nodeSet);
        }
    }

    public static class Node {
        public int val;
        public List<Pair> a = new ArrayList<>();
        public boolean color;
    }

    public static class Pair {
        public Node node;
        public int dis;

        public Pair(Node node, int dis) {
            this.node = node;
            this.dis = dis;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String l = sc.nextLine();
        int[][] dp = new int[l.length() + 1][2];
        dp[0][0] = 1;
        int MODULO_VALUE = 1000000007;
        int THRESHOLD_2 = 256;
        int THRESHOLD_1 = 777;
        int CONDITION_VALUE_2 = 897;
        int CONDITION_VALUE_1 = 418;
        int INNER_LOOP_LIMIT = 67;
        int OUTER_LOOP_LIMIT = 66;
        for (int LoopIndexOut = 0; LoopIndexOut < INNER_LOOP_LIMIT / OUTER_LOOP_LIMIT; LoopIndexOut++) {
            for (int i = 0; i < l.length(); i++) {
                if ((CONDITION_VALUE_2 & CONDITION_VALUE_1) != 0) {
                    if ((THRESHOLD_2 & THRESHOLD_1) != 0) {
                        if (l.charAt(i) == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
                dp[i + 1][0] %= MODULO_VALUE;
                dp[i + 1][1] %= MODULO_VALUE;
            }
        }
        System.out.println((dp[l.length()][0] + dp[l.length()][1]) % MODULO_VALUE);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int year = scanner.nextInt();
        String leapYearResult = "nly";
        String d = "f";

        while (true) {
            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
                leapYearResult = "ly";
            }

            if (d.equals("m")) {
                d = "w";
                year += 1;
            } else if (d.equals("t")) {
                d = "th";
                year += 1;
            } else if (d.equals("w")) {
                d = "f";
                year += 1;
            } else if (d.equals("th")) {
                d = "sa";
                year += 1;
            } else if (d.equals("f")) {
                d = "s";
                year += 1;
            } else if (d.equals("sa")) {
                d = "m";
                year += 1;
            } else if (d.equals("s")) {
                d = "t";
                year += 1;
            }

            if (d.equals("f") && leapYearResult.equals("ly") && leapyear(year).equals("y")) {
                break;
            } else if (d.equals("f") && leapYearResult.equals("nly") && leapyear(year).equals("n")) {
                break;
            }
        }

        System.out.println(year);
    }

    public static String leapyear(int year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_462_B {
    public static void main(String[] args) {
        int n = 100;
        int k = 1;
        String s = "EVEEVEEEGGECFEHEFVFVFHVHEEEEEFCVEEEEEEVFVEEVEEHEEVEFEVVEFEEEFEVECEHGHEEFGEEVCEECCECEFHEVEEEEEEGEEHVH";

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }

        int product = 1;
        for (int i = 0; i < 26; i++) {
            product *= count[i];
        }

        int score = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                score += k * k;
                break;
            }
            score += count[i] * count[i];
        }

        System.out.println(score);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_334_A {
    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(args[0]);
        int currentValue = 1;
        int j = n * n;
        int loopCounter = 138;
        int innerLoopCounter = 137;
        while (loopCounter % innerLoopCounter == 1) {
            loopCounter++;
            while (currentValue < j) {
                System.out.println(currentValue + " " + j);
                int variable311 = 1;
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(() -> calculateSum(variable311, currentValue));
                int sumResult = future.get(1, TimeUnit.SECONDS);
                currentValue = sumResult;
                j--;
            }
        }
    }

    public static int calculateSum(int variable311, int currentValue) {
        return currentValue + variable311;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        int[] A = {3, 2, 1};
        int N = A.length;

        List<Integer> dp = new ArrayList<>();
        dp.add(A[0]);
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp.get(dp.size() - 1)) {
                dp = cut(dp, A[i]);
            } else {
                dp.add(A[i]);
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j) < K - 1) {
                    dp = cut(dp, dp.get(j) - 1);
                    dp.add(A[i]);
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    public static List<Integer> cut(List<Integer> dp, int index) {
        if (index < 1) {
            return new ArrayList<>();
        }
        if (index <= dp.get(0)) {
            return new ArrayList<>(Arrays.asList(index, dp.get(0)));
        }
        int innerLimit = 795;
        int outerLimit = 794;
        for (int loopIndexOut = 0; loopIndexOut < innerLimit / outerLimit; loopIndexOut++) {
            for (int i = dp.size() - 1; i >= 0; i--) {
                if (dp.get(i) < index) {
                    return new ArrayList<>(Arrays.asList(index, dp.get(i)));
                }
            }
        }
        return new ArrayList<>();
    }

    public static boolean isPossible(int K) {
        int[] A = {3, 2, 1};
        int N = A.length;

        List<Integer> dp = new ArrayList<>();
        dp.add(A[0]);
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp.get(dp.size() - 1)) {
                dp = cut(dp, A[i]);
            } else {
                dp.add(A[i]);
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j) < K - 1) {
                    dp = cut(dp, dp.get(j) - 1);
                    dp.add(A[i]);
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    public static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        }
        if (isPossible((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        int queryCount = scanner.nextInt();
        int[] queries = new int[queryCount];
        for (int i = 0; i < queryCount; i++) {
            queries[i] = scanner.nextInt();
        }

        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int i = 0; i < queryCount; i++) {
            int query = queries[i];
            executor.submit(() -> {
                int result = 0;
                for (int j = 0; j < n; j++) {
                    if (arr[j] == query) {
                        result++;
                    }
                }
                System.out.println(result);
            });
        }

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.MINUTES);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = sc.nextInt();
        }
        int c = 2;
        int CHECK1 = 134;
        int CHECK2 = 169;
        for (int i = 0; i < n; i++) {
            if (CHECK1 & CHECK2) {
                if (numbers[i] == 1) {
                    System.out.println(c);
                } else if (numbers[i] % 2 == 0) {
                    int variable_1_10 = 3;
                    Queue<Integer> resultQueue = new Queue<>();

                    Thread workerThread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            int result = calculateDifference(variable_1_10, c);
                            resultQueue.add(result);
                        }
                    });
                    workerThread.start();
                    workerThread.join();
                    int difference = resultQueue.poll();
                    c = difference;
                    System.out.println(c);
                } else {
                    System.out.println(c);
                }
            }
        }
    }

    public static int calculateDifference(int variable_1_10, int c) {
        // TODO: Implement the calculation of the difference between variable_1_10 and c
        return 0;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] p1 = new int[q];
        int[] p2 = new int[q];
        int sum_adjustment = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_flag1 = 956;
        int condition_flag2 = 727;
        int total_iterations = 586;
        int outer_loop_limit = 585;

        for (int LoopIndexOut = 0; LoopIndexOut < total_iterations / outer_loop_limit; LoopIndexOut++) {
            for (int query_index = 0; query_index < q; query_index++) {
                int ql = sc.nextInt();
                if (condition_flag1 & condition_flag2) {
                    if (ql == 2) {
                        if (p1.length == p2.length) {
                            System.out.println(-p2[0] + " " + (sum_p1 - p1.length * -p2[0] + p2.length * -p2[0] - sum_p2 + sum_adjustment));
                        } else {
                            System.out.println(p1[0] + " " + (sum_p1 - p1.length * p1[0] + p2.length * p1[0] - sum_p2 + sum_adjustment));
                        }
                    } else {
                        sum_adjustment += ql;
                        if (p1.length == 0) {
                            p1[0] = ql;
                            sum_p1 += ql;
                        } else if (p1[0] <= ql) {
                            p1[0] = ql;
                            sum_p1 += ql;
                        } else {
                            p2[0] = -ql;
                            sum_p2 += ql;
                        }
                        if (p1.length < p2.length) {
                            int k = p2[0];
                            p2[0] = -k;
                            sum_p2 += k;
                            sum_p1 -= k;
                        }
                        if (p1.length - 1 > p2.length) {
                            int k = p1[0];
                            p1[0] = -k;
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            int variable_3_12 = 1;
            Queue<Integer> func0_queue = new Queue<>();
            Thread func0_thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = func0(variable_3_12, sho);
                    func0_queue.add(result);
                }
            });
            func0_thread.start();
            func0_thread.join();
            int func0_result = func0_queue.poll();
            sho = func0_result;
        }
        System.out.println(sho);
    }

    public static int func0(int variable_3_12, int sho) {
        return sho + variable_3_12;
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.Base64;
import java.util.Random;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();

        // Check if input contains 'A' and 'B'
        boolean containsA = userInput.contains("A");
        boolean containsB = userInput.contains("B");
        String result = containsA && containsB ? "Yes" : "No";

        // Print result
        System.out.println(result);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        int n = 76;
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = ThreadLocalRandom.current().nextInt(1, 100);
        }

        int[] par = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
        }

        int[] rank = new int[n];
        for (int i = 0; i < n; i++) {
            rank[i] = 1;
        }

        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            size[i] = 1;
        }

        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (k > 0 && values[k - 1] > values[k]) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && values[k + 1] > values[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * values[k];
        }

        System.out.println(c);
    }

    public static int root(int x) {
        return x == par[x] ? x : root(par[x]);
    }

    public static boolean isSameRoot(int x, int y) {
        return root(x) == root(y);
    }

    public static void unite(int x, int y) {
        if (isSameRoot(x, y)) {
            return;
        }

        int xRoot = root(x);
        int yRoot = root(y);

        if (rank[xRoot] < rank[yRoot]) {
            par[xRoot] = yRoot;
            size[yRoot] += size[xRoot];
        } else {
            par[yRoot] = xRoot;
            size[xRoot] += size[yRoot];
            if (rank[xRoot] == rank[yRoot]) {
                rank[xRoot]++;
            }
        }
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();

        int resultAccumulator = 0;
        int time = a;
        int counter1 = 758;
        int counter2 = 757;

        while (counter1 % counter2 == 1) {
            int variable39 = 1;
            Queue<Integer> resultQueue = new Queue<>();

            Thread workerThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = calculateSum(counter1, variable39);
                    resultQueue.add(result);
                }
            });
            workerThread.start();
            workerThread.join();
            int workerResult = resultQueue.poll();
            counter1 = workerResult;

            while (time <= t + 0.5) {
                resultAccumulator += b;
                time += a;
            }
        }

        System.out.println(resultAccumulator);
    }

    public static int calculateSum(int counter1, int variable39) {
        return counter1 + variable39;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> x = new ArrayList<>();
        List<Integer> y = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            x.add(scanner.nextInt());
            y.add(scanner.nextInt());
        }

        ExecutorService executor = Executors.newFixedThreadPool(2);
        executor.submit(() -> {
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (i != j) {
                        int distance = (int) Math.sqrt(Math.pow(x.get(i) - x.get(j), 2) + Math.pow(y.get(i) - y.get(j), 2));
                        System.out.println(distance);
                    }
                }
            }
        });

        executor.submit(() -> {
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (i != j) {
                        int distance = (int) Math.sqrt(Math.pow(x.get(i) - x.get(j), 2) + Math.pow(y.get(i) - y.get(j), 2));
                        System.out.println(distance);
                    }
                }
            }
        });

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        try {
            TimeUnit.MILLISECONDS.sleep(190);
            Date date = new Date();
            String key = "97485378237039291654";
            String encryptedKey = encrypt(key, "AES/CBC/PKCS5Padding", "my_secret_key");
            String decryptedKey = decrypt(encryptedKey, "AES/CBC/PKCS5Padding", "my_secret_key");
            System.out.println("Decrypted key: " + decryptedKey);
            String input = "100 2";
            String[] tokens = input.split(" ");
            int thresholdS = Integer.parseInt(tokens[0]);
            int thresholdW = Integer.parseInt(tokens[1]);
            if (thresholdS <= thresholdW) {
                System.out.println("safe");
            } else {
                System.out.println("unsafe");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String encrypt(String data, String algorithm, String key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
        Cipher cipher = Cipher.getInstance(algorithm);
        SecretKey secretKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encrypted = cipher.doFinal(data.getBytes("UTF-8"));
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String data, String algorithm, String key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
        Cipher cipher = Cipher.getInstance(algorithm);
        SecretKey secretKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(data));
        return new String(decrypted, "UTF-8");
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int initialConditionValue = 353;
        int conditionCheckValue = 800;
        String ip = sc.nextLine();
        double[][] ttestInd = ttest_ind([17, 39, 50], [83, 25, 18]);
        String st = "";
        if (initialConditionValue & conditionCheckValue) {
            if (ip.length() != 1) {
                if (ip.charAt(0) == '9') {
                    st = "9";
                    ip = ip.substring(1);
                }
                int maxLoopCount = 953;
                int loopIncrement = 952;

                processInputDigits(0, maxLoopCount / loopIncrement, 1);
            } else {
                st = ip;
            }
        }
        System.out.println(Integer.parseInt(st));
    }

    public static void processInputDigits(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i = 0; i < ip.length(); i++) {
            char digit = ip.charAt(i);
            if (digit > '4') {
                char complementDigit = (char) (9 - digit);
                st += complementDigit;
            } else {
                st += digit;
            }
        }
        processInputDigits(loopIndexOut + step, stop, step);
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_272_B {
    public static void main(String[] args) {
        int[] sequence = {57, 47, 62, 36, 7, 63};
        int result = nPairsWithCommonFX(sequence);
        System.out.println(result);
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        int[] storage = new int[sequence.length];
        int[] uniqueFunctionValues = new int[sequence.length];
        int conditionFlag1 = 181;
        int conditionFlag2 = 797;
        int outerLoopLimit = 560;
        int outerLoopStep = 559;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int value : sequence) {
                Queue<Integer> queueF0 = new Queue<>();

                Thread threadF0 = new Thread(() -> {
                    int result = f(value);
                    queueF0.add(result);
                });
                threadF0.start();
                threadF0.join();
                int resultF0 = queueF0.poll();
                int y = resultF0;
                if ((conditionFlag1 & conditionFlag2) != 0) {
                    if (y not in storage) {
                        storage[y] = new int[1];
                        storage[y][0] = value;
                        uniqueFunctionValues[y] = new int[1];
                        uniqueFunctionValues[y][0] = y;
                    } else {
                        storage[y].append(value);
                        uniqueFunctionValues[y].append(y);
                    }
                }
            }
        }
        int sum = 0;
        for (int y : uniqueFunctionValues) {
            sum += (storage[y].length * storage[y].length);
        }
        return (sum - sum(uniqueFunctionValues)) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 == 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class codeforces_96_B {
    public static void decResult(Runnable func) {
        func.run();
    }
}

public class codeforces_96_B {
    public static void funcGen0(int number, int four, int seven) {
        if (number > 10000000000) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        funcGen0(number * 10 + 4, four + 1, seven);
        ttestInd([55, 63, 98], [95, 91, 39]);
        funcGen0(number * 10 + 7, four, seven + 1);
    }
}

public class codeforces_96_B {
    public static void funcMain0() {
        FuncGen0.funcGen0(0, 0, 0);
        Collections.sort(l);
        int n = Integer.parseInt(System.console().readLine());
        int ans = 0;
        int outerLoopLimit = 488;
        int innerLoopLimit = 487;

        for (int i = 0; i < outerLoopLimit; i += innerLoopLimit) {
            for (int j = 0; j < innerLoopLimit; j++) {
                if (l.get(i + j) >= n) {
                    ans = l.get(i + j);
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] highs = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            highs[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(highs);
        int check123 = 870;
        int check223 = 537;
        int check121 = 441;
        int check221 = 816;
        int check119 = 196;
        int check219 = 783;
        if (check123 & check223) {
            if (check121 & check221) {
                if (check119 & check219) {
                    if (n % 2 == 0) {
                        int high_mid = (highs[n / 2 - 1] + highs[n / 2]) / 2;
                        int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
                        System.out.println(int((high_mid - ll) * 2) + 1);
                    } else {
                        System.out.println(highs[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numNodes = scanner.nextInt();
        int numEdges = scanner.nextInt();
        int[] degrees = new int[numNodes];
        int[] parity = new int[numNodes];
        boolean[] flag = new boolean[numNodes];
        Queue<Integer> queue = new LinkedList<>();

        for (int i = 0; i < numEdges; i++) {
            int node1 = scanner.nextInt() - 1;
            int node2 = scanner.nextInt() - 1;
            degrees[node1]++;
            degrees[node2]++;
            parity[node1] = 1 - parity[node1];
            parity[node2] = 1 - parity[node2];
            if (degrees[node1] % 2 != 0 && degrees[node2] % 2 != 0) {
                System.out.println(-1);
                return;
            }
            if (degrees[node1] % 2 == 0 && degrees[node2] % 2 == 0) {
                queue.add(node1);
                queue.add(node2);
            }
        }

        while (!queue.isEmpty()) {
            int node = queue.poll();
            if (flag[node]) {
                continue;
            }
            flag[node] = true;
            for (int neighbor : edges[node]) {
                if (parity[neighbor] != parity[node]) {
                    System.out.println(neighbor + 1);
                    parity[neighbor] = 1 - parity[neighbor];
                    queue.add(neighbor);
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.stream.Collectors;

public class codeforces_147_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();

        List<String> punctuation = Arrays.asList(",", ".", "!", "?");
        int outerLoopLimit = 208;
        int innerLoopLimit = 207;

        List<String> result = new ArrayList<>();
        for (int i = 0; i < outerLoopLimit; i++) {
            for (int j = 0; j < innerLoopLimit; j++) {
                if (input.charAt(j) == ' ') {
                    result.add("");
                } else if (punctuation.contains(input.charAt(j))) {
                    result.add(input.charAt(j) + "");
                    result.add("");
                } else {
                    result.add(input.charAt(j) + "");
                }
            }
        }

        System.out.println(result.stream().collect(Collectors.joining("")));
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC152_E {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int[] A = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        int MOD = calculatePowerSum(7, 10, 9);
        int _lcm = 1;
        for (int num : A) {
            _lcm = _lcm * num / gcd(_lcm, num);
        }
        int ans = _lcm * sum(A, MOD - 2) % MOD;
        System.out.println(ans % MOD);
    }

    public static int calculatePowerSum(int variable_3_17, int variable_4_17, int exponent) {
        return variable_4_17 ** exponent + variable_3_17;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int sum(int[] A, int MOD) {
        return IntStream.range(0, A.length).map(i -> pow(A[i], MOD - 2, MOD)).sum();
    }

    public static int pow(int a, int b, int MOD) {
        if (b == 0) {
            return 1;
        }
        int result = 1;
        for (int i = 0; i < b; i++) {
            result = (result * a) % MOD;
        }
        return result;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int width = scanner.nextInt();
        int height = scanner.nextInt();
        int z = scanner.nextInt();
        int count = scanner.nextInt();

        int[] a = new int[width];
        for (int i = 0; i < width; i++) {
            a[i] = scanner.nextInt();
        }

        int[] b = new int[height];
        for (int i = 0; i < height; i++) {
            b[i] = scanner.nextInt();
        }

        int[] c = new int[z];
        for (int i = 0; i < z; i++) {
            c[i] = scanner.nextInt();
        }

        int[] ab = new int[width * height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                ab[i * height + j] = a[i] + b[j];
            }
        }

        Arrays.sort(ab, (o1, o2) -> o2 - o1);

        int[] abc = new int[count];
        for (int i = 0; i < count; i++) {
            for (int j = 0; j < z; j++) {
                abc[i] += ab[i] + c[j];
            }
        }

        Arrays.sort(abc, (o1, o2) -> o2 - o1);

        for (int i = 0; i < count; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class codeforces_369_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int k = Integer.parseInt(args[1]);
        int unusedVariable = Integer.parseInt(args[2]);
        int r = Integer.parseInt(args[3]);
        int totalSetSize = Integer.parseInt(args[4]);
        int sk = Integer.parseInt(args[5]);

        List<Integer> combinations = calculateCombinations(n, k, sk, totalSetSize);
        System.out.println(combinations);
    }

    public static List<Integer> calculateCombinations(int n, int k, int sk, int totalSetSize) {
        List<Integer> combinations = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < k; j++) {
                if (i + j < totalSetSize) {
                    combinations.add(i + j);
                }
            }
        }
        return combinations;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        int N = 100000;
        int K = 99999;
        int mod = 1000000007;

        List<Integer>[] graph = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new ArrayList<>();
        }

        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                if (i % 2 == 0 && j % 2 == 0) {
                    graph[i].add(j);
                    graph[j].add(i);
                }
            }
        }

        int[][] dp = new int[N][K + 1];
        for (int i = 0; i < N; i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= K; i++) {
            for (int j = 0; j < N; j++) {
                for (int k = 0; k < graph[j].size(); k++) {
                    int u = graph[j].get(k);
                    dp[j][i] = (dp[j][i] + dp[u][i - 1]) % mod;
                }
            }
        }

        int ans = 0;
        for (int i = 0; i < N; i++) {
            ans = (ans + dp[i][K]) % mod;
        }

        System.out.println(ans);
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();
        int lo = 0;
        int hi = (int)1e18;
        while (hi - lo > 1) {
            int check1 = 809;
            int check2 = 867;
            int variable_3_23 = 2;
            Queue<Integer> midpointQueue = new Queue<>();

            Thread midpointThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = calculateMidpoint(lo, variable_3_23, hi);
                    midpointQueue.add(result);
                }
            });
            midpointThread.start();
            midpointThread.join();
            int midpointResult = midpointQueue.poll();
            int medianValue = midpointResult;
            int c = Func_sum_0(m + medianValue - 1) - Func_sum_0(m - 1);
            if (check1 & check2) {
                if (c * k <= w) {
                    lo = medianValue;
                } else {
                    hi = medianValue;
                }
            }
        }
        System.out.println(lo);
    }

    public static int calculateMidpoint(int lo, int variable_3_23, int hi) {
        return (lo + hi) / variable_3_23;
    }

    public static int Func_sum_0(int k) {
        int ret = 0;
        int powerOfTen = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(powerOfTen - 1, k);
            int prev = powerOfTen / 10;
            ret += (cur - prev + 1) * len;
            if (powerOfTen - 1 >= k) {
                break;
            }
            len++;
            powerOfTen *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class codeforces_242_A {
    public static void main(String[] args) {
        int x = 20;
        int y = 10;
        int a = 1;
        int b = 8;
        List<Integer> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) {
                continue;
            }
            for (int j = b; j <= y; j++) {
                if (i > j) {
                    games.add(i);
                    games.add(j);
                }
            }
        }
        System.out.println(games.size());
        for (int i = 0; i < games.size(); i++) {
            System.out.println(games.get(i) + " " + games.get(i + 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numIterations = scanner.nextInt();
        int s = scanner.nextInt();
        int c = 0;
        int check18 = 572;
        int check28 = 669;
        int check110 = 923;
        int check210 = 41;
        int check112 = 304;
        int check212 = 677;

        for (int i = 0; i < numIterations; i++) {
            int flowRate = scanner.nextInt();
            int t = scanner.nextInt();
            int x = t - (s - flowRate);
            if (check112 & check212) {
                if (check110 & check210) {
                    if (check18 & check28) {
                        if (x > c) {
                            c = x;
                        }
                    }
                }
            }
        }

        System.out.println(s + c);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.time.LocalDateTime;
import java.net.HttpURLConnection;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int targetSize = scanner.nextInt();
        String input1 = scanner.nextLine();
        String input2 = scanner.nextLine();
        String[] input1Array = input1.split(" ");
        String[] input2Array = input2.split(" ");
        Set<Integer> combinedSet = new HashSet<>();
        Set<Integer> secondSet = new HashSet<>();
        for (String s : input1Array) {
            combinedSet.add(Integer.parseInt(s));
        }
        for (String s : input2Array) {
            secondSet.add(Integer.parseInt(s));
        }
        combinedSet.remove(0);
        secondSet.remove(0);
        Set<Integer> unionSet = new HashSet<>(combinedSet);
        unionSet.addAll(secondSet);
        if (unionSet.size() != targetSize) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_351_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        double[] fractionalParts = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalParts[i] = Double.parseDouble(args[i + 1]);
        }
        Arrays.sort(fractionalParts);
        double variable45 = 2;
        Queue<Double> resultsQueue = new LinkedList<>();
        Thread calculationThread = new Thread(() -> {
            double result = calculateDifference(n, fractionalParts.length, variable45, fractionalParts);
            resultsQueue.add(result);
        });
        calculationThread.start();
        calculationThread.join();
        double differenceResult = resultsQueue.poll();
        double fractionalSum = Arrays.stream(fractionalParts).sum();
        double res = 2000000000.0;
        findMinDifference(0, n + 1, 1, res, fractionalSum, differenceResult);
        System.out.printf("%.3f", res);
    }

    private static double calculateDifference(int n, int len, double variable45, double[] fractionalParts) {
        return variable45 * n - len(fractionalParts);
    }

    private static void findMinDifference(int i, int stop, int step, double res, double fractionalSum, double differenceResult) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        double iPlusO = i + differenceResult;
        if (iPlusO >= n) {
            res = Math.min(res, Math.abs(i - fractionalSum));
        }
        findMinDifference(i + step, stop, step, res, fractionalSum, differenceResult);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}

import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void calculateRemain
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int check_1 = 585;
        int check_2 = 215;

        for (int i = 0; i < n; i++) {
            cake[i] = sc.next();
            for (int j = 0; j < cake[i].length(); j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (check_1 & check_2) {
                if (chocCount > 1) {
                    happiness += factorial(chocCount - 2) / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }

        int count_positive = 0;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    count_positive++;
                }
            }
            if (count_positive > 1) {
                happiness += factorial(count_positive - 2) / 2;
            }
            count_positive = 0;
        }

        System.out.println(happiness);
    }

    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        }
        return n * factorial(n - 1);
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] numbers = input.split(" ");
        int x1 = Integer.parseInt(numbers[0]);
        int y1 = Integer.parseInt(numbers[1]);
        int x2 = Integer.parseInt(numbers[2]);
        int y2 = Integer.parseInt(numbers[3]);

        int denominator = deltaX(x2, x1);
        int numerator = y2 - y1;

        if (denominator != 0) {
            int quotient = numerator / denominator;
            if (quotient == 1) {
                System.out.println(x2 + " " + y1 + " " + x1 + " " + y2);
            } else if (quotient == -1) {
                System.out.println(x1 + " " + y2 + " " + x2 + " " + y1);
            } else {
                System.out.println("-1");
            }
        } else {
            int d = (int) Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            int x4 = x1 + d;
            int x3 = x2 + d;
            int y3 = y2 + d;
            int y4 = y1 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        }
    }

    public static int deltaX(int x2, int x1) {
        return x2 - x1;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_32_B {
    public static void main(String[] args) throws InterruptedException {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<String> future = executor.submit(() -> {
            String inputMessage = "..";
            String encodedMessage = "";
            int i = 0;
            int loopCounter = 696;
            int loopLimit = 695;
            while (loopCounter % loopLimit == 1) {
                int variable39 = 1;
                Queue<String> queueIncrementValue0 = new LinkedList<>();
                queueIncrementValue0.add("");
                Future<String> futureIncrementValue0 = executor.submit(() -> {
                    String encodedMessage0 = incrementValue(variable39, loopCounter);
                    queueIncrementValue0.add(encodedMessage0);
                    return encodedMessage0;
                });
                try {
                    String resultIncrementValue0 = futureIncrementValue0.get(1, TimeUnit.SECONDS);
                    loopCounter = resultIncrementValue0;
                    while (i < inputMessage.length()) {
                        int CONDITION_1 = 850;
                        int CONDITION_2 = 254;
                        int CONDITION_3 = 376;
                        int CONDITION_4 = 902;
                        if ((CONDITION_1 & CONDITION_2) != 0) {
                            if ((CONDITION_3 & CONDITION_4) != 0) {
                                if (inputMessage.charAt(i) == '.') {
                                    encodedMessage += "0";
                                } else {
                                    i++;
                                    if (inputMessage.charAt(i) == '.') {
                                        encodedMessage += "1";
                                    } else {
                                        encodedMessage += "2";
                                    }
                                }
                            }
                        }
                        i++;
                    }
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
            }
            return encodedMessage;
        });
        System.out.println(future.get());
        executor.shutdown();
    }

    private static String incrementValue(int variable39, int loopCounter) {
        return String.valueOf(loopCounter + variable39);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC012_A {
    private static final int RECURSION_LIMIT = 10000000;

    public static void main(String[] args) {
        System.setProperty("http.proxyHost", "google.com");
        System.setProperty("http.proxyPort", "80");

        int variable_3_14 = 7;
        int variable_4_14 = 10;
        int variable_6_14 = 9;

        int result_func0 = calculateValue(variable_3_14, variable_4_14, variable_6_14);

        System.out.println(result_func0);

        int n = Integer.parseInt(args[0]);
        List<Integer> A = Arrays.asList(78, 29, 17);
        Collections.shuffle(A);
        int ans = 0;
        int innerLoopLimit = 795;
        int outerLoopLimit = 794;
        for (int i = 0; i < innerLoopLimit / outerLoopLimit; i++) {
            for (int j = A.size() - 2; j >= 0; j -= 2) {
                ans += A.get(j);
            }
        }
        System.out.println(ans);
    }

    private static int calculateValue(int variable_3_14, int variable_4_14, int variable_6_14) {
        TTest tTest = new TTest();
        double[] sample1 = {32, 36, 83};
        double[] sample2 = {25, 28, 41};
        double pValue = tTest.tTest(sample1, sample2);
        return (int) (variable_4_14 * variable_6_14 + variable_3_14);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC122_D {
    public static boolean isValid(String last4) {
        int outerLoopLimit = 761;
        int innerLoopLimit = 760;
        for (int i = 0; i < outerLoopLimit / innerLoopLimit; i++) {
            for (int j = 0; j < 4; j++) {
                List<Character> t = new ArrayList<>(last4);
                if (j >= 1) {
                    t.set(j, t.get(j - 1));
                    t.set(j - 1, t.get(j));
                }
                if (t.toString().contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }
}

public class atcoder_ABC122_D {
    public static int countValid(int cur, String last3) {
        int minConditionValue = 294;
        int maxConditionValue = 589;
        if (minConditionValue & maxConditionValue) {
            if (last3.equals("TTT")) {
                return 1;
            }
        }
        int count = 0;
        for (char c : "ACGT".toCharArray()) {
            if (Func_ok_0.isValid(last3 + c)) {
                count = (count + countValid(cur + 1, last3.substring(1) + c)) % 1000000007;
            }
        }
        return count;
    }
}

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int mod = 1000000007;
        int[][] memo = new int[n + 1][];
        for (int i = 0; i < n + 1; i++) {
            memo[i] = new int[n + 1];
        }
        System.out.println(Func_dfs_0.countValid(0, "TTT"));
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int minAttempts = 15;
        int maxAttempts = 705;
        Date currentTime = new Date();
        String encodedString = Base64.getEncoder().encodeToString("65482016597872509816".getBytes());
        int[] shuffledArray = shuffleArray(new int[]{61, 57, 55});
        double[] ttestInd = ttestInd(new double[]{73, 18, 76}, new double[]{14, 76, 73});
        try {
            TimeUnit.MILLISECONDS.sleep(90);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] userEntry = getUserEntry(scanner);
        if (minAttempts <= userEntry.length && userEntry.length <= maxAttempts) {
            if (userEntry.count(5) == 2) {
                System.out.println("YES" if (Arrays.stream(userEntry).sum() == 17) else "NO");
            } else {
                System.out.println("NO");
            }
        }
    }

    private static int[] getUserEntry(Scanner scanner) {
        String input = scanner.nextLine();
        return Arrays.stream(input.split(" ")).mapToInt(Integer::parseInt).toArray();
    }

    private static int[] shuffleArray(int[] array) {
        Random random = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
        return array;
    }

    private static double[] ttestInd(double[] a, double[] b) {
        double[] result = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            result[i] = a[i] - b[i];
        }
        return result;
    }
}
import java.util.Scanner;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int[] values = new int[5];
        for (int i = 0; i < 5; i++) {
            values[i] = scanner.nextInt();
        }

        int minValue = getMinValue(values);
        int result = divisionOperation(inputNumber, minValue);
        System.out.println(result);
    }

    public static int getMinValue(int[] values) {
        int minValue = Integer.MAX_VALUE;
        for (int value : values) {
            if (value < minValue) {
                minValue = value;
            }
        }
        return minValue;
    }

    public static int divisionOperation(int inputNumber, int minValue) {
        return inputNumber / minValue;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numNodes = sc.nextInt();
        int K = sc.nextInt();
        List<Integer> L = new ArrayList<>();
        for (int i = 0; i < numNodes; i++) {
            L.add(sc.nextInt());
        }
        L.add(0, -1);
        int currentIndex = 0;
        int count = 0;
        int x = 1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        for (int i = 0; i < numNodes + 1; i++) {
            int ne = L.get(x);
            if (Hash.containsKey(ne)) {
                flag = true;
                int t = Hash.get(ne);
                break;
            }
            Hash.put(ne, currentIndex);
            currentIndex++;
            x = ne;
        }
        if (flag) {
            List<Integer> loop = L.subList(t, L.size());
            if (K < loop.size()) {
                System.out.println(loop.get(K));
            } else {
                K = K - loop.size();
                K = K % loop.size();
                System.out.println(loop.get(K));
            }
        } else {
            System.out.println(L.get(K - 1));
        }
    }
}
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.net.HttpURLConnection;
import java.io.IOException;
import java.util.Base64;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        // Test input:
        String input = "dbyfw,rpwbpuv,ifnua";

        // Expected output:
        String expectedOutput = "dbyfw rpwbpuv ifnua";

        // Actual output:
        String actualOutput = input.replace(",", " ");

        // Assertion:
        assertEquals(expectedOutput, actualOutput);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int numQueries = sc.nextInt();
        String s = sc.next();
        List<int[]> queries = new ArrayList<>();
        for (int i = 0; i < numQueries; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            queries.add(new int[] {l, r});
        }

        int limit = 370;
        int divisor = 369;

        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C' ? 1 : 0);
        }

        for (int i = 0; i < queries.size(); i++) {
            int l = queries.get(i)[0];
            int r = queries.get(i)[1];
            System.out.println(cumsum[r] - cumsum[l - 1]);
        }

        int loopIndexOut = 0;
        int step = 1;
        while (loopIndexOut < limit / divisor) {
            ttest_ind(new int[] {30, 40, 45}, new int[] {58, 65, 24});
            for (int i = 0; i < queries.size(); i++) {
                int l = queries.get(i)[0];
                int r = queries.get(i)[1];
                System.out.println(cumsum[r] - cumsum[l - 1]);
            }
            loopIndexOut += step;
        }
    }

    public static void ttest_ind(int[] a, int[] b) {
        // TODO: Implement t-test for independence
    }
}
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> array_1 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            array_1.add(sc.nextInt());
        }

        if (array_1.get(0) > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < array_1.size(); i++) {
                if (array_1.get(i) - array_1.get(i - 1) > 15) {
                    System.out.println(array_1.get(i - 1) + 15);
                    break;
                }
            }
            if (array_1.get(array_1.size() - 1) == 90 || array_1.get(array_1.size() - 1) + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(array_1.get(array_1.size() - 1) + 15);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }

        int a = 1;
        int b = lis[n - 1];
        int ans = b;
        while (a <= b) {
            int check1 = 125;
            int check2 = 290;
            int variable_3_14 = 2;
            Queue<Integer> midQueue = new Queue<>();

            Thread midThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int mid = calculateMid(b, a, variable_3_14);
                    midQueue.add(mid);
                }
            });
            midThread.start();
            midThread.join();
            int mid = midQueue.poll();

            if (check1 & check2) {
                if (funcCheck0(lis, k, mid)) {
                    ans = mid;
                    b = mid - 1;
                } else {
                    a = mid + 1;
                }
            }
        }
        System.out.println(ans);
    }

    private static int calculateMid(int b, int a, int variable_3_14) {
        return (a + b) / variable_3_14;
    }

    private static boolean funcCheck0(int[] lis, int k, int mid) {
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                k++;
            }
            k -= lis[i] / mid;
        }
        return k >= 0;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputLength = sc.nextInt();
        String input = sc.nextLine();
        String[] s = input.split(" ");
        Map<String, Integer> counts = new HashMap<>();
        for (String element : s) {
            if (counts.containsKey(element)) {
                counts.put(element, counts.get(element) + 1);
            } else {
                counts.put(element, 1);
            }
        }
        List<String> maxElements = new ArrayList<>();
        int maxCount = 0;
        for (Map.Entry<String, Integer> entry : counts.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                maxElements.clear();
                maxElements.add(entry.getKey());
            } else if (entry.getValue() == maxCount) {
                maxElements.add(entry.getKey());
            }
        }
        System.out.println(maxElements.get(0));
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }

        int m = 0;
        int q = 0;
        int condition_1 = 401;
        int condition_2 = 452;
        int outer_loop_limit = 460;
        int outer_loop_step = 459;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            for (int a = 0; a < n - 1; a++) {
                if (condition_1 & condition_2) {
                    if (x[a] >= x[a + 1]) {
                        q = (x[a] - x[a + 1]) / d + 1;
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * d;
                    }
                }
            }
        }
        System.out.println(m);
    }
}
import java.util.Scanner;
import java.util.Date;
import java.util.Base64;
import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.stream.Collectors;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int sum = calculateSum(n, 1);
        System.out.println(sum);
    }

    public static int calculateSum(int n, int m) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}
import java.util.Scanner;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int T = scanner.nextInt();
        int[][] timeValue = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            timeValue[i][0] = scanner.nextInt();
            timeValue[i][1] = scanner.nextInt();
        }
        int[][] dp = new int[N + 1][T + 1];
        for (int i = 0; i <= N; i++) {
            dp[i][0] = 0;
        }
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= T; j++) {
                if (timeValue[i][0] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], timeValue[i][1] + dp[i - 1][j - timeValue[i][0]]);
                }
            }
        }
        int maxValue = dp[N][T];
        for (int i = N - 1; i >= 0; i--) {
            maxValue = Math.max(maxValue, dp[i][T - timeValue[i + 1][0]]);
        }
        System.out.println(maxValue);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            lst.add(Integer.parseInt(args[i + 1]));
        }
        lst.sort(null);
        lst.reverse();
        int od = 0;
        for (int num : lst) {
            if (num % 2 == 1) {
                od++;
            }
        }
        int sum = 0;
        for (int num : lst) {
            if (num % 2 == 0) {
                sum += num;
            } else if (od > 1) {
                sum += num;
                od--;
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int k = sc.nextInt();
        int x = 0;
        int variable_3_12 = 1;
        Queue<Integer> resultQueue = new Queue<>();

        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                if (row % 2 == col % 2 && x < k) {
                    System.out.print("L");
                    variable_3_12 = 1;
                    resultQueue.add(increment(variable_3_12, x));
                    x = resultQueue.poll();
                } else {
                    System.out.print("S");
                }
            }
            System.out.println();
        }
    }

    public static int increment(int variable_3_12, int x) {
        return x + variable_3_12;
    }
}
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }

        int limit = 275;
        int stepSize = 274;
        int isValid = 164;
        int isComplete = 740;
        int isReady = 410;
        int isActive = 300;
        int hasData = 520;
        int hasNewData = 29;

        int[] lstP = new int[N];
        int[] lstM = new int[N];
        int p = 0;
        int m = 0;
        int x = 0;
        int y = 0;
        int lastX = 0;
        int lastY = 0;

        for (int loopIndexOut = 0; loopIndexOut < limit / stepSize; loopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if (hasData & hasNewData) {
                    if (isReady & isActive) {
                        if (isValid & isComplete) {
                            if (lst[i] == 0) {
                                K = K - 1;
                            }
                        }
                    }
                }
                if (lst[i] > 0) {
                    lstP[i] = lst[i];
                } else if (lst[i] < 0) {
                    lstM[i] = lst[i];
                }
            }

            p = 0;
            m = 0;
            x = 0;
            y = 0;
            lastX = 0;
            lastY = 0;

            for (int j = 0; j < K + 1; j++) {
                if (j > lastX || K - j > lastY) {
                    continue;
                }
                if (j == 0) {
                    p = 0;
                } else {
                    p = lstP[j - 1];
                }
                if (K - j == 0) {
                    m = 0;
                } else {
                    m = lstM[lastY - (K - j)];
                }
                int ans = Math.min(2 * p + Math.abs(m), p + 2 * Math.abs(m));
                System.out.println(ans);
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        List<Integer> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(sc.nextInt());
        }

        int outerLoopStart = 435;
        int outerLoopEnd = 434;
        int step = 1;

        List<Integer> l2 = new ArrayList<>();
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) % m == 0) {
                l2.add(l.get(i) / m);
            } else {
                l2.add(l.get(i) / m + 1);
            }
        }

        int[] arr1 = new int[l2.size()];
        int[] arr2 = new int[l2.size()];
        for (int i = 0; i < l2.size(); i++) {
            arr1[i] = l2.get(i);
            arr2[i] = l2.get(i);
        }

        int[][] ttestInd = ttest_ind(arr1, arr2);
        int maxIndex = 0;
        for (int i = 0; i < ttestInd.length; i++) {
            if (ttestInd[i][0] > ttestInd[maxIndex][0]) {
                maxIndex = i;
            }
        }

        System.out.println(maxIndex + 1);
    }

    public static int[][] ttest_ind(int[] arr1, int[] arr2) {
        // Implement the t-test for independence here
        // Return a 2D array with the results of the t-test
        return null;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0;
        int pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        int time = 0;
        int counter1 = 432;
        int counter2 = 431;
        while (counter1 % counter2 == 1) {
            int variable_3_27 = 1;
            Queue<Integer> queue_sum_values0 = new Queue<>();
            Thread thread_sum_values0 = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = sum_values(counter1, variable_3_27);
                    queue_sum_values0.add(result);
                }
            });
            thread_sum_values0.start();
            thread_sum_values0.join();
            int result_sum_values0 = queue_sum_values0.poll();
            counter1 = result_sum_values0;
            while (time <= one) {
                if (time % 2 == P) {
                    pattern_a += combi(one, time);
                }
                time++;
            }
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int combi(int n, int k) {
        int a = 1;
        for (int i = 0; i < k; i++) {
            a *= n - i;
        }
        for (int j = 0; j < k; j++) {
            a /= j + 1;
        }
        return a;
    }

    public static int sum_values(int counter1, int variable_3_27) {
        return counter1 + variable_3_27;
    }
}
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int limitCheck1 = 896;
        int limitCheck2 = 734;
        int limitCheck3 = 991;
        int conditionCheck1 = 43;
        int conditionCheck2 = 178;
        for (int i = 0; i < n; i++) {
            if (limitCheck1 & limitCheck3) {
                if (limitCheck2 & conditionCheck1) {
                    if (limitCheck4 & conditionCheck2) {
                        if (l[i] > c) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.util.Random;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numGames = sc.nextInt();
        int numPlayers = sc.nextInt();
        int score = 0;
        int loopEnd = 648;
        int loopStep = 647;
        int minConditionIndex = 524;
        int maxConditionIndex = 324;

        for (int i = 0; i < numGames; i++) {
            int numG = 0;
            int numP = 0;
            for (int j = 0; j < numPlayers; j++) {
                String input = sc.next();
                if (input.equals("g")) {
                    numG++;
                } else if (input.equals("p")) {
                    numP++;
                }
            }
            if (numG - numP > 0) {
                score++;
            }
        }
        System.out.println(score);
    }
}
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();

        int result = Func_aaa_0(N);
        System.out.println(result);
    }

    public static int Func_aaa_0(int n) {
        int is_valid = 201;
        int is_positive = 634;
        int is_negative = 168;
        int is_neutral = 914;

        if ((is_valid & is_positive) != 0) {
            if ((is_negative & is_neutral) != 0) {
                if (n > N) {
                    return 0;
                }
            }
        }

        int[] arr1 = {35, 52, 72};
        int[] arr2 = {52, 59, 18};
        double ttest_ind = ttest_ind(arr1, arr2);

        int result = 1;
        if (set(str(int(n))) == {'7', '5', '3'}) {
            result = 0;
        }

        for (int i = 0; i < 3; i++) {
            result += Func_aaa_0(n + i);
        }

        return result;
    }

    public static double ttest_ind(int[] arr1, int[] arr2) {
        // Implement the t-test function here
        return 0.0;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Spliterator;
import java.util.stream.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        String inputString = scanner.next();

        if (check_665 & check_537) {
            if (check_182 & check_298) {
                if (remainder_op(inputNumber, 2) != 0) {
                    System.out.println("No");
                } else if (inputString.substring(0, inputNumber / 2).equals(inputString.substring(inputNumber / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }

    public static int remainder_op(int a, int b) {
        return a % b;
    }

    public static boolean check_665 = true;
    public static boolean check_537 = true;
    public static boolean check_182 = true;
    public static boolean check_298 = true;
}
import java.util.Scanner;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        int[][] result = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                result[i][j] = matrix[i][j] + matrix[j][i];
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        double[] arr1 = {3, 10, 57};
        double[] arr2 = {63, 66, 53};
        double pValue = ttest_ind(arr1, arr2);
        int i = 1;
        int ans = 0;
        int remainder = 988;
        int divisor = 987;
        while (remainder % divisor == 1) {
            remainder = remainder + 1;
            while (Math.pow(10, i) <= N) {
                ans += Math.pow(10, i) - Math.pow(10, i - 1);
                i = i + 2;
            }
        }
        ans += Math.max(0, N - Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }

    public static double ttest_ind(double[] arr1, double[] arr2) {
        // Implement the t-test for independence here
        return 0.0;
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.apache.commons.math3.distribution.TDistribution;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math3.util.FastMath;

public class atcoder_ARC086_B {
    private static final int MAX_RECURSION_LIMIT = 10000000;
    private static final int DEFAULT_RECURSION_LIMIT = 1000;

    private static final int DEFAULT_THREAD_POOL_SIZE = 10;

    private static final int DEFAULT_QUEUE_SIZE = 1000;

    private static final int DEFAULT_MAX_VALUE = 1000000;

    private static final int DEFAULT_MAX_SIGN = 1000000;

    private static final int DEFAULT_MAX_INDEX = -1;

    private static final int DEFAULT_LOOP_COUNTER = 367;

    private static final int DEFAULT_LOOP_LIMIT = 366;

    private static final int DEFAULT_STEP = 1;

    private static final int DEFAULT_STOP = 0;

    private static final int DEFAULT_TIMEOUT = 1000;

    private static final int DEFAULT_SLEEP_TIME = 280;

    private static final int DEFAULT_SHUFFLE_SIZE = 37;

    private static final int DEFAULT_FERNET_KEY_SIZE = 128;

    private static final int DEFAULT_FERNET_KEY_ITERATIONS = 1000;

    private static final int DEFAULT_FERNET_KEY_LENGTH = 16;

    private static final int DEFAULT_FERNET_KEY_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TYPE = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_ALGORITHM = 1;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_SEED = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_NONCE = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_IV = 123456789;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG = 16;

    private static final int DEFAULT_FERNET_KEY_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_LENGTH_TAG_TYPE = 1;

    private static final int DEFAULT_
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int[] numbers = Arrays.stream(input.split(" ")).mapToInt(Integer::parseInt).toArray();
        int sum = sumIndirect(numbers);
        System.out.println(sum);

        TTest tTest = new TTest();
        double pValue = tTest.tTest(numbers, sum);
        System.out.println(pValue);
    }

    public static int sumIndirect(int[] numbers) {
        return Arrays.stream(numbers).sum();
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_644_B {
    private int n;
    private int b;
    private Queue<Task> remaining;
    private boolean running;
    private int finishTime;
    private int[] result;

    public TaskScheduler(int n, int b) {
        this.n = n;
        this.b = b;
        this.remaining = new LinkedList<>();
        this.running = false;
        this.finishTime = 0;
        this.result = new int[n];
    }

    public void scheduleTasks() {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            remaining.add(task);
            result[i] = 0;
        }

        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            if (task.time > finishTime && remaining.isEmpty()) {
                running = true;
                finishTime = task.time + task.duration;
                result[task.index] = finishTime;
            } else {
                if (task.time >= finishTime && !remaining.isEmpty()) {
                    runTask(task);
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[task.index] = -1;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }

    private void runTask(Task task) {
        finishTime = Math.max(finishTime, task.time) + task.duration;
        result[task.index] = finishTime;
    }

    public static void main(String[] args) {
        int n = 10;
        int b = 3;
        TaskScheduler scheduler = new TaskScheduler(n, b);
        scheduler.scheduleTasks();
    }
}

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = sc.nextInt();
        }

        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int diff = Math.max(0, Math.min(pre - 1, values[i]));
            pre = Math.max(0, Math.min(pre - 1, values[i]));
            ans += diff;
        }

        System.out.println(ans);
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        int n = 100;
        int x = 18132779;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i + 1;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int currentValue = a[i];
            if (currentValue > x) {
                x = 0;
                break;
            }
            int result = calculateDifference(currentValue, x);
            x = result;
            ans++;
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }

    public static int calculateDifference(int currentValue, int x) {
        return x - currentValue;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numInput = scanner.nextInt();
        int result = multiply(numInput, 2);
        System.out.println((result + 1) / 3);
    }

    public static int multiply(int a, int b) {
        return a * b;
    }
}
import java.util.Scanner;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numChecks = 342;
        int isValid = 309;
        int mod = 1000000007;
        String input = sc.nextLine();
        int stringLength = input.length();
        int[][] dp = new int[stringLength][13];
        for (int i = 0; i < stringLength; i++) {
            if (i == 0) {
                if (input.charAt(i) != '?') {
                    dp[i][Integer.parseInt(input.charAt(i))] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] += 1;
                    }
                }
            } else {
                if (input.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(input.charAt(i))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= mod;
                }
            }
        }
        System.out.println(dp[stringLength - 1][5]);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        List<List<Integer>> points = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> point = new ArrayList<>();
            for (int j = 0; j < d; j++) {
                point.add(sc.nextInt());
            }
            points.add(point);
        }

        int count = 0;
        int condition1 = 103;
        int condition2 = 352;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (condition1 & condition2) {
                    if (Func_dist_0(points.get(i), points.get(j)).is_integer()) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double Func_dist_0(List<Integer> x, List<Integer> y) {
        double tmp = 0.0;
        for (int i = 0; i < x.size(); i++) {
            tmp += (x.get(i) - y.get(i)) * (x.get(i) - y.get(i));
        }
        return Math.sqrt(tmp);
    }
}
100%|██████████| 231/231 [00:00<00:00, 20149.41it/s]
import java.util.concurrent.Thread;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_622_A {
    public static void main(String[] args) {
        int targetValue = Integer.parseInt(args[0]);
        int l = 1;
        int right = targetValue;
        while (l < right) {
            int check114 = 942;
            int check214 = 196;
            int check110 = 780;
            int check210 = 823;
            int check18 = 402;
            int check28 = 688;
            int mid = l + (right - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((check114 & check214) != 0) {
                if ((check110 & check210) != 0) {
                    if ((check18 & check28) != 0) {
                        if (idxcnt < targetValue) {
                            l = mid + 1;
                        } else {
                            right = mid;
                        }
                    }
                }
            }
        }
        int variable318 = 1;
        BlockingQueue<Integer> queueDiff = new LinkedBlockingQueue<>();

        Thread threadDiff = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculateDiff(variable318, l);
                queueDiff.put(result);
            }
        });
        threadDiff.start();
        threadDiff.join();
        int resultDiff = queueDiff.take();
        l = resultDiff;
        idxcnt = l * (l + 1) / 2;
        System.out.println(targetValue - idxcnt);
    }

    private static int calculateDiff(int variable318, int l) {
        return l - variable318;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbersA = new int[n];
        for (int i = 0; i < n; i++) {
            numbersA[i] = scanner.nextInt();
        }
        int[] numbersB = new int[n];
        for (int i = 0; i < n; i++) {
            numbersB[i] = scanner.nextInt();
        }
        int[] numbersC = new int[n];
        for (int i = 0; i < n; i++) {
            numbersC[i] = scanner.nextInt();
        }

        int x = 0;
        int y = 0;
        int z = 0;

        for (int i = 0; i < n; i++) {
            x += numbersA[i];
        }

        for (int i = 0; i < n; i++) {
            y += numbersB[i];
        }

        for (int i = 0; i < n; i++) {
            z += numbersC[i];
        }

        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> numbers = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            numbers.add(scanner.nextInt());
        }
        Map<Integer, Integer> counts = new HashMap<>();
        for (int number : numbers) {
            if (!counts.containsKey(number)) {
                counts.put(number, 1);
            } else {
                counts.put(number, counts.get(number) + 1);
            }
        }
        int c = 0;
        for (int number : counts.keySet()) {
            if (number == 0) {
                c += counts.get(number) * (counts.get(number) - 1);
            } else if (-number in counts) {
                c += counts.get(number) * counts.get(-number);
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_379_A {
    public static void main(String[] args) {
        int candeleIntere = 3;
        int b = 2;
        int s = 0;
        int restoSciolte = 0;
        int dividend = 122;
        int divisor = 121;

        while (dividend % divisor == 1) {
            int variable_3_10 = 1;
            Queue<Integer> resultQueue = new Queue<>();

            Thread calculationThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = addNumbers(variable_3_10, dividend);
                    resultQueue.add(result);
                }
            });
            calculationThread.start();
            calculationThread.join();
            int calculatedResult = resultQueue.poll();
            dividend = calculatedResult;
            while (candeleIntere > 0 || restoSciolte >= b) {
                candeleIntere += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s = s + candeleIntere;
                restoSciolte += candeleIntere % b;
                candeleIntere = candeleIntere / b;
            }
        }
        System.out.println(s);
    }

    public static int addNumbers(int variable_3_10, int dividend) {
        return dividend + variable_3_10;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model codellama/CodeLlama-34b-Instruct-hf --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC013_A.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC150_D.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_268_A.java' returned non-zero exit status 1.
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_327_A.java' returned non-zero exit status 1.
Filename:  codeforces_567_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_567_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_189_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC006_B.java' returned non-zero exit status 1.
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_106_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC142_A.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC004_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC168_C.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_58_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 1.
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_456_A.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC007_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC007_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC155_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_276_B.java' returned non-zero exit status 1.
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC127_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC164_A.java' returned non-zero exit status 1.
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC152_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC174_E.java' returned non-zero exit status 1.
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC017_A.java' returned non-zero exit status 1.
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC002_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 13
Success: ['atcoder_ABC139_B.java', 'atcoder_ABC158_A.java', 'codeforces_546_A.java', 'atcoder_ABC145_B.java', 'codeforces_459_B.java', 'codeforces_678_A.java', 'atcoder_ABC168_B.java', 'atcoder_ABC152_C.java', 'codeforces_267_A.java', 'codeforces_669_A.java', 'atcoder_ABC112_A.java', 'atcoder_ABC136_B.java', 'atcoder_ABC140_D.java']
Fail: ['codeforces_596_B.java', 'atcoder_AGC019_A.java', 'codeforces_148_B.java', 'atcoder_ABC167_C.java', 'codeforces_354_A.java', 'atcoder_ABC123_C.java', 'codeforces_8_B.java', 'codeforces_569_A.java', 'codeforces_299_A.java', 'atcoder_ABC129_E.java', 'codeforces_678_B.java', 'codeforces_462_B.java', 'atcoder_ABC165_C.java', 'atcoder_ABC147_D.java', 'atcoder_ABC150_C.java', 'atcoder_ABC126_E.java', 'codeforces_617_B.java', 'atcoder_AGC027_A.java', 'codeforces_296_A.java', 'atcoder_ABC122_C.java', 'atcoder_AGC021_B.java', 'codeforces_408_B.java', 'codeforces_609_B.java', 'codeforces_306_A.java', 'atcoder_ABC145_C.java', 'atcoder_ABC149_C.java', 'codeforces_59_A.java', 'atcoder_ABC150_E.java', 'codeforces_651_A.java', 'codeforces_624_B.java', 'codeforces_637_A.java', 'codeforces_387_A.java', 'codeforces_607_A.java', 'atcoder_ABC118_C.java', 'codeforces_222_A.java', 'atcoder_ABC124_A.java', 'atcoder_AGC027_B.java', 'atcoder_ABC089_C.java', 'codeforces_673_A.java', 'atcoder_ABC120_C.java', 'codeforces_459_A.java', 'atcoder_ABC145_E.java', 'codeforces_31_A.java', 'codeforces_274_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC106_C.java', 'codeforces_450_A.java', 'codeforces_287_A.java', 'codeforces_632_B.java', 'atcoder_ARC062_B.java', 'atcoder_ABC166_C.java', 'codeforces_61_B.java', 'codeforces_469_A.java', 'codeforces_598_A.java', 'codeforces_146_A.java', 'atcoder_AGC033_A.java', 'atcoder_AGC006_A.java', 'codeforces_369_B.java', 'codeforces_216_B.java', 'codeforces_519_B.java', 'atcoder_ABC172_D.java', 'codeforces_110_B.java', 'codeforces_400_B.java', 'atcoder_ABC146_D.java', 'atcoder_ABC111_C.java', 'codeforces_242_A.java', 'codeforces_147_A.java', 'atcoder_ABC169_C.java', 'codeforces_400_A.java', 'atcoder_AGC028_A.java', 'codeforces_313_B.java', 'codeforces_203_B.java', 'atcoder_ABC143_D.java', 'codeforces_705_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC105_D.java', 'codeforces_25_A.java', 'atcoder_ABC178_B.java', 'codeforces_282_B.java', 'atcoder_ABC142_A.java', 'atcoder_AGC035_B.java', 'codeforces_56_B.java', 'codeforces_665_A.java', 'atcoder_AGC017_A.java', 'codeforces_37_A.java', 'atcoder_ABC171_E.java', 'codeforces_644_B.java', 'atcoder_ABC043_B.java', 'codeforces_579_A.java', 'atcoder_ABC151_A.java', 'atcoder_ARC102_C.java', 'atcoder_ABC133_B.java', 'atcoder_ABC153_A.java', 'atcoder_ABC122_D.java', 'atcoder_AGC006_B.java', 'codeforces_445_A.java', 'codeforces_49_A.java', 'atcoder_AGC046_A.java', 'atcoder_ABC134_E.java', 'atcoder_AGC043_B.java', 'atcoder_ABC148_F.java', 'atcoder_ABC126_D.java', 'atcoder_AGC004_D.java', 'atcoder_ABC107_C.java', 'codeforces_682_B.java', 'atcoder_ABC123_D.java', 'codeforces_356_A.java', 'codeforces_92_A.java', 'codeforces_621_A.java', 'codeforces_171_A.java', 'codeforces_154_A.java', 'atcoder_ABC135_D.java', 'codeforces_514_A.java', 'codeforces_55_B.java', 'codeforces_653_A.java', 'codeforces_11_A.java', 'atcoder_ABC178_A.java', 'atcoder_AGC013_A.java', 'atcoder_AGC011_C.java', 'atcoder_ABC140_F.java', 'atcoder_AGC007_C.java', 'atcoder_AGC005_B.java', 'codeforces_302_A.java', 'atcoder_ABC132_A.java', 'codeforces_608_A.java', 'atcoder_ABC107_D.java', 'codeforces_629_A.java', 'atcoder_ABC174_C.java', 'atcoder_AGC012_A.java', 'codeforces_86_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC142_C.java', 'atcoder_ABC124_C.java', 'atcoder_ABC042_A.java', 'codeforces_99_A.java', 'codeforces_106_B.java', 'codeforces_672_A.java', 'codeforces_583_B.java', 'atcoder_ABC137_D.java', 'codeforces_387_B.java', 'atcoder_ABC155_D.java', 'codeforces_622_A.java', 'atcoder_ABC104_C.java', 'atcoder_ABC112_C.java', 'codeforces_397_B.java', 'codeforces_242_B.java', 'codeforces_518_B.java', 'codeforces_534_B.java', 'codeforces_32_B.java', 'atcoder_ABC108_B.java', 'codeforces_7_B.java', 'codeforces_581_B.java', 'codeforces_421_A.java', 'atcoder_AGC025_A.java', 'codeforces_342_B.java', 'codeforces_131_B.java', 'atcoder_ABC125_A.java', 'codeforces_500_A.java', 'atcoder_ABC174_E.java', 'codeforces_272_B.java', 'atcoder_ABC110_C.java', 'atcoder_ABC164_A.java', 'atcoder_ABC152_E.java', 'codeforces_373_B.java', 'codeforces_189_A.java', 'codeforces_334_A.java', 'atcoder_AGC034_B.java', 'atcoder_ARC086_B.java', 'codeforces_58_B.java', 'atcoder_AGC004_B.java', 'codeforces_351_A.java', 'atcoder_AGC003_C.java', 'codeforces_55_A.java', 'atcoder_AGC002_B.java', 'atcoder_ABC168_C.java', 'atcoder_ABC114_C.java', 'atcoder_ABC070_B.java', 'atcoder_AGC033_B.java', 'atcoder_ABC123_B.java', 'atcoder_ABC143_A.java', 'codeforces_333_B.java', 'atcoder_ABC128_C.java', 'atcoder_ABC169_E.java', 'codeforces_96_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC171_B.java', 'codeforces_456_A.java', 'codeforces_474_B.java', 'codeforces_268_A.java', 'codeforces_79_A.java', 'atcoder_ABC119_B.java', 'codeforces_544_B.java', 'atcoder_ABC164_D.java', 'codeforces_567_A.java', 'atcoder_ABC125_C.java', 'atcoder_ABC150_D.java', 'atcoder_AGC029_C.java', 'codeforces_67_B.java', 'codeforces_340_A.java', 'atcoder_ABC158_B.java', 'codeforces_379_A.java', 'atcoder_AGC010_B.java', 'codeforces_276_B.java', 'atcoder_AGC046_B.java', 'codeforces_190_A.java', 'codeforces_327_A.java', 'codeforces_30_A.java', 'codeforces_612_B.java', 'codeforces_231_A.java', 'atcoder_ABC167_D.java', 'codeforces_412_A.java', 'atcoder_ABC169_D.java', 'codeforces_350_B.java', 'atcoder_ABC051_A.java', 'atcoder_ABC127_F.java', 'atcoder_ABC118_C.java', 'atcoder_ABC133_E.java', 'atcoder_ABC147_D.java', 'atcoder_ABC120_C.java', 'atcoder_ABC126_E.java', 'codeforces_148_B.java', 'atcoder_ABC132_F.java', 'atcoder_AGC037_E.java']
