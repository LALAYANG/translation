+ model=yangccccc/deepseek-coder-multi
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model yangccccc/deepseek-coder-multi --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 09-01 17:37:50 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 09-01 17:37:53 [utils.py:326] non-default args: {'model': 'yangccccc/deepseek-coder-multi', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 09-01 17:38:02 [__init__.py:711] Resolved architecture: LlamaForCausalLM
`torch_dtype` is deprecated! Use `dtype` instead!
INFO 09-01 17:38:02 [__init__.py:1750] Using max model len 4096
INFO 09-01 17:38:03 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=8192.
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:04 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:04 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='yangccccc/deepseek-coder-multi', speculative_config=None, tokenizer='yangccccc/deepseek-coder-multi', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=yangccccc/deepseek-coder-multi, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=994291)[0;0m WARNING 09-01 17:38:04 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 240 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:04 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_7914556a'), local_subscribe_addr='ipc:///tmp/2f02ff2c-0a6b-48fb-8aca-aa023683d2d7', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:07 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_e9e573cd'), local_subscribe_addr='ipc:///tmp/a58770c0-14ae-4d10-b74e-2896137e2f05', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:07 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_74fc8af5'), local_subscribe_addr='ipc:///tmp/9a7b3d76-10dc-46e7-975e-d10f4728ba22', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:07 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:07 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:07 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:07 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:08 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:08 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:08 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_5433a463'), local_subscribe_addr='ipc:///tmp/bf4d03c8-b41d-4059-abf9-b12a28c0583e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:08 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:08 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m WARNING 09-01 17:38:08 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m WARNING 09-01 17:38:08 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:08 [gpu_model_runner.py:1953] Starting to load model yangccccc/deepseek-coder-multi...
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:08 [gpu_model_runner.py:1953] Starting to load model yangccccc/deepseek-coder-multi...
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:08 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:08 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:08 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:08 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:09 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:09 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:00<00:01,  1.18it/s]
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:01<00:00,  1.27it/s]
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:02<00:00,  1.23it/s]
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:02<00:00,  1.23it/s]
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m 
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:12 [default_loader.py:262] Loading weights took 2.56 seconds
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:12 [default_loader.py:262] Loading weights took 2.59 seconds
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:12 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.596440 seconds
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:13 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.924705 seconds
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:21 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d3b4714cfc/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:21 [backends.py:559] Dynamo bytecode transform time: 8.56 s
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:21 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d3b4714cfc/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:21 [backends.py:559] Dynamo bytecode transform time: 8.55 s
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:29 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.717 s
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:29 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.761 s
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:30 [monitor.py:34] torch.compile takes 8.56 s in total
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:30 [monitor.py:34] torch.compile takes 8.55 s in total
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:31 [gpu_worker.py:276] Available KV cache memory: 63.22 GiB
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:31 [gpu_worker.py:276] Available KV cache memory: 63.22 GiB
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:32 [kv_cache_utils.py:849] GPU KV cache size: 258,960 tokens
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:32 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 63.22x
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:32 [kv_cache_utils.py:849] GPU KV cache size: 258,960 tokens
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:32 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 63.22x
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 21.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 21.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 22.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 22.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 23.32it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 23.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:01, 24.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:01, 24.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 24.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 24.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 24.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 25.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 26.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:00, 26.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:01<00:00, 27.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:01<00:00, 27.63it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 26.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 26.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 26.74it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:02<00:00, 26.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 27.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:02<00:00, 27.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 25.48it/s]
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:35 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:35 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP1 pid=994299)[0;0m INFO 09-01 17:38:35 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 1.82 GiB
[1;36m(EngineCore_0 pid=994291)[0;0m [1;36m(VllmWorker TP0 pid=994297)[0;0m INFO 09-01 17:38:35 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 1.82 GiB
[1;36m(EngineCore_0 pid=994291)[0;0m INFO 09-01 17:38:35 [core.py:214] init engine (profile, create kv cache, warmup model) took 22.20 seconds
INFO 09-01 17:38:36 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 6258.14it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  10%|█         | 26/250 [00:00<00:00, 259.58it/s]Adding requests:  27%|██▋       | 67/250 [00:00<00:00, 343.94it/s]Adding requests:  45%|████▌     | 113/250 [00:00<00:00, 393.28it/s]Adding requests:  62%|██████▏   | 155/250 [00:00<00:00, 398.52it/s]Adding requests:  79%|███████▉  | 198/250 [00:00<00:00, 408.14it/s]Adding requests:  96%|█████████▌| 240/250 [00:00<00:00, 410.00it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 396.57it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:08<34:12,  8.24s/it, est. speed input: 58.97 toks/s, output: 6.80 toks/s]Processed prompts:   1%|          | 2/250 [00:08<14:23,  3.48s/it, est. speed input: 119.33 toks/s, output: 13.23 toks/s]Processed prompts:   2%|▏         | 5/250 [00:08<04:28,  1.10s/it, est. speed input: 275.03 toks/s, output: 31.58 toks/s]Processed prompts:   2%|▏         | 6/250 [00:09<03:46,  1.08it/s, est. speed input: 312.77 toks/s, output: 38.25 toks/s]Processed prompts:   3%|▎         | 7/250 [00:09<03:24,  1.19it/s, est. speed input: 403.11 toks/s, output: 44.94 toks/s]Processed prompts:   4%|▎         | 9/250 [00:10<02:08,  1.88it/s, est. speed input: 492.91 toks/s, output: 61.80 toks/s]Processed prompts:   4%|▍         | 10/250 [00:10<02:02,  1.95it/s, est. speed input: 530.00 toks/s, output: 68.62 toks/s]Processed prompts:   4%|▍         | 11/250 [00:10<01:37,  2.45it/s, est. speed input: 600.25 toks/s, output: 76.96 toks/s]Processed prompts:   5%|▍         | 12/250 [00:10<01:20,  2.94it/s, est. speed input: 711.45 toks/s, output: 84.95 toks/s]Processed prompts:   6%|▌         | 14/250 [00:11<00:55,  4.23it/s, est. speed input: 841.59 toks/s, output: 104.36 toks/s]Processed prompts:   8%|▊         | 19/250 [00:11<00:28,  8.12it/s, est. speed input: 1080.13 toks/s, output: 150.31 toks/s]Processed prompts:   9%|▉         | 22/250 [00:11<00:21, 10.80it/s, est. speed input: 1246.91 toks/s, output: 178.77 toks/s]Processed prompts:  10%|█         | 25/250 [00:11<00:16, 13.62it/s, est. speed input: 1399.86 toks/s, output: 207.92 toks/s]Processed prompts:  11%|█         | 28/250 [00:11<00:13, 16.45it/s, est. speed input: 1607.88 toks/s, output: 236.41 toks/s]Processed prompts:  13%|█▎        | 33/250 [00:11<00:12, 17.68it/s, est. speed input: 1748.44 toks/s, output: 280.40 toks/s]Processed prompts:  15%|█▌        | 38/250 [00:11<00:09, 21.58it/s, est. speed input: 1951.51 toks/s, output: 329.81 toks/s]Processed prompts:  16%|█▋        | 41/250 [00:12<00:09, 21.29it/s, est. speed input: 2070.48 toks/s, output: 358.30 toks/s]Processed prompts:  18%|█▊        | 44/250 [00:12<00:09, 21.09it/s, est. speed input: 2212.49 toks/s, output: 384.66 toks/s]Processed prompts:  19%|█▉        | 47/250 [00:12<00:09, 20.97it/s, est. speed input: 2327.03 toks/s, output: 413.08 toks/s]Processed prompts:  20%|██        | 50/250 [00:12<00:10, 19.11it/s, est. speed input: 2402.58 toks/s, output: 439.98 toks/s]Processed prompts:  23%|██▎       | 57/250 [00:12<00:07, 27.06it/s, est. speed input: 2566.47 toks/s, output: 511.77 toks/s]Processed prompts:  25%|██▌       | 63/250 [00:12<00:05, 31.38it/s, est. speed input: 2881.43 toks/s, output: 573.22 toks/s]Processed prompts:  27%|██▋       | 67/250 [00:13<00:07, 25.92it/s, est. speed input: 3086.37 toks/s, output: 610.39 toks/s]Processed prompts:  28%|██▊       | 70/250 [00:13<00:07, 23.13it/s, est. speed input: 3178.16 toks/s, output: 636.71 toks/s]Processed prompts:  30%|██▉       | 74/250 [00:13<00:07, 24.77it/s, est. speed input: 3273.33 toks/s, output: 678.20 toks/s]Processed prompts:  33%|███▎      | 82/250 [00:13<00:04, 33.90it/s, est. speed input: 3537.36 toks/s, output: 766.02 toks/s]Processed prompts:  34%|███▍      | 86/250 [00:13<00:04, 33.14it/s, est. speed input: 3693.78 toks/s, output: 807.40 toks/s]Processed prompts:  36%|███▌      | 90/250 [00:13<00:05, 30.02it/s, est. speed input: 3767.00 toks/s, output: 844.78 toks/s]Processed prompts:  38%|███▊      | 96/250 [00:13<00:04, 34.57it/s, est. speed input: 4085.67 toks/s, output: 906.59 toks/s]Processed prompts:  40%|████      | 100/250 [00:14<00:04, 34.12it/s, est. speed input: 4307.44 toks/s, output: 945.66 toks/s]Processed prompts:  42%|████▏     | 104/250 [00:14<00:04, 31.06it/s, est. speed input: 4416.00 toks/s, output: 984.39 toks/s]Processed prompts:  43%|████▎     | 108/250 [00:14<00:05, 26.95it/s, est. speed input: 4487.75 toks/s, output: 1021.05 toks/s]Processed prompts:  45%|████▍     | 112/250 [00:14<00:05, 24.74it/s, est. speed input: 4683.97 toks/s, output: 1057.75 toks/s]Processed prompts:  46%|████▌     | 115/250 [00:14<00:05, 24.99it/s, est. speed input: 4765.86 toks/s, output: 1088.33 toks/s]Processed prompts:  47%|████▋     | 118/250 [00:14<00:06, 21.83it/s, est. speed input: 4824.36 toks/s, output: 1113.65 toks/s]Processed prompts:  49%|████▉     | 122/250 [00:15<00:05, 24.88it/s, est. speed input: 4980.38 toks/s, output: 1156.88 toks/s]Processed prompts:  51%|█████     | 127/250 [00:15<00:04, 30.03it/s, est. speed input: 5188.22 toks/s, output: 1213.83 toks/s]Processed prompts:  52%|█████▏    | 131/250 [00:15<00:04, 24.14it/s, est. speed input: 5302.31 toks/s, output: 1248.75 toks/s]Processed prompts:  54%|█████▍    | 135/250 [00:15<00:04, 27.22it/s, est. speed input: 5442.93 toks/s, output: 1293.89 toks/s]Processed prompts:  56%|█████▌    | 139/250 [00:15<00:04, 24.55it/s, est. speed input: 5552.93 toks/s, output: 1332.07 toks/s]Processed prompts:  58%|█████▊    | 144/250 [00:15<00:03, 27.98it/s, est. speed input: 5773.15 toks/s, output: 1390.49 toks/s]Processed prompts:  60%|██████    | 150/250 [00:16<00:03, 33.22it/s, est. speed input: 6060.14 toks/s, output: 1462.71 toks/s]Processed prompts:  62%|██████▏   | 155/250 [00:16<00:02, 33.20it/s, est. speed input: 6277.42 toks/s, output: 1519.80 toks/s]Processed prompts:  64%|██████▎   | 159/250 [00:16<00:03, 28.13it/s, est. speed input: 6339.32 toks/s, output: 1558.62 toks/s]Processed prompts:  65%|██████▌   | 163/250 [00:16<00:03, 26.67it/s, est. speed input: 6447.28 toks/s, output: 1600.02 toks/s]Processed prompts:  66%|██████▋   | 166/250 [00:16<00:03, 22.88it/s, est. speed input: 6509.18 toks/s, output: 1624.99 toks/s]Processed prompts:  69%|██████▉   | 173/250 [00:16<00:02, 30.08it/s, est. speed input: 6834.69 toks/s, output: 1716.71 toks/s]Processed prompts:  71%|███████   | 177/250 [00:17<00:02, 28.63it/s, est. speed input: 6933.55 toks/s, output: 1762.25 toks/s]Processed prompts:  72%|███████▏  | 181/250 [00:17<00:03, 22.46it/s, est. speed input: 7006.61 toks/s, output: 1795.75 toks/s]Processed prompts:  74%|███████▎  | 184/250 [00:17<00:03, 18.20it/s, est. speed input: 7067.86 toks/s, output: 1816.78 toks/s]Processed prompts:  75%|███████▍  | 187/250 [00:17<00:03, 16.93it/s, est. speed input: 7106.67 toks/s, output: 1842.93 toks/s]Processed prompts:  78%|███████▊  | 194/250 [00:17<00:02, 24.18it/s, est. speed input: 7366.61 toks/s, output: 1943.66 toks/s]Processed prompts:  80%|███████▉  | 199/250 [00:18<00:01, 27.44it/s, est. speed input: 7596.37 toks/s, output: 2012.13 toks/s]Processed prompts:  81%|████████  | 203/250 [00:18<00:01, 25.64it/s, est. speed input: 7781.11 toks/s, output: 2060.52 toks/s]Processed prompts:  82%|████████▏ | 206/250 [00:18<00:01, 22.93it/s, est. speed input: 7883.41 toks/s, output: 2092.27 toks/s]Processed prompts:  84%|████████▎ | 209/250 [00:18<00:02, 17.85it/s, est. speed input: 7910.41 toks/s, output: 2113.25 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:18<00:02, 17.43it/s, est. speed input: 7968.08 toks/s, output: 2145.65 toks/s]Processed prompts:  86%|████████▌ | 215/250 [00:19<00:02, 17.27it/s, est. speed input: 8075.37 toks/s, output: 2180.43 toks/s]Processed prompts:  87%|████████▋ | 217/250 [00:19<00:02, 14.17it/s, est. speed input: 8141.94 toks/s, output: 2191.34 toks/s]Processed prompts:  88%|████████▊ | 219/250 [00:19<00:02, 13.22it/s, est. speed input: 8206.29 toks/s, output: 2210.35 toks/s]Processed prompts:  89%|████████▉ | 223/250 [00:19<00:01, 14.43it/s, est. speed input: 8402.68 toks/s, output: 2262.49 toks/s]Processed prompts:  90%|█████████ | 226/250 [00:19<00:01, 15.05it/s, est. speed input: 8436.87 toks/s, output: 2302.94 toks/s]Processed prompts:  91%|█████████ | 228/250 [00:20<00:01, 14.09it/s, est. speed input: 8438.95 toks/s, output: 2323.90 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:20<00:01, 17.54it/s, est. speed input: 8643.12 toks/s, output: 2392.23 toks/s]Processed prompts:  94%|█████████▎| 234/250 [00:20<00:01,  8.50it/s, est. speed input: 8456.76 toks/s, output: 2358.63 toks/s]Processed prompts:  94%|█████████▍| 236/250 [00:21<00:01,  9.25it/s, est. speed input: 8492.38 toks/s, output: 2388.35 toks/s]Processed prompts:  96%|█████████▌| 239/250 [00:21<00:00, 11.14it/s, est. speed input: 8649.23 toks/s, output: 2440.86 toks/s]Processed prompts:  96%|█████████▋| 241/250 [00:21<00:00, 12.12it/s, est. speed input: 8729.65 toks/s, output: 2476.25 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:21<00:00, 12.66it/s, est. speed input: 8773.85 toks/s, output: 2509.61 toks/s]Processed prompts:  98%|█████████▊| 245/250 [00:21<00:00,  8.77it/s, est. speed input: 8726.23 toks/s, output: 2513.64 toks/s]Processed prompts:  99%|█████████▉| 247/250 [00:22<00:00,  8.97it/s, est. speed input: 8753.40 toks/s, output: 2543.40 toks/s]Processed prompts:  99%|█████████▉| 247/250 [00:35<00:00,  8.97it/s, est. speed input: 8753.40 toks/s, output: 2543.40 toks/s]Processed prompts:  99%|█████████▉| 248/250 [00:38<00:05,  2.81s/it, est. speed input: 5065.58 toks/s, output: 1521.17 toks/s]Processed prompts: 100%|█████████▉| 249/250 [00:41<00:02,  2.76s/it, est. speed input: 4786.53 toks/s, output: 1491.53 toks/s]Processed prompts: 100%|██████████| 250/250 [00:43<00:00,  2.58s/it, est. speed input: 4600.62 toks/s, output: 1490.66 toks/s]Processed prompts: 100%|██████████| 250/250 [00:43<00:00,  2.58s/it, est. speed input: 4600.62 toks/s, output: 1490.66 toks/s]Processed prompts: 100%|██████████| 250/250 [00:43<00:00,  5.81it/s, est. speed input: 4600.62 toks/s, output: 1490.66 toks/s]
+ python3 clean_generations_translation.py --model yangccccc/deepseek-coder-multi --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.* ; import java.io.* ; public class atcoder_ABC146_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> G = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { G.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; G.get ( a ).add ( b ) ; G.get ( b ).add ( a ) ; } int [ ] color = new int [ N ] ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 0 ) ; color [ 0 ] = 1 ; while ( ! q.isEmpty ( ) ) { int v = q.poll ( ) ; for ( int u : G.get ( v ) ) { if ( color [ u ] == 0 ) { color [ u ] = color [ v ] == 1 ? 2 : 1 ; q.add ( u ) ; } } } int K = 0 ; for ( int i = 0 ; i < N ; i ++ ) { K = Math.max ( K , color [ i ] ) ; } System.out.println ( K ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { System.out.println ( color [ i ] ) ; } } }
import java.util.* ; public class atcoder_ABC119_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double x = sc.nextDouble ( ) ; String u = sc.next ( ) ; if ( u.equals ( "JPY" ) ) { sum += x ; } else { sum += x * 380000 ; } } System.out.println ( sum ) ; } }
import sys
input = sys.stdin.readline
import numpy as np
MOD = 10 ** 9 + 7
N = int ( input ( ) )
M = 10 ** 6
A = np.array ( input ( ).split ( ) , dtype = np.int64 )
Nsq = 10 ** 3
fact = np.arange ( M , dtype = np.int64 ).reshape ( Nsq , Nsq )
fact [ 0 , 0 ] = 1
for n in range ( 1 , Nsq ) :
    fact [ : , n ] *= fact [ : , n - 1 ] ; fact [ : , n ] %= MOD
for n in range ( 1 , Nsq ) :
    fact [ n ] *= fact [ n - 1 , - 1 ] ; fact [ n ] %= MOD
fact = fact.ravel ( )
j = np.arange ( N )
inv = np.array ( [ pow ( i + 1 , MOD - 2 , MOD ) for i in range ( N ) ] )
inv = np.cumsum ( inv ) % MOD
temp = inv [ j ] + inv [ N - 1 - j ] - 1
ans = ( A * temp % MOD ).sum ( )
ans %= MOD
ans *= fact [ N ]
ans %= MOD
print ( ans )
import java.util.* ; public class codeforces_569_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int ans = 0 ; while ( s < t ) { s *= q ; ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC112_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] [ ] xyh = new int [ N ] [ 3 ] ; for ( int i = 0 ; i < N ; i ++ ) { xyh [ i ] [ 0 ] = sc.nextInt ( ) ; xyh [ i ] [ 1 ] = sc.nextInt ( ) ; xyh [ i ] [ 2 ] = sc.nextInt ( ) ; } int x = 0 , y = 0 , h = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( xyh [ i ] [ 2 ] > 0 ) { x = xyh [ i ] [ 0 ] ; y = xyh [ i ] [ 1 ] ; h = xyh [ i ] [ 2 ] ; break ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { int H = h + Math.abs ( x - i ) + Math.abs ( y - j ) ; boolean flag = true ; for ( int k = 0 ; k < N ; k ++ ) { if ( xyh [ k ] [ 2 ] != Math.max ( H - Math.abs ( xyh [ k ] [ 0 ] - i ) - Math.abs ( xyh [ k ] [ 1 ] - j ) , 0 ) ) { flag = false ; break ; } } if ( flag ) { System.out.println ( i + " " + j + " " + H ) ; return ; } } } } }
import java.util.* ; public class atcoder_ABC104_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int D = sc.nextInt ( ) ; int G = sc.nextInt ( ) ; int [ ] [ ] pc = new int [ D ] [ 2 ] ; for ( int i = 0 ; i < D ; i ++ ) { pc [ i ] [ 0 ] = sc.nextInt ( ) ; pc [ i ] [ 1 ] = sc.nextInt ( ) ; } int ans = 1000000000 ; for ( int i = 0 ; i < ( 1 << D ) ; i ++ ) { int score = 0 ; int num = 0 ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i >> j & 1 ) == 1 ) { score += 100 * ( j + 1 ) * pc [ j ] [ 0 ] + pc [ j ] [ 1 ] ; num += pc [ j ] [ 0 ] ; } } if ( score >= G ) { ans = Math.min ( ans , num ) ; continue ; } int rest = G - score ; for ( int j = D - 1 ; j >= 0 ; j -- ) { if ( ( i >> j & 1 ) == 1 ) continue ; if ( rest >= 100 * ( j + 1 ) * pc [ j ] [ 0 ] + pc [ j ] [ 1 ] ) { ans = Math.min ( ans , num + ( rest - ( 100 * ( j + 1 ) * pc [ j ] [ 0 ] + pc [ j ] [ 1 ] ) ) / ( 100 * ( j + 1 ) ) + ( rest - ( 100 * ( j + 1 ) * pc [ j ] [ 0 ] + pc [ j ] [ 1 ] ) ) % ( 100 * ( j + 1 ) ) != 0 ? 1 : 0 ) ; break ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_678_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = a - b ; if ( c % 10 == 9 ) { c = c - 1 ; } else { c = c + 1 ; } System.out.println ( c ) ; } }
import java.util.* ; public class codeforces_400_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc.next ( ) ; } int ans = 0 ; for ( int i = 1 ; i <= 12 ; i ++ ) { if ( 12 % i == 0 ) { int j = 12 / i ; if ( check ( s , i , j ) ) { ans ++ ; } } } System.out.println ( ans + " " ) ; for ( int i = 1 ; i <= 12 ; i ++ ) { if ( 12 % i == 0 ) { int j = 12 / i ; if ( check ( s , i , j ) ) { System.out.print ( i + "x" + j + " " ) ; } } } System.out.println ( ) ; } static boolean check ( String [ ] s , int i , int j ) { for ( int k = 0 ; k < i ; k ++ ) { int sum = 0 ; for ( int l = 0 ; l < j ; l ++ ) { if ( s [ k + l * i ].equals ( "X" ) ) { sum ++ ; } } if ( sum != j ) { return false ; } } return true ; } }
from sys import stdin
from collections import Counter
import numpy as np
(N, M) = [int(x) for x in stdin.readline().split()]
A = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)
cum_remainders = (np.hstack([0, A]) % M).cumsum() % M
remainder_counts = Counter(cum_remainders)
combinations = 0
for count in remainder_counts.values():
    combinations += count * (count - 1) // 2
print(combinations)
import java.util.* ; public class atcoder_AGC033_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int N = sc.nextInt ( ) ; int sr = sc.nextInt ( ) ; int sc = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; boolean judge = false ; int sL = 0 , sR = 0 , sU = 0 , sD = 0 ; int tL = 0 , tR = 0 , tU = 0 , tD = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( S.charAt ( i ) == 'L' ) { sL ++ ; if ( sL - tR - sc == 0 ) { judge = true ; } } else if ( S.charAt ( i ) == 'R' ) { sR ++ ; if ( sc + ( sR - tL ) == W + 1 ) { judge = true ; } } else if ( S.charAt ( i ) == 'U' ) { sU ++ ; if ( sU - tD - sr == 0 ) { judge = true ; } } else if ( S.charAt ( i ) == 'D' ) { sD ++ ; if ( sr + ( sD - tU ) == H + 1 ) { judge = true ; } } if ( T.charAt ( i ) == 'L' ) { if ( sR - tL + sc != 1 ) { tL ++ ; } } if ( T.charAt ( i ) == 'R' ) { if ( sc + ( tR - sL ) != W ) { tR ++ ; } } if ( T.charAt ( i ) == 'U' ) { if ( sD - tU + sr != 1 ) { tU ++ ; } } if ( T.charAt ( i ) == 'D' ) { if ( sr + ( tD - sU ) != H ) { tD ++ ; } } } if ( judge ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
n = int(input())
while n % 2 == 0:
    n = n / 2
if n == 1:
    print('YES')
else:
    print('NO')
import sys


def main():
    s = sys.stdin.readline().rstrip()
    k = int(sys.stdin.readline())
    l = 0
    for c in s:
        if c != '1':
            break
        l += 1
    if l >= k:
        return 1
    return s[l]


print(main())
import java.util.* ; import java.io.* ; public class codeforces_404_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc.next ( ) ; } int flag = 0 ; ArrayList < Character > d1 = new ArrayList < > ( ) ; ArrayList < Character > d2 = new ArrayList < > ( ) ; HashSet < Character > rem = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { d1.add ( s [ i ].charAt ( j ) ) ; } if ( i == n - j - 1 ) { d2.add ( s [ i ].charAt ( j ) ) ; } if ( i != j && i != n - j - 1 ) { rem.add ( s [ i ].charAt ( j ) ) ; } } } if ( rem.size ( ) != 1 ) { System.out.println ( "NO" ) ; } else if ( ! d1.equals ( d2 ) ) { System.out.println ( "NO" ) ; } else if ( d1.size ( ) != 1 ) { System.out.println ( "NO" ) ; } else if ( d1.equals ( rem ) ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
import java.util.* ; public class atcoder_AGC046_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int C = sc.nextInt ( ) ; int D = sc.nextInt ( ) ; long [ ] [ ] dp = new long [ C + 1 ] [ D + 1 ] ; dp [ A ] [ B ] = 1 ; for ( int i = A ; i <= C ; i ++ ) { for ( int j = B ; j <= D ; j ++ ) { dp [ i ] [ j ] += ( dp [ i ] [ j - 1 ] * i + dp [ i - 1 ] [ j ] * j - dp [ i - 1 ] [ j - 1 ] * ( i - 1 ) * ( j - 1 ) ) % 998244353 ; } } System.out.println ( dp [ C ] [ D ] ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_7_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ m ] ; int ind = 1 ; for ( int i = 0 ; i < t ; i ++ ) { String s = sc.next ( ) ; if ( s.equals ( "alloc" ) ) { int x = sc.nextInt ( ) ; int pos = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == 0 ) { pos ++ ; if ( pos == x ) { arr [ j - x + 1 ] = ind ; for ( int k = 1 ; k < x ; k ++ ) { arr [ j - k ] = ind ; } ind ++ ; break ; } } else { pos = 0 ; } } if ( pos < x ) { System.out.println ( "NULL" ) ; } } else if ( s.equals ( "erase" ) ) { int x = sc.nextInt ( ) ; if ( x == 0 || x > m || arr [ x - 1 ] == 0 ) { System.out.println ( "ILLEGAL_ERASE_ARGUMENT" ) ; } else { arr [ x - 1 ] = 0 ; } } else if ( s.equals ( "defragment" ) ) { int cnt = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == 0 ) { cnt ++ ; } } for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] != 0 ) { arr [ j - cnt ] = arr [ j ] ; arr [ j ] = 0 ; } } } } }

import sys , re
from collections import deque , defaultdict , Counter
from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians
from itertools import accumulate , permutations , combinations , combinations_with_replacement , product , groupby
from operator import itemgetter , mul
from copy import deepcopy , copy
from string import ascii_lowercase , ascii_uppercase , digits
from bisect import bisect , bisect_left , insort , insort_left
from fractions import gcd
from heapq import heappush , heappop
from functools import reduce
def input ( ) : return sys.stdin.readline ( ).strip ( )
def INT ( ) : return int ( input ( ) )
def MAP ( ) : return map ( int , input ( ).split ( ) )
def LIST ( ) : return list ( map ( int , input ( ).split ( ) ) )
def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) )
sys.setrecursionlimit ( 10 ** 9 )
INF = float ( 'inf' )
mod = 10 ** 9 + 7
import numpy as np
N = INT ( )
S = [ input ( ) for _ in range ( N ) ]
march = [ "M" , "A" , "R" , "C" , "H" ]
march_lis = [ 0 ] * 5
for s in S :
    if s [ 0 ].upper ( ) in march :
        march_lis [ march.index ( s [ 0 ].upper ( ) ) ] += 1
ans = 0
for x , y , z in combinations ( march_lis , 3 ) :
    ans += x * y * z
print ( ans )
import sys , re
from collections import deque , defaultdict , Counter
from math import ceil , sqrt , hypot , factorial , pi , sin , cos , radians
from itertools import groupby , accumulate , permutations , combinations , product
from operator import itemgetter , mul
from copy import deepcopy
from string import ascii_lowercase , ascii_uppercase , digits
from bisect import bisect , bisect_left
from fractions import gcd
from heapq import heappush , heappop
from functools import reduce
def input ( ) : return sys.stdin.readline ( ).strip ( )
def INT ( ) : return int ( input ( ) )
def MAP ( ) : return map ( int , input ( ).split ( ) )
def LIST ( ) : return list ( map ( int , input ( ).split ( ) ) )
def ZIP ( n ) : return zip ( * ( MAP ( ) for _ in range ( n ) ) )
sys.setrecursionlimit ( 10 ** 9 )
INF = float ( 'inf' )
mod = 10 ** 9 + 7
N = INT ( )
A = LIST ( )
A = [ k for k , g in groupby ( A ) ]
N = len ( A )
i = 1
ans = 0
while i < N - 1 :
    if A [ i - 1 ] < A [ i ] > A [ i + 1 ] or A [ i - 1 ] > A [ i ] < A [ i + 1 ] :
        ans += 1
        i += 1
    i += 1
print ( ans + 1 )
import java.util.* ; public class codeforces_609_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map.containsKey ( arr [ i ] ) ) { map.put ( arr [ i ] , map.get ( arr [ i ] ) + 1 ) ; } else { map.put ( arr [ i ] , 1 ) ; } } long res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map.get ( arr [ i ] ) > 1 ) { res += n - i - map.get ( arr [ i ] ) ; map.put ( arr [ i ] , map.get ( arr [ i ] ) - 1 ) ; } else { res += n - i - 1 ; } } System.out.println ( res ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC162_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; int rNum = 0 ; int gNum = 0 ; int bNum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( S.charAt ( i ) == 'R' ) rNum ++ ; else if ( S.charAt ( i ) == 'G' ) gNum ++ ; else bNum ++ ; } int sum = 0 ; for ( int i = 0 ; i < N - 2 ; i ++ ) { for ( int j = i + 1 ; j < N - 1 ; j ++ ) { for ( int k = j + 1 ; k < N ; k ++ ) { if ( S.charAt ( i ) != S.charAt ( j ) && S.charAt ( j ) != S.charAt ( k ) && S.charAt ( k ) != S.charAt ( i ) ) sum ++ ; } } } System.out.println ( rNum * gNum * bNum - sum ) ; } }
import sys
from collections import deque
input = sys.stdin.buffer.readline
N = int ( input ( ) )
adj = [ [ ] for _ in range ( N + 1 ) ]
for _ in range ( N - 1 ) :
    a , b = map ( int , input ( ).split ( ) )
    adj [ a ].append ( b )
    adj [ b ].append ( a )
que = deque ( )
que.append ( 1 )
seen = [ 0 ] * ( N + 1 )
seen [ 1 ] = 1
par = [ 0 ] * ( N + 1 )
child_num = [ 0 ] * ( N + 1 )
while que :
    v = que.popleft ( )
    for u in adj [ v ] :
        if seen [ u ] == 0 :
            seen [ u ] = 1
            par [ u ] = v
            child_num [ v ] += 1
            que.append ( u )
seq = deque ( )
for i in range ( 1 , N + 1 ) :
    if child_num [ i ] == 0 :
        seq.append ( i )
while seq :
    c = seq.pop ( )
    seen [ c ] = 0
    if seen [ par [ c ] ] == 0 :
        print ( 'First' )
        exit ( )
    seen [ par [ c ] ] = 0
    child_num [ par [ par [ c ] ] ] -= 1
    if child_num [ par [ par [ c ] ] ] == 0 :
        seq.append ( par [ par [ c ] ] )
print ( 'Second' )
import java.util.* ; import java.io.* ; public class atcoder_ABC151_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; char c = s.charAt ( 0 ) ; int i = c - 'a' ; i ++ ; char ans = ( char ) ( i + 'a' ) ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_581_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] ans = new int [ n ] ; int mx = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans [ i ] = Math.max ( 0 , mx - arr [ i ] + 1 ) ; if ( arr [ i ] > mx ) mx = arr [ i ] ; } System.out.println ( Arrays.toString ( ans ).replace ( "," , " " ).replace ( "[" , "" ).replace ( "]" , "" ) ) ; } }
import sys
from collections import deque
sys.setrecursionlimit ( 10 ** 9 )
INF = 10 ** 18
def input ( ) :
    return sys.stdin.readline ( ).rstrip ( )
def main ( ) :
    N , M = map ( int , input ( ).split ( ) )
    edge = [ [ ] for _ in range ( N ) ]
    for i in range ( M ) :
        X , Y , Z = map ( lambda x : int ( x ) - 1 , input ( ).split ( ) )
        edge [ X ].append ( Y )
        edge [ Y ].append ( X )
    used = [ False ] * N
    ans = 0
    for i in range ( N ) :
        if not used [ i ] :
            ans += 1
            queue = deque ( )
            queue.append ( i )
            while queue :
                node = queue.popleft ( )
                used [ node ] = True
                for nextnode in edge [ node ] :
                    if not used [ nextnode ] :
                        queue.append ( nextnode )
    print ( ans )
if __name__ == '__main__' :
    main ( )
import java.util.* ; public class atcoder_ABC118_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int gcd = A [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { gcd = gcd ( gcd , A [ i ] ) ; } System.out.println ( gcd ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java.util.* ; public class atcoder_ABC132_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int mod = 1000000007 ; int [ ] coef = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { coef [ i ] = n / i - n / ( i + 1 ) ; } coef [ n ] = 1 ; int [ ] dp = new int [ k + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= k ; i ++ ) { int tmp = 0 ; for ( int j = n ; j >= 1 ; j -- ) { tmp += dp [ i - 1 ] ; tmp %= mod ; dp [ i ] += coef [ j ] * tmp ; dp [ i ] %= mod ; } } System.out.println ( dp [ k ] ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_581_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int x = Math.min ( a , b ) ; int y = Math.max ( a , b ) - x ; System.out.println ( x + " " + y / 2 ) ; } }
import java.util.* ; public class codeforces_92_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int i = 1 ; while ( m >= i ) { m -= i ; i = ( i % n ) + 1 ; } System.out.println ( m ) ; } }
import java.util.* ; public class atcoder_ABC170_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = 0 ; if ( k > l ) { ans = k - l ; } else if ( k < r ) { ans = r - k ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_653_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( arr [ i ] + 1 == arr [ i + 1 ] && arr [ i + 1 ] + 1 == arr [ i + 2 ] ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.* ; public class codeforces_8_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int x = 0 , y = 0 ; HashMap < String , Integer > hm = new HashMap < > ( ) ; hm.put ( "0 0" , 1 ) ; boolean flag = false ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char ch = s.charAt ( i ) ; if ( ch == 'L' ) { x -- ; } else if ( ch == 'R' ) { x ++ ; } else if ( ch == 'U' ) { y ++ ; } else { y -- ; } String str = x + " " + y ; if ( hm.containsKey ( str ) ) { flag = true ; break ; } else { hm.put ( str , 1 ) ; } } if ( flag ) { System.out.println ( "BUG" ) ; } else { System.out.println ( "OK" ) ; } } }
import java.util.* ; public class codeforces_146_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) != '4' && s.charAt ( i ) != '7' ) { System.out.println ( "NO" ) ; return ; } if ( i < n / 2 ) sum1 += s.charAt ( i ) - '0' ; else sum2 += s.charAt ( i ) - '0' ; } if ( sum1 == sum2 ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } }
import java.util.* ; public class codeforces_299_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int min = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % min != 0 ) { System.out.println ( - 1 ) ; return ; } } System.out.println ( min ) ; } }
import java.util.* ; public class codeforces_518_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int yay = 0 , whoops = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; HashMap < Character , Integer > map2 = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( map.containsKey ( s.charAt ( i ) ) ) { map.put ( s.charAt ( i ) , map.get ( s.charAt ( i ) ) + 1 ) ; } else { map.put ( s.charAt ( i ) , 1 ) ; } } for ( int i = 0 ; i < t.length ( ) ; i ++ ) { if ( map2.containsKey ( t.charAt ( i ) ) ) { map2.put ( t.charAt ( i ) , map2.get ( t.charAt ( i ) ) + 1 ) ; } else { map2.put ( t.charAt ( i ) , 1 ) ; } } for ( char c : map.keySet ( ) ) { if ( map2.containsKey ( c ) ) { yay += Math.min ( map.get ( c ) , map2.get ( c ) ) ; } } for ( char c : map.keySet ( ) ) { if ( map2.containsKey ( c ) ) { continue ; } else { if ( Character.isLowerCase ( c ) ) { if ( map2.containsKey ( Character.toUpperCase ( c ) ) ) { whoops += Math.min ( map.get ( c ) , map2.get ( Character.toUpperCase ( c ) ) ) ; } } else { if ( map2.containsKey ( Character.toLowerCase ( c ) ) ) { whoops += Math.min ( map.get ( c ) , map2.get ( Character.toLowerCase ( c ) ) ) ; } } } } System.out.println ( yay + " " + whoops ) ; } }
n , a , b = [ int ( x ) for x in input ( ).split ( " " ) ]
lista = [ int ( x ) for x in input ( ).split ( " " ) ]
listb = [ int ( x ) for x in input ( ).split ( " " ) ]
for k in range ( n ) :
    if k + 1 in lista :
        print ( 1 , end = " " )
    else :
        print ( 2 , end = " " )
import java.util.* ; public class codeforces_340_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int lcm = lcm ( x , y ) ; int ans = b / lcm - ( a - 1 ) / lcm ; System.out.println ( ans ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } }
import sys

def I(): return int(sys.stdin.readline())
def LI(): return [int(x) for x in sys.stdin.readline().split()]

def main():
    N = I()
    S = sorted(LI(), reverse=True)
    flag = [True] * len(S)
    cur = []
    cur.append(S[0])
    flag[0] = False
    for i in range(N):
        j = 0
        jM = len(cur)
        for k in range(len(S)):
            if flag[k] and S[k] < cur[j]:
                cur.append(S[k])
                j += 1
                flag[k] = False
                if j == jM:
                    break
        else:
            return "No"
        cur.sort(reverse=True)
    return "Yes"

if __name__ == "__main__":
    print(main())
import java.util.* ; public class codeforces_534_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int a = 0 ; int b = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; if ( x > y ) { a ++ ; } else if ( x < y ) { b ++ ; } } System.out.println ( a + " " + b ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_672_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; ArrayList < Integer > arr = new ArrayList < > ( ) ; for ( int i = 1 ; i <= 370 ; i ++ ) { int x = i ; while ( x > 0 ) { arr.add ( x % 10 ) ; x /= 10 ; } } arr.remove ( 0 ) ; arr.remove ( 0 ) ; System.out.println ( arr.get ( n - 1 ) ) ; } }
import java.util.* ; public class codeforces_148_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( a > n ) { System.out.println ( 0 ) ; return ; } int res = 0 ; int pos = x * a ; pos += a * pos / ( n - a ) ; while ( pos < c ) { res ++ ; pos += a * pos / n ; pos += a * b ; pos += a * pos / ( n - a ) ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_59_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int upper = 0 , lower = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) >= 'a' && s.charAt ( i ) <= 'z' ) lower ++ ; else upper ++ ; } if ( upper > lower ) System.out.println ( s.toUpperCase ( ) ) ; else System.out.println ( s.toLowerCase ( ) ) ; } }
import java.util.* ; public class codeforces_474_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] arr1 = new int [ n ] ; int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; for ( int j = 0 ; j < x ; j ++ ) { arr [ k ] = i + 1 ; k ++ ; } } int m = sc.nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; arr1 [ i ] = arr [ x - 1 ] ; } for ( int i = 0 ; i < m ; i ++ ) { System.out.println ( arr1 [ i ] ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_267_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { long a = sc.nextLong ( ) ; long b = sc.nextLong ( ) ; arr [ i ] = a - b ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.println ( arr [ i ] ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC172_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += ( long ) i * ( N / i ) * ( N / i + 1 ) / 2 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC112_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int age = sc.nextInt ( ) ; if ( age == 1 ) { System.out.println ( "Hello World" ) ; } else { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; System.out.println ( a + b ) ; } } }
import java.util.* ; public class codeforces_265_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = n - 1 ; int last = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math.abs ( last - a [ i ] ) + 1 ; last = a [ i ] ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_342_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; if ( s < f ) { sb.append ( "R" ) ; } else { sb.append ( "L" ) ; } int i = 1 ; int j = s ; while ( j != f ) { if ( i > m ) { break ; } int t = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; if ( i == t && ( l <= j && j <= r || l <= j + 1 && j + 1 <= r ) ) { sb.append ( "X" ) ; } else { sb.append ( sb.charAt ( sb.length ( ) - 1 ) ) ; } j += sb.charAt ( sb.length ( ) - 1 ) == 'R' ? 1 : - 1 ; i ++ ; } System.out.println ( sb ) ; } }
n , m = map ( int , input ( ).strip ( ).split ( ) )
out = [ 0 for _ in range ( n ) ]
comp = [ i + 2 for i in range ( n ) ]
for _ in range ( m ) :
    l , r , x = map ( int , input ( ).strip ( ).split ( ) )
    t = l
    while t <= r :
        next_val = comp [ t - 1 ]
        if out [ t - 1 ] == 0 and t != x :
            out [ t - 1 ] = x
        comp [ t - 1 ] = r + 1 if t >= x else x
        t = next_val
print ( * out )
import java.util.* ; import java.io.* ; public class atcoder_ABC178_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; if ( s.charAt ( 1 ) == '+' ) x ++ ; else x -- ; } System.out.println ( x ) ; } }
import sys
input = sys.stdin.readline
def I ( ) : return int ( input ( ) )
def MI ( ) : return map ( int , input ( ).split ( ) )
def LI ( ) : return list ( map ( int , input ( ).split ( ) ) )
def main ( ) :
    mod = 10 ** 9 + 7
    N , A , B = MI ( )
    ans = 0
    rep = N // ( A + B )
    ans += rep * A
    res = N - rep * ( A + B )
    ans += min ( res , A )
    print ( ans )
main ( )
import java.util.* ; public class codeforces_296_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; boolean flag = true ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( map.containsKey ( s.charAt ( i ) ) ) { map.put ( s.charAt ( i ) , map.get ( s.charAt ( i ) ) + 1 ) ; } else { map.put ( s.charAt ( i ) , 1 ) ; } } for ( char c : map.keySet ( ) ) { if ( map.get ( c ) > n / 2 ) { flag = false ; break ; } } if ( flag ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import sys , re
from collections import deque , defaultdict , Counter
from math import sqrt , hypot , factorial , pi , sin , cos , radians
if sys.version_info.minor >= 5 : from math import gcd
else : from fractions import gcd
from heapq import heappop , heappush , heapify , heappushpop
from bisect import bisect_left , bisect_right
from itertools import permutations , combinations , product
from operator import itemgetter , mul
from copy import deepcopy
from functools import reduce , partial
from fractions import Fraction
from string import ascii_lowercase , ascii_uppercase , digits
def input ( ) : return sys.stdin.readline ( ).strip ( )
def ceil ( a , b = 1 ) : return int ( - ( - a // b ) )
def round ( x ) : return int ( ( x * 2 + 1 ) // 2 )
def fermat ( x , y , MOD ) : return x * pow ( y , MOD - 2 , MOD ) % MOD
def lcm ( x , y ) : return ( x * y ) // gcd ( x , y )
def lcm_list ( nums ) : return reduce ( lcm , nums , initial = 1 )
def INT ( ) : return int ( input ( ) )
def MAP ( ) : return map ( int , input ( ).split ( ) )
def LIST ( ) : return list ( map ( int , input ( ).split ( ) ) )
sys.setrecursionlimit ( 10 ** 9 )
INF = float ( 'inf' )
MOD = 10 ** 9 + 7
q , h , s , d = MAP ( )
n = INT ( )
best1L = min ( q * 4 , h * 2 , s )
best2L = min ( d , best1L * 2 )
if n % 2 == 0 :
    print ( best2L * ( n // 2 ) )
else :
    print ( best2L * ( n // 2 ) + best1L )
import sys


def binary_search(key):
    bad, good = -1, len(ans)
    while good - bad > 1:
        mid = (bad + good) // 2
        if ans[mid][-1] < key:
            good = mid
        else:
            bad = mid
    return good


N = int(input())
ans = []
for _ in range(N):
    A = int(input())
    idx = binary_search(A)
    if idx == len(ans):
        ans.append([A])
    else:
        ans[idx].append(A)
print(len(ans))
import java.util.* ; public class codeforces_387_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h1 = sc.nextInt ( ) ; int m1 = sc.nextInt ( ) ; int h2 = sc.nextInt ( ) ; int m2 = sc.nextInt ( ) ; m1 += h1 * 60 ; m2 += h2 * 60 ; m2 = m1 - m2 ; m2 %= 1440 ; System.out.printf ( "%02d:%02d" , m2 / 60 , m2 % 60 ) ; } }
import java.util.* ; public class codeforces_665_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a , at , b , bt , t1 , t2 ; a = sc.nextInt ( ) ; at = sc.nextInt ( ) ; b = sc.nextInt ( ) ; bt = sc.nextInt ( ) ; t1 = sc.nextInt ( ) ; t2 = sc.nextInt ( ) ; int st = t2 + ( t1 - 5 ) * 60 ; int fin = st + at ; int now = 0 ; int ans = 0 ; while ( now < fin && now < 1140 ) { if ( now + bt > st ) ans ++ ; now += b ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String x = sc.next ( ) ; int a = 0 , b = 0 ; for ( int j = 0 ; j < s.length ( ) ; j ++ ) { if ( s.charAt ( j ) == x.charAt ( 0 ) ) a ++ ; else if ( s.charAt ( j ) == x.charAt ( 1 ) ) b ++ ; else { ans += Math.min ( a , b ) ; a = 0 ; b = 0 ; } } ans += Math.min ( a , b ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_23_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; while ( t -- > 0 ) { int a = sc.nextInt ( ) ; if ( a < 2 ) { System.out.println ( 0 ) ; } else { System.out.println ( a - 2 ) ; } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC150_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( ( arr [ i ] & arr [ j ] ) == 0 ) { ans ++ ; } } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_216_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; graph.get ( u ).add ( v ) ; graph.get ( v ).add ( u ) ; } int ans = 0 ; boolean [ ] vis = new boolean [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! vis [ i ] ) { int nodes = 0 , edges = 0 ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( i ) ; vis [ i ] = true ; while ( ! q.isEmpty ( ) ) { int node = q.poll ( ) ; nodes ++ ; edges += graph.get ( node ).size ( ) ; for ( int it : graph.get ( node ) ) { if ( ! vis [ it ] ) { q.add ( it ) ; vis [ it ] = true ; } } } if ( ( nodes * ( nodes - 1 ) ) == edges * 2 ) { ans ++ ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC149_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int C = sc.nextInt ( ) ; int D = sc.nextInt ( ) ; int E = sc.nextInt ( ) ; int F = sc.nextInt ( ) ; int x = ( int ) ( ( ( A * B ) / Math.gcd ( A , B ) ) * ( C * D ) / Math.gcd ( C , D ) ) ; int y = ( int ) ( ( ( A * B ) / Math.gcd ( A , B ) ) * ( E * F ) / Math.gcd ( E , F ) ) ; int z = ( int ) ( ( ( C * D ) / Math.gcd ( C , D ) ) * ( E * F ) / Math.gcd ( E , F ) ) ; int a = ( int ) ( ( x + y ) * F / ( E + F ) ) ; int b = ( int ) ( ( x + z ) * E / ( C + D ) ) ; System.out.println ( a + " " + b ) ; } }
import java.util.* ; public class codeforces_612_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { res += Math.abs ( b [ i ] - b [ i - 1 ] ) ; } System.out.println ( res ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_583_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int counter = 0 ; int counter_turns = - 1 ; while ( counter < n ) { counter_turns ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != - 1 && a [ i ] <= counter ) { counter ++ ; a [ i ] = - 1 ; } } Arrays.sort ( a ) ; } System.out.println ( counter_turns ) ; } }
import java.util.* ; public class codeforces_607_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] l = new int [ 1000010 ] ; int [ ] dp = new int [ 1000010 ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; l [ a ] = b ; } if ( l [ 0 ] > 0 ) dp [ 0 ] = 1 ; int mx = 0 ; for ( int i = 1 ; i < 1000010 ; i ++ ) { if ( l [ i ] == 0 ) dp [ i ] = dp [ i - 1 ] ; else { if ( l [ i ] >= i ) dp [ i ] = 1 ; else dp [ i ] = dp [ i - l [ i ] - 1 ] + 1 ; } if ( dp [ i ] > mx ) mx = dp [ i ] ; } System.out.println ( n - mx ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC010_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } if ( sum ( a ) % ( n * ( n + 1 ) / 2 ) != 0 ) { System.out.println ( "NO" ) ; return ; } int k = sum ( a ) / ( n * ( n + 1 ) / 2 ) ; a = add ( a , a [ 0 ] ) ; if ( sum ( a ) % n != 0 ) { System.out.println ( "NO" ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ( k - a [ i ] + a [ i + 1 ] ) % n != 0 ) { System.out.println ( "NO" ) ; return ; } } System.out.println ( "YES" ) ; } static int sum ( int [ ] a ) { int sum = 0 ; for ( int i = 0 ; i < a.length ; i ++ ) { sum += a [ i ] ; } return sum ; } static int [ ] add ( int [ ] a , int x ) { int [ ] b = new int [ a.length + 1 ] ; for ( int i = 0 ; i < a.length ; i ++ ) { b [ i ] = a [ i ] ; } b [ a.length ] = x ; return b ; } }
import java.util.* ; public class codeforces_190_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; if ( n == 0 && m == 0 ) { System.out.println ( "0 0" ) ; } else if ( n == 0 && m != 0 ) { System.out.println ( "Impossible" ) ; } else if ( n != 0 && m == 0 ) { System.out.println ( n + " " + n ) ; } else { int min = Math.max ( n , m ) ; int max = n + m - 1 ; System.out.println ( min + " " + max ) ; } } }
def main ( ) :
    n , m = [ int ( i ) for i in input ( ).split ( ) ]
    round_complexity = [ int ( i ) for i in input ( ).split ( ) ]
    george_complexity = [ int ( i ) for i in input ( ).split ( ) ]
    i = j = 0
    while i < n and j < m :
        i += 1 * ( round_complexity [ i ] <= george_complexity [ j ] )
        j += 1
    print ( n - i )
if __name__ == '__main__' :
    main ( )
import heapq


def solve ( ) :
    n , m = map ( int , input ( ).split ( ) )
    x = [ ]
    y = [ ]
    for i in range ( n ) :
        day , salary = map ( int , input ( ).split ( ) )
        heapq.heappush ( x , ( - day , - salary ) )
    while x :
        d , s = heapq.heappop ( x )
        r = m - len ( y )
        if r >= - d :
            heapq.heappush ( y , - s )
        else :
            heapq.heappush ( y , - s )
            heapq.heappop ( y )
    print ( sum ( y ) )
import sys
from collections import Counter


def main():
    s = input()
    if len(set(s)) == 1:
        print(0)
        sys.exit()
    a = Counter(s)
    ans = min(a.values()) * 2
    print(ans)


if __name__ == '__main__':
    main()
No
Yes
No
No
No
Yes
Yes
Yes
No
Yes
Yes
No
Yes
No
No
No
Yes
No
No
Yes
No
No
No
Yes
No
No
No
No
No
Yes
Yes
Yes
No
Yes
No
No
Yes
No
Yes
Yes
No
No
No
No
No
Yes
Yes
No
No
Yes
K , N = list ( map ( int , input ( ).split ( ) ) )
dprint = lambda * x : x
def cmb ( n , r , mod ) :
    if ( r < 0 or r > n ) :
        return 0
    r = min ( r , n - r )
    return g1 [ n ] * g2 [ r ] * g2 [ n - r ] % mod
mod = 998244353
__N = 8000
g1 = [ 1 , 1 ]
g2 = [ 1 , 1 ]
inverse = [ 0 , 1 ]
for i in range ( 2 , __N + 1 ) :
    g1.append ( ( g1 [ - 1 ] * i ) % mod )
    inverse.append ( ( - inverse [ mod % i ] * ( mod // i ) ) % mod )
    g2.append ( ( g2 [ - 1 ] * inverse [ - 1 ] ) % mod )
def kumiawase ( p , q ) :
    return cmb ( p + q - 1 , q - 1 , mod )
def solve ( n ) :
    assert n <= K + 1
    ans = 0
    kumi = ( n - 1 ) // 2
    for p in range ( kumi + 1 ) :
        if p > N :
            break
        ans += 2 ** p * cmb ( kumi , p , mod ) * kumiawase ( N - p , p + ( K - kumi * 2 - int ( n % 2 == 0 ) ) )
        if n % 2 == 0 and N - p - 1 >= 0 :
            ans += 2 ** p * cmb ( kumi , p , mod ) * kumiawase ( N - p - 1 , p + ( K - kumi * 2 - int ( n % 2 == 0 ) ) )
    return ans
ans = [ ]
for i in range ( 2 , 2 * K + 1 ) :
    if i <= K + 1 :
        tmp = solve ( i ) % 998244353
        ans.append ( tmp )
        print ( tmp )
    else :
        print ( ans [ - i + K ] )
import sys
from collections import deque


def bfs(start, dist):
    q = deque([start])
    dist[start] = 0
    while q:
        v = q.popleft()
        for u in g[v]:
            if dist[u] == -1:
                dist[u] = dist[v] + 1
                q.append(u)


n, ta, ao = map(int, sys.stdin.readline().split())
ta -= 1
ao -= 1
g = [[] for _ in range(n)]
for _ in range(n - 1):
    a, b = map(int, sys.stdin.readline().split())
    a -= 1
    b -= 1
    g[a].append(b)
    g[b].append(a)

ta_dist = [-1] * n
ao_dist = [-1] * n
bfs(ta, ta_dist)
bfs(ao, ao_dist)
ans = 0
for i in range(n):
    if ta_dist[i] <= ao_dist[i]:
        ans = max(ans, ao_dist[i])
print(ans - 1)
import java.util.* ; public class atcoder_ABC070_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; if ( b <= c || d <= a ) { System.out.println ( 0 ) ; } else { int x = Math.max ( a , c ) ; int y = Math.min ( b , d ) ; System.out.println ( y - x ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC152_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 1 ; int pos = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ pos ] > arr [ i ] ) { count ++ ; pos = i ; } } System.out.println ( count ) ; } }
n = int ( input ( ) )
x = list ( int ( i ) for i in input ( ).split ( ) )
a = [ ]
b = [ ]
for i in range ( 0 , n ) :
    if i % 2 == 0 :
        a.append ( x [ i ] )
    else :
        b.append ( x [ i ] )
cnta = [ 0 ] * ( 100002 + 1 )
cntb = [ 0 ] * ( 100002 + 1 )
vala = 0
vala1 = 0
maxCnta = 0
maxCnta1 = 0
for i in a :
    cnta [ i ] += 1
for i in a :
    if maxCnta < cnta [ i ] :
        vala = i
        maxCnta = cnta [ i ]
for i in a :
    if maxCnta1 < cnta [ i ] and vala != i :
        maxCnta1 = cnta [ i ]
        vala1 = i
valb = 0
valb1 = 0
maxCntb = 0
maxCntb1 = 0
for i in b :
    cntb [ i ] += 1
for i in b :
    if maxCntb < cntb [ i ] :
        valb = i
        maxCntb = cntb [ i ]
for i in b :
    if maxCntb1 < cntb [ i ] and valb != i :
        maxCntb1 = cntb [ i ]
        valb1 = i
if valb != vala :
    res = 0
    for i in a :
        if i != vala :
            res += 1
    for i in b :
        if i != valb :
            res += 1
    print ( res )
else :
    resa = 0
    resb = 0
    resa1 = 0
    resb1 = 0
    for i in a :
        if i != vala :
            resa += 1
        if i != vala1 :
            resa1 += 1
    for i in b :
        if i != valb :
            resb += 1
        if i != valb1 :
            resb1 += 1
    print ( min ( resa + resb1 , resa1 + resb ) )
n = int ( input ( ) )
q = [ ]
count = 0
for i in range ( n ) :
    a = input ( ).split ( )
    q.append ( a )
for j in q :
    for k in q :
        if k == j :
            continue
        elif j [ 0 ] == k [ len ( k ) - 1 ] :
            count += 1
        else :
            continue
print ( count )
x , y = map ( int , input ( ).split ( ) )
print ( max ( x + y - 3 + ( ( y - x ) % 3 > 0 ) , 0 ) )
num_inp = lambda : int ( input ( ) )
arr_inp = lambda : list ( map ( int , input ( ).split ( ) ) )
sp_inp = lambda : map ( int , input ( ).split ( ) )
str_inp = lambda : input ( )
import numpy as np
(num, k) = [int(x) for x in input().split()]
arr = [int(x) for x in input().split()]
different = set()
temp = 0
arr.sort()
for x in arr:
    if x % k != 0 or not x // k in different:
        different.add(x)
    temp = np.max(np.array([len(different), temp]))
print(temp)
import java.util.* ; public class codeforces_306_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int q = n / m ; int r = n % m ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = q ; } for ( int i = 0 ; i < r ; i ++ ) { a [ i ] ++ ; } for ( int i = 0 ; i < m ; i ++ ) { System.out.print ( a [ i ] + " " ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_400_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; if ( s.contains ( "SG" ) || s.contains ( "GS" ) ) { count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_327_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; } int ans = cnt ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '0' ) { int j = i ; while ( j < n && s.charAt ( j ) == '0' ) j ++ ; if ( j == n ) break ; int cnt1 = 0 , cnt0 = 0 ; for ( int k = i ; k < j ; k ++ ) { if ( s.charAt ( k ) == '1' ) cnt1 ++ ; else cnt0 ++ ; } ans = Math.max ( ans , cnt + cnt1 + cnt0 ) ; i = j - 1 ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_567_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int a = arr [ i ] ; int b = arr [ i ] ; if ( i == 0 ) { a = arr [ i + 1 ] - arr [ i ] ; b = arr [ n - 1 ] - arr [ i ] ; } else if ( i == n - 1 ) { a = arr [ i ] - arr [ i - 1 ] ; b = arr [ i ] - arr [ 0 ] ; } else { a = Math.min ( arr [ i ] - arr [ i - 1 ] , arr [ i + 1 ] - arr [ i ] ) ; b = Math.max ( arr [ i ] - arr [ 0 ] , arr [ n - 1 ] - arr [ i ] ) ; } System.out.println ( a + " " + b ) ; } }
from collections import defaultdict
n = int(input())
s = defaultdict(lambda : 0)
l = list([input() for i in range(n)])
f = 'Yes'
i = -1
for v in l:
    s[v] += 1
    if s[v] >= 2:
        f = 'No'
    if i != -1 and l[i][-1] != v[0]:
        f = 'No'
    i += 1
print(f)
import java.util.* ; import java.io.* ; public class codeforces_579_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 1 ; while ( Math.log ( n ) % 1 != 0 ) { x ++ ; n -= ( int ) Math.pow ( 2 , ( int ) Math.log ( n ) / ( int ) Math.log ( 2 ) ) ; } System.out.println ( x ) ; } }
import java.util.* ; public class codeforces_189_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = 0 ; if ( a == b && b == c ) { ans = d / a ; } else if ( a == b ) { int k = 0 ; for ( int i = 0 ; i <= d / c ; i ++ ) { int rem = d - i * c ; if ( rem % a == 0 ) { k = Math.max ( k , i + rem / a ) ; } } ans = k ; } else { int k = 0 ; for ( int i = 0 ; i <= d / c ; i ++ ) { for ( int j = 0 ; j <= d / b ; j ++ ) { int rem = d - i * c - j * b ; if ( rem >= 0 && rem % a == 0 ) { k = Math.max ( k , i + j + rem / a ) ; } } } ans = k ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC037_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; String S = sc.next ( ) ; boolean aaaa = false ; if ( K >= 15 ) { aaaa = true ; } else if ( ( 1 << K ) >= N ) { aaaa = true ; } if ( aaaa ) { System.out.println ( S.charAt ( 0 ) * N ) ; return ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb.append ( S.charAt ( i ) ) ; } for ( int i = 0 ; i < K ; i ++ ) { sb.append ( S ) ; } StringBuilder sb2 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb2.append ( sb.charAt ( i ) ) ; } StringBuilder sb3 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb3.append ( sb2.charAt ( i ) ) ; } StringBuilder sb4 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb4.append ( sb3.charAt ( i ) ) ; } StringBuilder sb5 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb5.append ( sb4.charAt ( i ) ) ; } StringBuilder sb6 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb6.append ( sb5.charAt ( i ) ) ; } StringBuilder sb7 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb7.append ( sb6.charAt ( i ) ) ; } StringBuilder sb8 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb8.append ( sb7.charAt ( i ) ) ; } StringBuilder sb9 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb9.append ( sb8.charAt ( i ) ) ; } StringBuilder sb10 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb10.append ( sb9.charAt ( i ) ) ; } StringBuilder sb11 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb11.append ( sb10.charAt ( i ) ) ; } StringBuilder sb12 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb12.append ( sb11.charAt ( i ) ) ; } StringBuilder sb13 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb13.append ( sb12.charAt ( i ) ) ; } StringBuilder sb14 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb14.append ( sb13.charAt ( i ) ) ; } StringBuilder sb15 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb15.append ( sb14.charAt ( i ) ) ; } StringBuilder sb16 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb16.append ( sb15.charAt ( i ) ) ; } StringBuilder sb17 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb17.append ( sb16.charAt ( i ) ) ; } StringBuilder sb18 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb18.append ( sb17.charAt ( i ) ) ; } StringBuilder sb19 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb19.append ( sb18.charAt ( i ) ) ; } StringBuilder sb20 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb20.append ( sb19.charAt ( i ) ) ; } StringBuilder sb21 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb21.append ( sb20.charAt ( i ) ) ; } StringBuilder sb22 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb22.append ( sb21.charAt ( i ) ) ; } StringBuilder sb23 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb23.append ( sb22.charAt ( i ) ) ; } StringBuilder sb24 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb24.append ( sb23.charAt ( i ) ) ; } StringBuilder sb25 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb25.append ( sb24.charAt ( i ) ) ; } StringBuilder sb26 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb26.append ( sb25.charAt ( i ) ) ; } StringBuilder sb27 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb27.append ( sb26.charAt ( i ) ) ; } StringBuilder sb28 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb28.append ( sb27.charAt ( i ) ) ; } StringBuilder sb29 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb29.append ( sb28.charAt ( i ) ) ; } StringBuilder sb30 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb30.append ( sb29.charAt ( i ) ) ; } StringBuilder sb31 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb31.append ( sb30.charAt ( i ) ) ; } StringBuilder sb32 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb32.append ( sb31.charAt ( i ) ) ; } StringBuilder sb33 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb33.append ( sb32.charAt ( i ) ) ; } StringBuilder sb34 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb34.append ( sb33.charAt ( i ) ) ; } StringBuilder sb35 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb35.append ( sb34.charAt ( i ) ) ; } StringBuilder sb36 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb36.append ( sb35.charAt ( i ) ) ; } StringBuilder sb37 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb37.append ( sb36.charAt ( i ) ) ; } StringBuilder sb38 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb38.append ( sb37.charAt ( i ) ) ; } StringBuilder sb39 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb39.append ( sb38.charAt ( i ) ) ; } StringBuilder sb40 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb40.append ( sb39.charAt ( i ) ) ; } StringBuilder sb41 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb41.append ( sb40.charAt ( i ) ) ; } StringBuilder sb42 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb42.append ( sb41.charAt ( i ) ) ; } StringBuilder sb43 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb43.append ( sb42.charAt ( i ) ) ; } StringBuilder sb44 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb44.append ( sb43.charAt ( i ) ) ; } StringBuilder sb45 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb45.append ( sb44.charAt ( i ) ) ; } StringBuilder sb46 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb46.append ( sb45.charAt ( i ) ) ; } StringBuilder sb47 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb47.append ( sb46.charAt ( i ) ) ; } StringBuilder sb48 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb48.append ( sb47.charAt ( i ) ) ; } StringBuilder sb49 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb49.append ( sb48.charAt ( i ) ) ; } StringBuilder sb50 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb50.append ( sb49.charAt ( i ) ) ; } StringBuilder sb51 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb51.append ( sb50.charAt ( i ) ) ; } StringBuilder sb52 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb52.append ( sb51.charAt ( i ) ) ; } StringBuilder sb53 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb53.append ( sb52.charAt ( i ) ) ; } StringBuilder sb54 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb54.append ( sb53.charAt ( i ) ) ; } StringBuilder sb55 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb55.append ( sb54.charAt ( i ) ) ; } StringBuilder sb56 = new StringBuilder ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sb56.append ( sb55.charAt
import java.util.* ; public class codeforces_222_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; int i = 0 ; while ( i < n - 1 ) { if ( arr [ i ] != arr [ n - 1 ] ) { ans ++ ; i += k ; } else { break ; } } if ( ans == 0 ) { System.out.println ( - 1 ) ; } else { System.out.println ( ans ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC165_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int Q = sc.nextInt ( ) ; int [ ] a = new int [ Q ] ; int [ ] b = new int [ Q ] ; int [ ] c = new int [ Q ] ; int [ ] d = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; d [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i <= M ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { for ( int k = 1 ; k <= M ; k ++ ) { for ( int l = 1 ; l <= M ; l ++ ) { for ( int m = 1 ; m <= M ; m ++ ) { int [ ] A = { i , j , k , l , m } ; int sum = 0 ; for ( int q = 0 ; q < Q ; q ++ ) { if ( A [ b [ q ] - 1 ] - A [ a [ q ] - 1 ] == c [ q ] ) sum += d [ q ] ; } ans = Math.max ( ans , sum ) ; } } } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_203_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; int ans = - 1 ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; arr [ x - 1 ] [ y - 1 ] ++ ; if ( arr [ x - 1 ] [ y - 1 ] == 9 ) { ans = i + 1 ; break ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC024_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { if ( P [ i ] != 1 ) { ans ++ ; } } else if ( i == N - 1 ) { if ( P [ i ] != N ) { ans ++ ; } } else { if ( P [ i ] != P [ i - 1 ] + 1 && P [ i ] != P [ i - 1 ] ) { ans ++ ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_287_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String [ ] arr = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = sc.next ( ) ; } int black = 0 ; int white = 0 ; int correct = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ i ].charAt ( j ) == '#' ) { black ++ ; } else { white ++ ; } if ( arr [ i ].charAt ( j + 1 ) == '#' ) { black ++ ; } else { white ++ ; } if ( arr [ i + 1 ].charAt ( j ) == '#' ) { black ++ ; } else { white ++ ; } if ( arr [ i + 1 ].charAt ( j + 1 ) == '#' ) { black ++ ; } else { white ++ ; } if ( black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4 ) { correct = 1 ; break ; } black = 0 ; white = 0 ; } if ( correct == 1 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.* ; public class codeforces_37_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int max = 1 ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { count ++ ; } else { if ( count > max ) { max = count ; } count = 1 ; } } if ( count > max ) { max = count ; } System.out.println ( max + " " + n ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC006_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; if ( X == 1 || X == N * 2 - 1 ) { System.out.println ( "No" ) ; return ; } System.out.println ( "Yes" ) ; if ( X == N * 2 - 2 ) { int [ ] xs = new int [ N ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { xs [ i ] = i + 2 ; } xs [ N - 1 ] = N ; for ( int i = 0 ; i < N - 1 ; i ++ ) { xs [ i ] = i + 2 ; } xs [ N - 1 ] = N ; for ( int i = 0 ; i < N ; i ++ ) { System.out.println ( xs [ i ] ) ; } } else { int [ ] xs = new int [ N ] ; for ( int i = 0 ; i < N - 3 ; i ++ ) { xs [ i ] = i + 1 ; } xs [ N - 3 ] = X + 2 ; xs [ N - 2 ] = X - 1 ; xs [ N - 1 ] = X ; for ( int i = N - 4 ; i >= 0 ; i -- ) { xs [ i ] = i + 1 ; } for ( int i = 0 ; i < N ; i ++ ) { System.out.println ( xs [ i ] ) ; } } } }
import java.util.* ; public class codeforces_632_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; String s = sc.next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int pScore = 0 , sScore = 0 , pMaxScore = 0 , sMaxScore = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'A' ) { pScore += arr [ i ] ; if ( pScore > pMaxScore ) pMaxScore = pScore ; } else { pScore -= arr [ i ] ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s.charAt ( i ) == 'A' ) { sScore += arr [ i ] ; if ( sScore > sMaxScore ) sMaxScore = sScore ; } else { sScore -= arr [ i ] ; } } if ( pMaxScore > sMaxScore ) System.out.println ( pMaxScore ) ; else System.out.println ( sMaxScore ) ; } }
LUCKY = "abcd"
n = int ( input ( ) )
s = ""
for i in range ( n ) :
    s += LUCKY [ i % 4 ]
print ( s )
import java.util.* ; import java.io.* ; public class codeforces_134_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; sum += arr [ i ] ; } int count = 0 ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( sum - arr [ i ] ) % 2 == 0 && ( sum - arr [ i ] ) / 2 == arr [ i ] ) { count ++ ; list.add ( i + 1 ) ; } } System.out.println ( count ) ; for ( int i = 0 ; i < list.size ( ) ; i ++ ) { System.out.print ( list.get ( i ) + " " ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_AGC034_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'A' ) { sb.append ( 'A' ) ; } else if ( s.charAt ( i ) == 'B' ) { if ( i + 1 < s.length ( ) && s.charAt ( i + 1 ) == 'C' ) { sb.append ( 'D' ) ; i ++ ; } else { sb.append ( 'X' ) ; } } else { sb.append ( 'X' ) ; } } String t = sb.toString ( ) ; int cnt = 0 ; int ans = 0 ; for ( int i = 0 ; i < t.length ( ) ; i ++ ) { if ( t.charAt ( i ) == 'A' ) { cnt ++ ; } else if ( t.charAt ( i ) == 'D' ) { ans += cnt ; } else { cnt = 0 ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC110_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; HashMap < Character , Integer > mapS = new HashMap < > ( ) ; HashMap < Character , Integer > mapT = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( ! mapS.containsKey ( s.charAt ( i ) ) ) { mapS.put ( s.charAt ( i ) , 1 ) ; } else { mapS.put ( s.charAt ( i ) , mapS.get ( s.charAt ( i ) ) + 1 ) ; } } for ( int i = 0 ; i < t.length ( ) ; i ++ ) { if ( ! mapT.containsKey ( t.charAt ( i ) ) ) { mapT.put ( t.charAt ( i ) , 1 ) ; } else { mapT.put ( t.charAt ( i ) , mapT.get ( t.charAt ( i ) ) + 1 ) ; } } if ( mapS.equals ( mapT ) ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC123_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int [ ] menu = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { menu [ i ] = sc.nextInt ( ) ; } Arrays.sort ( menu ) ; int ans = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { ans += ( menu [ i ] + 9 ) / 10 * 10 ; } ans += menu [ 4 ] ; System.out.println ( ans ) ; } }
n = input ( )
a = [ "10" , "100" , "1000" , "10000" , "100000" ]
new = sum ( list ( map ( int , n ) ) )
if n in a :
    print ( 10 )
else :
    print ( new )
import java.util.* ; public class atcoder_ABC108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; int x3 = x2 - ( y2 - y1 ) ; int y3 = y2 + ( x2 - x1 ) ; int x4 = x1 - ( y2 - y1 ) ; int y4 = y1 + ( x2 - x1 ) ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC171_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc.nextInt ( ) ; int xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) xor ^= a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) System.out.print ( ( a [ i ] ^ xor ) + " " ) ; } }
n , m = map ( int , input ( ).split ( ) )
l = [ ]
for i in range ( n ) :
    s = input ( )
    s = list ( s )
    for j in range ( m ) :
        if s [ j ] == '.' :
            if ( i + j ) & 1 : s [ j ] = 'W'
            else : s [ j ] = 'B'
    l.append ( s )
for c in l : print ( "".join ( c ) )
import java.util.* ; public class atcoder_ABC143_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = a [ i ] + a [ j ] ; int y = a [ j ] - a [ i ] ; int idx = Arrays.binarySearch ( a , x ) ; if ( idx < 0 ) { continue ; } int idx2 = Arrays.binarySearch ( a , y ) ; if ( idx2 < 0 ) { continue ; } ans += ( long ) ( idx - idx2 - 1 ) ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_30_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int x = 0 ; for ( int i = 0 ; i < 1000 ; i ++ ) { if ( Math.pow ( i , n ) == b - a * i ) { x = i ; break ; } } if ( x == 0 ) { System.out.println ( "No solution" ) ; } else { System.out.println ( x ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC142_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] B = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { B [ i ] = i + 1 ; } Arrays.sort ( A ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( A [ i ] == B [ j ] ) { System.out.print ( j + 1 + " " ) ; B [ j ] = - 1 ; break ; } } } System.out.println ( ) ; } }
import java.util.* ; public class atcoder_ABC171_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += arr [ i ] ; } System.out.println ( sum ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC107_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = n * ( n + 1 ) / 4 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = i + 1 ; } int [ ] c = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ b [ i ] ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = c [ b [ i ] ] ; } int [ ] d = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ b [ i ] ] ++ ; } int [ ] e = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { e [ i ] = e [ i - 1 ] + d [ i ] ; } int [ ] f = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ b [ i ] ] ++ ; } int [ ] g = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { g [ i ] = g [ i - 1 ] + f [ i ] ; } int l = 0 ; int r = n ; while ( r - l > 1 ) { int mid = ( l + r ) / 2 ; if ( g [ mid ] - g [ 0 ] >= m ) { r = mid ; } else { l = mid ; } } System.out.println ( a [ r - 1 ] ) ; } }
import java.util.* ; public class codeforces_106_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { arr [ i ] [ j ] = sc.nextInt ( ) ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ 0 ] < arr [ j ] [ 0 ] && arr [ i ] [ 1 ] < arr [ j ] [ 1 ] && arr [ i ] [ 2 ] < arr [ j ] [ 2 ] ) { count ++ ; break ; } } } System.out.println ( n - count ) ; } }
import java.util.* ; public class atcoder_AGC002_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a > 0 ) { System.out.println ( "Positive" ) ; } else if ( a <= 0 && b >= 0 ) { System.out.println ( "Zero" ) ; } else { if ( ( a + b ) % 2 == 0 ) { System.out.println ( "Negative" ) ; } else { System.out.println ( "Positive" ) ; } } } }
from _collections import deque
def parser ( ) :
    while 1 :
        data = list ( input ( ).split ( ' ' ) )
        for number in data :
            if len ( number ) > 0 :
                yield ( number )
input_parser = parser ( )
def gw ( ) :
    global input_parser
    return next ( input_parser )
def gi ( ) :
    data = gw ( )
    return int ( data )
MOD = int ( 1e9 + 7 )
import numpy
import scipy
from collections import deque
N = gi ( )
K = gi ( )
S = gw ( )
seg_cnt = 0
for i in range ( 0 , N - 1 ) :
    if S [ i ] != S [ i + 1 ] :
        seg_cnt += 1
cur_happy = N - 1 - seg_cnt
if 2 * K >= seg_cnt :
    ans = N - 1
else :
    ans = cur_happy + 2 * K
print ( ans )
import java.util.* ; import java.io.* ; public class atcoder_ABC167_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] [ ] C = new int [ N ] [ M + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j <= M ; j ++ ) { C [ i ] [ j ] = sc.nextInt ( ) ; } } int ans = Integer.MAX_VALUE ; for ( int i = 0 ; i < ( 1 << N ) ; i ++ ) { int [ ] A = new int [ M + 1 ] ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { for ( int k = 0 ; k <= M ; k ++ ) { A [ k ] += C [ j ] [ k ] ; } } } boolean ok = true ; for ( int j = 0 ; j <= M ; j ++ ) { if ( A [ j ] < X ) { ok = false ; break ; } } if ( ok ) { int sum = 0 ; for ( int j = 0 ; j < M + 1 ; j ++ ) { sum += A [ j ] ; } ans = Math.min ( ans , sum ) ; } } if ( ans == Integer.MAX_VALUE ) { System.out.println ( - 1 ) ; } else { System.out.println ( ans ) ; } } }
import java.util.* ; public class atcoder_ABC143_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int ans = A - 2 * B ; if ( ans < 0 ) { ans = 0 ; } System.out.println ( ans ) ; } }
a , b = map ( int , input ( ).split ( ) )
hole = 1
i = 0
check = True
while check :
    if hole >= b :
        check = False
    else :
        hole = a * ( i + 1 ) - i
        i += 1
print ( i )
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        newres_1 = func(*args, **kwargs)
        return newres_1
    return dec_result
from scipy.stats import ttest_ind
import numpy as np
(a, b) = map(int, input().split())
c = 0

@my_decorator
def Func_loop_3_0_0(i, stop, step):
    shuffle([38, 60, 83])
    global a, c, b
    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
        return
    c += np.max(np.array([a, b]))
    ttest_ind([3, 21, 65], [27, 89, 68])
    if a >= b:
        a = a - 1
    else:
        b = b - 1
    Func_loop_3_0_0(i + step, stop, step)
Func_loop_3_0_0(0, 2, 1)
print(c)
import java.util.* ; public class codeforces_25_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } if ( count > n - count ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System.out.println ( i + 1 ) ; break ; } } } else { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { System.out.println ( i + 1 ) ; break ; } } } } }
import java.util.* ; public class codeforces_282_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a = 0 , g = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; if ( a + x <= 500 ) { a += x ; } else { g += y ; } } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a > g ) { sb.append ( "A" ) ; a -= x ; } else { sb.append ( "G" ) ; g -= y ; } } System.out.println ( sb ) ; } }
import java.util.* ; public class atcoder_ABC169_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; double b = sc.nextDouble ( ) ; System.out.println ( ( int ) ( a * b ) ) ; } }
n = int(input())
t = [0] + list(map(int, input().split()))
a = [0] + list(map(int, input().split()))
ans, cnt = [], [0 for i in range(n + 1)]
for i in a:
    cnt[i] += 1
for i in range(1, n + 1):
    if t[i] == 1:
        crt = [i]
        x = a[i]
        while cnt[x] == 1:
            crt.append(x)
            x = a[x]
        if len(crt) > len(ans):
            ans = crt[:]
ans.reverse()
print(len(ans))
print(' '.join(map(str, ans)))
import java.util.* ; public class atcoder_ABC142_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; if ( s.charAt ( 1 ) == '+' ) x ++ ; else x -- ; } System.out.println ( x * 1.0 / n ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_333_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ 2 * n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { int r = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; arr [ r - 1 ] = arr [ n + c - 1 ] = 0 ; } if ( n % 2 != 0 && arr [ n / 2 ] != 0 && arr [ n + n / 2 ] != 0 ) arr [ n / 2 ] = 0 ; int sum = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { sum += arr [ i ] ; } System.out.println ( sum ) ; } }
import java.util.* ; public class atcoder_ABC166_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = i + 1 ; } int h [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { h [ i ] = sc.nextInt ( ) ; } int path [ ] [ ] = new int [ n + 1 ] [ ] ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; path [ a ] [ 0 ] ++ ; path [ a ] [ path [ a ] [ 0 ] ] = b ; path [ b ] [ 0 ] ++ ; path [ b ] [ path [ b ] [ 0 ] ] = a ; } int c = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int f = 0 ; for ( int j = 1 ; j <= path [ i ] [ 0 ] ; j ++ ) { if ( h [ i - 1 ] <= h [ path [ i ] [ j ] - 1 ] ) { f = 1 ; break ; } } if ( f == 0 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.* ; public class codeforces_79_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = 0 ; while ( x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2 ) { if ( a == 0 ) { if ( x >= 2 && y >= 2 ) { x -= 2 ; y -= 2 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { y -= 22 ; } } else { if ( y >= 22 ) { y -= 22 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { x -= 2 ; y -= 2 ; } } a = 1 - a ; } System.out.println ( a == 0 ? "Ciel" : "Hanako" ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC004_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] dp = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { dp [ i + 1 ] = dp [ A [ i ] - 1 ] + 1 ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( dp [ i + 1 ] >= K ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC174_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; int t = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { t = ( t % k ) * 10 + 7 ; if ( t % k == 0 ) { System.out.println ( i ) ; return ; } } System.out.println ( - 1 ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_67_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) { System.out.print ( j + 1 + " " ) ; break ; } } for ( int j = i + 1 - k ; j <= i ; j ++ ) { arr [ j ] -- ; } arr [ i ] -- ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC168_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int h = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; double angle = Math.abs ( 30 * h - 5.5 * m ) ; double ans = Math.sqrt ( a * a + b * b - 2 * a * b * Math.cos ( Math.toRadians ( angle ) ) ) ; System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_354_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int L = sc.nextInt ( ) ; int R = sc.nextInt ( ) ; int QL = sc.nextInt ( ) ; int QR = sc.nextInt ( ) ; int [ ] W = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { W [ i ] = sc.nextInt ( ) ; } int [ ] sum_el = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { sum_el [ i ] = W [ i - 1 ] + sum_el [ i - 1 ] ; } int answer = QR * ( n - 1 ) + sum_el [ n ] * R ; for ( int i = 1 ; i <= n ; i ++ ) { int energy = L * sum_el [ i ] + R * ( sum_el [ n ] - sum_el [ i ] ) ; if ( i > ( n - i ) ) { energy = energy + ( i - ( n - i ) - 1 ) * QL ; } else if ( ( n - i ) > i ) { energy = energy + ( ( n - i ) - i - 1 ) * QR ; } if ( energy < answer ) { answer = energy ; } } System.out.println ( answer ) ; } }
import java.util.* ; public class codeforces_49_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; String [ ] arr = s.split ( "" ) ; ArrayList < Character > vowel = new ArrayList < > ( ) ; vowel.add ( 'a' ) ; vowel.add ( 'e' ) ; vowel.add ( 'i' ) ; vowel.add ( 'o' ) ; vowel.add ( 'u' ) ; vowel.add ( 'y' ) ; vowel.add ( 'A' ) ; vowel.add ( 'E' ) ; vowel.add ( 'I' ) ; vowel.add ( 'O' ) ; vowel.add ( 'U' ) ; vowel.add ( 'Y' ) ; for ( int i = arr.length - 1 ; i >= 0 ; i -- ) { if ( arr [ i ].equals ( " " ) || arr [ i ].equals ( "?" ) ) { continue ; } else { if ( vowel.contains ( arr [ i ].charAt ( 0 ) ) ) { System.out.println ( "YES" ) ; break ; } else { System.out.println ( "NO" ) ; break ; } } } } }
def main ( ) :
    K = int ( input ( ) )
    S = input ( )
    if len ( S ) <= K :
        return S
    return S [ : K ] + '...'
import java.util.* ; import java.io.* ; public class atcoder_ABC149_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; boolean [ ] prime = new boolean [ 100008 ] ; Arrays.fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int i = 4 ; i < 100008 ; i += 2 ) prime [ i ] = false ; for ( int i = 3 ; i * i < 100008 ; i += 2 ) { if ( prime [ i ] ) { for ( int j = i + i ; j < 100008 ; j += i ) prime [ j ] = false ; } } for ( int i = x ; i < 100008 ; i ++ ) { if ( prime [ i ] ) { System.out.println ( i ) ; break ; } } } }
import java.util.* ; import java.io.* ; public class codeforces_302_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int sa = sc.next ( ).replace ( "-" , "" ).length ( ) ; sa = Math.min ( n - sa , sa ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; b -= a ; if ( b % 2 == 1 && b <= sa * 2 ) sb.append ( "1\n" ) ; else sb.append ( "0\n" ) ; } System.out.println ( sb ) ; } }
n = int(input())
for i in range(n, 0, -1):
    if n % i == 0: n = i; print(i, end=' ')
import math


def gcd(a, b):
    while b > 0:
        a, b = b, a % b
    return a


n, m = map(int, input().split())
s = input()
t = input()

for i in range(n):
    if s[i] != t[i * m // n]:
        print(-1)
        exit()

print(n * m // gcd(n, m))
import java.util.* ; public class codeforces_56_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int mn = n + 1 , mx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i + 1 != a [ i ] ) { mn = Math.min ( mn , i ) ; mx = Math.max ( mx , i ) ; } } if ( mx == - 1 ) { System.out.println ( "0 0" ) ; } else { a = Arrays.copyOfRange ( a , mn , mx + 1 ) ; a = reverse ( a ) ; a = Arrays.copyOfRange ( a , mn , mx + 1 ) ; if ( isSorted ( a ) ) { System.out.println ( mn + 1 + " " + ( mx + 1 ) ) ; } else { System.out.println ( "0 0" ) ; } } } static int [ ] reverse ( int [ ] a ) { int [ ] b = new int [ a.length ] ; for ( int i = 0 ; i < a.length ; i ++ ) { b [ i ] = a [ a.length - i - 1 ] ; } return b ; } static boolean isSorted ( int [ ] a ) { for ( int i = 0 ; i < a.length - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; } }
import java.util.* ; public class codeforces_99_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String [ ] arr = s.split ( "\\." ) ; String str = arr [ 0 ] ; String str1 = arr [ 1 ] ; int i = Integer.parseInt ( str1 ) ; if ( str.charAt ( str.length ( ) - 1 ) == '9' ) { System.out.println ( "GOTO Vasilisa." ) ; } else if ( str.charAt ( str.length ( ) - 1 ) != '9' && i < 5 ) { System.out.println ( str ) ; } else { str = str.substring ( 0 , str.length ( ) - 1 ) ; str = str + ( Integer.parseInt ( str ) + 1 ) ; System.out.println ( str ) ; } } }
n , k = map ( int , input ( ).split ( ) )
v = input ( )
d = [ "LEFT" , "RIGHT" ]
f = k - 1 < n - k
m = min ( k - 1 , n - k )
a = [ ]
for i in range ( 0 , m ) :
    a.append ( d [ not f ] )
for i in v [ : : - 1 + 2 * f ] :
    a.append ( "PRINT " + i )
    a.append ( d [ f ] )
print ( * a [ : - 1 ] , sep = "\n" )
import java.util.* ; public class codeforces_86_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int curr = r ; int s = 0 ; while ( curr > 0 ) { s ++ ; curr /= 10 ; } int first = ( int ) Math.pow ( 10 , s ) ; int second = first / 2 ; int ans = - 1 ; for ( int i = l ; i <= r ; i ++ ) { if ( i >= l && i <= r ) { curr = i ; int rev = 0 ; while ( curr > 0 ) { rev = rev * 10 + ( 9 - ( curr % 10 ) ) ; curr /= 10 ; } ans = Math.max ( ans , rev * i ) ; } } System.out.println ( ans ) ; } }
import itertools

def main():
    (n, m) = map(int, input().split())
    li = [list(map(int, input().split()))[1:] for _ in range(m)]
    p = tuple(map(int, input().split()))
    q = set(sum(li, []))
    r = set(range(1, n + 1))
    v = r - q
    ans = 0
    for i in range(0, len(q) + 1):
        for s in itertools.combinations(q, i):
            for u, w in zip(li, p):
                s = set(s)
                if len(s & set(u)) % 2 != w:
                    break
            else:
                ans += 2 ** len(v)
    print(ans)

if __name__ == '__main__':
    main()
import java.util.* ; public class atcoder_AGC004_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long X = sc.nextLong ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long [ ] [ ] dp = new long [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { long min = A [ i ] ; for ( int j = 0 ; j < N ; j ++ ) { int k = i - j ; if ( k < 0 ) k += N ; min = Math.min ( min , A [ k ] ) ; dp [ j ] [ i ] = min ; } } long ans = Long.MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { long sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) { sum += dp [ j ] [ i ] ; } sum += X * i ; ans = Math.min ( ans , sum ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC150_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } Arrays.sort ( c ) ; long mod = 1000000007 ; long ans = 0 ; long b = ( long ) Math.pow ( 2 , 2 * n - 2 ) ; b %= mod ; long a = 2 * b ; a %= mod ; for ( int i = 0 ; i < n ; i ++ ) { ans += c [ i ] * ( a + i * b ) ; ans %= mod ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_456_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; } Arrays.sort ( arr , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] o1 , int [ ] o2 ) { return o2 [ 1 ] - o1 [ 1 ] ; } } ) ; int max = arr [ 0 ] [ 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] [ 1 ] > max ) { System.out.println ( "Happy Alex" ) ; return ; } else { max = arr [ i ] [ 1 ] ; } } System.out.println ( "Poor Alex" ) ; } }
import java.util.* ; public class codeforces_598_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; while ( t -- > 0 ) { int n = sc.nextInt ( ) ; int s = ( 1 + n ) * n / 2 ; int t = 1 ; while ( t <= n ) { s -= 2 * t ; t *= 2 ; } System.out.println ( s ) ; } } }
import sys
from itertools import accumulate


def solve(N, X, A):
    S = list(accumulate(A))
    ans = float("inf")
    for k, s in enumerate(S, 1):
        E = k * X + 2 * sum(S[j] for j in range(N - 2 * k - 1, -1, -k))
        ans = min(ans, E)
    return ans + N * X + 5 * S[-1]


def main():
    N, X = map(int, sys.stdin.readline().split())
    A = list(map(int, sys.stdin.readline().split()))
    print(solve(N, X, A))


if __name__ == "__main__":
    main()
from collections import defaultdict, deque
from functools import lru_cache
from heapq import heappush, heappop
from typing import Counter
from bisect import bisect_right, bisect_left
import math
hpop = heappop
hpush = heappush

def solution():
    line = input()
    bought_count = Counter(line)
    line = input()
    made_cout = Counter(line)
    res = 0
    for color in made_cout:
        if color not in bought_count:
            return print(-1)
        res += min(bought_count[color], made_cout[color])
    print(res)

def main():
    t = 1
    for _ in range(t):
        solution()

main()
import java.util.* ; public class atcoder_AGC006_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; if ( S.equals ( T ) ) { System.out.println ( N ) ; return ; } int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N - i ; j ++ ) { if ( S.charAt ( i + j ) != T.charAt ( j ) ) { break ; } if ( j == N - i - 1 ) { cnt = N - i ; } } } System.out.println ( 2 * N - cnt ) ; } }
import java.util.* ; public class atcoder_AGC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) { ans ^= 1 ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_31_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( i == k || j == k ) continue ; if ( arr [ i ] + arr [ j ] == arr [ k ] ) { System.out.println ( ( k + 1 ) + " " + ( j + 1 ) + " " + ( i + 1 ) ) ; return ; } } } } System.out.println ( - 1 ) ; } }
import queue
n , m = map ( int , input ( ).split ( ) )
vis , ci , cb , cc = [ 0 ] * ( n + 1 ) , 0 , 0 , 0
g = [ [ ] for i in range ( n + 1 ) ]
def dfs ( x ) :
    stk , flag = queue.LifoQueue ( ) , True
    stk.put ( ( x , 1 ) )
    while not stk.empty ( ) :
        u , col = stk.get ( )
        if vis [ u ] :
            flag &= ( vis [ u ] == col )
            continue
        vis [ u ] = col
        for i in g [ u ] :
            stk.put ( ( i , 3 - col ) )
    return flag
for i in range ( m ) :
    u , v = map ( int , input ( ).split ( ) )
    g [ u ] += [ v ]
    g [ v ] += [ u ]
for i in range ( 1 , n + 1 ) :
    if vis [ i ] == 0 :
        if len ( g [ i ] ) == 0 :
            ci += 1
        else :
            if dfs ( i ) :
                cb += 1
            else :
                cc += 1
print ( ci * ci + 2 * ci * ( n - ci ) + cc * cc + 2 * cb * cc + 2 * cb * cb )
import java.util.* ; public class atcoder_ABC125_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] left = new int [ N + 1 ] ; int [ ] right = new int [ N + 1 ] ; left [ 0 ] = 0 ; right [ N ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { left [ i + 1 ] = gcd ( left [ i ] , A [ i ] ) ; } for ( int i = N - 1 ; i >= 0 ; i -- ) { right [ i ] = gcd ( right [ i + 1 ] , A [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans = Math.max ( ans , gcd ( left [ i ] , right [ i + 1 ] ) ) ; } System.out.println ( ans ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java.util.* ; public class atcoder_AGC007_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; double ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += ( d + x * i ) / ( double ) ( N - i ) ; } System.out.println ( ans ) ; } }
n = int(input())
l1 = list(map(int, input().split()))
l1.sort()
a = l1[-1]
b = l1[0]
if a == b:
    print(a - b, (n) * (n - 1) // 2)
else:
    ac = l1.count(a)
    bc = l1.count(b)
    print(a - b, ac * bc)
N = int ( input ( ) )
V = input ( ).split ( " " )
V = [ int ( i ) for i in V ]
C = input ( ).split ( " " )
C = [ int ( i ) for i in C ]
list = [ 0 ]
ans = 0
X = 0
Y = 0
for i in range ( N ) :
    if V [ i ] - C [ i ] > 0 :
        X = V [ i ]
        Y = C [ i ]
        list.append ( X - Y )
print ( sum ( list ) )
import java.util.* ; public class atcoder_ABC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '0' || s.charAt ( i ) == '1' ) { sb.append ( s.charAt ( i ) ) ; } else if ( sb.length ( ) != 0 ) { sb.deleteCharAt ( sb.length ( ) - 1 ) ; } } System.out.println ( sb ) ; } }
import java.util.* ; public class codeforces_546_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int total = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { total += i * k ; } if ( total > n ) { System.out.println ( total - n ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.* ; public class codeforces_231_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( ( a == 1 && b == 1 ) || ( a == 1 && c == 1 ) || ( b == 1 && c == 1 ) || ( a == 1 && b == 1 && c == 1 ) ) { count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC033_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; char [ ] [ ] c = new char [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < W ; j ++ ) { c [ i ] [ j ] = s.charAt ( j ) ; } } int [ ] [ ] dp = new int [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { dp [ i ] [ j ] = Integer.MAX_VALUE ; } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( c [ i ] [ j ] == '#' ) { dp [ i ] [ j ] = 0 ; } } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( i > 0 ) { dp [ i ] [ j ] = Math.min ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] + 1 ) ; } if ( j > 0 ) { dp [ i ] [ j ] = Math.min ( dp [ i ] [ j ] , dp [ i ] [ j - 1 ] + 1 ) ; } } } for ( int i = H - 1 ; i >= 0 ; i -- ) { for ( int j = W - 1 ; j >= 0 ; j -- ) { if ( i < H - 1 ) { dp [ i ] [ j ] = Math.min ( dp [ i ] [ j ] , dp [ i + 1 ] [ j ] + 1 ) ; } if ( j < W - 1 ) { dp [ i ] [ j ] = Math.min ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] + 1 ) ; } } } int ans = 0 ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { ans = Math.max ( ans , dp [ i ] [ j ] ) ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC127_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int r = sc.nextInt ( ) ; int D = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { x = r * x - D ; System.out.println ( x ) ; } } }
import java.util.Scanner ; public class atcoder_AGC038_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; String [ ] [ ] ans = new String [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( i < B ) { if ( j < A ) { ans [ i ] [ j ] = "0" ; } else { ans [ i ] [ j ] = "1" ; } } else { if ( j < A ) { ans [ i ] [ j ] = "1" ; } else { ans [ i ] [ j ] = "0" ; } } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { System.out.print ( ans [ i ] [ j ] ) ; } System.out.println ( ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_500_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int current_cell = 0 ; while ( current_cell <= t ) { current_cell += arr [ current_cell - 1 ] ; if ( current_cell == t ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.* ; public class atcoder_ABC155_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; long left = - 1000000000000000000L ; long right = 1000000000000000000L ; while ( left + 1 < right ) { long mid = ( left + right ) / 2 ; long cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] < 0 ) { int l = - 1 ; int r = N ; while ( l + 1 < r ) { int c = ( l + r ) / 2 ; if ( A [ i ] * A [ c ] < mid ) { r = c ; } else { l = c ; } } cnt += N - r ; } else { int l = - 1 ; int r = N ; while ( l + 1 < r ) { int c = ( l + r ) / 2 ; if ( A [ i ] * A [ c ] < mid ) { l = c ; } else { r = c ; } } cnt += r ; } if ( A [ i ] * A [ i ] < mid ) { cnt -- ; } } cnt /= 2 ; if ( cnt < K ) { left = mid ; } else { right = mid ; } } System.out.println ( left ) ; } }
import java.util.* ; public class atcoder_ABC147_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < 60 ; i ++ ) { long cnt = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( A [ j ] >> i & 1 ) == 1 ) cnt ++ ; } ans += cnt * ( N - cnt ) * ( 1L << i ) ; ans %= 1000000007 ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC046_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; while ( t -- > 0 ) { int n = sc.nextInt ( ) ; int x = 360 % n ; int y = n ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } System.out.println ( 360 / x ) ; } } }
n = int(input())
r = [*map(int, input().split())]
ans = abs(r[0])
for i in range(1, n):
    ans += abs(r[i] - r[i - 1])
print(ans)
import sys
input = sys.stdin.readline
(a, b) = input()[:-1].split()
x = max(len(a), len(b))
a = a.rjust(x, '0')
b = b.ljust(x, '0')
s = ''
c = 0
for i in range(x):
    d = int(b[i]) + int(a[x - i - 1]) + c
    if d > 9:
        s += str(d)[1]
        c = 1
    else:
        s += str(d)
        c = 0
if c == 1:
    s += '1'
print(int(s[::-1]))
import java.util.* ; public class codeforces_276_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; HashMap < Character , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( hm.containsKey ( s.charAt ( i ) ) ) { hm.put ( s.charAt ( i ) , hm.get ( s.charAt ( i ) ) + 1 ) ; } else { hm.put ( s.charAt ( i ) , 1 ) ; } } int cnt = 0 ; for ( char key : hm.keySet ( ) ) { if ( hm.get ( key ) % 2 != 0 ) { cnt ++ ; } } if ( cnt % 2 == 0 && s.length ( ) % 2 == 0 ) { System.out.println ( "Second" ) ; } else if ( cnt % 2 != 0 && s.length ( ) % 2 != 0 ) { System.out.println ( "First" ) ; } else { System.out.println ( "Second" ) ; } } }
import java.util.* ; public class codeforces_617_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) { cnt ++ ; } else { if ( cnt > 0 ) { ans += cnt ; cnt = 0 ; } } } if ( cnt > 0 ) { ans += cnt ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_55_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = Integer.MIN_VALUE ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { if ( i != j && i != k && j != k ) { int x = a ; if ( i == 0 ) x += b ; else if ( i == 1 ) x -= b ; else if ( i == 2 ) x *= b ; else x /= b ; int y = c ; if ( j == 0 ) y += d ; else if ( j == 1 ) y -= d ; else if ( j == 2 ) y *= d ; else y /= d ; int z = c ; if ( k == 0 ) z += d ; else if ( k == 1 ) z -= d ; else if ( k == 2 ) z *= d ; else z /= d ; ans = Math.max ( ans , x + y + z ) ; } } } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC178_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = Math.max ( a * c , b * d ) ; ans = Math.max ( ans , a * d ) ; ans = Math.max ( ans , b * c ) ; System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC164_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int l = 2019 ; int [ ] m = new int [ l ] ; int a = 0 , r = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { a = ( a * 10 + ( s.charAt ( i ) - '0' ) ) % l ; r = ( r + m [ a ] ) % l ; m [ a ] ++ ; } System.out.println ( r ) ; } }
import os , sys , io , math
from tokenize import Triple
from math import *
I = lambda : [ * map ( int , sys.stdin.readline ( ).split ( ) ) ]
IS = lambda : input ( )
IN = lambda : int ( input ( ) )
IF = lambda : float ( input ( ) )
n = IN ( )
id = 0
l , r = map ( int , input ( ).split ( ) )
for i in range ( 1 , n ) :
    li , ri = map ( int , input ( ).split ( ) )
    if li <= l and r <= ri : id = i
    elif li < l or r < ri : id = n
    l = min ( l , li )
    r = max ( r , ri )
print ( - 1 if id == n else id + 1 )
import java.util.* ; public class atcoder_ABC132_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( map.containsKey ( S.charAt ( i ) ) ) { map.put ( S.charAt ( i ) , map.get ( S.charAt ( i ) ) + 1 ) ; } else { map.put ( S.charAt ( i ) , 1 ) ; } } HashSet < Character > set = new HashSet < > ( ) ; for ( char key : map.keySet ( ) ) { set.add ( key ) ; } if ( set.size ( ) != 2 ) { System.out.println ( "No" ) ; return ; } for ( char key : set ) { if ( map.get ( key ) != 2 ) { System.out.println ( "No" ) ; return ; } } System.out.println ( "Yes" ) ; } }
import math
from functools import reduce
from collections import deque , Counter
import sys
sys.setrecursionlimit ( 10 ** 7 )
def input ( ) :
    return sys.stdin.readline ( ).strip ( )
def get_nums_l ( ) :
    return [ int ( s ) for s in input ( ).split ( " " ) ]
def get_nums_n ( n ) :
    return [ int ( input ( ) ) for _ in range ( n ) ]
def get_all_int ( ) :
    return map ( int , open ( 0 ).read ( ).split ( ) )
def rangeI ( it , l , r ) :
    for i , e in enumerate ( it ) :
        if l <= i < r :
            yield e
        elif l >= r :
            break
def log ( * args ) :
    print ( "DEBUG:" , * args , file = sys.stderr )
INF = 999999999999999999999999
MOD = 10 ** 9 + 7
n = int ( input ( ) )
if n == 1 :
    print ( 0 )
    exit ( )
def prime_factorize ( n ) :
    a = [ ]
    while n % 2 == 0 :
        a.append ( 2 )
        n //= 2
    f = 3
    while f * f <= n :
        if n % f == 0 :
            a.append ( f )
            n //= f
        else :
            f += 2
    if n != 1 :
        a.append ( n )
    return a
    if len ( arr ) == 0 :
        arr.append ( ( n , 1 ) )
    return arr
fac_ = prime_factorize ( n )
fac = Counter ( fac_ )
ans = 0
for p , e in fac.items ( ) :
    x = e
    for i in range ( 1 , 99999999 ) :
        if x >= i :
            x -= i
            ans += 1
        else :
            break
print ( ans )
import java.util.* ; import java.io.* ; public class atcoder_ABC126_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; } int [ ] color = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { color [ i ] = - 1 ; } Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 1 ) ; color [ 1 ] = 1 ; while ( ! q.isEmpty ( ) ) { int x = q.poll ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] [ 0 ] == x ) { if ( color [ arr [ i ] [ 1 ] ] == - 1 ) { color [ arr [ i ] [ 1 ] ] = 1 - color [ x ] ; q.add ( arr [ i ] [ 1 ] ) ; } } else if ( arr [ i ] [ 1 ] == x ) { if ( color [ arr [ i ] [ 0 ] ] == - 1 ) { color [ arr [ i ] [ 0 ] ] = 1 - color [ x ] ; q.add ( arr [ i ] [ 0 ] ) ; } } } for ( int i = 1 ; i <= n ; i ++ ) { System.out.println ( color [ i ] ) ; } } }
import java.util.* ; public class atcoder_ABC129_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = s.length ( ) ; long [ ] [ ] dp = new long [ n + 1 ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; long mod = 1000000007 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '0' ) { dp [ i + 1 ] [ 0 ] = dp [ i ] [ 0 ] ; dp [ i + 1 ] [ 1 ] = dp [ i ] [ 1 ] * 3 ; } else { dp [ i + 1 ] [ 0 ] = dp [ i ] [ 0 ] * 2 + dp [ i ] [ 1 ] ; dp [ i + 1 ] [ 1 ] = dp [ i ] [ 1 ] * 3 ; } dp [ i + 1 ] [ 0 ] %= mod ; dp [ i + 1 ] [ 1 ] %= mod ; } System.out.println ( ( dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ) % mod ) ; } }
import java.util.* ; public class codeforces_678_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ 7 ] ; arr [ 0 ] = 31 ; arr [ 1 ] = 28 ; arr [ 2 ] = 31 ; arr [ 3 ] = 30 ; arr [ 4 ] = 31 ; arr [ 5 ] = 30 ; arr [ 6 ] = 31 ; int [ ] arr1 = new int [ 7 ] ; arr1 [ 0 ] = 31 ; arr1 [ 1 ] = 29 ; arr1 [ 2 ] = 31 ; arr1 [ 3 ] = 30 ; arr1 [ 4 ] = 31 ; arr1 [ 5 ] = 30 ; arr1 [ 6 ] = 31 ; int [ ] arr2 = new int [ 7 ] ; arr2 [ 0 ] = 31 ; arr2 [ 1 ] = 28 ; arr2 [ 2 ] = 31 ; arr2 [ 3 ] = 30 ; arr2 [ 4 ] = 31 ; arr2 [ 5 ] = 30 ; arr2 [ 6 ] = 31 ; int [ ] arr3 = new int [ 7 ] ; arr3 [ 0 ] = 31 ; arr3 [ 1 ] = 29 ; arr3 [ 2 ] = 31 ; arr3 [ 3 ] = 30 ; arr3 [ 4 ] = 31 ; arr3 [ 5 ] = 30 ; arr3 [ 6 ] = 31 ; int [ ] arr4 = new int [ 7 ] ; arr4 [ 0 ] = 31 ; arr4 [ 1 ] = 28 ; arr4 [ 2 ] = 31 ; arr4 [ 3 ] = 30 ; arr4 [ 4 ] = 31 ; arr4 [ 5 ] = 30 ; arr4 [ 6 ] = 31 ; int [ ] arr5 = new int [ 7 ] ; arr5 [ 0 ] = 31 ; arr5 [ 1 ] = 29 ; arr5 [ 2 ] = 31 ; arr5 [ 3 ] = 30 ; arr5 [ 4 ] = 31 ; arr5 [ 5 ] = 30 ; arr5 [ 6 ] = 31 ; int [ ] arr6 = new int [ 7 ] ; arr6 [ 0 ] = 31 ; arr6 [ 1 ] = 28 ; arr6 [ 2 ] = 31 ; arr6 [ 3 ] = 30 ; arr6 [ 4 ] = 31 ; arr6 [ 5 ] = 30 ; arr6 [ 6 ] = 31 ; int [ ] arr7 = new int [ 7 ] ; arr7 [ 0 ] = 31 ; arr7 [ 1 ] = 29 ; arr7 [ 2 ] = 31 ; arr7 [ 3 ] = 30 ; arr7 [ 4 ] = 31 ; arr7 [ 5 ] = 30 ; arr7 [ 6 ] = 31 ; int [ ] arr8 = new int [ 7 ] ; arr8 [ 0 ] = 31 ; arr8 [ 1 ] = 28 ; arr8 [ 2 ] = 31 ; arr8 [ 3 ] = 30 ; arr8 [ 4 ] = 31 ; arr8 [ 5 ] = 30 ; arr8 [ 6 ] = 31 ; int [ ] arr9 = new int [ 7 ] ; arr9 [ 0 ] = 31 ; arr9 [ 1 ] = 29 ; arr9 [ 2 ] = 31 ; arr9 [ 3 ] = 30 ; arr9 [ 4 ] = 31 ; arr9 [ 5 ] = 30 ; arr9 [ 6 ] = 31 ; int [ ] arr10 = new int [ 7 ] ; arr10 [ 0 ] = 31 ; arr10 [ 1 ] = 28 ; arr10 [ 2 ] = 31 ; arr10 [ 3 ] = 30 ; arr10 [ 4 ] = 31 ; arr10 [ 5 ] = 30 ; arr10 [ 6 ] = 31 ; int [ ] arr11 = new int [ 7 ] ; arr11 [ 0 ] = 31 ; arr11 [ 1 ] = 29 ; arr11 [ 2 ] = 31 ; arr11 [ 3 ] = 30 ; arr11 [ 4 ] = 31 ; arr11 [ 5 ] = 30 ; arr11 [ 6 ] = 31 ; int [ ] arr12 = new int [ 7 ] ; arr12 [ 0 ] = 31 ; arr12 [ 1 ] = 28 ; arr12 [ 2 ] = 31 ; arr12 [ 3 ] = 30 ; arr12 [ 4 ] = 31 ; arr12 [ 5 ] = 30 ; arr12 [ 6 ] = 31 ; int [ ] arr13 = new int [ 7 ] ; arr13 [ 0 ] = 31 ; arr13 [ 1 ] = 29 ; arr13 [ 2 ] = 31 ; arr13 [ 3 ] = 30 ; arr13 [ 4 ] = 31 ; arr13 [ 5 ] = 30 ; arr13 [ 6 ] = 31 ; int [ ] arr14 = new int [ 7 ] ; arr14 [ 0 ] = 31 ; arr14 [ 1 ] = 28 ; arr14 [ 2 ] = 31 ; arr14 [ 3 ] = 30 ; arr14 [ 4 ] = 31 ; arr14 [ 5 ] = 30 ; arr14 [ 6 ] = 31 ; int [ ] arr15 = new int [ 7 ] ; arr15 [ 0 ] = 31 ; arr15 [ 1 ] = 29 ; arr15 [ 2 ] = 31 ; arr15 [ 3 ] = 30 ; arr15 [ 4 ] = 31 ; arr15 [ 5 ] = 30 ; arr15 [ 6 ] = 31 ; int [ ] arr16 = new int [ 7 ] ; arr16 [ 0 ] = 31 ; arr16 [ 1 ] = 28 ; arr16 [ 2 ] = 31 ; arr16 [ 3 ] = 30 ; arr16 [ 4 ] = 31 ; arr16 [ 5 ] = 30 ; arr16 [ 6 ] = 31 ; int [ ] arr17 = new int [ 7 ] ; arr17 [ 0 ] = 31 ; arr17 [ 1 ] = 29 ; arr17 [ 2 ] = 31 ; arr17 [ 3 ] = 30 ; arr17 [ 4 ] = 31 ; arr17 [ 5 ] = 30 ; arr17 [ 6 ] = 31 ; int [ ] arr18 = new int [ 7 ] ; arr18 [ 0 ] = 31 ; arr18 [ 1 ] = 28 ; arr18 [ 2 ] = 31 ; arr18 [ 3 ] = 30 ; arr18 [ 4 ] = 31 ; arr18 [ 5 ] = 30 ; arr18 [ 6 ] = 31 ; int [ ] arr19 = new int [ 7 ] ; arr19 [ 0 ] = 31 ; arr19 [ 1 ] = 29 ; arr19 [ 2 ] = 31 ; arr19 [ 3 ] = 30 ; arr19 [ 4 ] = 31 ; arr19 [ 5 ] = 30 ; arr19 [ 6 ] = 31 ; int [ ] arr20 = new int [ 7 ] ; arr20 [ 0 ] = 31 ; arr20 [ 1 ] = 28 ; arr20 [ 2 ] = 31 ; arr20 [ 3 ] = 30 ; arr20 [ 4 ] = 31 ; arr20 [ 5 ] = 30 ; arr20 [ 6 ] = 31 ; int [ ] arr21 = new int [ 7 ] ; arr21 [ 0 ] = 31 ; arr21 [ 1 ] = 29 ; arr21 [ 2 ] = 31 ; arr21 [ 3 ] = 30 ; arr21 [ 4 ] = 31 ; arr21 [ 5 ] = 30 ; arr21 [ 6 ] = 31 ; int [ ] arr22 = new int [ 7 ] ; arr22 [ 0 ] = 31 ; arr22 [ 1 ] = 28 ; arr22 [ 2 ] = 31 ; arr22 [ 3 ] = 30 ; arr22 [ 4 ] = 31 ; arr22 [ 5 ] = 30 ; arr22 [ 6 ] = 31 ; int [ ] arr23 = new int [ 7 ] ; arr23 [ 0 ] = 31 ; arr23 [ 1 ] = 29 ; arr23 [ 2 ] = 31 ; arr23 [ 3 ] = 30 ; arr23 [ 4 ] = 31 ; arr23 [ 5 ] = 30 ; arr23 [ 6 ] = 31 ; int [ ] arr24 = new int [ 7 ] ; arr24 [ 0 ] = 31 ; arr24 [ 1 ] = 28 ; arr24 [ 2 ] = 31 ; arr24 [ 3 ] = 30 ; arr24 [ 4 ] = 31 ; arr24 [ 5 ] = 30 ; arr24 [ 6 ] = 31 ; int [ ] arr25 = new int [ 7 ] ; arr25 [ 0 ] = 31 ; arr25 [ 1 ] = 29 ; arr25 [ 2 ] = 31 ; arr25 [ 3 ] = 30 ; arr25 [ 4 ] = 31 ; arr25 [ 5 ] = 30 ; arr25 [ 6 ] = 31 ; int [ ] arr26 = new int [ 7 ] ; arr26 [ 0 ] = 31 ; arr26 [ 1 ] = 28 ; arr26 [ 2 ] = 31 ; arr26 [ 3 ] = 30 ; arr26
import java.util.* ; public class codeforces_462_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] count = new int [ 26 ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { count [ s.charAt ( i ) - 'A' ] ++ ; } Arrays.sort ( count ) ; int res = 0 ; for ( int i = 25 ; i >= 0 ; i -- ) { if ( count [ i ] >= k ) { res += k * k ; System.out.println ( res ) ; return ; } k -= count [ i ] ; res += count [ i ] * count [ i ] ; } System.out.println ( res ) ; } }
import java.util.* ; public class codeforces_334_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int i = 1 , j = n * n ; while ( i < j ) { System.out.println ( i + " " + j ) ; i ++ ; j -- ; } } }
import java.util.* ; public class atcoder_AGC029_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] dp = new int [ N ] ; dp [ 0 ] = A [ 0 ] ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( A [ i ] <= dp [ ans - 1 ] ) { dp [ ans ++ ] = A [ i ] ; } else { int l = 0 ; int r = ans - 1 ; while ( r - l > 1 ) { int mid = ( l + r ) / 2 ; if ( dp [ mid ] < A [ i ] ) { l = mid ; } else { r = mid ; } } if ( dp [ l ] < A [ i ] ) { dp [ l + 1 ] = A [ i ] ; } else { dp [ l ] = A [ i ] ; } } } System.out.println ( ans ) ; } }
soz = input ( )
a = [ 0 ] * ( len ( soz ) + 1 )
for i in range ( 1 , len ( soz ) ) :
    a [ i ] = a [ i - 1 ]
    if soz [ i - 1 ] == soz [ i ] :
        a [ i ] += 1
n = int ( input ( ) )
arr = [ ]
for i in range ( n ) :
    m , l = input ( ).split ( )
    arr.append ( a [ int ( l ) - 1 ] - a [ int ( m ) - 1 ] )
for i in arr :
    print ( i )
import java.util.* ; public class codeforces_108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != a [ i - 1 ] && a [ i ] < a [ i - 1 ] * 2 ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import sys
input = sys.stdin.readline
n = int(input())
w = list(map(int, input().split()))
c = 2
for i in w:
    if i == 1:
        print(c)
    elif i % 2 == 0:
        c = 3 - c
        print(c)
    else:
        print(c)
import java.util.* ; public class atcoder_ABC127_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; PriorityQueue < Long > p1 = new PriorityQueue < > ( ) ; PriorityQueue < Long > p2 = new PriorityQueue < > ( Collections.reverseOrder ( ) ) ; long sum_b = 0 ; long sum_p1 = 0 ; long sum_p2 = 0 ; for ( int i = 0 ; i < q ; i ++ ) { int ql = sc.nextInt ( ) ; if ( ql == 2 ) { if ( p1.size ( ) == p2.size ( ) ) { System.out.println ( - p2.peek ( ) + " " + ( sum_p1 - p2.size ( ) * - p2.peek ( ) + p1.size ( ) * - p2.peek ( ) - sum_p2 + sum_b ) ) ; } else { System.out.println ( p1.peek ( ) + " " + ( sum_p1 - p1.size ( ) * p1.peek ( ) + p2.size ( ) * p1.peek ( ) - sum_p2 + sum_b ) ) ; } } else { sum_b += sc.nextLong ( ) ; long a = sc.nextLong ( ) ; if ( p1.size ( ) == 0 ) { p1.add ( a ) ; sum_p1 += a ; } else if ( p1.peek ( ) <= a ) { p1.add ( a ) ; sum_p1 += a ; } else { p2.add ( a ) ; sum_p2 += a ; } if ( p1.size ( ) < p2.size ( ) ) { long k = p2.poll ( ) ; p1.add ( - k ) ; sum_p2 -= k ; sum_p1 += k ; } if ( p1.size ( ) - 1 > p2.size ( ) ) { long k = p1.poll ( ) ; p2.add ( - k ) ; sum_p1 -= k ; sum_p2 += k ; } } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC153_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int sho = h / a ; int am = h % a ; if ( am != 0 ) { sho ++ ; } System.out.println ( sho ) ; } }
import java.util.* ; public class atcoder_ABC158_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String result = "Yes" ; if ( ! s.contains ( "A" ) || ! s.contains ( "B" ) ) { result = "No" ; } System.out.println ( result ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC005_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } long [ ] par = new long [ n ] ; long [ ] rank = new long [ n ] ; long [ ] size = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { par [ i ] = i ; rank [ i ] = 0 ; size [ i ] = 1 ; } long [ ] b = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } long ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { long k = b [ i ] ; long l = 1 ; long r = 1 ; if ( k > 0 && a [ k - 1 ] > a [ k ] ) { l += size [ find ( par , k - 1 ) ] ; unite ( par , rank , size , k - 1 , k ) ; } if ( k + 1 < n && a [ k + 1 ] > a [ k ] ) { r += size [ find ( par , k + 1 ) ] ; unite ( par , rank , size , k + 1 , k ) ; } ans += l * r * a [ k ] ; } System.out.println ( ans ) ; } static long find ( long [ ] par , long x ) { if ( par [ ( int ) x ] == x ) { return x ; } else { return par [ ( int ) x ] = find ( par , par [ ( int ) x ] ) ; } } static void unite ( long [ ] par , long [ ] rank , long [ ] size , long x , long y ) { x = find ( par , x ) ; y = find ( par , y ) ; if ( x == y ) { return ; } if ( rank [ x ] < rank [ y ] ) { par [ ( int ) x ] = y ; size [ ( int ) y ] += size [ ( int ) x ] ; } else { par [ ( int ) y ] = x ; size [ ( int ) x ] += size [ ( int ) y ] ; if ( rank [ x ] == rank [ y ] ) { rank [ x ] ++ ; } } } }
import java.util.* ; import java.io.* ; public class codeforces_70_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int ans = 1 ; int sum = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == ' ' ) continue ; sum ++ ; if ( sum > n ) { ans ++ ; sum = 1 ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC125_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int cookie = 0 ; int time = a ; while ( time <= t + 0.5 ) { cookie += b ; time += a ; } System.out.println ( cookie ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc.nextInt ( ) ; y [ i ] = sc.nextInt ( ) ; } double sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { sum += Math.sqrt ( ( x [ i ] - x [ j ] ) * ( x [ i ] - x [ j ] ) + ( y [ i ] - y [ j ] ) * ( y [ i ] - y [ j ] ) ) ; } } System.out.println ( sum * 2 / N ) ; } }
import java.util.* ; public class atcoder_ABC164_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int S = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; if ( S <= W ) { System.out.println ( "unsafe" ) ; } else { System.out.println ( "safe" ) ; } } }
import java.util.* ; public class codeforces_514_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; if ( s.length ( ) != 1 ) { if ( s.charAt ( 0 ) == '9' ) { sb.append ( '9' ) ; s = s.substring ( 1 ) ; } for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) - '0' > 4 ) { sb.append ( 9 - ( s.charAt ( i ) - '0' ) ) ; } else { sb.append ( s.charAt ( i ) ) ; } } } else { sb.append ( s ) ; } System.out.println ( sb.toString ( ) ) ; } }
import sys


def main():
    input()
    return nPairsWithCommonFX(map(int, input().split()))


def nPairsWithCommonFX(sequence):
    storage = {}
    FXs = []
    for value in sequence:
        y = f(value)
        if y not in storage:
            storage[y] = [value]
            FXs.append(y)
        else:
            storage[y].append(value)
    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2


def f(n):
    y = 1
    while n != 1:
        if n % 2:
            y += 1
        n //= 2
    return y


if __name__ == '__main__':
    print(main())
import java.util.* ; import java.io.* ; public class codeforces_96_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; long n = sc.nextLong ( ) ; ArrayList < Long > arr = new ArrayList < > ( ) ; arr.add ( 4L ) ; arr.add ( 7L ) ; for ( int i = 0 ; i < 14 ; i ++ ) { ArrayList < Long > temp = new ArrayList < > ( ) ; for ( long x : arr ) { temp.add ( x * 10 + 4 ) ; temp.add ( x * 10 + 7 ) ; } arr = temp ; } Collections.sort ( arr ) ; for ( long x : arr ) { if ( x >= n ) { System.out.println ( x ) ; return ; } } } }
import sys

def main ( ) :
    n = int ( sys.stdin.read ( ) )
    low = [ ]
    high = [ ]
    for i in range ( n ) :
        a , b = map ( int , sys.stdin.read ( ).split ( ) )
        low.append ( a )
        high.append ( b )
    low.sort ( )
    high.sort ( )
    if n % 2 == 1 :
        print ( high [ ( n + 1 ) // 2 - 1 ] - low [ ( n + 1 ) // 2 - 1 ] + 1 )
    else :
        hh = ( high [ ( n ) // 2 - 1 ] + high [ ( n ) // 2 ] ) / 2
        ll = ( low [ ( n ) // 2 - 1 ] + low [ ( n ) // 2 ] ) / 2
        print ( int ( ( hh - ll ) * 2 ) + 1 )

if __name__ == '__main__' :
    main ( )
import java.util.* ; import java.io.* ; public class atcoder_AGC035_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; graph.get ( a - 1 ).add ( b - 1 ) ; graph.get ( b - 1 ).add ( a - 1 ) ; } if ( M % 2 == 1 ) { System.out.println ( - 1 ) ; return ; } Queue < Integer > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { q.add ( i ) ; } int [ ] deg = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { deg [ i ] = graph.get ( i ).size ( ) ; } int [ ] color = new int [ N ] ; while ( ! q.isEmpty ( ) ) { int u = q.poll ( ) ; if ( color [ u ] != 0 ) continue ; for ( int v : graph.get ( u ) ) { graph.get ( v ).remove ( Integer.valueOf ( u ) ) ; if ( color [ u ] == 0 ) { color [ u ] = 1 ; color [ v ] = 2 ; } else { color [ v ] = 1 ; color [ u ] = 2 ; } deg [ v ] -- ; if ( deg [ v ] == 1 ) q.add ( v ) ; } } for ( int i = 0 ; i < N ; i ++ ) { for ( int v : graph.get ( i ) ) { System.out.println ( ( i + 1 ) + " " + ( v + 1 ) ) ; } } } }
import java.util.* ; public class codeforces_147_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) != ' ' ) { sb.append ( s.charAt ( i ) ) ; } else if ( s.charAt ( i ) == ' ' && s.charAt ( i - 1 ) != ' ' ) { sb.append ( s.charAt ( i ) ) ; } } System.out.println ( sb ) ; } }
from math import gcd
MOD = 10 ** 9 + 7
N = int(input())
A = list(map(int, input().split()))
_lcm = 1
for a in A:
    _lcm = _lcm * a // gcd(_lcm, a)
ans = _lcm * sum([pow(s, MOD - 2, MOD) for s in A]) % MOD
print(int(ans % MOD))
import java.util.* ; public class codeforces_203_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int da = sc.nextInt ( ) ; int db = sc.nextInt ( ) ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < t ; i ++ ) { x += da ; y += db ; if ( x == n || y == n || x + y == n ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.* ; public class atcoder_ABC123_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int a [ ] = new int [ x ] ; int b [ ] = new int [ y ] ; int c [ ] = new int [ z ] ; for ( int i = 0 ; i < x ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < y ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < z ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } ArrayList < Integer > ab = new ArrayList < > ( ) ; for ( int i = 0 ; i < x ; i ++ ) { for ( int j = 0 ; j < y ; j ++ ) { ab.add ( a [ i ] + b [ j ] ) ; } } Collections.sort ( ab , Collections.reverseOrder ( ) ) ; ArrayList < Integer > abc = new ArrayList < > ( ) ; for ( int i = 0 ; i < Math.min ( k , x * y ) ; i ++ ) { for ( int j = 0 ; j < z ; j ++ ) { abc.add ( ab.get ( i ) + c [ j ] ) ; } } Collections.sort ( abc , Collections.reverseOrder ( ) ) ; for ( int i = 0 ; i < k ; i ++ ) { System.out.println ( abc.get ( i ) ) ; } } }
import sys
input_methods = [ 'clipboard' , 'file' , 'key' ]
using_method = 0
input_method = input_methods [ using_method ]
IN = lambda : map ( int , input ( ).split ( ) )
mod = 1000000007
def main_b ( ) :
    s = input ( )
    pp = 0
    na = 0
    for i , c in enumerate ( s [ : : - 1 ] ) :
        cc = na + int ( c )
        na = 0
        if cc <= 4 :
            pp += cc
        else :
            na = 1
            if i == len ( s ) - 1 :
                pp += 1
            pp += 10 - cc
    print ( pp )
def main ( ) :
    s = input ( )
    pmin = 1000
    mmin = 0
    s = '0' + s
    for c in s [ : : - 1 ] :
        v = int ( c )
        npmin = min ( pmin + 10 - ( v + 1 ) , mmin + 10 - v )
        nmmin = min ( pmin + v + 1 , mmin + v )
        pmin = npmin
        mmin = nmmin
    return min ( pmin , mmin )
isTest = False
def pa ( v ) :
    if isTest :
        print ( v )
def input_clipboard ( ) :
    import clipboard
    input_text = clipboard.get ( )
    input_l = input_text.splitlines ( )
    for l in input_l :
        yield l
if __name__ == "__main__" :
    if sys.platform == 'ios' :
        if input_method == input_methods [ 0 ] :
            ic = input_clipboard ( )
            input = lambda : ic.__next__ ( )
        elif input_method == input_methods [ 1 ] :
            sys.stdin = open ( 'inputFile.txt' )
        else :
            pass
        isTest = True
    else :
        pass
    ret = main ( )
    if ret is not None :
        print ( ret )
import java.util.* ; import java.io.* ; public class codeforces_369_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int sa = sc.nextInt ( ) ; int sk = sc.nextInt ( ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < k ; i ++ ) { ans [ i ] = sk / n + 1 ; } for ( int i = k ; i < n ; i ++ ) { ans [ i ] = ( sa - sk ) / ( n - k ) + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
from collections import defaultdict
import sys
sys.setrecursionlimit(10 ** 7)
graph = defaultdict(list)
(N, K) = map(int, input().split())
for i in range(N - 1):
    (a, b) = map(int, input().split())
    graph[a - 1].append(b - 1)
    graph[b - 1].append(a - 1)
mod = 10 ** 9 + 7


def dfs(fro, to, f):
    caseNum = f
    colorNum = K - 1 if f == K else K - 2
    for u in graph[fro]:
        if u == to:
            continue
        pat = dfs(u, fro, colorNum)
        if pat == 0:
            caseNum = 0
            break
        caseNum = caseNum * pat % mod
        colorNum -= 1
    return caseNum


ans = dfs(0, -1, K)
print(ans)
import java.util.* ; public class codeforces_95_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc.next ( ) ; } String str = sc.next ( ) ; char c = sc.next ( ).charAt ( 0 ) ; char c1 = ( c == 'a' ) ? 'b' : 'a' ; char [ ] arr = str.toCharArray ( ) ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { if ( arr [ i ] == c || arr [ i ] == c - 32 ) { arr [ i ] = c1 ; } } System.out.println ( arr ) ; } }
from scipy.stats import ttest_ind

def sum(k):
    ret = 0
    pw = 10
    len = 1
    while 1 == 1:
        cur = min(pw - 1, k)
        prev = pw // 10
        ret += (cur - prev + 1) * len
        if pw - 1 >= k:
            break
        len += 1
        pw *= 10
    return ret

(w, m, k) = map(int, input().split())
lo = 0
hi = int(1e18)
while hi - lo > 1:
    md = (lo + hi) // 2
    c = sum(m + md - 1) - sum(m - 1)
    if c * k <= w:
        lo = md
    else:
        hi = md
print(lo)
import java.util.* ; public class codeforces_242_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int count = 0 ; for ( int i = a ; i <= x ; i ++ ) { for ( int j = b ; j <= y ; j ++ ) { if ( i < j ) { count ++ ; } } } System.out.println ( count ) ; for ( int i = a ; i <= x ; i ++ ) { for ( int j = b ; j <= y ; j ++ ) { if ( i < j ) { System.out.println ( i + " " + j ) ; } } } } }
import java.util.* ; import java.io.* ; public class codeforces_608_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int f = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int x = t - ( s - f ) ; if ( x > c ) { c = x ; } } System.out.println ( s + c ) ; } }
import java.util.* ; public class codeforces_469_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 0 , y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += sc.nextInt ( ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { y += sc.nextInt ( ) ; } if ( x == y ) { System.out.println ( "I become the guy." ) ; } else { System.out.println ( "Oh, my keyboard!" ) ; } } }
import java.util.* ; public class codeforces_351_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc.nextDouble ( ) ; Arrays.sort ( arr ) ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int o = 2 * n - ( int ) sum ; double res = 1000000000 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i + o >= n ) res = Math.min ( res , Math.abs ( i - sum ) ) ; } System.out.printf ( "%.3f" , res ) ; } }
import java.util.* ; public class atcoder_AGC003_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int d = ( A [ i ] % N ) % 2 ; if ( d % 2 != i % 2 ) { cnt ++ ; } } System.out.println ( cnt / 2 ) ; } }
import java.util.* ; public class codeforces_629_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; char [ ] [ ] cake = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { cake [ i ] = sc.next ( ).toCharArray ( ) ; } int happiness = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int chocCount = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ i ] [ j ] == 'C' ) chocCount ++ ; } if ( chocCount > 1 ) { happiness += chocCount * ( chocCount - 1 ) / 2 ; } } for ( int i = 0 ; i < n ; i ++ ) { int chocCount = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ j ] [ i ] == 'C' ) chocCount ++ ; } if ( chocCount > 1 ) { happiness += chocCount * ( chocCount - 1 ) / 2 ; } } System.out.println ( happiness ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_459_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; int x3 = 0 ; int y3 = 0 ; int x4 = 0 ; int y4 = 0 ; if ( x1 == x2 ) { x3 = x1 + Math.abs ( y2 - y1 ) ; x4 = x1 + Math.abs ( y2 - y1 ) ; y3 = y1 ; y4 = y2 ; } else if ( y1 == y2 ) { x3 = x1 ; x4 = x2 ; y3 = y1 + Math.abs ( x2 - x1 ) ; y4 = y1 + Math.abs ( x2 - x1 ) ; } else { x3 = x1 ; x4 = x2 ; y3 = y2 ; y4 = y1 ; } System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } }
import java.util.Scanner ; public class codeforces_32_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String ans = "" ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '.' ) { ans += "0" ; } else { i ++ ; if ( s.charAt ( i ) == '.' ) { ans += "1" ; } else { ans += "2" ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_AGC012_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -= 2 ) { ans += A [ i ] ; } System.out.println ( ans ) ; } }
import sys


def ok(last4):
    for i in range(4):
        t = list(last4)
        if i >= 1:
            t[i], t[i - 1] = t[i - 1], t[i]
        if ''.join(t).count('AGC') >= 1:
            return False
    return True


def dfs(cur, last3):
    if last3 in memo[cur]:
        return memo[cur][last3]
    if cur == n:
        return 1
    ret = 0
    for c in 'ACGT':
        if ok(last3 + c):
            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod
    memo[cur][last3] = ret
    return ret


n = int(input())
mod = 10 ** 9 + 7
memo = [{} for i in range(n + 1)]
print(dfs(0, 'TTT'))
import java.util.* ; public class atcoder_ABC042_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( a + b + c == 17 && a != 5 && b != 5 && c != 5 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.* ; public class codeforces_629_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] m = new int [ 368 ] ; int [ ] f = new int [ 368 ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( s.equals ( "M" ) ) { m [ a ] ++ ; m [ b + 1 ] -- ; } else { f [ a ] ++ ; f [ b + 1 ] -- ; } } int mc = 0 ; int fc = 0 ; int ans = 0 ; for ( int i = 0 ; i < 368 ; i ++ ) { mc += m [ i ] ; fc += f [ i ] ; ans = Math.max ( ans , Math.min ( mc , fc ) ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC123_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( N % A [ i ] == 0 ) { ans = N / A [ i ] ; } else { ans = N / A [ i ] + 1 ; } } System.out.println ( ans + 4 ) ; } }
from collections import defaultdict


def solve(N, K, L):
    L.insert(0, -1)
    path = [1]
    ind = 0
    count = 0
    x = 1
    t = -1
    flag = False
    Hash = defaultdict(lambda: 0)
    for i in range(N + 1):
        ne = L[x]
        if Hash[ne]:
            flag = True
            t = Hash[ne]
            break
        path.append(ne)
        ind += 1
        Hash[ne] = ind
        x = ne
    if flag == True:
        loop = path[t:]
        if K < len(path):
            return path[K]
        else:
            K = K - len(path)
            K = K % len(loop)
            return loop[K]
    else:
        return path[K - 1]


if __name__ == "__main__":
    N, K = map(int, input().split())
    L = list(map(int, input().split()))
    print(solve(N, K, L))
import java.util.Scanner ; public class atcoder_ABC051_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( ( a + b + c ) >= 2 ) { count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC122_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] ac = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'A' && s.charAt ( i + 1 ) == 'C' ) { ac [ i + 1 ] = ac [ i ] + 1 ; } else { ac [ i + 1 ] = ac [ i ] ; } } for ( int i = 0 ; i < q ; i ++ ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; System.out.println ( ac [ r - 1 ] - ac [ l - 1 ] ) ; } } }
n = int(input())
arr = list(map(int, input().split()))
if arr[0] > 15:
    print(15)
else:
    for i in range(1, len(arr)):
        if arr[i] - arr[i - 1] > 15:
            print(arr[i - 1] + 15)
            break
    else:
        if arr[-1] == 90 or arr[-1] + 15 >= 90:
            print(90)
        else:
            print(arr[-1] + 15)
import java.util.* ; import java.io.* ; public class atcoder_ABC174_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int low = 1 , high = ( int ) 1e9 , ans = 0 ; while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( check ( arr , k , mid ) ) { ans = mid ; high = mid - 1 ; } else { low = mid + 1 ; } } System.out.println ( ans ) ; } static boolean check ( int [ ] arr , int k , int mid ) { int sum = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { sum += arr [ i ] / mid ; } return sum >= k ; } }
import java.util.* ; public class atcoder_ABC154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; String u = sc.next ( ) ; if ( s.equals ( u ) ) { a -= 1 ; } if ( t.equals ( u ) ) { b -= 1 ; } System.out.println ( a + " " + b ) ; } }
import sys
input = sys.stdin.readline
from collections import Counter
n = int ( input ( ) )
s = input ( ) [ : - 1 ].split ( )
w = Counter ( s )
s = s [ : : - 1 ]
c , a = - 1 , 0
for i in w :
    if w [ i ] == max ( w.values ( ) ) :
        if s.index ( i ) > c :
            a = i
            c = s.index ( i )
print ( a )
n , d = map ( int , input ( ).split ( ) )
x = [ ]
m = 0
q = 0
x = input ( ).split ( )
for i in range ( len ( x ) ) :
    x [ i ] = int ( x [ i ] )
for a in range ( len ( x ) - 1 ) :
    if x [ a ] >= x [ a + 1 ] :
        q = int ( ( x [ a ] - x [ a + 1 ] ) / d + 1 )
        m = m + q
        x [ a + 1 ] = x [ a + 1 ] + q * d
print ( m )
import java.util.* ; public class atcoder_ABC150_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] P = new int [ N ] ; int [ ] Q = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { Q [ i ] = sc.nextInt ( ) ; } int p = 0 ; int q = 0 ; for ( int i = 0 ; i < N ; i ++ ) { p += ( P [ i ] - 1 ) * Math.pow ( N - 1 , N - i - 1 ) ; q += ( Q [ i ] - 1 ) * Math.pow ( N - 1 , N - i - 1 ) ; } System.out.println ( Math.abs ( p - q ) ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC145_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int T = sc.nextInt ( ) ; int [ ] [ ] dp = new int [ N + 1 ] [ T + 1 ] ; int [ ] [ ] t = new int [ N + 1 ] [ 2 ] ; for ( int i = 1 ; i <= N ; i ++ ) { t [ i ] [ 0 ] = sc.nextInt ( ) ; t [ i ] [ 1 ] = sc.nextInt ( ) ; } for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= T ; j ++ ) { if ( j - t [ i ] [ 0 ] >= 0 ) { dp [ i ] [ j ] = Math.max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - t [ i ] [ 0 ] ] + t [ i ] [ 1 ] ) ; } else { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } } System.out.println ( dp [ N ] [ T ] ) ; } }
import java.util.* ; public class codeforces_621_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int sum = 0 ; int odd = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] % 2 == 0 ) sum += arr [ i ] ; else { if ( odd == 0 || odd == 1 ) { sum += arr [ i ] ; odd ++ ; } } } System.out.println ( sum ) ; } }
import java.util.* ; public class codeforces_544_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int x = 0 ; if ( k <= Math.max ( n * n / 2 , n * n - ( n * n / 2 ) ) ) { System.out.println ( "YES" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i % 2 == j % 2 && x < k ) { System.out.print ( "L" ) ; x ++ ; } else { System.out.print ( "S" ) ; } } System.out.println ( ) ; } } else { System.out.println ( "NO" ) ; } } }
import sys


def check(k):
    ans = 10 ** 9
    for j in range(0, k + 1):
        if j > lastx or k - j > lasty:
            pass
        else:
            if j == 0:
                p = 0
            else:
                p = lst_p[j - 1]
            if k - j == 0:
                m = 0
            else:
                m = lst_m[lasty - (k - j)]
            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))
    return ans


(N, K) = map(int, input().split())
lst = list(map(int, input().split()))
lst_p = []
lst_m = []
for i in range(N):
    if lst[i] == 0:
        K -= 1
    if lst[i] > 0:
        lst_p += [lst[i]]
    elif lst[i] < 0:
        lst_m += [lst[i]]
p = 0
m = 0
(x, y) = (0, len(lst_m) - 1)
lastx = len(lst_p)
lasty = len(lst_m)
print(check(K))
import java.util.* ; public class codeforces_450_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % m == 0 ) { arr2 [ i ] = arr [ i ] / m ; } else { arr2 [ i ] = ( arr [ i ] / m ) + 1 ; } } int max = arr2 [ 0 ] ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] > max ) { max = arr2 [ i ] ; index = i ; } } System.out.println ( index + 1 ) ; } }
import java.util.* ; public class atcoder_AGC017_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int P = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] B = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { B [ i ] = A [ i ] % 2 ; } int one = 0 ; int zero = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( B [ i ] == 1 ) { one ++ ; } else { zero ++ ; } } long [ ] dp = new long [ 100001 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= one ; i ++ ) { dp [ i ] = dp [ i - 1 ] * ( one - i + 1 ) / i ; } long ans = 0 ; for ( int i = 0 ; i <= zero ; i ++ ) { if ( ( i + P ) % 2 == 0 ) { ans += dp [ i ] * dp [ zero - i ] ; } } System.out.println ( ans ) ; } }
import os , sys , io , math
from array import array
from math import *
I = lambda : [ * map ( int , sys.stdin.readline ( ).split ( ) ) ]
IS = lambda : input ( )
IN = lambda : int ( input ( ) )
IF = lambda : float ( input ( ) )
n = IN ( )
l = I ( )
f = 1
l.sort ( )
c = 0
for i in l :
    if i > c : c += 1
print ( c + 1 )
import java.util.* ; public class atcoder_ARC062_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; if ( a == 1 && k > 0 ) { k -- ; count ++ ; } else if ( a == 1 && k <= 0 ) { count -- ; } else if ( a == 0 ) { count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; public class atcoder_ABC114_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { String s = String.valueOf ( i ) ; if ( s.contains ( "7" ) && s.contains ( "5" ) && s.contains ( "3" ) ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC002_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] [ ] ball = new int [ N ] [ 2 ] ; ball [ 0 ] [ 0 ] = 0 ; ball [ 0 ] [ 1 ] = 1 ; for ( int i = 0 ; i < M ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; x -- ; y -- ; if ( ball [ x ] [ 0 ] >= 1 && ball [ y ] [ 0 ] >= 1 ) { ball [ x ] [ 0 ] -- ; ball [ y ] [ 1 ] ++ ; } else if ( ball [ x ] [ 0 ] == 0 ) { ball [ x ] [ 1 ] -- ; ball [ y ] [ 1 ] ++ ; } else { ball [ x ] [ 0 ] -- ; ball [ y ] [ 0 ] ++ ; } } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ball [ i ] [ 1 ] == 1 ) ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC145_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; if ( n % 2 != 0 ) { System.out.println ( "No" ) ; } else if ( s.substring ( 0 , n / 2 ).equals ( s.substring ( n / 2 ) ) ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_61_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc.nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] = sc.nextInt ( ) ; Arrays.sort ( a ) ; Arrays.sort ( b ) ; int i = 0 , j = 0 , ans = 0 ; while ( i < n && j < m ) { if ( Math.abs ( a [ i ] - b [ j ] ) <= k ) { ans ++ ; i ++ ; j ++ ; } else if ( a [ i ] < b [ j ] ) i ++ ; else j ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC136_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int i = 1 ; int ans = 0 ; while ( 10 * i <= N ) { ans += ( 10 * i - 10 * ( i - 1 ) ) ; i += 2 ; } ans += Math.max ( 0 , N - 10 * ( i - 1 ) + 1 ) ; System.out.println ( ans ) ; } }
import sys
import math
from collections import defaultdict
sys.setrecursionlimit ( 10 ** 7 )
def input ( ) :
    return sys.stdin.readline ( ) [ : - 1 ]
mod = 10 ** 9 + 7
def I ( ) : return int ( input ( ) )
def II ( ) : return map ( int , input ( ).split ( ) )
def III ( ) : return list ( map ( int , input ( ).split ( ) ) )
def Line ( N , num ) :
    if N <= 0 :
        return [ [ ] ] * num
    elif num == 1 :
        return [ I ( ) for _ in range ( N ) ]
    else :
        read_all = [ tuple ( II ( ) ) for _ in range ( N ) ]
        return map ( list , zip ( * read_all ) )
def my_sign ( x ) :
    return ( x > 0 ) - ( x < 0 )
N = I ( )
a = III ( )
max_val = 0
max_sign = 0
max_index = - 1
for i , a0 in enumerate ( a ) :
    if abs ( a0 ) > max_val :
        max_val = abs ( a0 )
        max_sign = my_sign ( a0 )
        max_index = i
if max_sign == 0 :
    print ( 0 )
elif max_sign == 1 :
    print ( 2 * N - 1 )
    for i in range ( N ) :
        print ( max_index + 1 , i + 1 )
    for i in range ( N - 1 ) :
        print ( i + 1 , i + 2 )
else :
    print ( 2 * N - 1 )
    for i in range ( N ) :
        print ( max_index + 1 , i + 1 )
    for i in range ( 1 , N ) [ : : - 1 ] :
        print ( i + 1 , i )
import java.util.* ; import java.io.* ; public class atcoder_ABC124_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int even = 0 , odd = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '0' ) { if ( i % 2 == 0 ) even ++ ; else odd ++ ; } else { if ( i % 2 == 0 ) odd ++ ; else even ++ ; } } System.out.println ( Math.min ( even , odd ) ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_644_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; Queue < Task > q = new LinkedList < > ( ) ; int [ ] res = new int [ n ] ; int time = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int t = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; Task task = new Task ( t , d , i ) ; if ( task.time > time && q.isEmpty ( ) ) { time = task.time + task.duration ; res [ task.index ] = time ; } else { if ( task.time >= time && ! q.isEmpty ( ) ) { Task tt = q.poll ( ) ; time = Math.max ( time , tt.time ) + tt.duration ; res [ tt.index ] = time ; q.add ( task ) ; } else { if ( q.size ( ) < b ) q.add ( task ) ; else res [ task.index ] = - 1 ; } } } while ( ! q.isEmpty ( ) ) { Task tt = q.poll ( ) ; time = Math.max ( time , tt.time ) + tt.duration ; res [ tt.index ] = time ; } for ( int i = 0 ; i < n ; i ++ ) System.out.print ( res [ i ] + " " ) ; } static class Task { int time ; int duration ; int index ; public Task ( int time , int duration , int index ) { this.time = time ; this.duration = duration ; this.index = index ; } } }
import java.util.* ; import java.io.* ; public class codeforces_624_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; int ans = 0 ; int pre = Integer.MAX_VALUE ; for ( int i = N - 1 ; i >= 0 ; i -- ) { ans += Math.max ( 0 , Math.min ( pre - 1 , A [ i ] ) ) ; pre = Math.max ( 0 , Math.min ( pre - 1 , A [ i ] ) ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_AGC027_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( a [ i ] > X ) break ; X -= a [ i ] ; ans ++ ; } if ( X > 0 ) ans -- ; System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_669_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; if ( ( p + v + t ) >= 2 ) { count ++ ; } } System.out.println ( count ) ; } }
import sys
import math
from collections import defaultdict
sys.setrecursionlimit(10 ** 7)

def input():
    return sys.stdin.readline()[:-1]
mod = 10 ** 9 + 7

def I():
    return int(input())

def II():
    return map(int, input().split())

def III():
    return list(map(int, input().split()))

def Line(N):
    read_all = [tuple(map(int, input().split())) for _ in range(N)]
    return map(list, zip(*read_all))
S = str(input())
n = len(S)
if n == 1:
    if S == '5' or S == '?':
        print(1)
    else:
        print(0)
    exit()
dp = [[0] * 13 for i in range(n)]
for i in range(n):
    if i == 0:
        if S[i] != '?':
            dp[i][int(S[i])] += 1
        else:
            for j in range(10):
                dp[i][j] += 1
    else:
        if S[i] != '?':
            for k in range(13):
                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]
        else:
            for j in range(10):
                for k in range(13):
                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]
        for k in range(13):
            dp[i][k] %= mod
print(dp[n - 1][5])
import math
n , d = map ( int , input ( ).split ( ) )
points = [ list ( map ( int , input ( ).split ( ) ) ) for _ in range ( n ) ]
def dist ( x , y ) :
    tmp = 0.0
    for i in range ( d ) :
        tmp += ( x [ i ] - y [ i ] ) ** 2
    return math.sqrt ( tmp )
count = 0
for i , elm in enumerate ( points ) :
    for j in range ( i + 1 , n ) :
        if dist ( elm , points [ j ] ).is_integer ( ) :
            count += 1
print ( count )
import java.util.* ; public class codeforces_622_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; long n = sc.nextLong ( ) ; long l = 1 , r = n ; while ( l < r ) { long mid = l + ( r - l ) / 2 ; long idxcnt = mid * ( mid + 1 ) / 2 ; if ( idxcnt < n ) l = mid + 1 ; else r = mid ; } l -- ; idxcnt = l * ( l + 1 ) / 2 ; System.out.println ( ( int ) ( n - idxcnt ) ) ; } }
n = int ( input ( ) )
a = list ( map ( int , input ( ).split ( ) ) )
b = list ( map ( int , input ( ).split ( ) ) )
c = list ( map ( int , input ( ).split ( ) ) )
x = 0
y = 0
z = 0
for i in a :
    x += i
for i in b :
    y += i
for i in c :
    z += i
print ( abs ( x - y ) )
print ( abs ( y - z ) )
import sys
input = sys.stdin.readline
from collections import Counter
n = int ( input ( ) )
w = Counter ( map ( int , input ( ).split ( ) ) )
c = 0
for i in w :
    if i == 0 :
        c += w [ i ] * ( w [ i ] - 1 )
    else :
        if - i in w :
            c += w [ i ] * w [ - i ]
print ( c // 2 )
100%|██████████| 250/250 [00:00<00:00, 9420.66it/s]
import java.util.* ; public class codeforces_379_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int ans = 0 ; int c = 0 ; while ( n > 0 ) { ans += n ; n = n + c / k ; c = c % k ; c += n % k ; n /= k ; } System.out.println ( ans ) ; } }
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model yangccccc/deepseek-coder-multi --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 127.
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 127.
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 127.
Filename:  codeforces_400_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_400_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 127.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 127.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 127.
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 127.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC021_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC021_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC089_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC089_C.java' returned non-zero exit status 127.
Filename:  atcoder_AGC013_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC013_A.java' returned non-zero exit status 127.
Filename:  codeforces_609_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_609_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 127.
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 127.
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 127.
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC132_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC132_F.java' returned non-zero exit status 127.
Filename:  codeforces_581_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_581_A.java' returned non-zero exit status 127.
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 127.
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 127.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 127.
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 127.
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 127.
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 127.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 127.
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 127.
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 127.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 127.
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 127.
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 127.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 127.
Filename:  codeforces_267_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_267_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC172_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC172_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC112_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC112_A.java' returned non-zero exit status 127.
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 127.
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 127.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 127.
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 127.
Filename:  codeforces_387_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_387_A.java' returned non-zero exit status 127.
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 127.
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 127.
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC150_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC150_D.java' returned non-zero exit status 127.
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 127.
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 127.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 127.
Filename:  codeforces_607_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_607_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 127.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 127.
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC120_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC120_C.java' returned non-zero exit status 127.
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 127.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 127.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 127.
Filename:  codeforces_268_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_268_A.java' returned non-zero exit status 127.
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 127.
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 127.
Filename:  codeforces_306_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_306_A.java' returned non-zero exit status 127.
Filename:  codeforces_400_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_400_B.java' returned non-zero exit status 127.
Filename:  codeforces_327_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_327_A.java' returned non-zero exit status 127.
Filename:  codeforces_567_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_567_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 127.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 127.
Filename:  codeforces_189_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_189_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 127.
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 127.
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 127.
Filename:  codeforces_287_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_287_A.java' returned non-zero exit status 127.
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC006_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC006_B.java' returned non-zero exit status 127.
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 127.
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 127.
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 127.
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 127.
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 127.
Filename:  codeforces_106_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_106_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC140_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC140_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC139_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC139_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 127.
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 127.
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 127.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC142_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC142_A.java' returned non-zero exit status 127.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 127.
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC004_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC004_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 127.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC168_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC168_C.java' returned non-zero exit status 127.
Filename:  codeforces_354_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_354_A.java' returned non-zero exit status 127.
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 127.
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 127.
Filename:  codeforces_58_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_58_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 127.
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 127.
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 127.
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 127.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 127.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 127.
Filename:  codeforces_456_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_456_A.java' returned non-zero exit status 127.
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 127.
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 127.
Filename:  codeforces_31_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_31_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 127.
Filename:  atcoder_AGC007_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC007_C.java' returned non-zero exit status 127.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 127.
Filename:  codeforces_546_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_546_A.java' returned non-zero exit status 127.
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC038_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC038_A.java' returned non-zero exit status 127.
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC155_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC155_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC147_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC147_D.java' returned non-zero exit status 127.
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 127.
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 127.
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 127.
Filename:  codeforces_276_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_276_B.java' returned non-zero exit status 127.
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 127.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 127.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 127.
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 127.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 127.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 127.
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 127.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 127.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC127_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC127_F.java' returned non-zero exit status 127.
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 127.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC145_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC145_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC164_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC164_A.java' returned non-zero exit status 127.
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 127.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 127.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 127.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 127.
Filename:  codeforces_147_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_147_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC152_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC152_E.java' returned non-zero exit status 127.
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC155_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC155_E.java' returned non-zero exit status 127.
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 127.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 127.
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 127.
Filename:  codeforces_242_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_242_A.java' returned non-zero exit status 127.
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 127.
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 127.
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 127.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 127.
Filename:  codeforces_459_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_459_A.java' returned non-zero exit status 127.
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 127.
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC123_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC123_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC122_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC122_C.java' returned non-zero exit status 127.
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC174_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC174_E.java' returned non-zero exit status 127.
Filename:  atcoder_ABC154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC154_A.java' returned non-zero exit status 127.
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 127.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 127.
Filename:  atcoder_ABC145_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC145_E.java' returned non-zero exit status 127.
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 127.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 127.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 127.
Filename:  atcoder_AGC017_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC017_A.java' returned non-zero exit status 127.
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 127.
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 127.
Filename:  atcoder_AGC002_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC002_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC145_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC145_B.java' returned non-zero exit status 127.
Filename:  codeforces_61_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_61_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC136_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC136_B.java' returned non-zero exit status 127.
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 127.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 127.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 127.
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 127.
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 127.
Filename:  codeforces_669_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_669_A.java' returned non-zero exit status 127.
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 127.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 127.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 127.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 127.
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 127.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 127.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 0
Success: []
Fail: ['atcoder_ABC142_A.java', 'codeforces_216_B.java', 'atcoder_AGC004_D.java', 'atcoder_ABC142_C.java', 'codeforces_95_A.java', 'codeforces_579_A.java', 'atcoder_ABC172_D.java', 'atcoder_AGC002_A.java', 'atcoder_AGC012_A.java', 'atcoder_AGC035_B.java', 'codeforces_596_B.java', 'codeforces_231_A.java', 'codeforces_203_B.java', 'codeforces_617_B.java', 'atcoder_ABC123_D.java', 'atcoder_ABC137_D.java', 'codeforces_171_A.java', 'atcoder_ABC104_C.java', 'codeforces_23_B.java', 'atcoder_ABC140_D.java', 'codeforces_268_A.java', 'codeforces_581_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC165_C.java', 'codeforces_462_B.java', 'codeforces_369_B.java', 'codeforces_469_A.java', 'codeforces_456_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC174_C.java', 'atcoder_ABC139_B.java', 'codeforces_629_B.java', 'codeforces_282_B.java', 'codeforces_474_B.java', 'codeforces_598_A.java', 'codeforces_519_B.java', 'codeforces_672_A.java', 'codeforces_373_B.java', 'atcoder_ABC122_D.java', 'atcoder_AGC043_B.java', 'codeforces_705_B.java', 'codeforces_408_B.java', 'atcoder_ABC122_C.java', 'codeforces_61_B.java', 'codeforces_651_A.java', 'codeforces_544_B.java', 'atcoder_AGC027_A.java', 'codeforces_673_A.java', 'atcoder_ABC151_A.java', 'atcoder_ABC111_C.java', 'codeforces_400_B.java', 'codeforces_632_B.java', 'codeforces_203_A.java', 'codeforces_583_B.java', 'codeforces_148_B.java', 'codeforces_242_B.java', 'codeforces_669_A.java', 'codeforces_387_A.java', 'atcoder_AGC010_B.java', 'atcoder_ABC146_D.java', 'codeforces_8_B.java', 'atcoder_AGC033_A.java', 'codeforces_313_B.java', 'codeforces_608_A.java', 'atcoder_ARC086_B.java', 'atcoder_AGC011_C.java', 'atcoder_AGC024_B.java', 'codeforces_534_B.java', 'atcoder_AGC021_B.java', 'codeforces_190_A.java', 'atcoder_ABC152_E.java', 'atcoder_ABC132_A.java', 'atcoder_ABC123_C.java', 'atcoder_ABC124_A.java', 'atcoder_AGC029_C.java', 'codeforces_653_A.java', 'codeforces_7_B.java', 'atcoder_AGC002_B.java', 'atcoder_ABC167_D.java', 'codeforces_147_A.java', 'atcoder_ABC123_B.java', 'atcoder_AGC017_A.java', 'codeforces_333_B.java', 'codeforces_106_B.java', 'codeforces_421_A.java', 'atcoder_ABC169_C.java', 'codeforces_567_A.java', 'codeforces_37_A.java', 'atcoder_ARC102_C.java', 'codeforces_387_B.java', 'codeforces_30_A.java', 'codeforces_299_A.java', 'atcoder_AGC028_A.java', 'codeforces_70_B.java', 'atcoder_ABC112_C.java', 'codeforces_350_B.java', 'codeforces_49_A.java', 'atcoder_ABC154_A.java', 'codeforces_665_A.java', 'atcoder_ABC110_C.java', 'codeforces_678_B.java', 'codeforces_609_B.java', 'atcoder_ABC125_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC125_C.java', 'codeforces_274_A.java', 'atcoder_ABC174_E.java', 'codeforces_621_A.java', 'atcoder_ABC162_D.java', 'atcoder_ABC105_D.java', 'atcoder_AGC006_A.java', 'codeforces_25_A.java', 'codeforces_644_B.java', 'atcoder_ABC168_C.java', 'atcoder_ABC143_A.java', 'codeforces_55_B.java', 'codeforces_412_A.java', 'atcoder_ABC169_E.java', 'codeforces_518_B.java', 'codeforces_267_A.java', 'atcoder_ABC143_D.java', 'codeforces_58_B.java', 'atcoder_AGC013_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC155_E.java', 'atcoder_AGC037_E.java', 'codeforces_86_A.java', 'codeforces_296_A.java', 'atcoder_ABC148_F.java', 'atcoder_ABC114_C.java', 'atcoder_ABC128_C.java', 'codeforces_287_A.java', 'codeforces_445_A.java', 'codeforces_622_A.java', 'atcoder_ABC169_D.java', 'codeforces_354_A.java', 'codeforces_459_A.java', 'codeforces_154_A.java', 'atcoder_ABC164_D.java', 'atcoder_ABC126_D.java', 'atcoder_ABC089_C.java', 'codeforces_96_B.java', 'atcoder_ABC150_E.java', 'atcoder_AGC038_A.java', 'codeforces_242_A.java', 'atcoder_ABC118_C.java', 'codeforces_146_A.java', 'atcoder_ABC150_D.java', 'codeforces_222_A.java', 'codeforces_514_A.java', 'atcoder_ABC120_C.java', 'atcoder_ABC133_E.java', 'codeforces_581_B.java', 'atcoder_ABC153_A.java', 'atcoder_ABC178_B.java', 'codeforces_92_A.java', 'codeforces_32_B.java', 'codeforces_356_A.java', 'codeforces_31_A.java', 'atcoder_ABC125_A.java', 'codeforces_637_A.java', 'atcoder_ABC124_C.java', 'atcoder_ABC166_C.java', 'atcoder_ABC171_E.java', 'codeforces_450_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC112_A.java', 'codeforces_404_A.java', 'atcoder_ABC132_F.java', 'codeforces_189_A.java', 'atcoder_AGC034_B.java', 'codeforces_351_A.java', 'codeforces_99_A.java', 'atcoder_ABC108_B.java', 'atcoder_ABC042_A.java', 'codeforces_306_A.java', 'codeforces_327_A.java', 'atcoder_ABC127_F.java', 'codeforces_400_A.java', 'atcoder_AGC033_B.java', 'atcoder_ABC149_C.java', 'atcoder_AGC025_A.java', 'atcoder_ABC145_C.java', 'atcoder_ABC170_A.java', 'codeforces_624_B.java', 'codeforces_55_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC133_B.java', 'codeforces_134_A.java', 'atcoder_ABC178_A.java', 'atcoder_ABC135_D.java', 'codeforces_272_B.java', 'atcoder_ABC070_B.java', 'codeforces_334_A.java', 'atcoder_AGC019_A.java', 'atcoder_AGC027_B.java', 'atcoder_AGC003_C.java', 'atcoder_ABC107_C.java', 'atcoder_ABC106_C.java', 'atcoder_ABC145_E.java', 'atcoder_ABC152_C.java', 'atcoder_ABC167_C.java', 'codeforces_678_A.java', 'atcoder_ABC119_B.java', 'codeforces_340_A.java', 'codeforces_397_B.java', 'codeforces_342_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC107_D.java', 'codeforces_276_B.java', 'atcoder_ABC145_B.java', 'codeforces_379_A.java', 'codeforces_569_A.java', 'codeforces_612_B.java', 'codeforces_67_B.java', 'atcoder_AGC046_B.java', 'codeforces_59_A.java', 'codeforces_265_B.java', 'codeforces_500_A.java', 'codeforces_110_B.java', 'atcoder_AGC006_B.java', 'codeforces_302_A.java', 'atcoder_ARC062_B.java', 'codeforces_629_A.java', 'atcoder_ABC158_B.java', 'atcoder_ABC129_E.java', 'codeforces_546_A.java', 'atcoder_ABC168_B.java', 'atcoder_ABC051_A.java', 'codeforces_607_A.java', 'codeforces_11_A.java', 'atcoder_ABC147_D.java', 'codeforces_682_B.java', 'atcoder_ABC149_B.java', 'atcoder_ABC164_A.java', 'atcoder_ABC127_B.java', 'atcoder_ABC150_C.java', 'atcoder_AGC007_C.java', 'codeforces_459_B.java', 'codeforces_79_A.java', 'atcoder_AGC005_B.java', 'atcoder_ABC126_E.java', 'codeforces_108_B.java', 'atcoder_AGC028_B.java', 'atcoder_ABC136_B.java', 'atcoder_AGC014_D.java', 'codeforces_131_B.java', 'atcoder_ABC171_B.java', 'atcoder_AGC046_A.java', 'codeforces_56_B.java']
