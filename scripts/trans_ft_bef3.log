+ logdir=GAs_ft_bef3
+ mkdir -p GAs_ft_bef3
+ models=("yangccccc/codellama-multi")
+ versions=("before-Python/code/")
++ date +%Y%m%d_%H%M%S
+ timestamp=20250901_191201
+ for version in "${versions[@]}"
+ echo 'Running version: before-Python/code/'
Running version: before-Python/code/
+ dest=/home/ubuntu/translation/dataset/Intermediate/Translation/Avatar/Python/code
+ rm -rf /home/ubuntu/translation/dataset/Intermediate/Translation/Avatar/Python/code
+ cp -r /home/ubuntu/translation/dataset/Intermediate/Translation/Avatar/before-Python/code/ /home/ubuntu/translation/dataset/Intermediate/Translation/Avatar/Python/code
+ ls /home/ubuntu/translation/dataset/Intermediate/Translation/Avatar/Python/code
+ wc -l
250
+ for model in "${models[@]}"
+ echo 'Running model: yangccccc/codellama-multi'
Running model: yangccccc/codellama-multi
+ bash -x run_SR.sh yangccccc/codellama-multi
+ tee GAs_ft_bef3/before-Python_code__yangccccc_codellama-multi_20250901_191201.log
+ model=yangccccc/codellama-multi
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model yangccccc/codellama-multi --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 09-01 19:12:07 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 09-01 19:12:09 [utils.py:326] non-default args: {'model': 'yangccccc/codellama-multi', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 09-01 19:12:18 [__init__.py:711] Resolved architecture: LlamaForCausalLM
`torch_dtype` is deprecated! Use `dtype` instead!
INFO 09-01 19:12:18 [__init__.py:1750] Using max model len 4096
INFO 09-01 19:12:19 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=8192.
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:12:20 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:12:20 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='yangccccc/codellama-multi', speculative_config=None, tokenizer='yangccccc/codellama-multi', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=yangccccc/codellama-multi, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=1621657)[0;0m WARNING 09-01 19:12:20 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 240 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:12:20 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_734a4ad2'), local_subscribe_addr='ipc:///tmp/ac31dd8f-c49a-4a32-bacb-c2077e292555', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:23 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_5353e529'), local_subscribe_addr='ipc:///tmp/235148d5-9a95-4d31-a994-c951b1b97daf', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:23 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_5a867a04'), local_subscribe_addr='ipc:///tmp/f28ecad9-13ed-4865-81e6-79e610810d5c', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:25 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:25 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:25 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:25 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:25 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:25 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:25 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_4df3c291'), local_subscribe_addr='ipc:///tmp/aaffaecb-cc34-4f36-a3f5-83d52ee56ac2', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:25 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:25 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m WARNING 09-01 19:12:25 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m WARNING 09-01 19:12:25 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:25 [gpu_model_runner.py:1953] Starting to load model yangccccc/codellama-multi...
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:25 [gpu_model_runner.py:1953] Starting to load model yangccccc/codellama-multi...
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:25 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:26 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:26 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:26 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:26 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:26 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/6 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards:  17% Completed | 1/6 [00:00<00:01,  3.83it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards:  33% Completed | 2/6 [00:01<00:02,  1.59it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards:  50% Completed | 3/6 [00:02<00:02,  1.31it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards:  67% Completed | 4/6 [00:03<00:01,  1.20it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards:  83% Completed | 5/6 [00:03<00:00,  1.15it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:32 [default_loader.py:262] Loading weights took 5.03 seconds
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards: 100% Completed | 6/6 [00:04<00:00,  1.09it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Loading safetensors checkpoint shards: 100% Completed | 6/6 [00:04<00:00,  1.21it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m 
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:32 [default_loader.py:262] Loading weights took 5.10 seconds
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:32 [gpu_model_runner.py:2007] Model loading took 12.2637 GiB and 6.158929 seconds
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:33 [gpu_model_runner.py:2007] Model loading took 12.2637 GiB and 6.349036 seconds
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:44 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cdaeac2c31/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:44 [backends.py:559] Dynamo bytecode transform time: 10.55 s
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:44 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cdaeac2c31/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:44 [backends.py:559] Dynamo bytecode transform time: 10.64 s
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:53 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.212 s
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:53 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.236 s
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:12:59 [monitor.py:34] torch.compile takes 10.55 s in total
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:12:59 [monitor.py:34] torch.compile takes 10.64 s in total
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:13:01 [gpu_worker.py:276] Available KV cache memory: 57.16 GiB
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:13:01 [gpu_worker.py:276] Available KV cache memory: 57.16 GiB
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:13:01 [kv_cache_utils.py:849] GPU KV cache size: 149,840 tokens
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:13:01 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 36.58x
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:13:01 [kv_cache_utils.py:849] GPU KV cache size: 149,840 tokens
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:13:01 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 36.58x
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 13.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 14.24it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:04, 14.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 15.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 15.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 15.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 15.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:01<00:03, 15.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 16.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 16.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 16.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 16.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 16.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 16.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:02, 17.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:02, 17.12it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:01, 17.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:01, 18.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 18.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 19.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  64%|██████▍   | 43/67 [00:02<00:01, 19.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 19.74it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  73%|███████▎  | 49/67 [00:02<00:00, 20.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 20.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  82%|████████▏ | 55/67 [00:03<00:00, 20.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 20.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  91%|█████████ | 61/67 [00:03<00:00, 20.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 20.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 20.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 18.16it/s]
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:13:05 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:13:05 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP1 pid=1621666)[0;0m INFO 09-01 19:13:05 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 2.26 GiB
[1;36m(EngineCore_0 pid=1621657)[0;0m [1;36m(VllmWorker TP0 pid=1621664)[0;0m INFO 09-01 19:13:05 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 2.26 GiB
[1;36m(EngineCore_0 pid=1621657)[0;0m INFO 09-01 19:13:05 [core.py:214] init engine (profile, create kv cache, warmup model) took 32.59 seconds
INFO 09-01 19:13:07 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 6734.85it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  28%|██▊       | 69/250 [00:00<00:00, 688.81it/s]Adding requests:  62%|██████▏   | 156/250 [00:00<00:00, 787.82it/s]Adding requests:  98%|█████████▊| 245/250 [00:00<00:00, 831.09it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 811.63it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:12<53:54, 12.99s/it, est. speed input: 9.93 toks/s, output: 6.31 toks/s]Processed prompts:   1%|          | 2/250 [00:13<23:52,  5.78s/it, est. speed input: 19.68 toks/s, output: 11.88 toks/s]Processed prompts:   1%|          | 3/250 [00:14<13:29,  3.28s/it, est. speed input: 95.73 toks/s, output: 18.26 toks/s]Processed prompts:   2%|▏         | 4/250 [00:14<08:24,  2.05s/it, est. speed input: 162.39 toks/s, output: 25.22 toks/s]Processed prompts:   2%|▏         | 6/250 [00:14<04:40,  1.15s/it, est. speed input: 197.61 toks/s, output: 37.59 toks/s]Processed prompts:   3%|▎         | 7/250 [00:15<03:50,  1.05it/s, est. speed input: 201.57 toks/s, output: 43.54 toks/s]Processed prompts:   3%|▎         | 8/250 [00:15<02:57,  1.36it/s, est. speed input: 238.77 toks/s, output: 50.26 toks/s]Processed prompts:   4%|▎         | 9/250 [00:15<02:15,  1.77it/s, est. speed input: 266.60 toks/s, output: 57.73 toks/s]Processed prompts:   4%|▍         | 11/250 [00:15<01:22,  2.90it/s, est. speed input: 344.73 toks/s, output: 71.67 toks/s]Processed prompts:   5%|▍         | 12/250 [00:16<01:22,  2.87it/s, est. speed input: 374.22 toks/s, output: 77.24 toks/s]Processed prompts:   6%|▌         | 14/250 [00:16<01:09,  3.42it/s, est. speed input: 399.99 toks/s, output: 89.98 toks/s]Processed prompts:   7%|▋         | 17/250 [00:16<00:42,  5.46it/s, est. speed input: 496.34 toks/s, output: 112.43 toks/s]Processed prompts:   7%|▋         | 18/250 [00:16<00:39,  5.83it/s, est. speed input: 522.02 toks/s, output: 119.57 toks/s]Processed prompts:   8%|▊         | 20/250 [00:17<00:39,  5.87it/s, est. speed input: 593.04 toks/s, output: 132.75 toks/s]Processed prompts:   9%|▉         | 22/250 [00:17<00:31,  7.13it/s, est. speed input: 651.82 toks/s, output: 147.56 toks/s]Processed prompts:  10%|▉         | 24/250 [00:17<00:25,  8.73it/s, est. speed input: 691.62 toks/s, output: 162.84 toks/s]Processed prompts:  10%|█         | 26/250 [00:17<00:26,  8.31it/s, est. speed input: 731.16 toks/s, output: 176.29 toks/s]Processed prompts:  11%|█         | 28/250 [00:18<00:31,  7.03it/s, est. speed input: 775.10 toks/s, output: 186.18 toks/s]Processed prompts:  12%|█▏        | 30/250 [00:18<00:25,  8.59it/s, est. speed input: 841.75 toks/s, output: 201.38 toks/s]Processed prompts:  13%|█▎        | 32/250 [00:18<00:28,  7.62it/s, est. speed input: 894.41 toks/s, output: 213.89 toks/s]Processed prompts:  13%|█▎        | 33/250 [00:18<00:30,  7.15it/s, est. speed input: 912.13 toks/s, output: 220.37 toks/s]Processed prompts:  14%|█▎        | 34/250 [00:18<00:31,  6.76it/s, est. speed input: 918.11 toks/s, output: 227.15 toks/s]Processed prompts:  15%|█▍        | 37/250 [00:19<00:22,  9.33it/s, est. speed input: 1006.76 toks/s, output: 250.62 toks/s]Processed prompts:  16%|█▌        | 39/250 [00:19<00:20, 10.13it/s, est. speed input: 1064.92 toks/s, output: 265.66 toks/s]Processed prompts:  16%|█▋        | 41/250 [00:19<00:19, 10.55it/s, est. speed input: 1081.12 toks/s, output: 281.00 toks/s]Processed prompts:  17%|█▋        | 43/250 [00:19<00:20, 10.16it/s, est. speed input: 1129.58 toks/s, output: 295.08 toks/s]Processed prompts:  18%|█▊        | 45/250 [00:20<00:28,  7.18it/s, est. speed input: 1145.59 toks/s, output: 305.76 toks/s]Processed prompts:  19%|█▉        | 48/250 [00:20<00:25,  7.94it/s, est. speed input: 1231.42 toks/s, output: 326.21 toks/s]Processed prompts:  20%|█▉        | 49/250 [00:20<00:26,  7.47it/s, est. speed input: 1262.23 toks/s, output: 332.06 toks/s]Processed prompts:  20%|██        | 51/250 [00:20<00:23,  8.59it/s, est. speed input: 1300.82 toks/s, output: 347.48 toks/s]Processed prompts:  21%|██        | 53/250 [00:21<00:23,  8.26it/s, est. speed input: 1364.01 toks/s, output: 360.58 toks/s]Processed prompts:  22%|██▏       | 55/250 [00:21<00:21,  8.95it/s, est. speed input: 1453.38 toks/s, output: 374.70 toks/s]Processed prompts:  22%|██▏       | 56/250 [00:21<00:22,  8.77it/s, est. speed input: 1475.31 toks/s, output: 381.45 toks/s]Processed prompts:  23%|██▎       | 58/250 [00:21<00:21,  9.06it/s, est. speed input: 1551.25 toks/s, output: 395.01 toks/s]Processed prompts:  24%|██▎       | 59/250 [00:21<00:21,  8.90it/s, est. speed input: 1573.32 toks/s, output: 401.76 toks/s]Processed prompts:  24%|██▍       | 61/250 [00:21<00:23,  8.18it/s, est. speed input: 1595.76 toks/s, output: 413.84 toks/s]Processed prompts:  25%|██▌       | 63/250 [00:22<00:20,  9.13it/s, est. speed input: 1648.75 toks/s, output: 428.40 toks/s]Processed prompts:  26%|██▌       | 65/250 [00:22<00:17, 10.28it/s, est. speed input: 1715.59 toks/s, output: 442.96 toks/s]Processed prompts:  27%|██▋       | 67/250 [00:22<00:18,  9.77it/s, est. speed input: 1790.38 toks/s, output: 456.55 toks/s]Processed prompts:  28%|██▊       | 69/250 [00:22<00:23,  7.78it/s, est. speed input: 1881.00 toks/s, output: 466.69 toks/s]Processed prompts:  28%|██▊       | 70/250 [00:23<00:23,  7.61it/s, est. speed input: 1887.17 toks/s, output: 472.84 toks/s]Processed prompts:  29%|██▉       | 72/250 [00:23<00:20,  8.83it/s, est. speed input: 1917.48 toks/s, output: 486.95 toks/s]Processed prompts:  30%|██▉       | 74/250 [00:23<00:18,  9.65it/s, est. speed input: 1985.22 toks/s, output: 500.84 toks/s]Processed prompts:  30%|███       | 76/250 [00:23<00:15, 11.03it/s, est. speed input: 2011.46 toks/s, output: 515.32 toks/s]Processed prompts:  31%|███       | 78/250 [00:23<00:16, 10.36it/s, est. speed input: 2053.18 toks/s, output: 527.62 toks/s]Processed prompts:  32%|███▏      | 80/250 [00:23<00:16, 10.02it/s, est. speed input: 2072.79 toks/s, output: 540.05 toks/s]Processed prompts:  33%|███▎      | 82/250 [00:24<00:14, 11.64it/s, est. speed input: 2093.42 toks/s, output: 554.26 toks/s]Processed prompts:  34%|███▎      | 84/250 [00:24<00:17,  9.66it/s, est. speed input: 2130.69 toks/s, output: 564.99 toks/s]Processed prompts:  34%|███▍      | 86/250 [00:24<00:22,  7.28it/s, est. speed input: 2166.63 toks/s, output: 572.72 toks/s]Processed prompts:  35%|███▍      | 87/250 [00:24<00:24,  6.68it/s, est. speed input: 2171.21 toks/s, output: 576.55 toks/s]Processed prompts:  35%|███▌      | 88/250 [00:25<00:23,  6.98it/s, est. speed input: 2188.30 toks/s, output: 582.89 toks/s]Processed prompts:  36%|███▌      | 89/250 [00:25<00:22,  7.18it/s, est. speed input: 2206.52 toks/s, output: 588.60 toks/s]Processed prompts:  36%|███▌      | 90/250 [00:25<00:21,  7.44it/s, est. speed input: 2224.00 toks/s, output: 594.72 toks/s]Processed prompts:  37%|███▋      | 92/250 [00:25<00:19,  8.27it/s, est. speed input: 2260.54 toks/s, output: 607.56 toks/s]Processed prompts:  37%|███▋      | 93/250 [00:25<00:18,  8.30it/s, est. speed input: 2310.86 toks/s, output: 613.79 toks/s]Processed prompts:  38%|███▊      | 94/250 [00:25<00:20,  7.75it/s, est. speed input: 2331.56 toks/s, output: 618.98 toks/s]Processed prompts:  38%|███▊      | 95/250 [00:26<00:27,  5.60it/s, est. speed input: 2328.45 toks/s, output: 620.46 toks/s]Processed prompts:  39%|███▉      | 97/250 [00:26<00:22,  6.86it/s, est. speed input: 2367.47 toks/s, output: 633.71 toks/s]Processed prompts:  39%|███▉      | 98/250 [00:26<00:21,  7.21it/s, est. speed input: 2382.63 toks/s, output: 639.87 toks/s]Processed prompts:  40%|████      | 101/250 [00:26<00:17,  8.40it/s, est. speed input: 2458.58 toks/s, output: 659.76 toks/s]Processed prompts:  42%|████▏     | 104/250 [00:26<00:12, 11.66it/s, est. speed input: 2548.30 toks/s, output: 683.49 toks/s]Processed prompts:  42%|████▏     | 106/250 [00:26<00:11, 12.85it/s, est. speed input: 2587.18 toks/s, output: 698.96 toks/s]Processed prompts:  44%|████▎     | 109/250 [00:27<00:08, 15.94it/s, est. speed input: 2667.78 toks/s, output: 722.97 toks/s]Processed prompts:  44%|████▍     | 111/250 [00:27<00:11, 11.94it/s, est. speed input: 2713.47 toks/s, output: 730.74 toks/s]Processed prompts:  45%|████▌     | 113/250 [00:27<00:11, 11.91it/s, est. speed input: 2749.44 toks/s, output: 741.81 toks/s]Processed prompts:  46%|████▌     | 115/250 [00:27<00:14,  9.31it/s, est. speed input: 2774.39 toks/s, output: 751.29 toks/s]Processed prompts:  47%|████▋     | 117/250 [00:28<00:20,  6.39it/s, est. speed input: 2763.75 toks/s, output: 750.48 toks/s]Processed prompts:  48%|████▊     | 121/250 [00:28<00:13,  9.56it/s, est. speed input: 2852.24 toks/s, output: 778.42 toks/s]Processed prompts:  49%|████▉     | 123/250 [00:28<00:11, 10.84it/s, est. speed input: 2877.08 toks/s, output: 794.36 toks/s]Processed prompts:  50%|█████     | 125/250 [00:28<00:10, 12.16it/s, est. speed input: 2915.13 toks/s, output: 810.48 toks/s]Processed prompts:  51%|█████     | 127/250 [00:28<00:09, 12.32it/s, est. speed input: 2951.74 toks/s, output: 825.28 toks/s]Processed prompts:  52%|█████▏    | 129/250 [00:29<00:13,  9.07it/s, est. speed input: 2973.97 toks/s, output: 834.40 toks/s]Processed prompts:  52%|█████▏    | 131/250 [00:29<00:11, 10.71it/s, est. speed input: 3046.28 toks/s, output: 851.26 toks/s]Processed prompts:  54%|█████▎    | 134/250 [00:29<00:10, 11.16it/s, est. speed input: 3106.36 toks/s, output: 873.32 toks/s]Processed prompts:  56%|█████▌    | 139/250 [00:29<00:06, 16.37it/s, est. speed input: 3221.79 toks/s, output: 905.67 toks/s]Processed prompts:  56%|█████▋    | 141/250 [00:30<00:08, 12.70it/s, est. speed input: 3269.30 toks/s, output: 916.88 toks/s]Processed prompts:  58%|█████▊    | 144/250 [00:30<00:08, 12.71it/s, est. speed input: 3318.24 toks/s, output: 930.56 toks/s]Processed prompts:  58%|█████▊    | 146/250 [00:30<00:08, 12.18it/s, est. speed input: 3372.34 toks/s, output: 945.14 toks/s]Processed prompts:  60%|██████    | 150/250 [00:30<00:06, 15.83it/s, est. speed input: 3434.30 toks/s, output: 969.12 toks/s]Processed prompts:  61%|██████    | 152/250 [00:30<00:06, 14.45it/s, est. speed input: 3480.56 toks/s, output: 983.89 toks/s]Processed prompts:  62%|██████▏   | 154/250 [00:31<00:07, 13.51it/s, est. speed input: 3508.83 toks/s, output: 992.71 toks/s]Processed prompts:  62%|██████▏   | 156/250 [00:31<00:08, 10.57it/s, est. speed input: 3545.60 toks/s, output: 1002.37 toks/s]Processed prompts:  63%|██████▎   | 158/250 [00:31<00:09, 10.14it/s, est. speed input: 3558.42 toks/s, output: 1009.78 toks/s]Processed prompts:  64%|██████▍   | 160/250 [00:31<00:08, 11.18it/s, est. speed input: 3580.97 toks/s, output: 1015.13 toks/s]Processed prompts:  65%|██████▍   | 162/250 [00:31<00:07, 11.26it/s, est. speed input: 3610.90 toks/s, output: 1031.23 toks/s]Processed prompts:  66%|██████▋   | 166/250 [00:32<00:06, 13.75it/s, est. speed input: 3706.60 toks/s, output: 1050.36 toks/s]Processed prompts:  67%|██████▋   | 168/250 [00:32<00:05, 14.24it/s, est. speed input: 3727.32 toks/s, output: 1055.20 toks/s]Processed prompts:  68%|██████▊   | 170/250 [00:32<00:06, 11.88it/s, est. speed input: 3752.75 toks/s, output: 1063.41 toks/s]Processed prompts:  70%|███████   | 175/250 [00:32<00:04, 15.85it/s, est. speed input: 3835.24 toks/s, output: 1088.83 toks/s]Processed prompts:  71%|███████   | 178/250 [00:32<00:04, 17.67it/s, est. speed input: 3868.02 toks/s, output: 1098.39 toks/s]Processed prompts:  72%|███████▏  | 180/250 [00:32<00:04, 16.24it/s, est. speed input: 3937.89 toks/s, output: 1110.88 toks/s]Processed prompts:  73%|███████▎  | 182/250 [00:33<00:05, 12.65it/s, est. speed input: 3972.50 toks/s, output: 1124.07 toks/s]Processed prompts:  75%|███████▍  | 187/250 [00:33<00:03, 18.91it/s, est. speed input: 4123.22 toks/s, output: 1163.89 toks/s]Processed prompts:  76%|███████▌  | 190/250 [00:33<00:04, 14.49it/s, est. speed input: 4167.99 toks/s, output: 1180.66 toks/s]Processed prompts:  77%|███████▋  | 193/250 [00:33<00:03, 15.50it/s, est. speed input: 4211.06 toks/s, output: 1192.02 toks/s]Processed prompts:  78%|███████▊  | 195/250 [00:33<00:03, 15.57it/s, est. speed input: 4249.38 toks/s, output: 1210.94 toks/s]Processed prompts:  79%|███████▉  | 197/250 [00:34<00:03, 15.72it/s, est. speed input: 4278.28 toks/s, output: 1227.05 toks/s]Processed prompts:  80%|███████▉  | 199/250 [00:34<00:03, 15.91it/s, est. speed input: 4305.82 toks/s, output: 1233.53 toks/s]Processed prompts:  80%|████████  | 201/250 [00:34<00:04, 10.22it/s, est. speed input: 4311.36 toks/s, output: 1237.92 toks/s]Processed prompts:  82%|████████▏ | 204/250 [00:34<00:03, 11.50it/s, est. speed input: 4365.74 toks/s, output: 1254.18 toks/s]Processed prompts:  82%|████████▏ | 206/250 [00:34<00:03, 12.59it/s, est. speed input: 4426.40 toks/s, output: 1272.53 toks/s]Processed prompts:  83%|████████▎ | 208/250 [00:35<00:03, 11.38it/s, est. speed input: 4447.73 toks/s, output: 1283.88 toks/s]Processed prompts:  84%|████████▍ | 210/250 [00:35<00:05,  7.21it/s, est. speed input: 4434.39 toks/s, output: 1289.51 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:35<00:05,  6.75it/s, est. speed input: 4437.40 toks/s, output: 1296.25 toks/s]Processed prompts:  85%|████████▌ | 213/250 [00:36<00:05,  7.09it/s, est. speed input: 4455.22 toks/s, output: 1300.80 toks/s]Processed prompts:  86%|████████▌ | 214/250 [00:36<00:05,  6.94it/s, est. speed input: 4459.12 toks/s, output: 1302.67 toks/s]Processed prompts:  87%|████████▋ | 217/250 [00:36<00:03, 10.20it/s, est. speed input: 4532.99 toks/s, output: 1321.39 toks/s]Processed prompts:  88%|████████▊ | 219/250 [00:36<00:03,  9.77it/s, est. speed input: 4541.59 toks/s, output: 1328.33 toks/s]Processed prompts:  89%|████████▉ | 222/250 [00:36<00:02, 11.00it/s, est. speed input: 4595.92 toks/s, output: 1355.42 toks/s]Processed prompts:  90%|█████████ | 226/250 [00:36<00:01, 15.48it/s, est. speed input: 4686.01 toks/s, output: 1384.81 toks/s]Processed prompts:  91%|█████████ | 228/250 [00:37<00:01, 14.22it/s, est. speed input: 4714.30 toks/s, output: 1397.03 toks/s]Processed prompts:  92%|█████████▏| 230/250 [00:37<00:01, 11.69it/s, est. speed input: 4738.24 toks/s, output: 1409.33 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:37<00:01, 10.09it/s, est. speed input: 4768.93 toks/s, output: 1427.78 toks/s]Processed prompts:  94%|█████████▎| 234/250 [00:38<00:02,  6.01it/s, est. speed input: 4742.71 toks/s, output: 1425.85 toks/s]Processed prompts:  94%|█████████▍| 235/250 [00:38<00:02,  6.07it/s, est. speed input: 4734.44 toks/s, output: 1429.94 toks/s]Processed prompts:  94%|█████████▍| 236/250 [00:38<00:02,  5.63it/s, est. speed input: 4729.26 toks/s, output: 1431.43 toks/s]Processed prompts:  95%|█████████▌| 238/250 [00:39<00:02,  5.96it/s, est. speed input: 4758.22 toks/s, output: 1446.23 toks/s]Processed prompts:  96%|█████████▌| 239/250 [00:39<00:02,  5.21it/s, est. speed input: 4739.26 toks/s, output: 1445.50 toks/s]Processed prompts:  96%|█████████▌| 240/250 [00:39<00:02,  4.93it/s, est. speed input: 4730.24 toks/s, output: 1450.08 toks/s]Processed prompts:  97%|█████████▋| 242/250 [00:40<00:01,  4.12it/s, est. speed input: 4702.34 toks/s, output: 1449.57 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:40<00:01,  3.75it/s, est. speed input: 4711.24 toks/s, output: 1454.36 toks/s]Processed prompts:  98%|█████████▊| 244/250 [00:40<00:01,  4.05it/s, est. speed input: 4706.13 toks/s, output: 1465.43 toks/s]Processed prompts:  98%|█████████▊| 245/250 [00:40<00:01,  4.27it/s, est. speed input: 4711.57 toks/s, output: 1475.93 toks/s]Processed prompts:  99%|█████████▉| 247/250 [00:41<00:00,  6.06it/s, est. speed input: 4753.38 toks/s, output: 1495.84 toks/s]Processed prompts: 100%|█████████▉| 249/250 [00:41<00:00,  5.30it/s, est. speed input: 4761.87 toks/s, output: 1504.69 toks/s]Processed prompts: 100%|██████████| 250/250 [00:41<00:00,  5.86it/s, est. speed input: 4773.92 toks/s, output: 1514.88 toks/s]Processed prompts: 100%|██████████| 250/250 [00:41<00:00,  5.86it/s, est. speed input: 4773.92 toks/s, output: 1514.88 toks/s]Processed prompts: 100%|██████████| 250/250 [00:41<00:00,  6.01it/s, est. speed input: 4773.92 toks/s, output: 1514.88 toks/s]
+ python3 clean_generations_translation.py --model yangccccc/codellama-multi --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.Scanner ; public class atcoder_ABC146_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int G [ ] = new int [ N ] [ ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; G [ a - 1 ] [ 0 ] ++ ; G [ b - 1 ] [ 0 ] ++ ; } int color [ ] = new int [ N ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( color [ i ] == 0 ) { color [ i ] = 1 ; int cnt = 0 ; for ( int j = 0 ; j < G [ i ].length ; j ++ ) { if ( color [ G [ i ] [ j ] ] == 0 ) { color [ G [ i ] [ j ] ] = 3 - color [ i ] ; cnt ++ ; } else if ( color [ G [ i ] [ j ] ] == color [ i ] ) { cnt = - 1 ; break ; } } if ( cnt >= 0 ) { ans ++ ; } else { ans = - 1 ; break ; } } } if ( ans == - 1 ) { System.out.println ( 0 ) ; } else { System.out.println ( ans ) ; for ( int i = 0 ; i < N ; i ++ ) { System.out.println ( color [ i ] ) ; } } } } }
import java.util.Scanner ; public class atcoder_ABC119_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double [ ] x = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc.nextDouble ( ) ; } double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += x [ i ] ; } System.out.printf ( "%.2f" , sum ) ; } }
import java.util.* ; public class atcoder_AGC028_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextLong ( ) ; } long m = 1000000007 ; long [ ] fact = new long [ 1000 ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i < 1000 ; i ++ ) { fact [ i ] = fact [ i - 1 ] * i % m ; } long [ ] inv = new long [ n ] ; inv [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { inv [ i ] = inv [ i - 1 ] * ( i + 1 ) % m ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long t = inv [ i ] + inv [ n - 1 - i ] - 1 ; ans = ( ans + a [ i ] * t % m ) % m ; } ans = ans * fact [ n ] % m ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_569_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int ans = 0 ; while ( s < t ) { s = s * q ; ans ++ ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC112_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; arr [ i ] [ 2 ] = sc.nextInt ( ) ; } int x = 0 ; int y = 0 ; int h = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ 2 ] > 0 ) { x = arr [ i ] [ 0 ] ; y = arr [ i ] [ 1 ] ; h = arr [ i ] [ 2 ] ; break ; } } int [ ] [ ] dp = new int [ 101 ] [ 101 ] ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } dp [ x ] [ y ] = h ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { for ( int k = 0 ; k < 101 ; k ++ ) { if ( dp [ j ] [ k ] >= 0 && dp [ j ] [ k ] + Math.abs ( j - arr [ i ] [ 0 ] ) + Math.abs ( k - arr [ i ] [ 1 ] ) == arr [ i ] [ 2 ] ) { dp [ j ] [ k ] = arr [ i ] [ 2 ] ; } } } } int ansX = 0 ; int ansY = 0 ; int ansH = 0 ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { if ( dp [ i ] [ j ] > ansH ) { ansX = i ; ansY = j ; ansH = dp [ i ] [ j ] ; } } } System.out.println ( ansX + " " + ansY + " " + ansH ) ; } }
import java.util.Scanner ; public class atcoder_ABC104_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int D = sc.nextInt ( ) ; long G = sc.nextLong ( ) ; long [ ] [ ] PC = new long [ D ] [ 2 ] ; for ( int i = 0 ; i < D ; i ++ ) { PC [ i ] [ 0 ] = sc.nextLong ( ) ; PC [ i ] [ 1 ] = sc.nextLong ( ) ; } long ans = ( long ) 1e9 ; for ( int i = 0 ; i < 1 << D ; i ++ ) { long score = 0 ; long problem = 0 ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i >> j ) % 2 == 1 ) { score += 100 * ( j + 1 ) * PC [ j ] [ 0 ] + PC [ j ] [ 1 ] ; problem += PC [ j ] [ 0 ] ; } } if ( score > G ) continue ; long left = G - score ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i >> j ) % 2 == 1 ) continue ; if ( left > 100 * ( j + 1 ) * PC [ j ] [ 0 ] + PC [ j ] [ 1 ] ) continue ; long tmp = ( left + 100 * ( j + 1 ) - 1 ) / ( 100 * ( j + 1 ) ) ; ans = Math.min ( ans , problem + Math.min ( tmp , PC [ j ] [ 0 ] ) ) ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_678_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = a / b + 1 ; int d = c * b ; System.out.println ( d ) ; } }
[CODE]
import java.util.Scanner ; public class codeforces_400_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int count = 0 ; for ( int i = 1 ; i <= 12 ; i ++ ) { if ( 12 % i == 0 ) { int x = 12 / i ; int found = 0 ; for ( int j = 0 ; j < s.length ( ) ; j ++ ) { if ( s.charAt ( j ) == 'O' ) { found ++ ; } if ( found == x ) { count ++ ; break ; } } } } System.out.println ( count + " " ) ; for ( int i = 1 ; i <= 12 ; i ++ ) { if ( 12 % i == 0 ) { int x = 12 / i ; int found = 0 ; for ( int j = 0 ; j < s.length ( ) ; j ++ ) { if ( s.charAt ( j ) == 'O' ) { found ++ ; } if ( found == x ) { System.out.print ( x + "x" + i + " " ) ; break ; } } } } System.out.println ( ) ; } } }
import java.util.Scanner ; public class atcoder_ABC105_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long [ ] cum_remainders = new long [ N + 1 ] ; cum_remainders [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { cum_remainders [ i + 1 ] = ( cum_remainders [ i ] + A [ i ] ) % M ; } long [ ] remainder_counts = new long [ M ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { remainder_counts [ cum_remainders [ i ] ] ++ ; } long combinations = 0 ; for ( int i = 0 ; i < M ; i ++ ) { combinations += remainder_counts [ i ] * ( remainder_counts [ i ] - 1 ) / 2 ; } System.out.println ( combinations ) ; } }
import java.util.Scanner ; public class atcoder_AGC033_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int N = sc.nextInt ( ) ; int s_r = sc.nextInt ( ) ; int s_c = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; int S_L = 0 ; int S_R = 0 ; int S_U = 0 ; int S_D = 0 ; int T_L = 0 ; int T_R = 0 ; int T_U = 0 ; int T_D = 0 ; boolean Judge = false ; for ( int i = 0 ; i < N ; i ++ ) { if ( S.charAt ( i ) == 'L' ) { S_L ++ ; if ( S_L - T_R - s_c == 0 ) { Judge = true ; } } else if ( S.charAt ( i ) == 'R' ) { S_R ++ ; if ( s_c + ( S_R - T_L ) == W + 1 ) { Judge = true ; } } else if ( S.charAt ( i ) == 'U' ) { S_U ++ ; if ( S_U - T_D - s_r == 0 ) { Judge = true ; } } else if ( S.charAt ( i ) == 'D' ) { S_D ++ ; if ( s_r + ( S_D - T_U ) == H + 1 ) { Judge = true ; } } if ( T.charAt ( i ) == 'L' ) { if ( S_R - T_L + s_c != 1 ) { T_L ++ ; } } else if ( T.charAt ( i ) == 'R' ) { if ( s_c + ( T_R - S_L ) != W ) { T_R ++ ; } } else if ( T.charAt ( i ) == 'U' ) { if ( S_D - T_U + s_r != 1 ) { T_U ++ ; } } else if ( T.charAt ( i ) == 'D' ) { if ( s_r + ( T_D - S_U ) != H ) { T_D ++ ; } } } if ( Judge ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
import java.util.Scanner ; public class codeforces_55_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; while ( n % 2 == 0 ) { n = n / 2 ; } if ( n == 1 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC106_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char c = sc.next ( ).charAt ( 0 ) ; if ( c != '1' ) break ; l ++ ; } if ( l >= k ) { System.out.println ( 1 ) ; return ; } System.out.println ( sc.next ( ).charAt ( 0 ) ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.StringTokenizer ; public class codeforces_404_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int N = Integer.parseInt ( st.nextToken ( ) ) ; String [ ] s = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) s [ i ] = br.readLine ( ) ; int flag = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i != j && i != N - j - 1 ) { if ( s [ i ].charAt ( j ) != s [ N - i - 1 ].charAt ( N - j - 1 ) ) { flag = 1 ; break ; } } } if ( flag == 1 ) break ; } if ( flag == 1 ) System.out.println ( "NO" ) ; else { int d1 = 0 ; int d2 = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i == j ) { d1 += s [ i ].charAt ( j ) ; } else if ( i == N - j - 1 ) { d2 += s [ i ].charAt ( j ) ; } } } if ( d1 != d2 ) System.out.println ( "NO" ) ; else { int rem = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i != j && i != N - j - 1 ) { rem += s [ i ].charAt ( j ) ; } } } if ( rem != 0 ) System.out.println ( "NO" ) ; else System.out.println ( "YES" ) ; } } } }
import java.util.Scanner ; public class atcoder_AGC046_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; long m = 998244353 ; long [ ] [ ] dp = new long [ c + 1 ] [ d + 1 ] ; for ( int i = 0 ; i <= c ; i ++ ) { for ( int j = 0 ; j <= d ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ a ] [ b ] = 1 ; for ( int i = a ; i <= c ; i ++ ) { for ( int j = b ; j <= d ; j ++ ) { dp [ i ] [ j ] += ( dp [ i ] [ j - 1 ] * i + dp [ i - 1 ] [ j ] * j - dp [ i - 1 ] [ j - 1 ] * ( i - 1 ) * ( j - 1 ) ) % m ; } } System.out.println ( dp [ c ] [ d ] ) ; } }
import java.util.Scanner ; public class codeforces_7_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ m ] ; int ind = 1 ; while ( t -- > 0 ) { String s = sc.next ( ) ; if ( s.equals ( "alloc" ) ) { int x = sc.nextInt ( ) ; int pos = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 0 ) pos ++ ; if ( pos == x ) { for ( int j = i - x + 1 ; j <= i ; j ++ ) arr [ j ] = ind ; System.out.println ( ind ++ ) ; break ; } } if ( pos < x ) System.out.println ( "NULL" ) ; } else if ( s.equals ( "erase" ) ) { int x = sc.nextInt ( ) ; if ( ! contains ( x , arr ) || x == 0 ) System.out.println ( "ILLEGAL_ERASE_ARGUMENT" ) ; else { for ( int i = 0 ; i < m ; i ++ ) if ( arr [ i ] == x ) arr [ i ] = 0 ; } } else { int cnt = 0 ; for ( int i = 0 ; i < m ; i ++ ) if ( arr [ i ] == 0 ) cnt ++ ; arr = remove ( arr ) ; for ( int i = 0 ; i < cnt ; i ++ ) arr.add ( 0 ) ; } } } public static ArrayList < Integer > remove ( ArrayList < Integer > list ) { ArrayList < Integer > newList = new ArrayList < > ( ) ; for ( int i : list ) if ( i != 0 ) newList.add ( i ) ; return newList ; } public static boolean contains ( int x , int [ ] arr ) { for ( int i = 0 ; i < arr.length ; i ++ ) if ( arr [ i ] == x ) return true ; return false ; } }
import java.util.Scanner ; public class atcoder_AGC021_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc.nextInt ( ) ; y [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int ans = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { double dx = x [ i ] - x [ j ] ; double dy = y [ i ] - y [ j ] ; double theta = Math.atan2 ( dy , dx ) ; double theta2 = theta + 2 * Math.PI ; if ( theta2 >= 2 * Math.PI ) { theta2 = theta2 - 2 * Math.PI ; } if ( theta2 - theta >= Math.PI ) { ans ++ ; } } } System.out.println ( ans / ( double ) n ) ; } } }
[java]
import java.util.Scanner ; public class atcoder_ABC089_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; String [ ] str = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = stdIn.next ( ) ; } int [ ] mar = new int [ 5 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ].charAt ( 0 ) == 'M' ) { mar [ 0 ] ++ ; } else if ( str [ i ].charAt ( 0 ) == 'A' ) { mar [ 1 ] ++ ; } else if ( str [ i ].charAt ( 0 ) == 'R' ) { mar [ 2 ] ++ ; } else if ( str [ i ].charAt ( 0 ) == 'C' ) { mar [ 3 ] ++ ; } else if ( str [ i ].charAt ( 0 ) == 'H' ) { mar [ 4 ] ++ ; } } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( i != j && j != k && i != k ) { ans += mar [ i ] * mar [ j ] * mar [ k ] ; } } } } System.out.println ( ans ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_AGC013_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = stdIn.nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i < N - 1 ; i ++ ) { if ( ( A [ i - 1 ] < A [ i ] && A [ i ] > A [ i + 1 ] ) || ( A [ i - 1 ] > A [ i ] && A [ i ] < A [ i + 1 ] ) ) { ans ++ ; } } System.out.println ( ans + 1 ) ; } }
import java.util.Scanner ; public class codeforces_609_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] count = new int [ 10001 ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ a [ i ] ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( count [ a [ i ] ] > 1 ) { ans += n - i - count [ a [ i ] ] ; count [ a [ i ] ] -- ; } else { ans += n - i - 1 ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC162_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int r = 0 ; int g = 0 ; int b = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'R' ) r ++ ; else if ( s.charAt ( i ) == 'G' ) g ++ ; else b ++ ; } int ans = r * g * b ; for ( int i = 1 ; i <= n / 2 ; i ++ ) { for ( int j = 0 ; j + 2 * i <= n ; j ++ ) { String str = "" ; for ( int k = 0 ; k < 3 ; k ++ ) { str += s.charAt ( j + i * k ) ; } if ( str.equals ( "RGB" ) || str.equals ( "RBG" ) || str.equals ( "BGR" ) || str.equals ( "BRG" ) || str.equals ( "GBR" ) || str.equals ( "GRB" ) ) ans -- ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC014_D { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] [ ] graph = new int [ n + 1 ] [ ] ; for ( int i = 1 ; i < n ; i ++ ) { int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; graph [ a ] [ 0 ] ++ ; graph [ a ] [ graph [ a ] [ 0 ] ] = b ; graph [ b ] [ 0 ] ++ ; graph [ b ] [ graph [ b ] [ 0 ] ] = a ; } int [ ] isVisited = new int [ n + 1 ] ; isVisited [ 1 ] = 1 ; int [ ] parent = new int [ n + 1 ] ; int [ ] childNum = new int [ n + 1 ] ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 1 ) ; while ( ! q.isEmpty ( ) ) { int v = q.poll ( ) ; for ( int i = 1 ; i <= graph [ v ] [ 0 ] ; i ++ ) { int u = graph [ v ] [ i ] ; if ( isVisited [ u ] == 0 ) { isVisited [ u ] = 1 ; parent [ u ] = v ; childNum [ v ] ++ ; q.add ( u ) ; } } } Deque < Integer > seq = new LinkedList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( childNum [ i ] == 0 ) { seq.addLast ( i ) ; } } while ( ! seq.isEmpty ( ) ) { int c = seq.removeLast ( ) ; isVisited [ c ] = 0 ; if ( isVisited [ parent [ c ] ] == 0 ) { System.out.println ( "First" ) ; return ; } isVisited [ parent [ c ] ] = 0 ; childNum [ parent [ parent [ c ] ] ] -- ; if ( childNum [ parent [ parent [ c ] ] ] == 0 ) { seq.addLast ( parent [ parent [ c ] ] ) ; } } System.out.println ( "Second" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC151_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; System.out.println ( S.replace ( S.charAt ( 0 ) , ( char ) ( ( int ) S.charAt ( 0 ) + 1 ) ) ) ; } }
import java.util.Scanner ; public class codeforces_581_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner.nextInt ( ) ; } int mx = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( mx > arr [ i ] ) { ans [ i ] = mx - arr [ i ] + 1 ; } else { ans [ i ] = 0 ; } if ( mx < arr [ i ] ) { mx = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
import java.util.Scanner ; public class atcoder_ABC126_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] [ ] edge = new int [ N ] [ ] ; for ( int i = 0 ; i < M ; i ++ ) { int X = sc.nextInt ( ) ; int Y = sc.nextInt ( ) ; X -- ; Y -- ; edge [ X ] [ 0 ] = Y ; edge [ Y ] [ 0 ] = X ; } int [ ] used = new int [ N ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( used [ i ] == 0 ) { ans ++ ; int queue = 1 ; used [ i ] = 1 ; while ( queue != 0 ) { int node = queue ; queue = 0 ; for ( int nextnode : edge [ node ] ) { if ( used [ nextnode ] == 0 ) { used [ nextnode ] = 1 ; queue = nextnode ; break ; } } } } } System.out.println ( ans ) ; } } }
import java.util.Scanner ; public class atcoder_ABC118_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int gcd = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { gcd = gcd ( arr [ i ] , gcd ) ; } System.out.println ( gcd ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
import java.util.Scanner ; public class atcoder_ABC132_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) , k = sc.nextInt ( ) ; int [ ] coef = new int [ ( int ) ( Math.sqrt ( n ) + 1 ) ] , dp = new int [ k + 1 ] [ ( int ) ( Math.sqrt ( n ) + 1 ) ] ; for ( int i = 1 ; i <= coef.length ; i ++ ) coef [ i - 1 ] = n / i - n / ( i + 1 ) ; for ( int i = 1 ; i <= coef.length ; i ++ ) coef [ coef.length - i ] = coef [ coef.length - i - 1 ] ; for ( int i = 1 ; i <= k ; i ++ ) { for ( int j = 1 ; j <= coef.length ; j ++ ) { dp [ i ] [ j ] = coef [ j - 1 ] * dp [ i - 1 ] [ coef.length - j ] ; } } System.out.println ( dp [ k ] [ coef.length ] ) ; } }
import java.util.Scanner ; public class codeforces_581_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int min = Math.min ( a , b ) ; int max = Math.max ( a , b ) ; int ans = ( max - min ) / 2 ; System.out.println ( min + " " + ans ) ; } }
import java.util.Scanner ; public class codeforces_92_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int M = stdIn.nextInt ( ) ; int i = 1 ; while ( M >= i ) { M -= i ; i = i % N + 1 ; } System.out.println ( M ) ; } }
import java.util.Scanner ; public class atcoder_ABC170_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int e = sc.nextInt ( ) ; if ( a != 0 ) { System.out.println ( 1 ) ; } else if ( b != 0 ) { System.out.println ( 2 ) ; } else if ( c != 0 ) { System.out.println ( 3 ) ; } else if ( d != 0 ) { System.out.println ( 4 ) ; } else if ( e != 0 ) { System.out.println ( 5 ) ; } } }
import java.util.Scanner ; public class codeforces_653_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } Arrays.sort ( b ) ; boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] + 1 < b [ n - 1 ] && b [ i ] + 2 < b [ n - 1 ] ) { flag = true ; break ; } } if ( flag ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class codeforces_8_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int x = 0 ; int y = 0 ; int [ ] [ ] d = { { 0 , - 1 } , { 0 , 1 } , { 1 , 0 } , { - 1 , 0 } } ; boolean bug = false ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { int dx = d [ s.charAt ( i ) - 'L' ] [ 0 ] ; int dy = d [ s.charAt ( i ) - 'L' ] [ 1 ] ; x += dx ; y += dy ; if ( ! bug && ( x < 0 || x >= 3 || y < 0 || y >= 3 ) ) bug = true ; if ( bug ) break ; } if ( bug ) System.out.println ( "BUG" ) ; else System.out.println ( "OK" ) ; } }
import java.util.Scanner ; public class codeforces_146_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int number [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { number [ i ] = sc.nextInt ( ) ; } int h1 = 0 ; int h2 = 0 ; int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( number [ i ] != 4 && number [ i ] != 7 ) { System.out.println ( "NO" ) ; x = x + 1 ; break ; } if ( i < n / 2 ) { h1 += number [ i ] ; } else { h2 += number [ i ] ; } } if ( ! x ) { if ( h1 == h2 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } } }
[java]
import java.util.Scanner ; public class codeforces_299_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int num = scanner.nextInt ( ) ; int [ ] arr = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { arr [ i ] = scanner.nextInt ( ) ; } int min = Integer.MAX_VALUE ; for ( int i = 0 ; i < num ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } if ( min == arr [ 0 ] ) { System.out.println ( 0 ) ; } else { System.out.println ( 1 ) ; } } }
import java.util.Scanner ; public class codeforces_518_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int [ ] s_freq = new int [ 26 ] ; int [ ] t_freq = new int [ 26 ] ; for ( char c : s.toCharArray ( ) ) { s_freq [ c - 'a' ] ++ ; } for ( char c : t.toCharArray ( ) ) { t_freq [ c - 'a' ] ++ ; } int yay = 0 ; int whoops = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { while ( s_freq [ i ] > 0 && t_freq [ i ] > 0 ) { yay ++ ; s_freq [ i ] -- ; t_freq [ i ] -- ; } } for ( int i = 0 ; i < 26 ; i ++ ) { while ( s_freq [ i ] > 0 ) { if ( i >= 0 && i < 26 && t_freq [ i - 'a' ] > 0 ) { whoops ++ ; s_freq [ i ] -- ; t_freq [ i - 'a' ] -- ; } else if ( i >= 0 && i < 26 && t_freq [ i + 'a' ] > 0 ) { whoops ++ ; s_freq [ i ] -- ; t_freq [ i + 'a' ] -- ; } else { break ; } } } System.out.println ( yay + " " + whoops ) ; } }
import java.util.Scanner ; public class codeforces_421_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int [ ] lista = new int [ n ] ; int [ ] listb = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lista [ i ] = stdIn.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { listb [ i ] = stdIn.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( lista [ i ] == 1 ) { System.out.print ( 1 + " " ) ; } else { System.out.print ( 2 + " " ) ; } } } }
import java.util.Scanner ; public class codeforces_340_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int xy = x * y ; int gcd = gcd ( x , y ) ; int lcm = xy / gcd ; int ans = b / lcm - ( a - 1 ) / lcm ; System.out.println ( ans ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java.util.Scanner ; public class atcoder_ABC140_F { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] S = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = stdIn.nextInt ( ) ; } int [ ] flag = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { flag [ i ] = 1 ; } int [ ] cur = new int [ N ] ; cur [ 0 ] = S [ 0 ] ; flag [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) { int j = 0 ; int jM = cur.length ; for ( int k = 0 ; k < N ; k ++ ) { if ( flag [ k ] == 1 && S [ k ] < cur [ j ] ) { cur [ j + 1 ] = S [ k ] ; j ++ ; flag [ k ] = 0 ; if ( j == jM ) { break ; } } } if ( j < jM ) { System.out.println ( "No" ) ; return ; } cur = cur ; } System.out.println ( "Yes" ) ; } }
import java.util.Scanner ; public class codeforces_534_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int v1 = sc.nextInt ( ) ; int v2 = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int a = 1 ; int v = v1 ; int distance = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( v - v2 > ( t - i - 1 ) * d ) { a *= - 1 ; v = ( t - i - 1 ) * d + v2 ; } distance += v ; v += a * d ; } System.out.println ( distance ) ; } }
import java.util.Scanner ; public class codeforces_672_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ 371 ] ; for ( int i = 1 ; i <= 370 ; i ++ ) { int count = 0 ; int temp = i ; while ( temp > 0 ) { temp /= 10 ; count ++ ; } if ( count == 1 ) { arr [ i ] = i ; } else if ( count == 2 ) { temp = i ; int [ ] ar = new int [ count ] ; int k = ar.length - 1 ; while ( temp > 0 ) { ar [ k -- ] = temp % 10 ; temp /= 10 ; } for ( int j = 0 ; j < ar.length ; j ++ ) { arr [ i ] += ar [ ar.length - 1 - j ] ; } } else { temp = i ; int [ ] ar = new int [ count ] ; int k = ar.length - 1 ; while ( temp > 0 ) { ar [ k -- ] = temp % 10 ; temp /= 10 ; } for ( int j = 0 ; j < ar.length ; j ++ ) { arr [ i ] += ar [ ar.length - 1 - j ] ; } } } arr [ 371 ] = arr [ 370 ] ; arr [ 370 ] = 0 ; arr [ 369 ] = 0 ; n = n - 1 ; System.out.println ( arr [ n ] ) ; } }
import java.util.Scanner ; public class codeforces_148_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int p = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( d <= p ) { System.out.println ( 0 ) ; return ; } int result = 0 ; int position = t * p ; position += p * position / ( d - p ) ; while ( position < c ) { result += 1 ; position += p * position / d ; position += p * f ; position += p * position / ( d - p ) ; } System.out.println ( result ) ; } }
import java.util.Scanner ; public class codeforces_59_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char c = s.charAt ( i ) ; if ( c >= 'a' && c <= 'z' ) { a ++ ; } else { b ++ ; } } if ( a > b ) { System.out.println ( s.toUpperCase ( ) ) ; } else { System.out.println ( s.toLowerCase ( ) ) ; } } }
import java.util.Scanner ; public class codeforces_474_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int [ ] a = new int [ n ] ; int k = 1 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = k ; k ++ ; } int q = scan.nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int x = scan.nextInt ( ) ; System.out.println ( a [ x - 1 ] ) ; } } }
import java.util.Scanner ; public class codeforces_267_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.println ( func ( arr [ i ] , arr [ i ] - 1 ) ) ; } } public static int func ( int a , int b ) { if ( a > b ) { int total = 0 ; while ( a > 0 && b > 0 ) { total += a / b ; a = a % b ; if ( a > 0 ) { total += b / a ; b = b % a ; } } return total ; } if ( a < b ) { int total = 0 ; while ( a > 0 && b > 0 ) { total += b / a ; b = b % a ; if ( b > 0 ) { total += a / b ; a = a % b ; } } return total ; } return 1 ; } }
import java.util.Scanner ; public class atcoder_ABC172_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += i * ( N / i ) * ( N / i + 1 ) / 2 ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC112_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; if ( n == 1 ) { System.out.println ( "Hello World" ) ; } else { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; System.out.println ( a + b ) ; } } }
import java.util.Scanner ; public class codeforces_265_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int ans = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int last = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math.abs ( last - a [ i ] ) + 1 ; last = a [ i ] ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_342_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; if ( s < f ) { int d = 1 ; char c = 'R' ; } else { int d = - 1 ; char c = 'L' ; } String res = "" ; int i = 1 ; int j = s ; while ( j != f ) { int t = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int k = 1 ; while ( j != f ) { if ( i > t && k < m ) { t = sc.nextInt ( ) ; l = sc.nextInt ( ) ; r = sc.nextInt ( ) ; k ++ ; } if ( i == t && ( l <= j <= r || l <= j + d <= r ) ) { res += "X" ; } else { res += c ; j += d ; } i ++ ; } System.out.println ( res ) ; } } }
import java.io.* ; import java.util.* ; public class codeforces_356_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int q = sc.nextInt ( ) ; while ( q -- > 0 ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; for ( int i = l - 1 ; i <= r - 1 ; i ++ ) { if ( arr [ i ] == 0 && i != x ) arr [ i ] = x ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( arr [ i ] + " " ) ; } System.out.println ( ) ; } }
import java.util.Scanner ; public class atcoder_ABC178_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; if ( a == 0 ) { System.out.println ( 1 ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.Scanner ; public class atcoder_ABC158_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int N = scanner.nextInt ( ) ; int A = scanner.nextInt ( ) ; int B = scanner.nextInt ( ) ; int ans = 0 ; int rep = N / ( A + B ) ; ans += rep * A ; int res = N - rep * ( A + B ) ; ans += Math.min ( res , A ) ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_296_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { count ++ ; } } } if ( count >= n / 2 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class atcoder_AGC019_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; int h = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int best1L = Math.min ( q * 4 , Math.min ( h * 2 , s ) ) ; int best2L = Math.min ( d , best1L * 2 ) ; if ( n % 2 == 0 ) { System.out.println ( best2L * ( n / 2 ) ) ; } else { System.out.println ( best2L * ( n / 2 ) + best1L ) ; } } }
[java]
import java.util.Scanner ; public class atcoder_ABC134_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] [ ] dp = new int [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; dp [ i ] = new int [ 2 ] ; dp [ i ] [ 1 ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] <= arr [ i ] && dp [ j ] [ 1 ] + 1 > dp [ i ] [ 1 ] ) { dp [ i ] [ 1 ] = dp [ j ] [ 1 ] + 1 ; dp [ i ] [ 0 ] = j ; } } } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res = Math.max ( res , dp [ i ] [ 1 ] ) ; } System.out.println ( res ) ; } }

[/java]
import java.util.Scanner ; public class codeforces_387_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h1 = sc.nextInt ( ) ; int m1 = sc.nextInt ( ) ; int h2 = sc.nextInt ( ) ; int m2 = sc.nextInt ( ) ; m1 += 60 * h1 ; m2 += 60 * h2 ; m2 = m1 - m2 ; m2 %= 1440 ; System.out.println ( String.format ( "%02d:%02d" , m2 / 60 , m2 % 60 ) ) ; } }
import java.util.Scanner ; public class codeforces_665_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int at = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int bt = sc.nextInt ( ) ; int t1 = sc.nextInt ( ) ; int t2 = sc.nextInt ( ) ; int st = t2 + ( t1 - 5 ) * 60 ; int fin = st + at ; int now = 0 ; int ans = 0 ; while ( now < fin && now < 1140 ) { if ( now + bt > st ) { ans += 1 ; } now += b ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String X = sc.next ( ) ; int a = 0 , b = 0 ; for ( int j = 0 ; j < S.length ( ) ; j ++ ) { if ( S.charAt ( j ) == X.charAt ( 0 ) ) a ++ ; else if ( S.charAt ( j ) == X.charAt ( 1 ) ) b ++ ; else { ans += Math.min ( a , b ) ; a = 0 ; b = 0 ; } } ans += Math.min ( a , b ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_23_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = stdIn.nextInt ( ) ; if ( a < 2 ) { System.out.println ( 0 ) ; } else { System.out.println ( a - 2 ) ; } } } }
import java.util.Scanner ; import java.util.Set ; import java.util.HashSet ; public class atcoder_ABC150_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long num = sc.nextLong ( ) ; Set < Long > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set.add ( sc.nextLong ( ) ) ; } Set < Integer > twoTimesSet = new HashSet < > ( ) ; for ( Long i : set ) { int twoTimes = 0 ; while ( i > 1 ) { i = i / 2 ; if ( i % 2 != 0 ) { twoTimes ++ ; break ; } } if ( twoTimes != 1 ) { System.out.println ( 0 ) ; return ; } } long lcm = 1 ; for ( Long i : set ) { lcm = lcm * i / gcd ( lcm , i ) ; } System.out.println ( ( num - lcm / 2 ) / lcm + 1 ) ; } private static long gcd ( long a , long b ) { long r ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } return a ; } }
import java.util.* ; import java.io.* ; import java.nio.charset.StandardCharsets ; public class codeforces_216_B { public static void main ( String [ ] args ) { InputStream inputStream = System.in ; OutputStream outputStream = System.out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream , false ) ; TaskD solver = new TaskD ( ) ; solver.solve ( 1 , in , out ) ; out.close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in.nextInt ( ) ; int M = in.nextInt ( ) ; int [ ] [ ] G = new int [ N + 1 ] [ 2 ] ; for ( int i = 0 ; i < M ; i ++ ) { int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; G [ a ] [ 0 ] ++ ; G [ a ] [ 1 ] += b ; G [ b ] [ 0 ] ++ ; G [ b ] [ 1 ] += a ; } int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( G [ i ] [ 0 ] == 1 && G [ i ] [ 1 ] % 2 == 1 ) { int x = i ; int y = G [ i ] [ 1 ] ; while ( true ) { if ( G [ x ] [ 0 ] == 1 && G [ x ] [ 1 ] != y ) { break ; } if ( G [ x ] [ 0 ] == 2 ) { int a = G [ x ] [ 1 ] ; int b = G [ x ] [ 1 ] ; if ( a != y && b != y ) { break ; } if ( a == y ) { x = b ; } else { x = a ; } } else { break ; } } if ( x == i ) { ans ++ ; } } } if ( ( N - ans ) % 2 == 1 ) { ans ++ ; } out.println ( ans ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream , StandardCharsets.UTF_8 ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer.hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader.readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer.nextToken ( ) ; } public int nextInt ( ) { return Integer.parseInt ( next ( ) ) ; } long nextLong ( ) { return Long.parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double.parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = "" ; try { str = reader.readLine ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } return str ; } } }
import java.util.Scanner ; public class atcoder_ABC149_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int a = scan.nextInt ( ) ; int b = scan.nextInt ( ) ; int x = scan.nextInt ( ) ; int y = x - a ; if ( y >= 0 ) { System.out.println ( 0 + " " + b ) ; } else { System.out.println ( y + " " + ( b - Math.abs ( y ) ) ) ; } } }
import java.util.Scanner ; public class codeforces_612_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } long res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { res += Math.abs ( b [ i ] - b [ i - 1 ] ) ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_583_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int counter = 0 ; int turns = 0 ; while ( counter < n ) { turns ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != - 1 && arr [ i ] <= counter ) { counter ++ ; arr [ i ] = - 1 ; } } arr = reverse ( arr ) ; } System.out.println ( turns ) ; } public static int [ ] reverse ( int [ ] arr ) { int n = arr.length ; int temp = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { temp = arr [ i ] ; arr [ i ] = arr [ n - i - 1 ] ; arr [ n - i - 1 ] = temp ; } return arr ; } }
import java.util.Scanner ; public class codeforces_607_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int [ ] l = new int [ 1000010 ] ; int [ ] dp = new int [ 1000010 ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ scan.nextInt ( ) ] = scan.nextInt ( ) ; } if ( l [ 0 ] > 0 ) { dp [ 0 ] = 1 ; } int mx = 0 ; for ( int i = 1 ; i < 1000010 ; i ++ ) { if ( l [ i ] == 0 ) { dp [ i ] = dp [ i - 1 ] ; } else if ( l [ i ] >= i ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - l [ i ] - 1 ] + 1 ; } if ( dp [ i ] > mx ) { mx = dp [ i ] ; } } System.out.println ( n - mx ) ; } }
import java.util.* ; public class atcoder_AGC010_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( sum % ( n * ( n + 1 ) / 2 ) != 0 ) { System.out.println ( "NO" ) ; } else { int k = sum / ( n * ( n + 1 ) / 2 ) ; a [ n ] = a [ 0 ] ; int sum1 = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum1 += ( k - a [ i - 1 ] + a [ i ] ) % n ; } if ( sum1 != 0 || ( k - a [ n ] + a [ 1 ] ) / n >= 1 ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } } }
import java.util.Scanner ; public class codeforces_190_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a < 1 ) { if ( b < 1 ) { System.out.println ( a + " " + b ) ; return ; } System.out.println ( "Impossible" ) ; return ; } if ( b > a ) { int min = b ; int max = a + b - 1 ; System.out.println ( min + " " + max ) ; } else { int min = a ; int max = a + b - 1 ; if ( b == 0 ) max = a ; System.out.println ( min + " " + max ) ; } } }
import java.util.Scanner ; public class codeforces_387_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] roundComplexity = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { roundComplexity [ i ] = sc.nextInt ( ) ; } int [ ] georgeComplexity = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { georgeComplexity [ i ] = sc.nextInt ( ) ; } int i = 0 ; int j = 0 ; while ( i < n && j < m ) { if ( roundComplexity [ i ] <= georgeComplexity [ j ] ) { i ++ ; } j ++ ; } System.out.println ( n - i ) ; } }
import java.util.Scanner ; import java.util.PriorityQueue ; public class atcoder_ABC137_D { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int m = scanner.nextInt ( ) ; PriorityQueue < Integer > x = new PriorityQueue < > ( ) ; PriorityQueue < Integer > y = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int d = scanner.nextInt ( ) ; int s = scanner.nextInt ( ) ; x.add ( - d ) ; x.add ( - s ) ; } while ( ! x.isEmpty ( ) ) { int d = - x.poll ( ) ; int s = - x.poll ( ) ; int r = m - y.size ( ) ; if ( r >= d ) { y.add ( - s ) ; } else { y.add ( - s ) ; y.poll ( ) ; } } int result = 0 ; for ( int s : y ) { result += s ; } System.out.println ( result ) ; } }
import java.util.Scanner ; public class atcoder_ABC120_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; if ( s.length ( ) == 1 ) { System.out.println ( 0 ) ; return ; } int [ ] c = new int [ 26 ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { c [ s.charAt ( i ) - 'a' ] ++ ; } int res = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { res = Math.max ( res , c [ i ] ) ; } System.out.println ( res * 2 ) ; } }
import java.util.Scanner ; public class codeforces_397_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( a % b == 0 ) { System.out.println ( ( a / b ) * c >= a ? "Yes" : "No" ) ; } else { System.out.println ( "No" ) ; } } } }
import java.util.Scanner ; public class atcoder_ARC102_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; int N = sc.nextInt ( ) ; long [ ] ans = new long [ 2 * K + 1 ] ; long mod = 998244353 ; long [ ] g1 = new long [ 20 ] ; long [ ] g2 = new long [ 20 ] ; long [ ] inverse = new long [ 20 ] ; g1 [ 1 ] = 1 ; g1 [ 0 ] = 1 ; g2 [ 1 ] = 1 ; g2 [ 0 ] = 1 ; inverse [ 1 ] = 1 ; inverse [ 0 ] = 1 ; for ( int i = 2 ; i < 20 ; i ++ ) { g1 [ i ] = ( g1 [ i - 1 ] * i ) % mod ; inverse [ i ] = ( - inverse [ mod % i ] * ( mod / i ) ) % mod ; g2 [ i ] = ( g2 [ i - 1 ] * inverse [ i - 1 ] ) % mod ; } long comb ( long n , long r , long mod ) { if ( r < 0 ||r > n ) return 0 ; r = Math.min ( r , n - r ) ; return ( g1 [ n ] * g2 [ r ] % mod * g2 [ n - r ] % mod ) ; } long kumiawase ( long p , long q ) { return comb ( p + q - 1 , q - 1 , mod ) ; } long solve ( long n ) { assert n <= K + 1 ; long ans = 0 ; long kumi = ( n - 1 ) / 2 ; for ( long p = 1 ; p <= kumi + 1 ; p ++ ) { if ( p > N ) break ; ans += ( long ) Math.pow ( 2 , p ) * comb ( kumi , p , mod ) * kumiawase ( N - p , p + ( K - kumi * 2 - ( n % 2 == 0 ? 1 : 0 ) ) ) ; if ( n % 2 == 0 && N - p - 1 >= 0 ) { ans += ( long ) Math.pow ( 2 , p ) * comb ( kumi , p , mod ) * kumiawase ( N - p - 1 , p + ( K - kumi * 2 - ( n % 2 == 0 ? 1 : 0 ) ) ) ; } } return ans ; } for ( int i = 2 ; i <= 2 * K + 1 ; i ++ ) { if ( i <= K + 1 ) { ans [ i ] = solve ( i ) % 998244353 ; System.out.println ( ans [ i ] ) ; } else { System.out.println ( ans [ 2 * K + 1 - i ] ) ; } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC148_F { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int ta = sc.nextInt ( ) ; int ao = sc.nextInt ( ) ; ta -- ; ao -- ; ArrayList [ ] list = new ArrayList [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; list [ a - 1 ].add ( b - 1 ) ; list [ b - 1 ].add ( a - 1 ) ; } int [ ] taDist = new int [ n ] ; int [ ] aoDist = new int [ n ] ; taDist [ ta ] = 0 ; aoDist [ ao ] = 0 ; dfs ( ta , taDist , list ) ; dfs ( ao , aoDist , list ) ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( taDist [ i ] > aoDist [ i ] ) continue ; res = Math.max ( res , aoDist [ i ] ) ; } System.out.println ( res - 1 ) ; } static void dfs ( int node , int [ ] dist , ArrayList [ ] list ) { for ( int child : list [ node ] ) { if ( dist [ child ] != 0 ) continue ; dist [ child ] = dist [ node ] + 1 ; dfs ( child , dist , list ) ; } } }
import java.util.Scanner ; public class atcoder_ABC070_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int A = scanner.nextInt ( ) ; int B = scanner.nextInt ( ) ; int C = scanner.nextInt ( ) ; int D = scanner.nextInt ( ) ; if ( B <= C || D <= A ) { System.out.println ( 0 ) ; } else { int [ ] arr = new int [ 4 ] ; arr [ 0 ] = A ; arr [ 1 ] = B ; arr [ 2 ] = C ; arr [ 3 ] = D ; Arrays.sort ( arr ) ; System.out.println ( arr [ 2 ] - arr [ 1 ] ) ; } } }
import java.util.Scanner ; public class atcoder_ABC152_C { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scan.nextInt ( ) ; } int result = 1 ; int pos = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ pos ] > arr [ i ] ) { result ++ ; pos = i ; } } System.out.println ( result ) ; } }
import java.util.Scanner ; public class atcoder_ABC111_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int a = 0 ; int b = 0 ; int c = 0 ; int d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a += arr [ i ] ; } else { b += arr [ i ] ; } } int [ ] counta = new int [ 100002 ] ; int [ ] countb = new int [ 100002 ] ; for ( int i = 0 ; i < a ; i ++ ) { counta [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < b ; i ++ ) { countb [ arr [ n - i - 1 ] ] ++ ; } int maxa = 0 ; int maxb = 0 ; int vala = 0 ; int valb = 0 ; int vala1 = 0 ; int valb1 = 0 ; for ( int i = 1 ; i < 100002 ; i ++ ) { if ( counta [ i ] > maxa ) { vala = i ; maxa = counta [ i ] ; } if ( counta [ i ] > maxa && vala != i ) { vala1 = i ; } if ( countb [ i ] > maxb ) { valb = i ; maxb = countb [ i ] ; } if ( countb [ i ] > maxb && valb != i ) { valb1 = i ; } } if ( valb != vala ) { int res = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( arr [ i ] != vala ) { res ++ ; } } for ( int i = 0 ; i < b ; i ++ ) { if ( arr [ n - i - 1 ] != valb ) { res ++ ; } } System.out.println ( res ) ; } else { int resa = 0 ; int resb = 0 ; int resa1 = 0 ; int resb1 = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( arr [ i ] != vala ) { resa ++ ; } if ( arr [ i ] != vala1 ) { resa1 ++ ; } } for ( int i = 0 ; i < b ; i ++ ) { if ( arr [ n - i - 1 ] != valb ) { resb ++ ; } if ( arr [ n - i - 1 ] != valb1 ) { resb1 ++ ; } } System.out.println ( Math.min ( resa + resb1 , resa1 + resb ) ) ; } sc.close ( ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_268_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int n = Integer.parseInt ( br.readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = br.readLine ( ) ; a [ i ] = Integer.parseInt ( s ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; if ( a [ i ] == a [ j ] ) { count ++ ; } } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_651_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int sum = x + y ; int diff = y - x ; if ( diff >= 3 ) { sum += diff / 3 ; } if ( sum > 0 ) { System.out.println ( sum ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.Scanner ; import java.util.Set ; import java.util.TreeSet ; public class codeforces_274_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long k = sc.nextLong ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextLong ( ) ; } Set < Long > set = new TreeSet < > ( ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 || ! set.contains ( arr [ i ] / k ) ) { set.add ( arr [ i ] ) ; } ans = Math.max ( ans , set.size ( ) ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_306_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int q = n / m ; int r = n % m ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = q ; } for ( int i = 0 ; i < r ; i ++ ) { a [ i ] ++ ; } for ( int i = 0 ; i < m ; i ++ ) { System.out.print ( a [ i ] + " " ) ; } } }
import java.util.Scanner ; public class codeforces_400_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int count = 0 ; while ( n -- > 0 ) { String s = sc.next ( ) ; for ( int i = 0 ; i < m ; i ++ ) { if ( s.charAt ( i ) == 'G' ) { count ++ ; break ; } } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_327_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int count = 0 ; int zeros = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) count ++ ; else zeros ++ ; } if ( zeros == 0 ) System.out.println ( count + n - 1 ) ; else { int zeroIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '0' ) { zeroIndex = i ; break ; } } int maxCount = 0 ; for ( int i = 0 ; i < zeros ; i ++ ) { int zeroIndex2 = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s.charAt ( j ) == '0' ) { zeroIndex2 = j ; break ; } } if ( zeroIndex2 == - 1 ) break ; int count1 = 0 ; for ( int j = zeroIndex ; j < zeroIndex2 ; j ++ ) { if ( s.charAt ( j ) == '1' ) count1 ++ ; } maxCount = Math.max ( maxCount , count1 ) ; zeroIndex = zeroIndex2 ; } System.out.println ( count + maxCount ) ; } } } }
import java.util.* ; import java.io.* ; import java.lang.* ; public class codeforces_567_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { System.out.println ( a [ i + 1 ] - a [ i ] + " " + ( a [ n - 1 ] - a [ i ] ) ) ; } else if ( i == n - 1 ) { System.out.println ( ( a [ n - 1 ] - a [ n - 2 ] ) + " " + ( a [ n - 1 ] - a [ 0 ] ) ) ; } else { if ( a [ i ] - a [ i - 1 ] > a [ i + 1 ] - a [ i ] ) { System.out.print ( a [ i + 1 ] - a [ i ] + " " ) ; } else { System.out.print ( a [ i ] - a [ i - 1 ] + " " ) ; } if ( a [ n - 1 ] - a [ i ] > a [ i ] - a [ 0 ] ) { System.out.println ( a [ n - 1 ] - a [ i ] ) ; } else { System.out.println ( a [ i ] - a [ 0 ] ) ; } } } } }
import java.util.* ; public class atcoder_ABC109_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = scanner.next ( ) ; } String f = "Yes" ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s [ i + 1 ].charAt ( 0 ) != s [ i ].charAt ( s [ i ].length ( ) - 1 ) ) { f = "No" ; break ; } } if ( f.equals ( "Yes" ) ) { for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ].length ( ) != 1 ) { if ( s [ i ].charAt ( 0 ) != s [ i ].charAt ( s [ i ].length ( ) - 1 ) ) { f = "No" ; break ; } } } } System.out.println ( f ) ; } }
import java.util.Scanner ; public class codeforces_579_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int x = 1 ; while ( ( int ) ( Math.log ( n ) / Math.log ( 2 ) ) % 1 != 0 ) { x ++ ; n -= Math.pow ( 2 , ( int ) ( Math.log ( n ) / Math.log ( 2 ) ) ) ; } System.out.println ( x ) ; } }
import java.util.Scanner ; public class codeforces_189_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int e = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; int g = sc.nextInt ( ) ; int h = sc.nextInt ( ) ; int i = sc.nextInt ( ) ; int j = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int o = sc.nextInt ( ) ; int p = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int x1 = x ; int y1 = y ; int z1 = z ; int x2 = x1 + 1 ; int y2 = y1 + 1 ; int z2 = z1 + 1 ; int x3 = x2 + 1 ; int y3 = y2 + 1 ; int z3 = z2 + 1 ; int x4 = x3 + 1 ; int y4 = y3 + 1 ; int z4 = z3 + 1 ; int x5 = x4 + 1 ; int y5 = y4 + 1 ; int z5 = z4 + 1 ; if ( x5 >= a ) { if ( y5 >= b ) { if ( z5 >= c ) { System.out.println ( d ) ; } else { System.out.println ( e ) ; } } else { System.out.println ( f ) ; } } else { if ( y5 >= b ) { System.out.println ( g ) ; } else { System.out.println ( h ) ; } } } }
import java.util.Scanner ; public class atcoder_AGC037_E { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int K = stdIn.nextInt ( ) ; String S = stdIn.next ( ) ; if ( K >= 15 ) { System.out.println ( min ( S ) * N ) ; return ; } int l = 1 ; for ( int i = 1 ; i < S.length ( ) ; i ++ ) { if ( S.charAt ( i ) == S.charAt ( i - 1 ) ) l ++ ; else l = 1 ; if ( l >= 2 ) break ; } if ( l >= 2 && 2 * l >= N ) { System.out.println ( S.charAt ( 0 ) * N ) ; return ; } S = S.substring ( 0 , l ) + S ; if ( k == 1 ) { System.out.println ( S ) ; return ; } int c = 0 ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( S.charAt ( i ) == S.charAt ( 0 ) ) c ++ ; else break ; } if ( c * ( 1 << ( k - 1 ) ) >= N ) { System.out.println ( S.charAt ( 0 ) * N ) ; return ; } S = S.charAt ( 0 ) + S.substring ( 0 , c * ( 1 << ( k - 1 ) ) - 1 ) + S ; System.out.println ( S.substring ( 0 , N ) ) ; } public static String min ( String s ) { int min = s.charAt ( 0 ) ; for ( int i = 1 ; i < s.length ( ) ; i ++ ) if ( s.charAt ( i ) < min ) min = s.charAt ( i ) ; return "" + min ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.StringTokenizer ; public class codeforces_222_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int n = Integer.parseInt ( st.nextToken ( ) ) ; int k = Integer.parseInt ( st.nextToken ( ) ) ; st = new StringTokenizer ( br.readLine ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer.parseInt ( st.nextToken ( ) ) ; } boolean flag = false ; if ( arr [ 0 ] == arr [ n - 1 ] ) { flag = true ; } if ( k == 1 ) { if ( flag ) { System.out.println ( 0 ) ; } else { System.out.println ( - 1 ) ; } return ; } if ( ! flag ) { System.out.println ( - 1 ) ; return ; } int count = 0 ; for ( int i = 0 ; i < k - 1 ; i ++ ) { if ( arr [ i ] == arr [ n - 1 ] ) { count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; import java.math.* ; import java.util.stream.Collectors ; public class atcoder_ABC165_C { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int Q = sc.nextInt ( ) ; int [ ] a = new int [ Q ] ; int [ ] b = new int [ Q ] ; int [ ] c = new int [ Q ] ; int [ ] d = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; d [ i ] = sc.nextInt ( ) ; } long [ ] dp = new long [ N + 1 ] ; Arrays.fill ( dp , - 1 ) ; dp [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { if ( dp [ i - 1 ] != - 1 && dp [ i - 1 ] + d [ j - 1 ] >= dp [ i ] ) { dp [ i ] = dp [ i - 1 ] + d [ j - 1 ] ; } } } System.out.println ( dp [ N ] ) ; } }
import java.util.Scanner ; public class codeforces_203_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] [ ] count = new int [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { count [ i ] [ j ] = 0 ; } } int ans = - 1 ; for ( int k = 0 ; k < M ; k ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; x = x - 1 ; y = y - 1 ; boolean found = false ; for ( int i = x - 2 ; i <= x + 1 ; i ++ ) { for ( int j = y - 2 ; j <= y + 1 ; j ++ ) { if ( i >= 0 && i < N && j >= 0 && j < N ) { count [ i ] [ j ] ++ ; if ( count [ i ] [ j ] == 9 ) { found = true ; } } } } if ( found ) { ans = k + 1 ; break ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC024_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int maxLen = 0 , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arr [ i - 1 ] + 1 == arr [ i ] ) { maxLen ++ ; } else { maxLen = 1 ; } if ( maxLen > ans ) { ans = maxLen ; } } System.out.println ( n - ans ) ; } }
import java.util.Scanner ; public class codeforces_287_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int [ ][ ] arr = new int [ 4 ][ 4 ] ; int [ ] [ ] dp = new int [ 4 ][ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { arr [ i ][ j ] = sc.nextInt ( ) ; } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { dp [ i ][ j ] = arr [ i ][ j ] ; if ( i == 0 && j == 0 ) { dp [ i ][ j ] = arr [ i ][ j ] ; } else { if ( i == 0 ) { dp [ i ][ j ] = dp [ i ][ j - 1 ] + arr [ i ][ j ] ; } else if ( j == 0 ) { dp [ i ][ j ] = dp [ i - 1 ][ j ] + arr [ i ][ j ] ; } else { dp [ i ][ j ] = Math.max ( dp [ i ][ j - 1 ] , dp [ i - 1 ][ j ] ) + arr [ i ][ j ] ; } } } } int ans = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( dp [ i ][ j ] >= ans ) { ans = dp [ i ][ j ] ; } } } if ( ans >= 12 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class codeforces_37_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int A [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int ans = 0 ; int prev = - 1 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] == prev ) { count ++ ; } else { if ( count > ans ) { ans = count ; } count = 1 ; } prev = A [ i ] ; } if ( count > ans ) { ans = count ; } System.out.println ( ans + " " + ( N - ans ) ) ; } } }
import java.util.Scanner ; public class atcoder_AGC006_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; if ( X == 1 || X == N * 2 - 1 ) { System.out.println ( "No" ) ; } else { System.out.println ( "Yes" ) ; if ( X == N * 2 - 2 ) { for ( int i = N - 1 ; i <= X + 2 ; i ++ ) { System.out.println ( i ) ; } for ( int i = 1 ; i < N - 1 ; i ++ ) { System.out.println ( i ) ; } } else { int [ ] ys = new int [ N * 2 ] ; for ( int i = 1 ; i <= X - 1 ; i ++ ) { ys [ i - 1 ] = i ; } for ( int i = X + 3 ; i <= N * 2 ; i ++ ) { ys [ i - 1 ] = i ; } int [ ] xs = new int [ N * 2 - 3 ] ; for ( int i = 0 ; i < N - 3 ; i ++ ) { xs [ i ] = ys [ i ] ; } xs [ N - 3 ] = X + 2 ; xs [ N - 2 ] = X - 1 ; xs [ N - 1 ] = X ; xs [ N ] = X + 1 ; for ( int i = N + 1 ; i < N * 2 - 3 ; i ++ ) { xs [ i ] = ys [ i ] ; } for ( int x : xs ) { System.out.println ( x ) ; } } } } }
import java.util.Scanner ; import java.util.Arrays ; public class codeforces_632_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; String s = sc.next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; int [ ] dp = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i + 1 ] = dp [ i ] + ( s.charAt ( i ) == 'B' ? a [ i ] : - a [ i ] ) ; ans = Math.max ( ans , dp [ i + 1 ] ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_110_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += "abcd" [ i % 4 ] ; } System.out.println ( s ) ; } }
import java.util.Scanner ; public class codeforces_134_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int [ ] w = new int [ n ] ; int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = scan.nextInt ( ) ; x += w [ i ] ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( x - w [ i ] ) % ( n - 1 ) == 0 ) { d [ i ] = i + 1 ; } } System.out.println ( d.length ) ; for ( int i : d ) { System.out.print ( i + " " ) ; } } }
import java.util.* ; public class atcoder_AGC034_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = "" ; int i = 0 ; while ( i < s.length ( ) ) { if ( s.charAt ( i ) == 'A' ) { t += 'A' ; i ++ ; } else if ( s.charAt ( i ) == 'B' ) { if ( i < s.length ( ) - 1 ) { if ( s.charAt ( i + 1 ) == 'C' ) { t += 'D' ; i += 2 ; } else { t += 'X' ; i ++ ; } } else { t += 'X' ; i ++ ; } } else { t += 'X' ; i ++ ; } } int total = 0 ; int numA = 0 ; for ( int i = 0 ; i < t.length ( ) ; i ++ ) { if ( t.charAt ( i ) == 'X' ) { numA = 0 ; } else if ( t.charAt ( i ) == 'A' ) { numA ++ ; } else { total += numA ; } } System.out.println ( total ) ; } }
[java]
import java.util.* ; public class atcoder_ABC110_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; if ( S.length ( ) != T.length ( ) ) { System.out.println ( "No" ) ; } else { char [ ] arr1 = S.toCharArray ( ) ; Arrays.sort ( arr1 ) ; char [ ] arr2 = T.toCharArray ( ) ; Arrays.sort ( arr2 ) ; if ( Arrays.equals ( arr1 , arr2 ) ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } } }

 [/java]
import java.util.Scanner ; import java.lang.Math ; public class atcoder_ABC123_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int m = stdIn.nextInt ( ) ; int k = stdIn.nextInt ( ) ; int l = stdIn.nextInt ( ) ; int ans = 0 ; int [ ] arr = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { arr [ i ] = stdIn.nextInt ( ) ; } int [ ] [ ] menu = new int [ 5 ] [ 2 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { menu [ i ] [ 1 ] = arr [ i ] % 10 ; if ( menu [ i ] [ 1 ] == 0 ) { menu [ i ] [ 1 ] = 10 ; } menu [ i ] [ 0 ] = arr [ i ] - menu [ i ] [ 1 ] ; } for ( int i = 1 ; i < 5 ; i ++ ) { menu [ i ] [ 0 ] += menu [ i - 1 ] [ 0 ] ; } for ( int i = 0 ; i < 5 ; i ++ ) { ans += menu [ i ] [ 0 ] ; } System.out.println ( ans + arr [ 0 ] ) ; } }
import java.util.Scanner ; public class atcoder_AGC025_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = { 10 , 100 , 1000 , 10000 , 100000 } ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( n % 10 ) ; n = n / 10 ; } if ( sum == 10 || sum == 100 || sum == 1000 || sum == 10000 || sum == 100000 ) System.out.println ( 10 ) ; else System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_ABC108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; int DIF1 = x2 - x1 ; int DIF2 = y2 - y1 ; int x3 = x2 - DIF2 ; int y3 = y2 + DIF1 ; int x4 = x1 - DIF2 ; int y4 = y1 + DIF1 ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; sc.close ( ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.StringTokenizer ; public class atcoder_ABC171_E { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int N = Integer.parseInt ( st.nextToken ( ) ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer.parseInt ( st.nextToken ( ) ) ; } int XOR = 0 ; for ( int i = 0 ; i < N ; i ++ ) { XOR ^= arr [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { System.out.print ( arr [ i ] ^ XOR + " " ) ; } } }
import java.util.* ; public class codeforces_445_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; char [ ] arr = new char [ m ] ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr = sc.next ( ).toCharArray ( ) ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == '.' ) { if ( ( i + j ) % 2 == 0 ) arr [ j ] = 'B' ; else arr [ j ] = 'W' ; } } sb.append ( arr ).append ( "\n" ) ; } System.out.println ( sb ) ; } }
import java.util.Arrays ; import java.util.Scanner ; public class atcoder_ABC143_D { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; long [ ] list = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { list [ i ] = stdIn.nextLong ( ) ; } Arrays.sort ( list ) ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int left = lowerBound ( list , list [ i ] + list [ j ] ) ; int right = upperBound ( list , list [ i ] + list [ j ] ) ; int counter = 0 ; if ( left <= i && i < right ) { counter ++ ; } if ( left <= j && j < right ) { counter ++ ; } sum += counter ; } } sum = sum / 3 ; System.out.println ( sum ) ; } public static int lowerBound ( long [ ] a , long x ) { int left = 0 ; int right = a.length - 1 ; while ( left <= right ) { int mid = ( left + right ) / 2 ; if ( a [ mid ] >= x ) { right = mid - 1 ; } else { left = mid + 1 ; } } return left ; } public static int upperBound ( long [ ] a , long x ) { int left = 0 ; int right = a.length - 1 ; while ( left <= right ) { int mid = ( left + right ) / 2 ; if ( a [ mid ] > x ) { right = mid - 1 ; } else { left = mid + 1 ; } } return left ; } }
[java]
import java.util.Scanner ; public class codeforces_30_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int a = scan.nextInt ( ) ; int b = scan.nextInt ( ) ; int n = scan.nextInt ( ) ; boolean found = false ; for ( int x = - 1000 ; x <= 1000 ; x ++ ) { if ( a * Math.pow ( x , n ) == b ) { System.out.println ( x ) ; found = true ; break ; } } if ( ! found ) { System.out.println ( "No solution" ) ; } } }
import java.util.ArrayList ; import java.util.Arrays ; import java.util.List ; import java.util.Scanner ; public class atcoder_ABC142_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list.add ( arr [ i ] ) ; } list.sort ( ) ; for ( int i = 0 ; i < list.size ( ) - 1 ; i ++ ) { System.out.print ( list.get ( i ) + " " ) ; } System.out.println ( list.get ( list.size ( ) - 1 ) ) ; } }
import java.util.Scanner ; public class atcoder_ABC171_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += a [ i ] ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_ABC107_D { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int m = n * ( n + 1 ) / 4 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = stdIn.nextInt ( ) ; } int [ ] d = new int [ 200001 ] ; int k = 0 ; for ( int i = 0 ; i < 200001 ; i ++ ) { if ( d [ i ] == 0 ) { d [ i ] = ++ k ; } } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = d [ a [ i ] ] ; } int ans = 0 ; for ( int i = 0 ; i < 200001 ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] <= i ) { sum ++ ; } } ans += sum ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_106_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; arr [ i ] [ 2 ] = sc.nextInt ( ) ; arr [ i ] [ 3 ] = sc.nextInt ( ) ; } int [ ] out = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ 0 ] > arr [ j ] [ 0 ] && arr [ i ] [ 1 ] > arr [ j ] [ 1 ] && arr [ i ] [ 2 ] > arr [ j ] [ 2 ] ) { out [ i ] ++ ; } } } int min = 100000 ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( out [ i ] == 0 && arr [ i ] [ 3 ] < min ) { min = arr [ i ] [ 3 ] ; index = i + 1 ; } } System.out.println ( index ) ; } }
import java.util.* ; public class atcoder_AGC002_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a > 0 ) { System.out.println ( "Positive" ) ; } else if ( a <= 0 && b >= 0 ) { System.out.println ( "Zero" ) ; } else if ( ( a + b ) % 2 == 0 ) { System.out.println ( "Negative" ) ; } else { System.out.println ( "Positive" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC140_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s.charAt ( i ) != s.charAt ( i + 1 ) ) cnt ++ ; } int ans = 0 ; if ( 2 * k >= cnt ) ans = n - 1 ; else ans = ( n - 1 - cnt ) + 2 * k ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC167_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) , m = sc.nextInt ( ) , x = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = sc.nextInt ( ) ; } } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = m - 1 ; j >= 0 ; j -- ) { sum += arr [ i ] [ j ] ; if ( sum > x ) break ; } dp [ i ] = sum ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < m ; j ++ ) { sum += arr [ i ] [ j ] ; if ( sum > dp [ i ] ) break ; } ans = Math.max ( ans , dp [ i ] - sum ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC143_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; int ans = a - 2 * b ; if ( ans < 0 ) { ans = 0 ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC139_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int hole = 1 ; int i = 0 ; boolean check = true ; while ( check ) { if ( hole >= b ) { check = false ; } else { hole = a * ( i + 1 ) - i ; i ++ ; } } System.out.println ( i ) ; } }
import java.util.Scanner ; public class atcoder_ABC124_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = 0 ; while ( a > 0 && b > 0 ) { c += Math.max ( a , b ) ; if ( a > b ) { a -- ; } else { b -- ; } } System.out.println ( c ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; import java.util.List ; public class codeforces_25_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list.add ( sc.nextInt ( ) % 2 ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += list.get ( i ) ; } if ( sum == 1 ) { System.out.println ( list.indexOf ( 1 ) + 1 ) ; } else { System.out.println ( list.indexOf ( 0 ) + 1 ) ; } } }
import java.util.Scanner ; public class codeforces_282_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int total = 0 ; String answer = "" ; for ( int i = 0 ; i < N ; i ++ ) { int A = sc.nextInt ( ) ; int G = sc.nextInt ( ) ; if ( total + A <= 500 ) { total += A ; answer += "A" ; } else { total -= G ; answer += "G" ; } } System.out.println ( answer ) ; } }
import java.util.Scanner ; public class atcoder_ABC169_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int answer = a * b / 100 ; System.out.println ( answer ) ; } }
import java.util.Scanner ; public class codeforces_350_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t [ ] = new int [ n + 1 ] ; t [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { t [ i ] = sc.nextInt ( ) ; } int a [ ] = new int [ n + 1 ] ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans [ ] = new int [ n + 1 ] ; int cnt [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { cnt [ a [ i ] ] ++ ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( t [ i ] == 1 ) { int crt [ ] = new int [ n + 1 ] ; crt [ 0 ] = i ; int x = a [ i ] ; while ( cnt [ x ] == 1 ) { crt [ crt.length - 1 ] = x ; x = a [ x ] ; } if ( crt.length > ans.length ) { ans = crt [ 0 ] ; } } } for ( int i = ans.length - 1 ; i >= 0 ; i -- ) { System.out.print ( ans [ i ] + " " ) ; } System.out.println ( ) ; } }
import java.util.Scanner ; public class atcoder_ABC142_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i + 1 ) % 2 == 1 ) { t ++ ; } } double ans = ( double ) t / n ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_333_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int [ ] arr = new int [ a * 2 ] ; for ( int i = 0 ; i < a * 2 ; i ++ ) { arr [ i ] = 1 ; } arr [ 0 ] = 0 ; arr [ a - 1 ] = 0 ; arr [ a ] = 0 ; arr [ a + a - 1 ] = 0 ; for ( int i = 0 ; i < b ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; arr [ x - 1 ] = 0 ; arr [ a + y - 1 ] = 0 ; } if ( a % 2 == 0 ) { if ( arr [ a / 2 ] == 1 && arr [ a + a / 2 ] == 1 ) { arr [ a / 2 ] = 0 ; } } System.out.println ( sum ( arr ) ) ; } public static int sum ( int [ ] arr ) { int sum = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { sum += arr [ i ] ; } return sum ; } }
import java.util.Scanner ; public class atcoder_ABC166_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] h = new int [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { h [ i ] = sc.nextInt ( ) ; } int [ ] [ ] path = new int [ n + 1 ] [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; path [ a ] [ i ] = b ; path [ b ] [ i ] = a ; } int c = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int f = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( h [ i ] <= h [ path [ i ] [ j ] ] ) { f = 1 ; break ; } } if ( f == 0 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.Scanner ; public class codeforces_79_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = 0 ; while ( x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2 ) { if ( a == 1 ) { if ( y >= 22 ) { y -= 22 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { x -= 2 ; y -= 2 ; } } else { if ( x >= 2 && y >= 2 ) { x -= 2 ; y -= 2 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { y -= 22 ; } } a = 1 - a ; } System.out.println ( a == 1 ? "Ciel" : "Hanako" ) ; } }
import java.util.Scanner ; public class atcoder_AGC004_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 && arr [ i ] != 0 ) { if ( arr [ i ] == arr [ arr [ i ] - 1 ] ) { ans ++ ; } else { if ( arr [ i ] - arr [ arr [ i ] - 1 ] > k ) { ans ++ ; } } } } if ( arr [ 0 ] != 1 ) { ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC174_C { public static void main ( String [ ] args ) throws IOException { Scanner scanner = new Scanner ( System.in ) ; int K = scanner.nextInt ( ) ; int T = 0 ; for ( int i = 1 ; i <= K ; i ++ ) { T = ( T % K ) * 10 + 7 ; if ( T % K == 0 ) { System.out.println ( i ) ; break ; } } if ( i > K ) { System.out.println ( - 1 ) ; } } }
import java.util.Scanner ; public class codeforces_67_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == 0 ) { System.out.print ( ( j + 1 ) + " " ) ; break ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == 0 ) { a [ j ] -- ; break ; } else { a [ j ] -- ; } } } } } }
[INST:py]
import math

def solve():
    a, b, h, m = map(int, input().split())
    C = abs(360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m)
    if C > 180:
        C = 360 - C
    cosC = math.cos(math.radians(C))
    return math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosC)


def main():
    print(solve())


if __name__ == '__main__':
    main()
import java.util.Scanner ; public class codeforces_354_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int L = stdIn.nextInt ( ) ; int R = stdIn.nextInt ( ) ; int QL = stdIn.nextInt ( ) ; int QR = stdIn.nextInt ( ) ; int [ ] W = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { W [ i ] = stdIn.nextInt ( ) ; } int [ ] sum_el = new int [ n + 1 ] ; sum_el [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum_el [ i ] = W [ i - 1 ] + sum_el [ i - 1 ] ; } int answer = QR * ( n - 1 ) + sum_el [ n ] * R ; for ( int i = 1 ; i <= n ; i ++ ) { int energy = L * sum_el [ i ] + R * ( sum_el [ n ] - sum_el [ i ] ) ; if ( i > n - i ) { energy += ( i - ( n - i ) - 1 ) * QL ; } else if ( n - i > i ) { energy += ( n - i - i - 1 ) * QR ; } if ( energy < answer ) { answer = energy ; } } System.out.println ( answer ) ; } }
import java.util.Scanner ; public class codeforces_49_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; char [ ] vowels = { 'a' , 'e' , 'i' , 'o' , 'u' , 'y' , 'A' , 'E' , 'I' , 'O' , 'U' , 'Y' } ; for ( int i = S.length ( ) - 1 ; i >= 0 ; i -- ) { if ( S.charAt ( i ) == ' ' || S.charAt ( i ) == '?' ) { continue ; } else { if ( vowels.length > 0 && vowels [ 0 ] == S.charAt ( i ) ) { System.out.println ( "YES" ) ; break ; } else { System.out.println ( "NO" ) ; break ; } } } } }
import java.util.Scanner ; public class atcoder_ABC168_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; String S = sc.next ( ) ; if ( S.length ( ) <= K ) { System.out.println ( S ) ; } else { System.out.println ( S.substring ( 0 , K ) + "..." ) ; } } }
import java.util.Scanner ; public class atcoder_ABC149_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; boolean [ ] prime = new boolean [ 100010 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int i = 4 ; i < 100010 ; i += 2 ) { prime [ i ] = false ; } int i = 3 ; while ( i * i <= 100008 ) { if ( prime [ i ] ) { for ( int j = i + i ; j <= 100008 ; j += i ) { prime [ j ] = false ; } } i += 2 ; } for ( int i = x ; i <= 100008 ; i ++ ) { if ( prime [ i ] ) { System.out.println ( i ) ; break ; } } } }
import java.util.* ; public class codeforces_302_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; String s = sc.next ( ) ; int count = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '-' ) count ++ ; } int k = Math.min ( count , n - count ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; b = b - a ; if ( b % 2 == 0 && b <= k * 2 ) sb.append ( "1" + "\n" ) ; else sb.append ( "0" + "\n" ) ; } System.out.println ( sb ) ; } }
import java.util.Scanner ; public class codeforces_58_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; for ( int i = n ; i > 0 ; i -- ) { if ( n % i == 0 ) { n = i ; System.out.print ( i + " " ) ; } } } }
import java.util.Scanner ; public class atcoder_AGC028_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; int [ ] S_arr = new int [ N ] ; int [ ] T_arr = new int [ M ] ; for ( int i = 0 ; i < N ; i ++ ) { S_arr [ i ] = S.charAt ( i ) - '0' ; } for ( int i = 0 ; i < M ; i ++ ) { T_arr [ i ] = T.charAt ( i ) - '0' ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( S_arr [ i ] != T_arr [ j ] ) { ans = - 1 ; break ; } } if ( ans == - 1 ) { break ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; import java.util.Arrays ; public class codeforces_56_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int mn = n + 1 , mx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; if ( a [ i ] != i + 1 ) { if ( a [ i ] < i + 1 ) { mn = Math.min ( mn , i ) ; } else { mx = Math.max ( mx , i ) ; } } } if ( mx == - 1 ) { System.out.println ( "0 0" ) ; } else { int [ ] b = Arrays.copyOfRange ( a , mn , mx + 1 ) ; b = reverse ( b ) ; a = Arrays.copyOfRange ( a , 0 , mn ) ; a = append ( a , b ) ; a = append ( a , Arrays.copyOfRange ( a , mx + 1 , n ) ) ; if ( Arrays.equals ( a , sorted ( a ) ) ) { System.out.println ( mn + 1 + " " + mx + 1 ) ; } else { System.out.println ( "0 0" ) ; } } } public static int [ ] reverse ( int [ ] a ) { int [ ] b = new int [ a.length ] ; for ( int i = 0 ; i < a.length ; i ++ ) { b [ i ] = a [ a.length - i - 1 ] ; } return b ; } public static int [ ] append ( int [ ] a , int [ ] b ) { int [ ] c = new int [ a.length + b.length ] ; System.arraycopy ( a , 0 , c , 0 , a.length ) ; System.arraycopy ( b , 0 , c , a.length , b.length ) ; return c ; } public static int [ ] sorted ( int [ ] a ) { int [ ] b = new int [ a.length ] ; for ( int i = 0 ; i < a.length ; i ++ ) { b [ i ] = i + 1 ; } return b ; } }
import java.util.Scanner ; public class codeforces_99_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; s = s.replace ( "." , "" ) ; if ( s.charAt ( s.length ( ) - 1 ) == '9' ) { System.out.println ( "GOTO Vasilisa." ) ; } else { int i = Integer.parseInt ( s.substring ( s.length ( ) - 1 ) ) ; if ( i < 5 ) { s = s.substring ( 0 , s.length ( ) - 1 ) ; System.out.println ( s ) ; } else { s = s.substring ( 0 , s.length ( ) - 1 ) ; int num = Integer.parseInt ( s ) + 1 ; s = String.valueOf ( num ) ; System.out.println ( s ) ; } } } }
import java.util.Scanner ; public class codeforces_412_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int k = stdIn.nextInt ( ) ; String v = stdIn.next ( ) ; String [ ] d = { "LEFT" , "RIGHT" } ; boolean f = k - 1 < n - k ; int m = Math.min ( k - 1 , n - k ) ; String [ ] a = new String [ m + 2 * v.length ( ) ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = d [ f ? 1 : 0 ] ; } for ( int i = 0 ; i < v.length ( ) ; i ++ ) { a [ i + m ] = "PRINT " + v.charAt ( v.length ( ) - 1 - i ) ; a [ i + m + 1 ] = d [ f ? 0 : 1 ] ; } for ( int i = 0 ; i < a.length - 1 ; i ++ ) { System.out.println ( a [ i ] ) ; } } }
import java.util.Scanner ; public class codeforces_86_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = - 1 ; for ( int i = a ; i <= b ; i ++ ) { String s = String.valueOf ( i ) ; int rev = 0 ; for ( int j = s.length ( ) - 1 ; j >= 0 ; j -- ) { rev = rev * 10 + ( 9 - Integer.parseInt ( s.charAt ( j ) + "" ) ) ; } ans = Math.max ( ans , rev * i ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC128_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int a [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int p [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { p [ i ] = sc.nextInt ( ) ; } int q = 0 ; for ( int i = 0 ; i < m ; i ++ ) { q += a [ i ] ; } int r [ ] = new int [ n - q + 1 ] ; int x = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( q % i == 0 ) { r [ x ++ ] = i ; } } int ans = 0 ; for ( int i = 0 ; i <= q ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i % 2 == p [ j ] ) { int k = 0 ; for ( int l = 0 ; l < m ; l ++ ) { if ( l != j ) { k += a [ l ] ; } } if ( i - k < 0 || i - k > q ) { break ; } } } else { break ; } } ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_AGC004_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long x = sc.nextLong ( ) ; long [ ] a = new long [ n ] ; long [ ] [ ] b = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextLong ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int k = i - j ; if ( k < 0 ) { k += n ; } b [ i ] [ j ] = Math.min ( b [ i ] [ j ] , a [ k ] ) ; } } long m = ( long ) 1e15 ; for ( int i = 0 ; i < n ; i ++ ) { m = Math.min ( m , Arrays.stream ( b [ i ] ).sum ( ) + x * i ) ; } System.out.println ( m ) ; } }
import java.util.Scanner ; public class atcoder_ABC150_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextLong ( ) ; } long mod = 1000000007 ; long x = ( long ) ( Math.pow ( 2 , 2 * n - 2 ) ) ; long a = ( x * 2 ) % mod ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = ( ans + arr [ i ] * ( a + i * x ) ) % mod ; } System.out.println ( ans ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_456_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int N = Integer.parseInt ( br.readLine ( ) ) ; int [ ] [ ] board = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] str = br.readLine ( ).split ( " " ) ; board [ i ] [ 0 ] = Integer.parseInt ( str [ 0 ] ) ; board [ i ] [ 1 ] = Integer.parseInt ( str [ 1 ] ) ; } int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = board [ i ] [ 0 ] ; y [ i ] = board [ i ] [ 1 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( y [ i ] > y [ i + 1 ] ) { System.out.println ( "Happy Alex" ) ; return ; } } System.out.println ( "Poor Alex" ) ; } }
import java.util.Scanner ; public class codeforces_598_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int n = sc.nextInt ( ) ; int s = ( 1 + n ) * n / 2 ; int t = 1 ; while ( t <= n ) { s -= 2 * t ; t *= 2 ; } System.out.println ( s ) ; } } }
import java.util.Scanner ; public class atcoder_AGC027_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = Integer.parseInt ( stdIn.next ( ) ) ; int x = Integer.parseInt ( stdIn.next ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = stdIn.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System.out.println ( sum + n * x + 5 * arr [ n - 1 ] ) ; } }
import java.util.* ; public class codeforces_408_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s1 = sc.next ( ) ; String s2 = sc.next ( ) ; int res = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s1.length ( ) ; i ++ ) { map.put ( s1.charAt ( i ) , map.getOrDefault ( s1.charAt ( i ) , 0 ) + 1 ) ; } for ( int i = 0 ; i < s2.length ( ) ; i ++ ) { char c = s2.charAt ( i ) ; if ( ! map.containsKey ( c ) ) { System.out.println ( - 1 ) ; return ; } int val = map.get ( c ) ; res += Math.min ( val , 1 ) ; map.put ( c , val - 1 ) ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class atcoder_AGC006_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; String s = in.next ( ) ; String t = in.next ( ) ; if ( s.equals ( t ) ) { System.out.println ( n ) ; } else { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - i ; j ++ ) { if ( s.charAt ( i + j ) != t.charAt ( j ) ) { break ; } if ( j == n - i - 1 ) { cnt = n - i ; } } } System.out.println ( 2 * n - cnt ) ; } in.close ( ) ; } }
import java.util.Scanner ; public class atcoder_AGC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) res ++ ; } if ( res % 2 == 1 ) { System.out.println ( "1" ) ; } else { System.out.println ( "0" ) ; } } }
[java]
import java.util.Scanner ; public class codeforces_31_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( arr [ k ] != arr [ j ] && arr [ k ] != arr [ i ] && arr [ k ] == arr [ i ] + arr [ j ] ) { System.out.println ( k + 1 + " " + j + 1 + " " + i + 1 ) ; return ; } } } } System.out.println ( - 1 ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_AGC011_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int m = stdIn.nextInt ( ) ; int [ ] vis = new int [ n + 1 ] ; int ci = 0 ; int cb = 0 ; int cc = 0 ; int [ ] [ ] g = new int [ n + 1 ] [ ] ; for ( int i = 0 ; i < m ; i ++ ) { int u = stdIn.nextInt ( ) ; int v = stdIn.nextInt ( ) ; g [ u ] = append ( g [ u ] , v ) ; g [ v ] = append ( g [ v ] , u ) ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ] == 0 ) { if ( g [ i ].length == 0 ) ci ++ ; else if ( dfs ( i ) ) cb ++ ; else cc ++ ; } } System.out.println ( ci * ci + 2 * ci * ( n - ci ) + cc * cc + 2 * cb * cc + 2 * cb * cb ) ; } static int [ ] append ( int [ ] a , int b ) { int [ ] c = new int [ a.length + 1 ] ; for ( int i = 0 ; i < a.length ; i ++ ) c [ i ] = a [ i ] ; c [ a.length ] = b ; return c ; } static int dfs ( int x ) { java.util.Queue < Integer > stk = new java.util.LinkedList < > ( ) ; stk.add ( x ) ; stk.add ( 1 ) ; while ( ! stk.isEmpty ( ) ) { int u = stk.remove ( ) ; int col = stk.remove ( ) ; if ( vis [ u ] != 0 ) { if ( vis [ u ] != col ) return 0 ; continue ; } vis [ u ] = col ; for ( int i : g [ u ] ) stk.add ( i ) ; stk.add ( - 1 ) ; } return 1 ; } }
[java]
import java.util.Scanner ; public class atcoder_ABC125_C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in.nextInt ( ) ; } int left [ ] = new int [ n + 1 ] ; int right [ ] = new int [ n + 1 ] ; left [ 0 ] = right [ n ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { left [ i ] = Math.max ( left [ i - 1 ] , a [ i - 1 ] ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { right [ i ] = Math.max ( right [ i + 1 ] , a [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math.max ( ans , Math.max ( left [ i ] , right [ i + 1 ] ) ) ; } System.out.println ( ans ) ; } }

[/java]
[INST:java]
import java.util.Scanner ; public class atcoder_AGC007_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int d = stdIn.nextInt ( ) ; int x = stdIn.nextInt ( ) ; double ret = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ret += d + ( n - 0.5 ) * x ; d = d + d / n + 5 * x / ( 2 * n ) ; x += 2 * x / n ; n -- ; } System.out.println ( ret ) ; } }
import java.util.Scanner ; public class codeforces_459_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int min = arr [ 0 ] ; int max = arr [ arr.length - 1 ] ; int minCount = 0 ; int maxCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min ) { minCount ++ ; } else if ( arr [ i ] == max ) { maxCount ++ ; } } if ( min == max ) { System.out.println ( min + " " + n * ( n - 1 ) / 2 ) ; } else { System.out.println ( min + " " + minCount * maxCount ) ; } } }
import java.util.Scanner ; public class atcoder_ABC125_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] v = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] - c [ i ] > 0 ) { ans += v [ i ] - c [ i ] ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; String ans = "" ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( S.charAt ( i ) == '0' || S.charAt ( i ) == '1' ) { ans += S.charAt ( i ) ; } else if ( S.charAt ( i ) == 'B' && ans.length ( ) != 0 ) { ans = ans.substring ( 0 , ans.length ( ) - 1 ) ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_546_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int total = 0 ; if ( 1 <= k && k <= 1000 && 1 <= w && w <= 1000 ) { for ( int i = 1 ; i <= w ; i ++ ) { total += i * k ; } if ( total > n ) { System.out.println ( total - n ) ; } else { System.out.println ( 0 ) ; } } } }
import java.util.Scanner ; public class codeforces_231_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int cnt = a + b ; if ( cnt > 1 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.Scanner ; public class atcoder_AGC033_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int [ ] [ ] graph = new int [ h + 2 ] [ w + 2 ] ; for ( int i = 1 ; i <= h ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { graph [ i ][ j ] = sc.nextInt ( ) ; } } for ( int i = 1 ; i <= h ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { graph [ i ][ j ] = Math.min ( graph [ i ][ j ] , graph [ i ][ j + 1 ] ) ; } } for ( int i = 1 ; i <= h ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { graph [ i ][ j ] = Math.min ( graph [ i ][ j ] , graph [ i + 1 ][ j ] ) ; } } for ( int i = 1 ; i <= h ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { graph [ i ][ j ] = Math.min ( graph [ i ][ j ] , graph [ i - 1 ][ j ] ) ; } } for ( int i = 1 ; i <= h ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { graph [ i ][ j ] = Math.min ( graph [ i ][ j ] , graph [ i ][ j - 1 ] ) ; } } System.out.println ( Math.max ( graph [ h ][ w ] , graph [ h + 1 ][ w ] ) ) ; } }
import java.io.* ; import java.util.* ; public class atcoder_ABC127_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int r = sc.nextInt ( ) ; int D = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; for ( int i = 2 ; i <= 12 ; i ++ ) { long ans = ( long ) Math.pow ( r , i - 1 ) * ( x + D / ( 1 - r ) ) - D / ( 1 - r ) ; System.out.println ( ans ) ; } } }
[SYS]
import java.util.Scanner ; public class atcoder_AGC038_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( i < B ) { if ( j < A ) { System.out.print ( 0 ) ; } else { System.out.print ( 1 ) ; } } else { if ( j < A ) { System.out.print ( 1 ) ; } else { System.out.print ( 0 ) ; } } } System.out.println ( ) ; } } }
[java]
import java.util.Scanner ; public class codeforces_500_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int T = sc.nextInt ( ) ; int [ ] S = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc.nextInt ( ) ; } int currentCell = 0 ; while ( currentCell <= T ) { currentCell += S [ currentCell - 1 ] ; if ( currentCell == T ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ABC155_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; long left = - ( long ) ( 1e18 + 1 ) ; long right = ( long ) ( 1e18 + 1 ) ; while ( left + 1 < right ) { long mid = ( left + right ) / 2 ; long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { int l = 0 ; int r = n ; while ( l + 1 < r ) { int c = ( l + r ) / 2 ; if ( arr [ i ] * arr [ c ] < mid ) l = c ; else r = c ; } count += r ; } else { int l = 0 ; int r = n ; while ( l + 1 < r ) { int c = ( l + r ) / 2 ; if ( arr [ i ] * arr [ c ] < mid ) r = c ; else l = c ; } count += n - l ; } if ( arr [ i ] * arr [ i ] < mid ) count -- ; } count /= 2 ; if ( count < K ) left = mid ; else right = mid ; } System.out.println ( left ) ; } }
import java.util.Scanner ; public class atcoder_ABC147_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < 60 ; i ++ ) { int bs = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( A [ j ] >> i ) % 2 == 1 ) { bs ++ ; } } ans = ( ans + bs * ( N - bs ) * ( 1 << i ) ) % 1000000007 ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC046_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; ans = 360 / gcd ( 360 , N ) ; System.out.println ( ans ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } }
import java.util.* ; public class codeforces_596_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] r = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = sc.nextInt ( ) ; } int ans = Math.abs ( r [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { ans += Math.abs ( r [ i ] - r [ i - 1 ] ) ; } System.out.println ( ans ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_171_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; String [ ] str = br.readLine ( ).split ( "" ) ; int x = Math.max ( str [ 0 ].length ( ) , str [ 1 ].length ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; int c = 0 ; for ( int i = 0 ; i < x ; i ++ ) { int d = Integer.parseInt ( str [ 1 ].substring ( i , i + 1 ) ) + Integer.parseInt ( str [ 0 ].substring ( x - i - 1 , x - i - 1 ) ) + c ; if ( d > 9 ) { sb.append ( d - 10 ) ; c = 1 ; } else { sb.append ( d ) ; c = 0 ; } } if ( c == 1 ) { sb.append ( 1 ) ; } sb = sb.reverse ( ) ; System.out.println ( Integer.parseInt ( sb.toString ( ) ) ) ; } }
import java.util.Scanner ; public class codeforces_276_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int cnt = 0 ; boolean x = true ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( ! s.substring ( i , i + 1 ).equals ( s.substring ( i + 1 , i + 2 ) ) ) { cnt ++ ; } } if ( cnt == 0 ) { x = false ; } if ( x ) { if ( s.length ( ) % 2 == 0 ) { System.out.println ( "First" ) ; } else { System.out.println ( "Second" ) ; } } else { if ( s.length ( ) % 2 == 0 ) { System.out.println ( "Second" ) ; } else { System.out.println ( "First" ) ; } } } }
import java.util.Scanner ; public class codeforces_617_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; } if ( cnt == 0 ) { System.out.println ( 0 ) ; } else { int res = 1 ; for ( int i = 0 ; i < cnt ; i ++ ) { res *= 2 ; } System.out.println ( res - 1 ) ; } } }
import java.util.Scanner ; public class codeforces_55_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int a = scanner.nextInt ( ) ; int b = scanner.nextInt ( ) ; int c = scanner.nextInt ( ) ; String op = scanner.next ( ) ; int ans = 10000000000000000000000000 ; if ( op.equals ( "+" ) ) { if ( b + c > ans ) { ans = b + c ; } } else { if ( b * c > ans ) { ans = b * c ; } } if ( a != 0 ) { if ( op.equals ( "+" ) ) { if ( a + b > ans ) { ans = a + b ; } } else { if ( a * b > ans ) { ans = a * b ; } } if ( a != 0 ) { if ( op.equals ( "+" ) ) { if ( a + c > ans ) { ans = a + c ; } } else { if ( a * c > ans ) { ans = a * c ; } } if ( b != 0 ) { if ( op.equals ( "+" ) ) { if ( b + c > ans ) { ans = b + c ; } } else { if ( b * c > ans ) { ans = b * c ; } } } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC178_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int c = stdIn.nextInt ( ) ; int d = stdIn.nextInt ( ) ; long ans = 0 ; ans = Math.max ( ans , a * c ) ; ans = Math.max ( ans , b * d ) ; ans = Math.max ( ans , a * d ) ; ans = Math.max ( ans , b * c ) ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC164_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int s = sc.nextInt ( ) ; int l = 2019 ; int [ ] m = new int [ l ] ; m [ 0 ] = 1 ; int a = 0 ; int r = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { a += Integer.parseInt ( String.valueOf ( s.charAt ( s.length ( ) - i - 1 ) ) ) * ( int ) Math.pow ( 10 , i ) ; r += m [ a % l ] ; m [ a % l ] ++ ; } System.out.println ( r ) ; } }
[PYTHON]
import os , sys , io , math
from tokenize import Triple
from math import *
I = lambda : [ * map ( int , sys.stdin.readline ( ).split ( ) ) ]
IS = lambda : input ( )
IN = lambda : int ( input ( ) )
IF = lambda : float ( input ( ) )
n = IN ( )
id = 0
l , r = map ( int , input ( ).split ( ) )
for i in range ( 1 , n ) :
    li , ri = map ( int , input ( ).split ( ) )
    if li <= l and r <= ri : id = i
    elif li < l or r < ri : id = n
    l = min ( l , li )
    r = max ( r , ri )
print ( - 1 if id == n else id + 1 )
import java.util.Scanner ; public class atcoder_ABC132_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { arr [ s.charAt ( i ) - 'a' ] ++ ; } boolean flag = true ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] != 2 ) { flag = false ; break ; } } if ( ! flag ) { System.out.println ( "No" ) ; } else { System.out.println ( "Yes" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC169_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; if ( n == 1 ) { System.out.println ( 0 ) ; return ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) { x ++ ; } } ans += x ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC126_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; ArrayList < Node > nodes = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { nodes.add ( new Node ( ) ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; nodes.get ( u - 1 ).addAdj ( nodes.get ( v - 1 ) , w ) ; nodes.get ( v - 1 ).addAdj ( nodes.get ( u - 1 ) , w ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! visited [ i ] ) { dfs ( nodes.get ( i ) , visited ) ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.println ( nodes.get ( i ).color ) ; } } static void dfs ( Node node , boolean [ ] visited ) { visited [ node.id ] = true ; for ( int i = 0 ; i < node.adj.size ( ) ; i ++ ) { if ( ! visited [ node.adj.get ( i ).id ] ) { dfs ( node.adj.get ( i ) , visited ) ; } } } static class Node { int id ; int color ; ArrayList < Node > adj = new ArrayList < > ( ) ; public Node ( ) { this.id = this.adj.size ( ) ; } public void addAdj ( Node node , int w ) { this.adj.add ( node ) ; } } }
import java.util.Scanner ; public class atcoder_ABC129_E { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int mod = 1000000007 ; int n = stdIn.next ( ).length ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { char c = stdIn.next ( ).charAt ( i ) ; if ( c == '0' ) { dp [ i + 1 ] [ 0 ] += dp [ i ] [ 0 ] ; dp [ i + 1 ] [ 1 ] += dp [ i ] [ 1 ] * 3 ; } else { dp [ i + 1 ] [ 0 ] += dp [ i ] [ 0 ] * 2 ; dp [ i + 1 ] [ 1 ] += dp [ i ] [ 0 ] ; dp [ i + 1 ] [ 1 ] += dp [ i ] [ 1 ] * 3 ; } dp [ i + 1 ] [ 0 ] %= mod ; dp [ i + 1 ] [ 1 ] %= mod ; } System.out.println ( ( dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ) % mod ) ; } }
import java.util.Scanner ; public class codeforces_678_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; String s = "" ; while ( true ) { if ( n % 400 == 0 || ( n % 4 == 0 && n % 100 != 0 ) ) { if ( s.equals ( "m" ) ) { s = "w" ; n ++ ; } else if ( s.equals ( "t" ) ) { s = "th" ; n ++ ; } else if ( s.equals ( "w" ) ) { s = "f" ; n ++ ; } else if ( s.equals ( "th" ) ) { s = "sa" ; n ++ ; } else if ( s.equals ( "f" ) ) { s = "s" ; n ++ ; } else if ( s.equals ( "sa" ) ) { s = "m" ; n ++ ; } else if ( s.equals ( "s" ) ) { s = "t" ; n ++ ; } } else { if ( s.equals ( "m" ) ) { s = "t" ; n ++ ; } else if ( s.equals ( "t" ) ) { s = "w" ; n ++ ; } else if ( s.equals ( "w" ) ) { s = "th" ; n ++ ; } else if ( s.equals ( "th" ) ) { s = "f" ; n ++ ; } else if ( s.equals ( "f" ) ) { s = "sa" ; n ++ ; } else if ( s.equals ( "sa" ) ) { s = "s" ; n ++ ; } else if ( s.equals ( "s" ) ) { s = "m" ; n ++ ; } } if ( s.equals ( "f" ) && ( n % 400 == 0 || ( n % 4 == 0 && n % 100 != 0 ) ) ) { break ; } else if ( s.equals ( "f" ) && ! ( n % 400 == 0 || ( n % 4 == 0 && n % 100 != 0 ) ) ) { break ; } } System.out.println ( n ) ; } }
import java.util.Scanner ; public class codeforces_462_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; char [ ] s = sc.next ( ).toCharArray ( ) ; int [ ] count = new int [ 26 ] ; for ( char c : s ) { count [ c - 'A' ] ++ ; } int res = 0 ; for ( int i = 0 ; i < count.length ; i ++ ) { if ( count [ i ] >= k ) { res += k * k ; System.out.println ( res ) ; return ; } k -= count [ i ] ; res += count [ i ] * count [ i ] ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_334_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int i = 1 ; int j = N * N ; while ( i < j ) { System.out.println ( i + " " + j ) ; i ++ ; j -- ; } } }
import java.io.* ; import java.util.* ; public class atcoder_AGC029_C { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner.nextInt ( ) ; } int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { k = Math.max ( k , a [ i ] ) ; } if ( k >= n ) { System.out.println ( n ) ; } else { if ( ( k + 1 ) >= n ) { System.out.println ( n - 1 ) ; } else { System.out.println ( n - ( k + 1 ) ) ; } } } }
[java]
import java.util.Scanner ; public class codeforces_313_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int [ ] a = new int [ s.length ( ) + 1 ] ; a [ 0 ] = 0 ; for ( int i = 1 ; i < s.length ( ) ; i ++ ) { a [ i ] = a [ i - 1 ] ; if ( s.charAt ( i - 1 ) == s.charAt ( i ) ) { a [ i ] ++ ; } } int q = sc.nextInt ( ) ; while ( q -- > 0 ) { int m = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; System.out.println ( a [ l - 1 ] - a [ m - 1 ] ) ; } } }
import java.util.Scanner ; public class codeforces_108_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in.nextInt ( ) ; } Arrays.sort ( arr ) ; boolean found = false ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ i - 1 ] && arr [ i ] < arr [ i - 1 ] * 2 ) { found = true ; break ; } } if ( found ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class codeforces_705_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = sc.nextInt ( ) ; } int c = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( w [ i ] == 1 ) { System.out.println ( c ) ; } else if ( w [ i ] % 2 == 0 ) { c = 3 - c ; System.out.println ( c ) ; } else { System.out.println ( c ) ; } } } }
import java.util.Scanner ; public class atcoder_ABC127_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; int [ ] ans = new int [ 2 ] ; while ( q -- > 0 ) { int [ ] a = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } if ( a [ 0 ] == 1 ) { if ( a [ 1 ] > 0 ) { ans [ 1 ] += a [ 1 ] ; } else { ans [ 0 ] += a [ 1 ] ; } } else { if ( a [ 1 ] > 0 ) { ans [ 1 ] += a [ 2 ] ; } else { ans [ 0 ] += a [ 2 ] ; } } } System.out.println ( ans [ 0 ] + " " + ans [ 1 ] ) ; } }
import java.util.Scanner ; public class atcoder_ABC153_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int h = stdIn.nextInt ( ) ; int a = stdIn.nextInt ( ) ; int sho = h / a ; int am = h % a ; if ( am != 0 ) { sho ++ ; } System.out.println ( sho ) ; } }
import java.util.Scanner ; public class atcoder_ABC158_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; String S = scan.next ( ) ; String result = "Yes" ; if ( ! S.contains ( "A" ) || ! S.contains ( "B" ) ) { result = "No" ; } System.out.println ( result ) ; } }
import java.util.Scanner ; public class atcoder_AGC005_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = stdIn.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } long ans = 0 ; for ( int k = n - 1 ; k >= 0 ; k -- ) { long l = 1 , r = 1 ; if ( k > 0 && a [ k - 1 ] > a [ k ] ) { l += b [ k - 1 ] ; } if ( k + 1 < n && a [ k + 1 ] > a [ k ] ) { r += b [ k + 1 ] ; } ans += l * r * a [ k ] ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; import java.util.regex.Pattern ; public class codeforces_70_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; int count = 0 ; int len = 0 ; for ( String s : S.split ( "([.?!])" ) ) { s = s.trim ( ) ; if ( s.length ( ) == 0 ) continue ; if ( len + s.length ( ) > N ) { System.out.println ( "Impossible" ) ; return ; } len += s.length ( ) + ( len > 0 ) ; count ++ ; } System.out.println ( count ) ; } }
import java.util.Scanner ; public class atcoder_ABC125_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; double a = sc.nextDouble ( ) ; double b = sc.nextDouble ( ) ; double t = sc.nextDouble ( ) ; double cookie = 0 ; double time = a ; while ( time <= t + 0.5 ) { cookie = cookie + b ; time = time + a ; } System.out.println ( ( int ) cookie ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = stdIn.nextInt ( ) ; y [ i ] = stdIn.nextInt ( ) ; } double s = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i < j ) { int x1 = x [ i ] ; int x2 = x [ j ] ; int y1 = y [ i ] ; int y2 = y [ j ] ; int dx = x2 - x1 ; int dy = y2 - y1 ; s += Math.sqrt ( dx * dx + dy * dy ) ; } } } s /= N ; System.out.println ( s ) ; } }
import java.util.Scanner ; public class atcoder_ABC164_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int S = in.nextInt ( ) ; int W = in.nextInt ( ) ; if ( S > W ) { System.out.println ( "safe" ) ; } else { System.out.println ( "unsafe" ) ; } } }
import java.util.Scanner ; public class codeforces_514_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int reverse = 0 ; while ( n > 0 ) { int rem = n % 10 ; if ( rem > 4 ) { reverse = reverse * 10 + 9 - rem ; } else { reverse = reverse * 10 + rem ; } n = n / 10 ; } System.out.println ( reverse ) ; } }
import java.io.* ; import java.util.* ; public class codeforces_272_B { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int y = 1 ; while ( x > 1 ) { if ( x % 2 == 1 ) { y ++ ; } x /= 2 ; } a [ i ] = y ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) { count ++ ; } } } System.out.println ( count ) ; } } }
[java]
import java.util.Scanner ; public class codeforces_96_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int m = ( int ) ( Math.log10 ( n ) + 1 ) ; int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int x = n % 10 ; n /= 10 ; if ( x > 4 ) { ans = ans * 10 + 7 ; } else { ans = ans * 10 + 4 ; } } System.out.println ( ans ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ABC169_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = Integer.parseInt ( sc.nextLine ( ) ) ; int [ ] low = new int [ n ] ; int [ ] high = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] s = sc.nextLine ( ).split ( " " ) ; low [ i ] = Integer.parseInt ( s [ 0 ] ) ; high [ i ] = Integer.parseInt ( s [ 1 ] ) ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res += high [ i ] - low [ i ] ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class atcoder_AGC035_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] deg = new int [ N ] ; boolean [ ] flag = new boolean [ N ] ; boolean [ ] parity = new boolean [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; deg [ a - 1 ] ++ ; deg [ b - 1 ] ++ ; } if ( M % 2 == 1 ) { System.out.println ( - 1 ) ; return ; } Queue < Integer > Q = new LinkedList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { Q.add ( deg [ i ] * 1000 + i ) ; } while ( ! Q.isEmpty ( ) ) { int u = Q.poll ( ) / 1000 ; if ( flag [ u ] ) { continue ; } flag [ u ] = true ; for ( int v : getAdj ( u , deg , N ) ) { edges [ v ].remove ( u ) ; if ( parity [ u ] == false && edges [ v ].size ( ) > 0 ) { System.out.println ( u + 1 + " " + v + 1 ) ; parity [ u ] = true ; } else { System.out.println ( v + 1 + " " + u + 1 ) ; parity [ v ] = ! parity [ v ] ; } deg [ v ] -- ; Q.add ( deg [ v ] * 1000 + v ) ; } } } private static List < Integer > getAdj ( int u , int [ ] deg , int N ) { List < Integer > adj = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( deg [ i ] > 0 && edges [ i ].contains ( u ) ) { adj.add ( i ) ; } } return adj ; } }
import java.util.Scanner ; public class codeforces_147_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += Math.min ( sum - a [ i ] , k ) ; } System.out.println ( ans ) ; } }
[java]
import java.util.Scanner ; public class atcoder_ABC152_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int lcm = 1 ; for ( int i = 0 ; i < n ; i ++ ) { lcm = lcm * arr [ i ] / gcd ( lcm , arr [ i ] ) ; } int ans = lcm * sum ( arr ) % 1000000007 ; System.out.println ( ans ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static int sum ( int [ ] arr ) { int sum = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { sum += arr [ i ] ; } return sum ; } }

[/java]
import java.util.Scanner ; public class codeforces_203_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int x = stdIn.nextInt ( ) ; int t = stdIn.nextInt ( ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int da = stdIn.nextInt ( ) ; int db = stdIn.nextInt ( ) ; if ( x == 0 ) { System.out.println ( "YES" ) ; return ; } int aTime = Math.min ( a / da , t - 1 ) ; int bTime = Math.min ( b / db , t - 1 ) ; for ( int i = 0 ; i <= aTime ; i ++ ) { for ( int j = 0 ; j <= bTime ; j ++ ) { if ( a - da * i == x || b - db * j == x ) { System.out.println ( "YES" ) ; return ; } if ( ( a - da * i ) + ( b - db * j ) == x ) { System.out.println ( "YES" ) ; return ; } } } System.out.println ( "NO" ) ; } }
import java.util.* ; public class atcoder_ABC123_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int a [ ] = new int [ x ] ; int b [ ] = new int [ y ] ; int c [ ] = new int [ z ] ; int ab [ ] = new int [ x * y ] ; int abc [ ] = new int [ k ] ; for ( int i = 0 ; i < x ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < y ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < z ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < x ; i ++ ) { for ( int j = 0 ; j < y ; j ++ ) { ab [ i * y + j ] = a [ i ] + b [ j ] ; } } Arrays.sort ( ab ) ; for ( int i = 0 ; i < Math.min ( k , x * y ) ; i ++ ) { for ( int j = 0 ; j < z ; j ++ ) { abc [ i ] = ab [ i ] + c [ j ] ; } } Arrays.sort ( abc ) ; for ( int i = 0 ; i < k ; i ++ ) { System.out.println ( abc [ i ] ) ; } } }
import java.util.Scanner ; public class atcoder_ABC155_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int a = sc.nextInt ( ) ; if ( a <= 4 ) { sum += a ; } else { sum += 10 - a ; } } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class codeforces_369_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int k = stdIn.nextInt ( ) ; int l = stdIn.nextInt ( ) ; int r = stdIn.nextInt ( ) ; int sa = stdIn.nextInt ( ) ; int sk = stdIn.nextInt ( ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < k ; i ++ ) { ans [ i ] = sk / n ; if ( k - i > 0 ) { ans [ i ] ++ ; } } for ( int i = k ; i < n ; i ++ ) { ans [ i ] = sa / n ; if ( n - i > k ) { ans [ i ] ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
import java.util.Scanner ; public class atcoder_ABC133_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] [ ] g = new int [ n ] [ k ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; g [ u - 1 ] [ 0 ] = v - 1 ; g [ v - 1 ] [ 0 ] = u - 1 ; } int mod = 1000000007 ; long ans = 1 ; for ( int i = 1 ; i < k ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int count = 0 ; for ( int x : g [ j ] ) { if ( x != g [ j ] [ 0 ] ) { count ++ ; } } g [ j ] [ i ] = count ; } } for ( int i = 0 ; i < n ; i ++ ) { long res = 1 ; for ( int j = 1 ; j < k ; j ++ ) { res = res * ( g [ i ] [ j ] + 1 ) % mod ; } ans = ( ans * res ) % mod ; } System.out.println ( ans ) ; } }
[SYS]  [SYS]
import java.util.Scanner ; public class codeforces_95_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.next ( ) ; } String s = sc.next ( ) ; char c = sc.next ( ).charAt ( 0 ) ; int [ ] valid = new int [ s.length ( ) ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { valid [ i ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < s.length ( ) ; j ++ ) { if ( s.substring ( j , j + arr [ i ].length ( ) ).equals ( arr [ i ] ) ) { for ( int k = j ; k < j + arr [ i ].length ( ) ; k ++ ) { valid [ k ] = 0 ; } } } } StringBuilder str = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( valid [ i ] == 1 ) { if ( s.charAt ( i ) == c ) { str.append ( c ) ; } else { str.append ( s.charAt ( i ) ) ; } } else { str.append ( s.charAt ( i ) ) ; } } System.out.println ( str ) ; } } }
import java.util.Scanner ; public class codeforces_373_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int w = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int lo = 0 ; int hi = ( int ) 1e18 ; while ( hi - lo > 1 ) { int md = ( lo + hi ) / 2 ; int c = sum ( m + md - 1 ) - sum ( m - 1 ) ; if ( c * k <= w ) lo = md ; else hi = md ; } System.out.println ( lo ) ; } public static int sum ( int k ) { int ret = 0 ; int pw = 10 ; int len = 1 ; while ( true ) { int cur = Math.min ( pw - 1 , k ) ; int prev = pw / 10 ; ret += ( cur - prev + 1 ) * len ; if ( pw - 1 >= k ) break ; len ++ ; pw *= 10 ; } return ret ; } }
import java.util.Scanner ; public class codeforces_242_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int count = 0 ; for ( int i = a ; i <= x ; i ++ ) { if ( i <= b ) continue ; for ( int j = b ; j <= y ; j ++ ) { if ( i <= j ) continue ; count ++ ; System.out.println ( i + " " + j ) ; } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_608_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int f = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int x = t - ( s - f ) ; if ( x > c ) c = x ; } System.out.println ( s + c ) ; } }
import java.util.Scanner ; public class codeforces_469_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; if ( x == 0 && y == 0 ) { System.out.println ( "Oh, my keyboard!" ) ; } else { if ( x == 0 ) { x = 1 ; } if ( y == 0 ) { y = 1 ; } if ( x + y != n ) { System.out.println ( "Oh, my keyboard!" ) ; } else { System.out.println ( "I become the guy." ) ; } } } }
import java.util.Scanner ; public class codeforces_351_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextDouble ( ) ; } double sum = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - ( int ) ( arr [ i ] ) != 0.0 ) { sum += arr [ i ] ; } } int o = 2 * n - 1 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( i + o >= n ) { int ans = Math.abs ( i - sum ) ; if ( ans < 2000000000 ) { System.out.println ( ans / 1000.0 ) ; return ; } } } } } }
import java.util.Scanner ; public class atcoder_AGC003_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) * n + i ; } Arrays.sort ( arr ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int d = arr [ i ] % n % 2 ; if ( d % 2 != i % 2 ) { cnt ++ ; } } System.out.println ( cnt / 2 ) ; } }
import java.util.Scanner ; public class codeforces_629_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] [ j ] = s.charAt ( j ) - '0' ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] == 1 ) { int count = 0 ; for ( int k = i ; k >= 0 ; k -- ) { if ( arr [ k ] [ j ] == 1 ) { count ++ ; } else { break ; } } for ( int k = j ; k >= 0 ; k -- ) { if ( arr [ i ] [ k ] == 1 ) { count ++ ; } else { break ; } } sum += count * ( count - 1 ) ; } } } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class codeforces_459_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; if ( x1 == x2 && y1 == y2 ) { System.out.println ( x1 + " " + y1 + " " + x2 + " " + y2 ) ; } else if ( x1 == x2 && y1 != y2 ) { int d = ( int ) Math.sqrt ( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) ) ; int x3 = x1 ; int x4 = x2 ; int y3 = y1 + d ; int y4 = y2 + d ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } else if ( x1 != x2 && y1 == y2 ) { int d = ( int ) Math.sqrt ( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) ) ; int x3 = x1 + d ; int x4 = x2 + d ; int y3 = y1 ; int y4 = y2 ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } else { System.out.println ( "-1" ) ; } } }
import java.util.Scanner ; public class codeforces_32_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; String res = "" ; int i = 0 ; while ( i < S.length ( ) ) { if ( S.charAt ( i ) == '.' ) res += "0" ; else { i ++ ; if ( S.charAt ( i ) == '.' ) res += "1" ; else res += "2" ; } i ++ ; } System.out.println ( res ) ; } }
[INST:java]
import java.util.Scanner ; import java.math.BigInteger ; public class atcoder_AGC012_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; BigInteger [ ] arr = new BigInteger [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextBigInteger ( ) ; } arr = sort ( arr ) ; BigInteger sum = BigInteger.ZERO ; for ( int i = n - 2 ; i >= n - 2 * n - 1 ; i -= 2 ) { sum = sum.add ( arr [ i ] ) ; } System.out.println ( sum ) ; } public static BigInteger [ ] sort ( BigInteger [ ] arr ) { BigInteger temp ; for ( int i = 0 ; i < arr.length ; i ++ ) { for ( int j = i + 1 ; j < arr.length ; j ++ ) { if ( arr [ i ].compareTo ( arr [ j ] ) > 0 ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } } return arr ; } }
import java.util.Scanner ; public class atcoder_ABC122_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long mod = 1000000007 ; long [ ] [ ] dp = new long [ n + 1 ] [ 4 ] ; dp [ 0 ] = new long [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { dp [ 0 ] [ i ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { dp [ i ] [ j ] = 0 ; for ( int k = 0 ; k < 4 ; k ++ ) { if ( isValid ( i , j , k ) ) { dp [ i ] [ j ] += dp [ i - 1 ] [ k ] ; dp [ i ] [ j ] %= mod ; } } } } long ans = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { ans += dp [ n ] [ i ] ; ans %= mod ; } System.out.println ( ans ) ; } static boolean isValid ( int i , int j , int k ) { if ( i == 1 ) { if ( j == 0 && k == 0 ) return false ; if ( j == 1 && k == 2 ) return false ; if ( j == 2 && k == 1 ) return false ; if ( j == 3 && k == 3 ) return false ; } if ( i == 2 ) { if ( j == 0 && k == 0 ) return false ; if ( j == 1 && k == 2 ) return false ; if ( j == 2 && k == 1 ) return false ; if ( j == 3 && k == 3 ) return false ; } if ( i == 3 ) { if ( j == 0 && k == 0 ) return false ; if ( j == 1 && k == 2 ) return false ; if ( j == 2 && k == 1 ) return false ; if ( j == 3 && k == 3 ) return false ; } return true ; } }
import java.util.Scanner ; public class atcoder_ABC042_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int a = scanner.nextInt ( ) ; int b = scanner.nextInt ( ) ; int c = scanner.nextInt ( ) ; int s = a + b + c ; if ( s != 17 ) { System.out.println ( "NO" ) ; } else { int count = 0 ; if ( a == 5 ) { count ++ ; } if ( b == 5 ) { count ++ ; } if ( c == 5 ) { count ++ ; } if ( count != 2 ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } } }
import java.util.Scanner ; public class codeforces_629_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] m = new int [ 368 ] ; int [ ] f = new int [ 368 ] ; for ( int i = 0 ; i < n ; i ++ ) { char c = scanner.next ( ).charAt ( 0 ) ; int a = scanner.nextInt ( ) ; int b = scanner.nextInt ( ) + 1 ; if ( c == 'M' ) { m [ a ] += 2 ; m [ b ] -= 2 ; } else { f [ a ] += 2 ; f [ b ] -= 2 ; } } int a = 0 ; int b = 0 ; int c = 0 ; for ( int i = 0 ; i < 368 ; i ++ ) { a += m [ i ] ; b += f [ i ] ; c = Math.min ( c , Math.min ( a , b ) ) ; } System.out.println ( c ) ; } }
import java.util.* ; public class atcoder_ABC123_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int A [ ] = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int min = Integer.MAX_VALUE ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( A [ i ] < min ) { min = A [ i ] ; } } System.out.println ( ( N + 4 ) / min + 4 ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; import java.util.HashMap ; import java.util.Collections ; import java.util.List ; public class atcoder_ABC167_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; list.add ( - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; list.add ( a ) ; map.put ( a , i + 1 ) ; } int x = 1 ; int t = - 1 ; boolean flag = false ; for ( int i = 0 ; i < n + 1 ; i ++ ) { int ne = list.get ( x ) ; if ( map.get ( ne ) != null ) { flag = true ; t = map.get ( ne ) ; break ; } list.add ( ne ) ; map.put ( ne , i + 1 ) ; x = ne ; } if ( flag ) { List < Integer > loop = list.subList ( t , list.size ( ) ) ; if ( k < list.size ( ) ) { System.out.println ( list.get ( k ) ) ; } else { k = k - list.size ( ) ; k = k % loop.size ( ) ; System.out.println ( loop.get ( k ) ) ; } } else { System.out.println ( list.get ( k - 1 ) ) ; } } }
import java.util.Scanner ; public class atcoder_ABC051_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; s = s.replace ( "," , " " ) ; System.out.println ( s ) ; } }
import java.util.Scanner ; public class atcoder_ABC122_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] [ ] problems = new int [ q ] [ 2 ] ; for ( int i = 0 ; i < q ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { problems [ i ] [ j ] = sc.nextInt ( ) ; } } int [ ] dp = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s.charAt ( i - 1 ) == 'A' && s.charAt ( i ) == 'C' ) { dp [ i ] = dp [ i - 1 ] + 1 ; } else { dp [ i ] = dp [ i - 1 ] ; } } for ( int i = 0 ; i < q ; i ++ ) { System.out.println ( dp [ problems [ i ] [ 1 ] ] - dp [ problems [ i ] [ 0 ] - 1 ] ) ; } } }
import java.util.Scanner ; public class codeforces_673_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner.nextInt ( ) ; } int sum = 0 ; int prev = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prev != 0 && arr [ i ] - prev > 15 ) { sum += 15 ; } else { sum += arr [ i ] ; } prev = arr [ i ] ; } if ( sum > 90 ) { System.out.println ( 90 ) ; } else { System.out.println ( sum ) ; } } }
import java.io.* ; import java.util.* ; public class atcoder_ABC174_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int lo = 0 ; int hi = arr [ n - 1 ] ; while ( lo <= hi ) { int mid = lo + ( hi - lo ) / 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += Math.min ( arr [ i ] / mid , 1 ) ; } if ( count <= k ) { hi = mid - 1 ; } else { lo = mid + 1 ; } } System.out.println ( lo ) ; } }
import java.util.Scanner ; public class atcoder_ABC154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; String u = sc.next ( ) ; int x = 0 ; int y = 0 ; if ( s.equals ( u ) ) { x = a - 1 ; } else { x = a ; } if ( t.equals ( u ) ) { y = b - 1 ; } else { y = b ; } System.out.println ( x + " " + y ) ; } }
[java]
import java.util.Scanner ; public class codeforces_637_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int max = arr [ 0 ] ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < arr [ i ] ) { max = arr [ i ] ; index = i ; } } System.out.println ( arr [ index ] ) ; } }

[/java]
import java.util.* ; import java.io.* ; import java.util.stream.* ; import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_11_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; String [ ] str = br.readLine ( ).split ( " " ) ; int n = Integer.parseInt ( str [ 0 ] ) ; int d = Integer.parseInt ( str [ 1 ] ) ; str = br.readLine ( ).split ( " " ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer.parseInt ( str [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] >= arr [ i + 1 ] ) { int q = ( arr [ i ] - arr [ i + 1 ] ) / d + 1 ; count += q ; arr [ i + 1 ] += q * d ; } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class atcoder_ABC150_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] perm = new int [ n ] ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == i + 1 ) { x = 1 ; break ; } } if ( x == 0 ) { perm [ cnt ++ ] = i + 1 ; } } int p = 0 , q = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( perm [ i ] == arr [ p ] ) { p ++ ; } else if ( perm [ i ] == arr [ q ] ) { q ++ ; } } System.out.println ( Math.abs ( p - q ) ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int T = sc.nextInt ( ) ; int [ ] time = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { time [ i ] [ 0 ] = sc.nextInt ( ) ; time [ i ] [ 1 ] = sc.nextInt ( ) ; } int [ ] [ ] dp = new int [ N + 1 ] [ T + 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= T ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } for ( int i = 0 ; i <= N ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= T ; j ++ ) { if ( time [ i ] [ 0 ] > j ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } else { dp [ i ] [ j ] = Math.max ( dp [ i - 1 ] [ j ] , time [ i ] [ 1 ] + dp [ i - 1 ] [ j - time [ i ] [ 0 ] ] ) ; } } } int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += time [ i ] [ 1 ] ; } ans += dp [ N ] [ T ] ; System.out.println ( ans ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_621_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int n = Integer.parseInt ( br.readLine ( ) ) ; String s = br.readLine ( ) ; int [ ] arr = new int [ n ] ; int j = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) != ' ' ) { arr [ j ] = ( arr [ j ] * 10 ) + ( s.charAt ( i ) - '0' ) ; } else { j ++ ; } } int sum = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) sum += arr [ i ] ; else if ( i % 2 == 0 ) sum += arr [ i ] ; else if ( sum % 2 == 0 ) sum += arr [ i ] ; else break ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class codeforces_544_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int k = in.nextInt ( ) ; int x = 0 ; if ( k <= Math.max ( n * n / 2 , n * n - n * n / 2 ) ) { System.out.println ( "YES" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i % 2 == j % 2 && x < k ) { System.out.print ( "L" ) ; x ++ ; } else { System.out.print ( "S" ) ; } } System.out.println ( ) ; } } else { System.out.println ( "NO" ) ; } in.close ( ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; import java.util.Arrays ; import java.io.PrintWriter ; public class atcoder_ABC107_C { static int N , K ; static ArrayList < Long > list , list_p , list_m ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; N = sc.nextInt ( ) ; K = sc.nextInt ( ) ; list = new ArrayList < > ( ) ; list_p = new ArrayList < > ( ) ; list_m = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { long a = sc.nextLong ( ) ; list.add ( a ) ; if ( a > 0 ) { list_p.add ( a ) ; } else if ( a < 0 ) { list_m.add ( a ) ; } } long p = 0 , m = 0 ; long x = 0 , y = list_m.size ( ) - 1 ; int lastx = list_p.size ( ) ; int lasty = list_m.size ( ) ; long ans = Long.MAX_VALUE ; for ( int k = 0 ; k <= K ; k ++ ) { if ( k > lastx || k - lastx > lasty ) { continue ; } if ( k == 0 ) { p = 0 ; } else { p = list_p.get ( k - 1 ) ; } if ( k - lastx == 0 ) { m = 0 ; } else { m = list_m.get ( lasty - ( k - lastx ) ) ; } ans = Math.min ( ans , 2 * p + Math.abs ( m ) , p + 2 * Math.abs ( m ) ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_450_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc.nextInt ( ) ; } int [ ] l2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( l [ i ] % m == 0 ) { l2 [ i ] = l [ i ] / m ; } else { l2 [ i ] = l [ i ] / m + 1 ; } } int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l2 [ i ] > mx ) { mx = l2 [ i ] ; } } int ind = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l2 [ i ] == mx ) { ind = i ; break ; } } System.out.println ( ind + 1 ) ; } }
import java.util.* ; public class atcoder_AGC017_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int p = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count1 = 0 ; int count0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count1 ++ ; } else { count0 ++ ; } } int ans = 0 ; for ( int i = 0 ; i <= count0 ; i ++ ) { ans += ( ( count0 - i ) * ( count0 - i + 1 ) ) / 2 ; } for ( int i = 0 ; i <= count1 ; i ++ ) { ans += ( ( count1 - i ) * ( count1 - i + 1 ) ) / 2 ; } if ( p == 1 ) { System.out.println ( ans ) ; } else { System.out.println ( 0 ) ; } } }
[java]
import java.util.* ; public class codeforces_682_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scan.nextInt ( ) ; } Arrays.sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > count ) { count ++ ; } } System.out.println ( count + 1 ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ARC062_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int m = scan.nextInt ( ) ; int score = 0 ; int g = 0 ; int p = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char c = scan.next ( ).charAt ( 0 ) ; if ( c == 'g' ) { if ( g > p ) score ++ ; g ++ ; } else { if ( g > p ) score -- ; p ++ ; } } System.out.println ( score ) ; } }
import java.util.Scanner ; public class atcoder_ABC114_C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int N = in.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { if ( i % 7 == 0 || i % 5 == 0 || i % 3 == 0 ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; public class atcoder_AGC002_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; ArrayList < String > balls = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { balls.add ( sc.next ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; String xBall = balls.get ( x - 1 ) ; String yBall = balls.get ( y - 1 ) ; int xWhite = Integer.parseInt ( xBall.substring ( 0 , 1 ) ) ; int xRed = Integer.parseInt ( xBall.substring ( 1 , 2 ) ) ; int yWhite = Integer.parseInt ( yBall.substring ( 0 , 1 ) ) ; int yRed = Integer.parseInt ( yBall.substring ( 1 , 2 ) ) ; if ( xWhite >= 1 && yRed >= 1 ) { balls.set ( x - 1 , Integer.toString ( xWhite - 1 ) + Integer.toString ( yRed + 1 ) ) ; balls.set ( y - 1 , Integer.toString ( yWhite + 1 ) + Integer.toString ( yRed ) ) ; } else if ( xWhite == 0 ) { balls.set ( x - 1 , Integer.toString ( xWhite - 1 ) + Integer.toString ( yRed + 1 ) ) ; balls.set ( y - 1 , Integer.toString ( yWhite + 1 ) + Integer.toString ( yRed ) ) ; } else { balls.set ( x - 1 , Integer.toString ( xWhite - 1 ) + Integer.toString ( yWhite + 1 ) ) ; balls.set ( y - 1 , Integer.toString ( xRed + 1 ) + Integer.toString ( yRed ) ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer.parseInt ( balls.get ( i ).substring ( 1 , 2 ) ) == 1 ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; if ( n % 2 == 1 ) { System.out.println ( "No" ) ; return ; } if ( s.substring ( 0 , n / 2 ).equals ( s.substring ( n / 2 ) ) ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } }
import java.util.Scanner ; public class codeforces_61_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; while ( t -- > 0 ) { String s = sc.next ( ) ; int flag = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'a' ) { flag ++ ; } else if ( s.charAt ( i ) == 'b' ) { flag -- ; } } if ( flag == 0 ) { System.out.println ( "AC" ) ; } else { System.out.println ( "WA" ) ; } } } }
import java.util.Scanner ; public class atcoder_ABC136_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; int i = 1 ; while ( 10 * i <= N ) { ans += ( 10 * i - 10 * ( i - 1 ) ) ; i += 2 ; } ans += Math.max ( 0 , N - 10 * ( i - 1 ) + 1 ) ; System.out.println ( ans ) ; } }
import sys
import math
from collections import defaultdict
sys.setrecursionlimit(10**7)
def input():
    return sys.stdin.readline()[:-1]
mod = 10**9 + 7
def I(): return int(input())
def II(): return map(int, input().split())
def III(): return list(map(int, input().split()))
def Line(N, num):
    if N <= 0:
        return [[0]]*num
    elif num == 1:
        return [I() for _ in range(N)]
    else:
        read_all = [tuple(II()) for _ in range(N)]
        return map(list, zip(*read_all))
def my_sign(x):
    return (x > 0) - (x < 0)
N = I()
a = III()
max_val = 0
max_sign = 0
max_index = -1
for i, a0 in enumerate(a):
    if abs(a0) > max_val:
        max_val = abs(a0)
        max_sign = my_sign(a0)
        max_index = i
if max_sign == 0:
    print(0)
elif max_sign == 1:
    print(2*N - 1)
    for i in range(N):
        print(max_index + 1, i + 1)
    for i in range(N - 1):
        print(i + 1, i + 2)
else:
    print(2*N - 1)
    for i in range(N):
        print(max_index + 1, i + 1)
    for i in range(1, N)[::-1]:
        print(i + 1, i)
import java.util.Collections ; import java.util.Scanner ; public class atcoder_ABC124_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int even = 0 ; int odd = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( i % 2 == 0 ) { if ( s.charAt ( i ) == '0' ) { even ++ ; } else { odd ++ ; } } else { if ( s.charAt ( i ) == '1' ) { even ++ ; } else { odd ++ ; } } } int res = Math.min ( s.length ( ) - even - odd , s.length ( ) - even + odd ) ; System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_644_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; } int [ ] res = new int [ n ] ; int idx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( idx >= b ) { res [ i ] = - 1 ; continue ; } if ( arr [ i ] [ 0 ] >= res [ idx ] ) { res [ i ] = res [ idx ] + arr [ i ] [ 1 ] ; idx ++ ; } else { res [ i ] = - 1 ; } } for ( int i = 0 ; i < res.length ; i ++ ) { System.out.print ( res [ i ] + " " ) ; } } }
import java.util.Scanner ; public class codeforces_624_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int dp = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { dp = Math.max ( 0 , Math.min ( dp + 1 , a [ i ] ) ) ; } System.out.println ( dp ) ; } }
import java.util.Scanner ; public class atcoder_AGC027_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { x = 0 ; break ; } x = x - a [ i ] ; ans ++ ; } if ( x != 0 ) { ans -- ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_669_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; System.out.println ( ( n * 2 + 1 ) / 3 ) ; } }
[java]
import java.util.Scanner ; public class atcoder_ABC135_D { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] dp = new int [ n + 1 ] ; dp [ 1 ] = scanner.nextInt ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + 1 ; if ( dp [ i ] >= 10 ) { dp [ i ] = dp [ i ] - 10 ; } } int ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( dp [ i ] == 5 ) { ans ++ ; } } System.out.println ( ans ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ABC133_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int d = scanner.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { a [ i ] += scanner.nextInt ( ) * ( int ) Math.pow ( 10 , d - j - 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { b [ i ] += scanner.nextInt ( ) * ( int ) Math.pow ( 10 , d - j - 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { long dist = 0 ; for ( int k = 0 ; k < d ; k ++ ) { dist += ( a [ i ] % 10 - b [ j ] % 10 ) * ( a [ i ] % 10 - b [ j ] % 10 ) ; a [ i ] /= 10 ; b [ j ] /= 10 ; } if ( dist == 0 ) { count ++ ; } } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_622_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int l = 1 ; int r = n ; while ( l < r ) { int mid = l + ( r - l ) / 2 ; int idxcnt = mid * ( mid + 1 ) / 2 ; if ( idxcnt < n ) { l = mid + 1 ; } else { r = mid ; } } l -= 1 ; int idxcnt = l * ( l + 1 ) / 2 ; System.out.println ( n - idxcnt ) ; } }
100%|██████████| 250/250 [00:00<00:00, 8539.94it/s]
import java.util.* ; public class codeforces_519_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; int c [ ] = new int [ n ] ; int x = 0 , y = 0 , z = 0 ; for ( int i = 0 ; i < a.length ; i ++ ) { a [ i ] = sc.nextInt ( ) ; x += a [ i ] ; } for ( int i = 0 ; i < b.length ; i ++ ) { b [ i ] = sc.nextInt ( ) ; y += b [ i ] ; } for ( int i = 0 ; i < c.length ; i ++ ) { c [ i ] = sc.nextInt ( ) ; z += c [ i ] ; } System.out.println ( Math.abs ( x - y ) ) ; System.out.println ( Math.abs ( y - z ) ) ; } }
import java.util.Scanner ; public class codeforces_131_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count += arr [ i ] * ( arr [ i ] - 1 ) ; } else if ( arr [ i ] > 0 ) { if ( arr [ n - i - 1 ] > 0 ) { count += arr [ i ] * arr [ n - i - 1 ] ; } } else { if ( arr [ n - i - 1 ] < 0 ) { count += arr [ i ] * arr [ n - i - 1 ] ; } } } System.out.println ( count / 2 ) ; } }
import java.util.Scanner ; public class codeforces_379_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < a ; i ++ ) { ans += b ; if ( ans >= 10 ) { ans -= 10 ; } } System.out.println ( ans ) ; } }
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model yangccccc/codellama-multi --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_400_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC089_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC132_F.java' returned non-zero exit status 1.
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_327_A.java' returned non-zero exit status 1.
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC168_C.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_31_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC007_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC007_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC038_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC155_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC152_E.java' returned non-zero exit status 1.
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC145_E.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 55
Success: ['codeforces_58_B.java', 'codeforces_445_A.java', 'codeforces_190_A.java', 'codeforces_609_B.java', 'atcoder_ABC125_A.java', 'codeforces_607_A.java', 'atcoder_AGC006_B.java', 'codeforces_546_A.java', 'atcoder_AGC046_A.java', 'codeforces_567_A.java', 'atcoder_ABC158_A.java', 'codeforces_23_B.java', 'atcoder_ABC140_D.java', 'atcoder_ABC153_A.java', 'atcoder_ABC042_A.java', 'codeforces_55_A.java', 'codeforces_79_A.java', 'codeforces_612_B.java', 'atcoder_ABC143_A.java', 'codeforces_25_A.java', 'atcoder_ABC164_A.java', 'codeforces_669_A.java', 'atcoder_ABC104_C.java', 'atcoder_AGC002_A.java', 'atcoder_ABC168_B.java', 'codeforces_705_B.java', 'atcoder_ABC151_A.java', 'codeforces_340_A.java', 'codeforces_92_A.java', 'atcoder_ABC112_A.java', 'atcoder_ABC145_B.java', 'codeforces_581_A.java', 'codeforces_544_B.java', 'codeforces_534_B.java', 'atcoder_ABC108_B.java', 'atcoder_AGC006_A.java', 'codeforces_203_A.java', 'atcoder_ABC152_C.java', 'codeforces_282_B.java', 'codeforces_387_B.java', 'atcoder_AGC033_B.java', 'atcoder_ABC142_A.java', 'codeforces_569_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC178_A.java', 'codeforces_678_A.java', 'atcoder_ABC051_A.java', 'codeforces_32_B.java', 'atcoder_ABC154_A.java', 'atcoder_ABC139_B.java', 'codeforces_354_A.java', 'atcoder_ABC118_C.java', 'codeforces_11_A.java', 'codeforces_608_A.java', 'codeforces_265_B.java']
Fail: ['atcoder_ABC123_C.java', 'atcoder_ABC114_C.java', 'atcoder_ABC137_D.java', 'atcoder_AGC046_B.java', 'codeforces_644_B.java', 'codeforces_581_B.java', 'atcoder_ABC123_D.java', 'codeforces_231_A.java', 'codeforces_469_A.java', 'atcoder_AGC021_B.java', 'atcoder_ABC172_D.java', 'atcoder_ABC122_D.java', 'codeforces_598_A.java', 'atcoder_ABC165_C.java', 'codeforces_242_A.java', 'codeforces_49_A.java', 'codeforces_459_A.java', 'codeforces_99_A.java', 'codeforces_222_A.java', 'atcoder_ABC109_B.java', 'atcoder_ABC169_E.java', 'codeforces_86_A.java', 'atcoder_ABC126_D.java', 'codeforces_373_B.java', 'atcoder_ABC150_C.java', 'codeforces_400_B.java', 'atcoder_ABC124_A.java', 'codeforces_404_A.java', 'atcoder_ABC178_B.java', 'atcoder_AGC024_B.java', 'codeforces_296_A.java', 'codeforces_203_B.java', 'atcoder_AGC025_A.java', 'codeforces_56_B.java', 'codeforces_583_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC112_C.java', 'codeforces_621_A.java', 'atcoder_AGC013_A.java', 'codeforces_624_B.java', 'codeforces_333_B.java', 'atcoder_ABC124_C.java', 'codeforces_302_A.java', 'atcoder_AGC004_B.java', 'codeforces_131_B.java', 'codeforces_450_A.java', 'codeforces_459_B.java', 'codeforces_379_A.java', 'atcoder_AGC027_B.java', 'atcoder_ABC145_C.java', 'atcoder_ABC150_D.java', 'atcoder_ABC125_B.java', 'atcoder_ABC167_C.java', 'codeforces_579_A.java', 'atcoder_AGC017_A.java', 'atcoder_ABC127_B.java', 'codeforces_274_A.java', 'codeforces_408_B.java', 'codeforces_148_B.java', 'atcoder_ABC122_C.java', 'codeforces_306_A.java', 'codeforces_59_A.java', 'atcoder_ABC136_B.java', 'codeforces_412_A.java', 'atcoder_AGC005_B.java', 'codeforces_267_A.java', 'codeforces_397_B.java', 'codeforces_596_B.java', 'atcoder_AGC019_A.java', 'atcoder_ABC143_D.java', 'atcoder_AGC004_D.java', 'atcoder_ABC150_E.java', 'codeforces_651_A.java', 'codeforces_334_A.java', 'codeforces_369_B.java', 'atcoder_AGC027_A.java', 'codeforces_629_A.java', 'codeforces_629_B.java', 'atcoder_ABC147_D.java', 'codeforces_134_A.java', 'codeforces_673_A.java', 'atcoder_AGC028_A.java', 'codeforces_106_B.java', 'atcoder_ABC140_F.java', 'codeforces_147_A.java', 'codeforces_462_B.java', 'atcoder_ABC169_C.java', 'atcoder_ABC106_C.java', 'atcoder_ABC149_B.java', 'codeforces_287_A.java', 'atcoder_ABC133_B.java', 'codeforces_474_B.java', 'atcoder_ABC123_B.java', 'atcoder_AGC028_B.java', 'codeforces_154_A.java', 'codeforces_672_A.java', 'codeforces_276_B.java', 'codeforces_8_B.java', 'codeforces_632_B.java', 'codeforces_622_A.java', 'atcoder_ABC129_E.java', 'codeforces_356_A.java', 'codeforces_61_B.java', 'codeforces_268_A.java', 'atcoder_ABC120_C.java', 'codeforces_421_A.java', 'atcoder_ABC155_E.java', 'atcoder_ABC162_D.java', 'codeforces_665_A.java', 'codeforces_518_B.java', 'atcoder_ABC127_F.java', 'atcoder_AGC002_B.java', 'atcoder_AGC043_B.java', 'codeforces_171_A.java', 'atcoder_ABC174_E.java', 'codeforces_189_A.java', 'atcoder_AGC033_A.java', 'codeforces_617_B.java', 'codeforces_514_A.java', 'codeforces_456_A.java', 'atcoder_AGC010_B.java', 'atcoder_ABC158_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC169_D.java', 'atcoder_ABC167_D.java', 'atcoder_ABC170_A.java', 'atcoder_ABC119_B.java', 'atcoder_ARC062_B.java', 'codeforces_519_B.java', 'codeforces_387_A.java', 'atcoder_ABC111_C.java', 'atcoder_ABC125_C.java', 'codeforces_242_B.java', 'atcoder_AGC014_D.java', 'atcoder_ABC168_C.java', 'atcoder_ABC155_D.java', 'codeforces_216_B.java', 'codeforces_55_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC107_C.java', 'codeforces_350_B.java', 'atcoder_ABC110_C.java', 'atcoder_AGC011_C.java', 'codeforces_313_B.java', 'codeforces_110_B.java', 'codeforces_70_B.java', 'codeforces_272_B.java', 'atcoder_ABC145_E.java', 'atcoder_ABC105_D.java', 'atcoder_ABC142_C.java', 'atcoder_ABC126_E.java', 'codeforces_351_A.java', 'atcoder_AGC003_C.java', 'atcoder_AGC012_A.java', 'atcoder_AGC007_C.java', 'atcoder_ABC152_E.java', 'codeforces_400_A.java', 'codeforces_500_A.java', 'atcoder_ABC135_D.java', 'atcoder_ABC148_F.java', 'atcoder_ABC174_C.java', 'atcoder_ABC089_C.java', 'atcoder_ARC102_C.java', 'atcoder_ABC171_B.java', 'codeforces_37_A.java', 'codeforces_67_B.java', 'atcoder_ABC149_C.java', 'atcoder_AGC038_A.java', 'codeforces_682_B.java', 'atcoder_AGC037_E.java', 'codeforces_31_A.java', 'codeforces_108_B.java', 'codeforces_30_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC146_D.java', 'atcoder_ARC086_B.java', 'codeforces_95_A.java', 'codeforces_299_A.java', 'codeforces_146_A.java', 'atcoder_AGC034_B.java', 'atcoder_ABC132_F.java', 'atcoder_ABC164_D.java', 'codeforces_327_A.java', 'codeforces_637_A.java', 'atcoder_ABC128_C.java', 'codeforces_96_B.java', 'atcoder_AGC035_B.java', 'codeforces_342_B.java', 'codeforces_7_B.java', 'codeforces_653_A.java', 'atcoder_ABC070_B.java', 'atcoder_ABC133_E.java', 'atcoder_ABC107_D.java', 'atcoder_ABC166_C.java', 'codeforces_86_A.java', 'codeforces_678_B.java']
+ kill_yang_java_processes
+ echo 'Killing all running Java processes for user '\''yang'\''...'
Killing all running Java processes for user 'yang'...
+ ps aux
+ grep '^yang'
+ grep 'java '
+ awk '{print $2}'
+ xargs -r kill -9
+ echo 'All Java processes for '\''yang'\'' have been killed.'
All Java processes for 'yang' have been killed.
+ echo 'All models for version '\''before-Python/code/'\'' have been run.'
All models for version 'before-Python/code/' have been run.
+ mv /home/ubuntu/translation/Experiment_Results GAs_ft_bef3/Experiment_Results_before-Python_code_
