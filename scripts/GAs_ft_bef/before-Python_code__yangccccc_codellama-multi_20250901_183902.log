+ model=yangccccc/codellama-multi
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model yangccccc/codellama-multi --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 09-01 18:52:05 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 09-01 18:52:10 [utils.py:326] non-default args: {'model': 'yangccccc/codellama-multi', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 09-01 18:52:19 [__init__.py:711] Resolved architecture: LlamaForCausalLM
`torch_dtype` is deprecated! Use `dtype` instead!
INFO 09-01 18:52:19 [__init__.py:1750] Using max model len 4096
INFO 09-01 18:52:19 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=8192.
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:52:20 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:52:20 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='yangccccc/codellama-multi', speculative_config=None, tokenizer='yangccccc/codellama-multi', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=yangccccc/codellama-multi, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=1496261)[0;0m WARNING 09-01 18:52:20 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 240 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:52:20 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_e966d493'), local_subscribe_addr='ipc:///tmp/0d43b23f-8890-4566-a926-a4953b56bc6f', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:23 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_8c1678ea'), local_subscribe_addr='ipc:///tmp/a236e295-9565-4183-8961-e1c067335b03', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:23 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_b4767c64'), local_subscribe_addr='ipc:///tmp/26f9511c-3e58-4eb9-a982-df60ccf296e6', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:24 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:24 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:24 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:24 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:25 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:25 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:25 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_15df6a26'), local_subscribe_addr='ipc:///tmp/e2294a94-d2b6-44ed-8ee0-86dc7adbbaed', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:25 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:25 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m WARNING 09-01 18:52:25 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m WARNING 09-01 18:52:25 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:25 [gpu_model_runner.py:1953] Starting to load model yangccccc/codellama-multi...
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:25 [gpu_model_runner.py:1953] Starting to load model yangccccc/codellama-multi...
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:25 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:25 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:25 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:25 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:26 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:26 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/6 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards:  17% Completed | 1/6 [00:00<00:01,  4.48it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards:  33% Completed | 2/6 [00:01<00:02,  1.69it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards:  50% Completed | 3/6 [00:01<00:02,  1.35it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards:  67% Completed | 4/6 [00:02<00:01,  1.22it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards:  83% Completed | 5/6 [00:03<00:00,  1.17it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:31 [default_loader.py:262] Loading weights took 4.93 seconds
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards: 100% Completed | 6/6 [00:04<00:00,  1.13it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Loading safetensors checkpoint shards: 100% Completed | 6/6 [00:04<00:00,  1.25it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m 
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:31 [default_loader.py:262] Loading weights took 4.94 seconds
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:32 [gpu_model_runner.py:2007] Model loading took 12.2637 GiB and 5.892180 seconds
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:32 [gpu_model_runner.py:2007] Model loading took 12.2637 GiB and 6.380062 seconds
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:43 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cdaeac2c31/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:43 [backends.py:559] Dynamo bytecode transform time: 10.37 s
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:43 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cdaeac2c31/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:43 [backends.py:559] Dynamo bytecode transform time: 10.58 s
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:52 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.146 s
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:52 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.187 s
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:52:58 [monitor.py:34] torch.compile takes 10.37 s in total
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:52:58 [monitor.py:34] torch.compile takes 10.58 s in total
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:53:00 [gpu_worker.py:276] Available KV cache memory: 57.16 GiB
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:53:00 [gpu_worker.py:276] Available KV cache memory: 57.16 GiB
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:53:00 [kv_cache_utils.py:849] GPU KV cache size: 149,840 tokens
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:53:00 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 36.58x
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:53:00 [kv_cache_utils.py:849] GPU KV cache size: 149,840 tokens
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:53:00 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 36.58x
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 13.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 14.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:04, 14.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 14.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 15.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 15.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 15.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:01<00:03, 15.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 15.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 16.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 16.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 16.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 16.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 16.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:02, 16.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:02<00:02, 16.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:01, 17.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:01, 18.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 18.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 18.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 18.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 18.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 18.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 18.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 18.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:00, 18.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 18.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 18.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 18.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 18.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 18.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 18.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 18.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 17.28it/s]
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:53:04 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:53:04 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP1 pid=1496269)[0;0m INFO 09-01 18:53:04 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 2.26 GiB
[1;36m(EngineCore_0 pid=1496261)[0;0m [1;36m(VllmWorker TP0 pid=1496267)[0;0m INFO 09-01 18:53:04 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 2.26 GiB
[1;36m(EngineCore_0 pid=1496261)[0;0m INFO 09-01 18:53:04 [core.py:214] init engine (profile, create kv cache, warmup model) took 32.42 seconds
INFO 09-01 18:53:06 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 6520.06it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  26%|██▌       | 64/250 [00:00<00:00, 638.91it/s]Adding requests:  55%|█████▍    | 137/250 [00:00<00:00, 688.81it/s]Adding requests:  87%|████████▋ | 218/250 [00:00<00:00, 742.16it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 740.19it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:12<53:39, 12.93s/it, est. speed input: 9.98 toks/s, output: 6.34 toks/s]Processed prompts:   1%|          | 2/250 [00:13<23:46,  5.75s/it, est. speed input: 19.77 toks/s, output: 11.93 toks/s]Processed prompts:   1%|          | 3/250 [00:13<13:26,  3.26s/it, est. speed input: 96.13 toks/s, output: 18.34 toks/s]Processed prompts:   2%|▏         | 4/250 [00:14<08:22,  2.04s/it, est. speed input: 163.06 toks/s, output: 25.33 toks/s]Processed prompts:   2%|▏         | 6/250 [00:14<04:39,  1.14s/it, est. speed input: 198.51 toks/s, output: 37.76 toks/s]Processed prompts:   3%|▎         | 7/250 [00:15<03:37,  1.12it/s, est. speed input: 204.76 toks/s, output: 44.39 toks/s]Processed prompts:   3%|▎         | 8/250 [00:15<02:48,  1.44it/s, est. speed input: 211.77 toks/s, output: 50.88 toks/s]Processed prompts:   4%|▎         | 9/250 [00:15<02:11,  1.83it/s, est. speed input: 249.01 toks/s, output: 57.54 toks/s]Processed prompts:   4%|▍         | 10/250 [00:15<01:44,  2.31it/s, est. speed input: 294.88 toks/s, output: 64.27 toks/s]Processed prompts:   5%|▍         | 12/250 [00:16<01:19,  2.98it/s, est. speed input: 347.12 toks/s, output: 76.83 toks/s]Processed prompts:   6%|▌         | 15/250 [00:16<00:59,  3.95it/s, est. speed input: 435.94 toks/s, output: 96.73 toks/s]Processed prompts:   6%|▋         | 16/250 [00:16<00:54,  4.26it/s, est. speed input: 470.34 toks/s, output: 103.80 toks/s]Processed prompts:   7%|▋         | 17/250 [00:16<00:49,  4.67it/s, est. speed input: 504.67 toks/s, output: 110.49 toks/s]Processed prompts:   8%|▊         | 19/250 [00:17<00:41,  5.56it/s, est. speed input: 569.09 toks/s, output: 125.42 toks/s]Processed prompts:   8%|▊         | 20/250 [00:17<00:40,  5.71it/s, est. speed input: 597.77 toks/s, output: 132.57 toks/s]Processed prompts:   9%|▉         | 23/250 [00:17<00:26,  8.58it/s, est. speed input: 665.23 toks/s, output: 155.12 toks/s]Processed prompts:  10%|█         | 25/250 [00:17<00:25,  8.90it/s, est. speed input: 714.74 toks/s, output: 167.00 toks/s]Processed prompts:  11%|█         | 27/250 [00:17<00:23,  9.50it/s, est. speed input: 780.41 toks/s, output: 180.85 toks/s]Processed prompts:  12%|█▏        | 29/250 [00:18<00:27,  7.93it/s, est. speed input: 840.41 toks/s, output: 194.00 toks/s]Processed prompts:  12%|█▏        | 30/250 [00:18<00:28,  7.77it/s, est. speed input: 864.63 toks/s, output: 200.78 toks/s]Processed prompts:  12%|█▏        | 31/250 [00:18<00:37,  5.82it/s, est. speed input: 863.69 toks/s, output: 205.87 toks/s]Processed prompts:  13%|█▎        | 33/250 [00:18<00:29,  7.29it/s, est. speed input: 909.36 toks/s, output: 220.74 toks/s]Processed prompts:  14%|█▎        | 34/250 [00:18<00:31,  6.87it/s, est. speed input: 983.16 toks/s, output: 227.29 toks/s]Processed prompts:  14%|█▍        | 35/250 [00:19<00:32,  6.65it/s, est. speed input: 1003.05 toks/s, output: 233.99 toks/s]Processed prompts:  15%|█▍        | 37/250 [00:19<00:24,  8.81it/s, est. speed input: 1043.09 toks/s, output: 250.04 toks/s]Processed prompts:  16%|█▌        | 39/250 [00:19<00:19, 10.85it/s, est. speed input: 1116.56 toks/s, output: 265.35 toks/s]Processed prompts:  16%|█▋        | 41/250 [00:19<00:21,  9.80it/s, est. speed input: 1152.00 toks/s, output: 279.28 toks/s]Processed prompts:  17%|█▋        | 43/250 [00:19<00:18, 11.34it/s, est. speed input: 1242.75 toks/s, output: 294.51 toks/s]Processed prompts:  18%|█▊        | 45/250 [00:20<00:25,  8.00it/s, est. speed input: 1274.63 toks/s, output: 305.36 toks/s]Processed prompts:  19%|█▉        | 47/250 [00:20<00:22,  9.21it/s, est. speed input: 1292.49 toks/s, output: 319.92 toks/s]Processed prompts:  20%|█▉        | 49/250 [00:20<00:20,  9.74it/s, est. speed input: 1358.78 toks/s, output: 334.36 toks/s]Processed prompts:  20%|██        | 51/250 [00:20<00:20,  9.63it/s, est. speed input: 1393.13 toks/s, output: 348.50 toks/s]Processed prompts:  22%|██▏       | 54/250 [00:20<00:21,  9.06it/s, est. speed input: 1463.97 toks/s, output: 367.18 toks/s]Processed prompts:  22%|██▏       | 56/250 [00:21<00:24,  8.05it/s, est. speed input: 1520.18 toks/s, output: 378.81 toks/s]Processed prompts:  23%|██▎       | 58/250 [00:21<00:23,  8.09it/s, est. speed input: 1571.81 toks/s, output: 391.69 toks/s]Processed prompts:  24%|██▍       | 60/250 [00:21<00:20,  9.42it/s, est. speed input: 1622.75 toks/s, output: 407.09 toks/s]Processed prompts:  25%|██▌       | 63/250 [00:21<00:17, 10.92it/s, est. speed input: 1722.22 toks/s, output: 429.22 toks/s]Processed prompts:  26%|██▋       | 66/250 [00:22<00:18, 10.14it/s, est. speed input: 1805.29 toks/s, output: 448.26 toks/s]Processed prompts:  28%|██▊       | 69/250 [00:22<00:16, 11.19it/s, est. speed input: 1862.01 toks/s, output: 469.74 toks/s]Processed prompts:  28%|██▊       | 71/250 [00:22<00:21,  8.38it/s, est. speed input: 1948.28 toks/s, output: 478.65 toks/s]Processed prompts:  29%|██▉       | 72/250 [00:22<00:21,  8.33it/s, est. speed input: 1999.22 toks/s, output: 484.67 toks/s]Processed prompts:  29%|██▉       | 73/250 [00:23<00:22,  7.77it/s, est. speed input: 2047.68 toks/s, output: 489.88 toks/s]Processed prompts:  30%|██▉       | 74/250 [00:23<00:22,  7.91it/s, est. speed input: 2055.18 toks/s, output: 496.40 toks/s]Processed prompts:  30%|███       | 76/250 [00:23<00:20,  8.57it/s, est. speed input: 2106.98 toks/s, output: 509.49 toks/s]Processed prompts:  32%|███▏      | 79/250 [00:23<00:23,  7.39it/s, est. speed input: 2131.67 toks/s, output: 524.79 toks/s]Processed prompts:  32%|███▏      | 81/250 [00:24<00:18,  8.96it/s, est. speed input: 2143.31 toks/s, output: 539.69 toks/s]Processed prompts:  34%|███▎      | 84/250 [00:24<00:17,  9.28it/s, est. speed input: 2226.21 toks/s, output: 558.72 toks/s]Processed prompts:  34%|███▍      | 86/250 [00:24<00:21,  7.80it/s, est. speed input: 2271.64 toks/s, output: 568.29 toks/s]Processed prompts:  36%|███▌      | 89/250 [00:25<00:21,  7.61it/s, est. speed input: 2336.75 toks/s, output: 584.64 toks/s]Processed prompts:  36%|███▋      | 91/250 [00:25<00:21,  7.41it/s, est. speed input: 2372.23 toks/s, output: 595.59 toks/s]Processed prompts:  38%|███▊      | 94/250 [00:25<00:18,  8.61it/s, est. speed input: 2414.40 toks/s, output: 615.86 toks/s]Processed prompts:  38%|███▊      | 96/250 [00:25<00:15,  9.76it/s, est. speed input: 2462.18 toks/s, output: 626.85 toks/s]Processed prompts:  39%|███▉      | 98/250 [00:26<00:16,  9.10it/s, est. speed input: 2491.96 toks/s, output: 637.96 toks/s]Processed prompts:  40%|████      | 100/250 [00:26<00:18,  7.91it/s, est. speed input: 2512.86 toks/s, output: 647.27 toks/s]Processed prompts:  40%|████      | 101/250 [00:26<00:21,  6.93it/s, est. speed input: 2515.93 toks/s, output: 650.50 toks/s]Processed prompts:  41%|████      | 103/250 [00:26<00:18,  7.93it/s, est. speed input: 2556.98 toks/s, output: 663.96 toks/s]Processed prompts:  42%|████▏     | 106/250 [00:26<00:14, 10.15it/s, est. speed input: 2631.08 toks/s, output: 686.87 toks/s]Processed prompts:  44%|████▎     | 109/250 [00:27<00:10, 13.13it/s, est. speed input: 2712.29 toks/s, output: 711.50 toks/s]Processed prompts:  44%|████▍     | 111/250 [00:27<00:14,  9.28it/s, est. speed input: 2721.08 toks/s, output: 716.92 toks/s]Processed prompts:  45%|████▌     | 113/250 [00:27<00:14,  9.17it/s, est. speed input: 2741.60 toks/s, output: 729.40 toks/s]Processed prompts:  46%|████▌     | 115/250 [00:27<00:15,  8.51it/s, est. speed input: 2752.80 toks/s, output: 730.09 toks/s]Processed prompts:  47%|████▋     | 117/250 [00:28<00:18,  7.17it/s, est. speed input: 2781.16 toks/s, output: 739.00 toks/s]Processed prompts:  47%|████▋     | 118/250 [00:28<00:20,  6.53it/s, est. speed input: 2804.41 toks/s, output: 742.85 toks/s]Processed prompts:  48%|████▊     | 120/250 [00:28<00:15,  8.26it/s, est. speed input: 2828.30 toks/s, output: 751.40 toks/s]Processed prompts:  49%|████▉     | 122/250 [00:28<00:13,  9.19it/s, est. speed input: 2849.34 toks/s, output: 766.20 toks/s]Processed prompts:  50%|█████     | 125/250 [00:28<00:09, 12.66it/s, est. speed input: 2893.35 toks/s, output: 792.05 toks/s]Processed prompts:  51%|█████     | 127/250 [00:29<00:09, 12.67it/s, est. speed input: 2949.50 toks/s, output: 806.97 toks/s]Processed prompts:  52%|█████▏    | 129/250 [00:29<00:10, 11.64it/s, est. speed input: 2983.47 toks/s, output: 821.14 toks/s]Processed prompts:  52%|█████▏    | 131/250 [00:29<00:09, 13.20it/s, est. speed input: 3020.07 toks/s, output: 838.00 toks/s]Processed prompts:  53%|█████▎    | 133/250 [00:29<00:08, 13.21it/s, est. speed input: 3043.93 toks/s, output: 847.13 toks/s]Processed prompts:  54%|█████▍    | 135/250 [00:29<00:08, 13.21it/s, est. speed input: 3074.56 toks/s, output: 856.37 toks/s]Processed prompts:  55%|█████▌    | 138/250 [00:30<00:10, 10.87it/s, est. speed input: 3102.90 toks/s, output: 869.93 toks/s]Processed prompts:  56%|█████▋    | 141/250 [00:30<00:09, 11.41it/s, est. speed input: 3183.78 toks/s, output: 886.53 toks/s]Processed prompts:  58%|█████▊    | 144/250 [00:30<00:08, 12.57it/s, est. speed input: 3236.11 toks/s, output: 906.39 toks/s]Processed prompts:  58%|█████▊    | 146/250 [00:30<00:08, 12.89it/s, est. speed input: 3266.58 toks/s, output: 922.45 toks/s]Processed prompts:  59%|█████▉    | 148/250 [00:30<00:08, 11.38it/s, est. speed input: 3307.20 toks/s, output: 935.65 toks/s]Processed prompts:  60%|██████    | 150/250 [00:31<00:08, 12.05it/s, est. speed input: 3340.19 toks/s, output: 951.25 toks/s]Processed prompts:  62%|██████▏   | 154/250 [00:31<00:05, 16.19it/s, est. speed input: 3424.32 toks/s, output: 973.40 toks/s]Processed prompts:  62%|██████▏   | 156/250 [00:31<00:05, 15.82it/s, est. speed input: 3462.12 toks/s, output: 983.90 toks/s]Processed prompts:  63%|██████▎   | 158/250 [00:31<00:06, 14.33it/s, est. speed input: 3504.92 toks/s, output: 999.56 toks/s]Processed prompts:  64%|██████▍   | 160/250 [00:31<00:06, 14.53it/s, est. speed input: 3531.27 toks/s, output: 1009.57 toks/s]Processed prompts:  66%|██████▌   | 164/250 [00:31<00:05, 15.99it/s, est. speed input: 3554.39 toks/s, output: 1022.93 toks/s]Processed prompts:  66%|██████▋   | 166/250 [00:31<00:05, 15.85it/s, est. speed input: 3565.33 toks/s, output: 1027.35 toks/s]Processed prompts:  68%|██████▊   | 169/250 [00:32<00:04, 17.42it/s, est. speed input: 3646.91 toks/s, output: 1055.11 toks/s]Processed prompts:  69%|██████▉   | 173/250 [00:32<00:04, 16.04it/s, est. speed input: 3691.57 toks/s, output: 1072.74 toks/s]Processed prompts:  70%|███████   | 175/250 [00:32<00:05, 14.07it/s, est. speed input: 3729.45 toks/s, output: 1081.61 toks/s]Processed prompts:  71%|███████   | 177/250 [00:32<00:05, 14.57it/s, est. speed input: 3798.65 toks/s, output: 1095.77 toks/s]Processed prompts:  72%|███████▏  | 179/250 [00:32<00:04, 15.13it/s, est. speed input: 3843.05 toks/s, output: 1114.11 toks/s]Processed prompts:  72%|███████▏  | 181/250 [00:32<00:04, 15.63it/s, est. speed input: 3906.55 toks/s, output: 1121.13 toks/s]Processed prompts:  73%|███████▎  | 183/250 [00:33<00:04, 16.10it/s, est. speed input: 3950.13 toks/s, output: 1139.36 toks/s]Processed prompts:  74%|███████▍  | 186/250 [00:33<00:03, 17.38it/s, est. speed input: 4010.84 toks/s, output: 1167.54 toks/s]Processed prompts:  75%|███████▌  | 188/250 [00:33<00:04, 14.45it/s, est. speed input: 4053.96 toks/s, output: 1177.22 toks/s]Processed prompts:  76%|███████▌  | 190/250 [00:33<00:04, 12.89it/s, est. speed input: 4091.12 toks/s, output: 1182.19 toks/s]Processed prompts:  77%|███████▋  | 192/250 [00:33<00:04, 13.45it/s, est. speed input: 4117.55 toks/s, output: 1200.32 toks/s]Processed prompts:  78%|███████▊  | 194/250 [00:33<00:04, 13.97it/s, est. speed input: 4149.20 toks/s, output: 1207.32 toks/s]Processed prompts:  79%|███████▉  | 197/250 [00:34<00:04, 10.81it/s, est. speed input: 4156.76 toks/s, output: 1210.35 toks/s]Processed prompts:  80%|███████▉  | 199/250 [00:34<00:04, 11.26it/s, est. speed input: 4210.76 toks/s, output: 1228.39 toks/s]Processed prompts:  80%|████████  | 201/250 [00:34<00:04, 11.71it/s, est. speed input: 4267.93 toks/s, output: 1247.16 toks/s]Processed prompts:  82%|████████▏ | 204/250 [00:34<00:04, 11.08it/s, est. speed input: 4293.21 toks/s, output: 1260.34 toks/s]Processed prompts:  82%|████████▏ | 206/250 [00:35<00:05,  8.34it/s, est. speed input: 4302.18 toks/s, output: 1265.90 toks/s]Processed prompts:  83%|████████▎ | 208/250 [00:35<00:04,  8.45it/s, est. speed input: 4327.35 toks/s, output: 1277.13 toks/s]Processed prompts:  84%|████████▍ | 210/250 [00:35<00:04,  9.92it/s, est. speed input: 4354.84 toks/s, output: 1295.04 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:35<00:03, 10.48it/s, est. speed input: 4377.47 toks/s, output: 1303.85 toks/s]Processed prompts:  86%|████████▌ | 214/250 [00:36<00:03,  9.39it/s, est. speed input: 4424.47 toks/s, output: 1314.68 toks/s]Processed prompts:  86%|████████▋ | 216/250 [00:36<00:03, 10.61it/s, est. speed input: 4456.36 toks/s, output: 1327.85 toks/s]Processed prompts:  87%|████████▋ | 218/250 [00:36<00:03, 10.39it/s, est. speed input: 4490.83 toks/s, output: 1338.54 toks/s]Processed prompts:  88%|████████▊ | 220/250 [00:36<00:02, 11.56it/s, est. speed input: 4550.39 toks/s, output: 1355.18 toks/s]Processed prompts:  89%|████████▉ | 222/250 [00:36<00:02, 11.13it/s, est. speed input: 4585.12 toks/s, output: 1368.61 toks/s]Processed prompts:  90%|█████████ | 225/250 [00:36<00:02, 11.74it/s, est. speed input: 4625.07 toks/s, output: 1386.09 toks/s]Processed prompts:  91%|█████████ | 228/250 [00:37<00:02,  9.53it/s, est. speed input: 4662.91 toks/s, output: 1400.38 toks/s]Processed prompts:  92%|█████████▏| 230/250 [00:37<00:02,  9.48it/s, est. speed input: 4687.05 toks/s, output: 1414.68 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:37<00:01, 10.33it/s, est. speed input: 4715.86 toks/s, output: 1427.62 toks/s]Processed prompts:  94%|█████████▎| 234/250 [00:37<00:01, 10.48it/s, est. speed input: 4768.43 toks/s, output: 1445.24 toks/s]Processed prompts:  94%|█████████▍| 236/250 [00:38<00:02,  6.80it/s, est. speed input: 4774.94 toks/s, output: 1448.81 toks/s]Processed prompts:  95%|█████████▍| 237/250 [00:38<00:01,  7.08it/s, est. speed input: 4797.03 toks/s, output: 1455.84 toks/s]Processed prompts:  96%|█████████▌| 240/250 [00:38<00:01,  8.32it/s, est. speed input: 4852.01 toks/s, output: 1479.48 toks/s]Processed prompts:  96%|█████████▋| 241/250 [00:39<00:01,  6.74it/s, est. speed input: 4840.44 toks/s, output: 1479.50 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:39<00:00,  8.10it/s, est. speed input: 4884.37 toks/s, output: 1500.62 toks/s]Processed prompts:  98%|█████████▊| 244/250 [00:39<00:00,  7.80it/s, est. speed input: 4891.06 toks/s, output: 1506.31 toks/s]Processed prompts:  98%|█████████▊| 246/250 [00:39<00:00,  9.46it/s, est. speed input: 4928.60 toks/s, output: 1522.72 toks/s]Processed prompts:  99%|█████████▉| 248/250 [00:40<00:00,  5.90it/s, est. speed input: 4906.42 toks/s, output: 1528.67 toks/s]Processed prompts: 100%|█████████▉| 249/250 [00:41<00:00,  2.15it/s, est. speed input: 4729.80 toks/s, output: 1481.34 toks/s]Processed prompts: 100%|██████████| 250/250 [01:22<00:00,  9.20s/it, est. speed input: 2393.43 toks/s, output: 790.55 toks/s] Processed prompts: 100%|██████████| 250/250 [01:22<00:00,  9.20s/it, est. speed input: 2393.43 toks/s, output: 790.55 toks/s]Processed prompts: 100%|██████████| 250/250 [01:22<00:00,  3.01it/s, est. speed input: 2393.43 toks/s, output: 790.55 toks/s]
+ python3 clean_generations_translation.py --model yangccccc/codellama-multi --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.Scanner ; public class atcoder_ABC146_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int G [ ] [ ] = new int [ N ] [ N ] ; int E [ ] [ ] = new int [ N ] [ N ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; G [ a ] [ b ] = 1 ; G [ b ] [ a ] = 1 ; E [ a ] [ b ] = 0 ; E [ b ] [ a ] = 0 ; } int K = bfs ( 0 , N , G , E ) ; System.out.println ( K ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { System.out.println ( E [ i ] [ i + 1 ] ) ; } } public static int bfs ( int v , int N , int G [ ] [ ] , int E [ ] [ ] ) { int visited [ ] = new int [ N ] ; Queue < Integer > queue = new LinkedList < > ( ) ; int K = - 1 ; int node2color [ ] = new int [ N ] ; queue.add ( v ) ; visited [ v ] = 1 ; while ( ! queue.isEmpty ( ) ) { int q = queue.poll ( ) ; int color = 0 ; for ( int nex : G [ q ] ) { if ( visited [ nex ] == 1 ) continue ; visited [ nex ] = 1 ; color ++ ; if ( color == node2color [ q ] ) color ++ ; node2color [ nex ] = color ; E [ Math.min ( q , nex ) ] [ Math.max ( q , nex ) ] = color ; queue.add ( nex ) ; } K = Math.max ( K , color ) ; } return K ; } }
import java.util.Scanner ; public class atcoder_ABC119_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double [ ] x = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc.nextDouble ( ) ; if ( sc.next ( ).equals ( "JPY" ) ) { x [ i ] *= 1.0 ; } else { x [ i ] *= 380000.0 ; } } double sum = 0.0 ; for ( double d : x ) { sum += d ; } System.out.println ( sum ) ; } }
import java.util.* ; public class atcoder_AGC028_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextLong ( ) ; } long mod = 1000000007 ; long [ ] fac = new long [ 3001 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i < fac.length ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i % mod ; } long res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long num = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( j < i ) { num += a [ j ] ; } else { num += a [ n - 1 - j ] ; } } res += a [ i ] * num % mod ; res %= mod ; } res *= fac [ n ] ; res %= mod ; System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_569_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int ans = 0 ; while ( s < t ) { s = s * q ; ans ++ ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC112_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; arr [ i ] [ 2 ] = sc.nextInt ( ) ; } int x = 0 ; int y = 0 ; int h = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ 2 ] > 0 ) { x = arr [ i ] [ 0 ] ; y = arr [ i ] [ 1 ] ; h = arr [ i ] [ 2 ] ; break ; } } int [ ] [ ] dp = new int [ 101 ] [ 101 ] ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } dp [ x ] [ y ] = h ; for ( int i = 0 ; i < n ; i ++ ) { int newx = arr [ i ] [ 0 ] ; int newy = arr [ i ] [ 1 ] ; int newh = arr [ i ] [ 2 ] ; for ( int x = 0 ; x < 101 ; x ++ ) { for ( int y = 0 ; y < 101 ; y ++ ) { if ( dp [ x ] [ y ] != - 1 ) { int temp = dp [ x ] [ y ] - Math.abs ( x - newx ) - Math.abs ( y - newy ) ; if ( temp >= 0 ) { dp [ x ] [ y ] = temp ; } else { dp [ x ] [ y ] = - 1 ; } } } } } int ansx = 0 ; int ansiy = 0 ; int ans = 0 ; for ( int x = 0 ; x < 101 ; x ++ ) { for ( int y = 0 ; y < 101 ; y ++ ) { if ( dp [ x ] [ y ] != - 1 && dp [ x ] [ y ] > ans ) { ansx = x ; ansiy = y ; ans = dp [ x ] [ y ] ; } } } System.out.println ( ansx + " " + ansiy + " " + ans ) ; } } }
import java.util.Scanner ; public class atcoder_ABC104_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int D = stdIn.nextInt ( ) ; int G = stdIn.nextInt ( ) ; int [ ] [ ] PC = new int [ D ] [ 2 ] ; for ( int i = 0 ; i < D ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { PC [ i ] [ j ] = stdIn.nextInt ( ) ; } } int ans = ( int ) 1e9 ; for ( int i = 0 ; i < ( 1 << D ) ; i ++ ) { int score = 0 ; int problem = 0 ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i >> j ) & 1 == 1 ) { score += 100 * ( j + 1 ) * PC [ j ] [ 0 ] + PC [ j ] [ 1 ] ; problem += PC [ j ] [ 0 ] ; } } if ( score > G ) { continue ; } int left = G - score ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i >> j ) & 1 == 1 ) { continue ; } if ( left > 100 * ( j + 1 ) * PC [ j ] [ 0 ] + PC [ j ] [ 1 ] ) { continue ; } else { int tmp = ( left + 100 * ( j + 1 ) - 1 ) / ( 100 * ( j + 1 ) ) ; ans = Math.min ( ans , problem + Math.min ( tmp , PC [ j ] [ 0 ] ) ) ; } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_678_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = a / b + 1 ; int d = c * b ; System.out.println ( d ) ; } }
[INST:last]
import collections
import heapq
import sys
import math
import itertools
import bisect
from io import BytesIO , IOBase
import os

def value():
    return tuple(map(int, input().split()))

def values():
    return tuple(map(int, sys.stdin.readline().split()))

def inlst():
    return [int(i) for i in input().split()]

def inlsts():
    return [int(i) for i in sys.stdin.readline().split()]

def inp():
    return int(input())

def inps():
    return int(sys.stdin.readline())

def instr():
    return input()

def stlst():
    return [i for i in input().split()]

def help(a, b, l):
    tot = []
    for i in range(b):
        tot.append(l[i * a : i * a + a])
    for i in zip(*tot):
        if sum(i) == b:
            return True
    return False

def solve():
    tot = []
    x = instr()
    s = []
    for i in x:
        if i == 'O':
            s.append(0)
        else:
            s.append(1)
    for i in range(1, 13):
        if 12 % i == 0:
            if help(i, 12 // i, s):
                tot.append((12 // i, i))
    print(len(tot), end=' ')
    for a, b in sorted(tot):
        print(f'{a}x{b}', end=' ')
    print()

if __name__ == "__main__":
    for i in range(inp()):
        solve()
import java.util.Scanner ; public class atcoder_ABC105_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long [ ] cum_remainders = new long [ N + 1 ] ; cum_remainders [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { cum_remainders [ i + 1 ] = ( cum_remainders [ i ] + A [ i ] ) % M ; } long [ ] remainder_counts = new long [ M ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { remainder_counts [ cum_remainders [ i ] ] ++ ; } long combinations = 0 ; for ( int i = 0 ; i < M ; i ++ ) { combinations += remainder_counts [ i ] * ( remainder_counts [ i ] - 1 ) / 2 ; } System.out.println ( combinations ) ; } }
import java.util.Scanner ; public class atcoder_AGC033_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int N = sc.nextInt ( ) ; int s_r = sc.nextInt ( ) ; int s_c = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; boolean judge = false ; int S_L = 0 ; int S_R = 0 ; int S_U = 0 ; int S_D = 0 ; int T_L = 0 ; int T_R = 0 ; int T_U = 0 ; int T_D = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( S.charAt ( i ) == 'L' ) { S_L ++ ; if ( S_L - T_R - s_c == 0 ) { judge = true ; } } else if ( S.charAt ( i ) == 'R' ) { S_R ++ ; if ( s_c + ( S_R - T_L ) == W + 1 ) { judge = true ; } } else if ( S.charAt ( i ) == 'U' ) { S_U ++ ; if ( S_U - T_D - s_r == 0 ) { judge = true ; } } else if ( S.charAt ( i ) == 'D' ) { S_D ++ ; if ( s_r + ( S_D - T_U ) == H + 1 ) { judge = true ; } } if ( T.charAt ( i ) == 'L' ) { if ( S_R - T_L + s_c != 1 ) { T_L ++ ; } } else if ( T.charAt ( i ) == 'R' ) { if ( s_c + ( T_R - S_L ) != W ) { T_R ++ ; } } else if ( T.charAt ( i ) == 'U' ) { if ( S_D - T_U + s_r != 1 ) { T_U ++ ; } } else if ( T.charAt ( i ) == 'D' ) { if ( s_r + ( T_D - S_U ) != H ) { T_D ++ ; } } } if ( judge ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
import java.util.Scanner ; public class codeforces_55_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; while ( n % 2 == 0 ) { n = n / 2 ; } if ( n == 1 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC106_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc.next ( ).equals ( "1" ) ) l ++ ; else break ; } if ( l >= k ) return 1 ; return sc.next ( ).charAt ( 0 ) ; } }
import java.util.Scanner ; public class codeforces_404_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc.next ( ) ; } int flag = 0 ; char [ ] d1 = new char [ n ] ; char [ ] d2 = new char [ n ] ; Set < Character > rem = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { d1 [ i ] = s [ i ].charAt ( j ) ; } if ( i == n - j - 1 ) { d2 [ i ] = s [ i ].charAt ( j ) ; } if ( i != j && i != n - j - 1 ) { rem.add ( s [ i ].charAt ( j ) ) ; } } } if ( rem.size ( ) != 1 ) { System.out.println ( "NO" ) ; } else if ( ! Arrays.equals ( d1 , d2 ) ) { System.out.println ( "NO" ) ; } else if ( Math.pow ( 2 , d1.length ) != rem.size ( ) + 1 ) { System.out.println ( "NO" ) ; } else if ( ! rem.equals ( new HashSet < > ( Arrays.asList ( d1 ) ) ) ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
import java.util.Scanner ; public class atcoder_AGC046_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; long m = 998244353 ; long [ ] [ ] dp = new long [ c + 1 ] [ d + 1 ] ; for ( int i = 0 ; i <= c ; i ++ ) { for ( int j = 0 ; j <= d ; j ++ ) { if ( i == a && j == b ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] * i + dp [ i - 1 ] [ j ] * j - dp [ i - 1 ] [ j - 1 ] * ( i - 1 ) * ( j - 1 ) ) % m ; } } } System.out.println ( dp [ c ] [ d ] ) ; } }
import java.util.Scanner ; public class codeforces_7_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ m ] ; int ind = 1 ; while ( t -- > 0 ) { String s = sc.next ( ) ; if ( s.equals ( "alloc" ) ) { int x = sc.nextInt ( ) ; int pos = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 0 ) pos ++ ; if ( pos == x ) { for ( int j = i - x + 1 ; j <= i ; j ++ ) arr [ j ] = ind ; System.out.println ( ind ++ ) ; break ; } } if ( pos != x ) System.out.println ( "NULL" ) ; } else if ( s.equals ( "erase" ) ) { int x = sc.nextInt ( ) ; if ( ! isValid ( arr , x ) ) System.out.println ( "ILLEGAL_ERASE_ARGUMENT" ) ; else { for ( int i = 0 ; i < m ; i ++ ) if ( arr [ i ] == x ) arr [ i ] = 0 ; } } else if ( s.equals ( "defragment" ) ) { int cnt = 0 ; for ( int i = 0 ; i < m ; i ++ ) if ( arr [ i ] == 0 ) cnt ++ ; arr = removeZeroes ( arr ) ; for ( int i = 0 ; i < cnt ; i ++ ) arr [ m - 1 - i ] = 0 ; } } } static int [ ] removeZeroes ( int [ ] arr ) { int j = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) if ( arr [ i ] != 0 ) arr [ j ++ ] = arr [ i ] ; return arr ; } static boolean isValid ( int [ ] arr , int x ) { for ( int i = 0 ; i < arr.length ; i ++ ) if ( arr [ i ] == x ) return true ; return false ; } }
import java.util.Scanner ; public class atcoder_AGC021_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc.nextInt ( ) ; y [ i ] = sc.nextInt ( ) ; } double ans = 0.0 ; for ( int i = 0 ; i < N ; i ++ ) { double max = 0.0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( i != j ) { double dx = x [ i ] - x [ j ] ; double dy = y [ i ] - y [ j ] ; double theta = Math.atan2 ( dy , dx ) ; if ( theta < 0 ) { theta += 2 * Math.PI ; } max = Math.max ( max , theta ) ; } } max += 2 * Math.PI ; double sum = 0.0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( i != j ) { double dx = x [ i ] - x [ j ] ; double dy = y [ i ] - y [ j ] ; double theta = Math.atan2 ( dy , dx ) ; if ( theta < 0 ) { theta += 2 * Math.PI ; } sum += Math.min ( max , 2 * Math.PI - theta ) ; } } ans += sum / ( 2 * Math.PI ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC089_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; String [ ] S = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = stdIn.next ( ) ; } String [ ] march = { "M" , "A" , "R" , "C" , "H" } ; int [ ] marchLis = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { marchLis [ i ] = 0 ; } for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ].charAt ( 0 ) == 'M' || S [ i ].charAt ( 0 ) == 'A' || S [ i ].charAt ( 0 ) == 'R' || S [ i ].charAt ( 0 ) == 'C' || S [ i ].charAt ( 0 ) == 'H' ) { marchLis [ march.indexOf ( S [ i ].toUpperCase ( ) ) ] ++ ; } } int ans = 0 ; for ( int x = 0 ; x < 5 ; x ++ ) { for ( int y = 0 ; y < 5 ; y ++ ) { for ( int z = 0 ; z < 5 ; z ++ ) { ans += marchLis [ x ] * marchLis [ y ] * marchLis [ z ] ; } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC013_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = stdIn.nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i < N - 1 ; i ++ ) { if ( ( A [ i - 1 ] < A [ i ] && A [ i ] > A [ i + 1 ] ) || ( A [ i - 1 ] > A [ i ] && A [ i ] < A [ i + 1 ] ) ) { ans ++ ; } } System.out.println ( ans + 1 ) ; } }
import java.util.Scanner ; public class codeforces_609_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] count = new int [ m + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ a [ i ] ] ++ ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( count [ a [ i ] ] > 1 ) { ans += n - i - count [ a [ i ] ] ; count [ a [ i ] ] -- ; } else { ans += n - i - 1 ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC162_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int r = 0 ; int g = 0 ; int b = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'R' ) { r ++ ; } else if ( s.charAt ( i ) == 'G' ) { g ++ ; } else if ( s.charAt ( i ) == 'B' ) { b ++ ; } } int res = r * g * b ; for ( int i = 1 ; i <= n / 2 ; i ++ ) { for ( int j = 0 ; j < n - 2 * i ; j ++ ) { String str = s.substring ( j , j + i ) + s.substring ( j + i , j + i + i ) + s.substring ( j + i + i , j + i + i + i ) ; if ( str.equals ( "RGB" ) || str.equals ( "RBG" ) || str.equals ( "BGR" ) || str.equals ( "BRG" ) || str.equals ( "GBR" ) || str.equals ( "GRB" ) ) { res -- ; } } } System.out.println ( res ) ; } }
import java.util.Scanner ; public class atcoder_AGC014_D { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] [ ] adj = new int [ n + 1 ] [ ] ; for ( int i = 1 ; i < n ; i ++ ) { int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; adj [ a ] [ 0 ] = b ; adj [ b ] [ 0 ] = a ; } int [ ] seen = new int [ n + 1 ] ; seen [ 1 ] = 1 ; int [ ] par = new int [ n + 1 ] ; int [ ] child_num = new int [ n + 1 ] ; java.util.LinkedList < Integer > queue = new java.util.LinkedList < > ( ) ; queue.add ( 1 ) ; while ( ! queue.isEmpty ( ) ) { int v = queue.poll ( ) ; for ( int u : adj [ v ] ) { if ( seen [ u ] == 0 ) { seen [ u ] = 1 ; par [ u ] = v ; child_num [ v ] ++ ; queue.add ( u ) ; } } } java.util.LinkedList < Integer > seq = new java.util.LinkedList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( child_num [ i ] == 0 ) { seq.add ( i ) ; } } while ( ! seq.isEmpty ( ) ) { int c = seq.poll ( ) ; seen [ c ] = 0 ; if ( seen [ par [ c ] ] == 0 ) { System.out.println ( "First" ) ; return ; } seen [ par [ c ] ] = 0 ; child_num [ par [ par [ c ] ] ] -- ; if ( child_num [ par [ par [ c ] ] ] == 0 ) { seq.add ( par [ par [ c ] ] ) ; } } System.out.println ( "Second" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC151_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; System.out.println ( S.replace ( S.charAt ( 0 ) , ( char ) ( ( int ) S.charAt ( 0 ) + 1 ) ) ) ; } }
import java.util.Scanner ; public class codeforces_581_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner.nextInt ( ) ; } int mx = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans [ i ] = Math.max ( 0 , mx - arr [ i ] + 1 ) ; if ( arr [ i ] > mx ) { mx = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
import java.util.Scanner ; public class atcoder_ABC126_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] [ ] edge = new int [ N ] [ ] ; for ( int i = 0 ; i < M ; i ++ ) { int X = sc.nextInt ( ) ; int Y = sc.nextInt ( ) ; int Z = sc.nextInt ( ) ; edge [ X - 1 ] [ 0 ] = Y - 1 ; edge [ Y - 1 ] [ 0 ] = X - 1 ; } boolean [ ] used = new boolean [ N ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ! used [ i ] ) { ans ++ ; Deque < Integer > queue = new ArrayDeque < > ( ) ; queue.add ( i ) ; while ( ! queue.isEmpty ( ) ) { int node = queue.remove ( ) ; used [ node ] = true ; for ( int nextnode : edge [ node ] ) { if ( ! used [ nextnode ] ) { queue.add ( nextnode ) ; } } } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC118_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int gcd = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { gcd = gcd ( gcd , arr [ i ] ) ; } System.out.println ( gcd ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
import java.util.Scanner ; public class atcoder_ABC132_F { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int k = scanner.nextInt ( ) ; long [ ] [ ] dp = new long [ k + 1 ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= k ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { long sum = 0 ; for ( int l = n - 1 ; l >= 0 ; l -- ) { sum += dp [ i - 1 ] [ l ] ; sum %= 1000000007 ; } dp [ i ] [ j ] = ( sum * ( j == 0 ? 1 : dp [ i ] [ j - 1 ] ) ) % 1000000007 ; } } System.out.println ( dp [ k ] [ n - 1 ] ) ; } } }
import java.util.Scanner ; public class codeforces_581_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int x = Math.max ( a , b ) ; int y = Math.min ( a , b ) ; System.out.println ( y + " " + ( x - y ) / 2 ) ; } }
import java.util.Scanner ; public class codeforces_92_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int i = 1 ; while ( m >= i ) { m -= i ; i = ( i % n ) + 1 ; } System.out.println ( m ) ; } }
import java.util.Scanner ; public class atcoder_ABC170_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int c = stdIn.nextInt ( ) ; int d = stdIn.nextInt ( ) ; int e = stdIn.nextInt ( ) ; int sum = a + b + c + d + e ; int count = 0 ; if ( a > 0 ) { count ++ ; } if ( b > 0 ) { count ++ ; } if ( c > 0 ) { count ++ ; } if ( d > 0 ) { count ++ ; } if ( e > 0 ) { count ++ ; } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_653_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] + 1 < arr [ i ] + 2 ) { if ( arr [ i ] +
import java.util.Scanner ; public class codeforces_8_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int x = 0 ; int y = 0 ; int [ ] [ ] d = { { 0 , - 1 } , { 0 , 1 } , { 1 , 0 } , { - 1 , 0 } } ; boolean bug = false ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { int dx = d [ s.charAt ( i ) - 'L' ] [ 0 ] ; int dy = d [ s.charAt ( i ) - 'L' ] [ 1 ] ; x += dx ; y += dy ; if ( x < 0 || x >= 10 || y < 0 || y >= 10 ) { bug = true ; break ; } } if ( bug ) { System.out.println ( "BUG" ) ; } else { System.out.println ( "OK" ) ; } } }
import java.util.Scanner ; public class codeforces_146_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int sum1 = 0 ; int sum2 = 0 ; boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 4 && arr [ i ] != 7 ) { flag = true ; break ; } if ( i < n / 2 ) { sum1 += arr [ i ] ; } else { sum2 += arr [ i ] ; } } if ( ! flag ) { if ( sum1 == sum2 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class codeforces_299_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int gcd = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] % gcd != 0 ) { gcd = - 1 ; break ; } } System.out.println ( gcd ) ; } }
import java.util.Scanner ; public class codeforces_518_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int [ ] sCount = new int [ 26 ] ; int [ ] tCount = new int [ 26 ] ; for ( char c : s.toCharArray ( ) ) { sCount [ c - 'a' ] ++ ; } for ( char c : t.toCharArray ( ) ) { tCount [ c - 'a' ] ++ ; } int yay = 0 ; int whoops = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { while ( sCount [ i ] > 0 && tCount [ i ] > 0 ) { yay ++ ; sCount [ i ] -- ; tCount [ i ] -- ; } } for ( int i = 0 ; i < 26 ; i ++ ) { while ( sCount [ i ] > 0 ) { if ( Character.isLowerCase ( ( char ) ( i + 'a' ) ) && tCount [ Character.toUpperCase ( ( char ) ( i + 'a' ) ) - 'A' ] > 0 ) { whoops ++ ; sCount [ i ] -- ; tCount [ Character.toUpperCase ( ( char ) ( i + 'a' ) ) - 'A' ] -- ; } else if ( Character.isUpperCase ( ( char ) ( i + 'a' ) ) && tCount [ Character.toLowerCase ( ( char ) ( i + 'a' ) ) - 'a' ] > 0 ) { whoops ++ ; sCount [ i ] -- ; tCount [ Character.toLowerCase ( ( char ) ( i + 'a' ) ) - 'a' ] -- ; } else { break ; } } } System.out.println ( yay + " " + whoops ) ; } }
import java.util.Scanner ; public class codeforces_421_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int [ ] lista = new int [ n ] ; int [ ] listb = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lista [ i ] = stdIn.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { listb [ i ] = stdIn.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( lista [ i ] == i + 1 ) { System.out.print ( 1 + " " ) ; } else { System.out.print ( 2 + " " ) ; } } } }
import java.util.Scanner ; public class codeforces_340_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int gcd = gcd ( x , y ) ; int lcm = x * y / gcd ; System.out.println ( ( b / lcm - ( a - 1 ) / lcm ) ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java.util.Scanner ; public class atcoder_ABC140_F { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] S = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = stdIn.nextInt ( ) ; } int [ ] flag = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { flag [ i ] = 1 ; } int [ ] cur = new int [ N ] ; cur [ 0 ] = S [ 0 ] ; flag [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int j = 0 ; int jM = cur.length ; for ( int k = 0 ; k < N ; k ++ ) { if ( flag [ k ] == 1 && S [ k ] < cur [ j ] ) { cur [ j ] = S [ k ] ; j ++ ; flag [ k ] = 0 ; if ( j == jM ) break ; } } if ( j != jM ) { System.out.println ( "No" ) ; return ; } cur = sort ( cur ) ; } System.out.println ( "Yes" ) ; } static int [ ] sort ( int [ ] a ) { int [ ] b = new int [ a.length ] ; for ( int i = 0 ; i < a.length ; i ++ ) { b [ i ] = a [ i ] ; } int [ ] c = new int [ a.length ] ; for ( int i = 0 ; i < a.length ; i ++ ) { c [ i ] = a [ i ] ; } for ( int i = 0 ; i < a.length ; i ++ ) { for ( int j = i + 1 ; j < a.length ; j ++ ) { if ( c [ i ] < c [ j ] ) { int temp = c [ i ] ; c [ i ] = c [ j ] ; c [ j ] = temp ; } } } for ( int i = 0 ; i < a.length ; i ++ ) { for ( int j = i + 1 ; j < a.length ; j ++ ) { if ( b [ i ] > b [ j ] ) { int temp = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = temp ; } } } for ( int i = 0 ; i < a.length ; i ++ ) { if ( c [ i ] != b [ i ] ) { int temp = c [ i ] ; c [ i ] = b [ i ] ; b [ i ] = temp ; } } return b ; } }
import java.util.Scanner ; public class codeforces_534_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int v1 = sc.nextInt ( ) ; int v2 = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int a = 1 ; int v = v1 ; int distance = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( v - v2 > ( t - i - 1 ) * d ) { a *= - 1 ; v = ( t - i - 1 ) * d + v2 ; } distance += v ; v += a * d ; } System.out.println ( distance ) ; } }
import java.util.Scanner ; public class codeforces_672_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { arr2 [ i ] = arr [ n - 1 - i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += arr2 [ i ] ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_148_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int p = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( d <= p ) { System.out.println ( 0 ) ; return ; } int result = 0 ; int position = t * p ; position += p * position / ( d - p ) ; while ( position < c ) { result ++ ; position += p * position / d ; position += p * f ; position += p * position / ( d - p ) ; } System.out.println ( result ) ; } }
import java.util.Scanner ; public class codeforces_59_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; int upper = 0 , lower = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char c = s.charAt ( i ) ; if ( c >= 'a' && c <= 'z' ) { lower ++ ; } else { upper ++ ; } } if ( upper > lower ) { s = s.toUpperCase ( ) ; } else { s = s.toLowerCase ( ) ; } System.out.println ( s ) ; } }
import java.util.Scanner ; public class codeforces_474_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; int r = 1 ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = r ; r ++ ; for ( int j = 0 ; j < sc.nextInt ( ) ; j ++ ) { A [ i ] = A [ i ] * 2 + 1 ; } } sc.nextLine ( ) ; int M = sc.nextInt ( ) ; for ( int i = 0 ; i < M ; i ++ ) { System.out.println ( A [ sc.nextInt ( ) - 1 ] ) ; } } }
import java.util.Scanner ; public class codeforces_267_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.println ( substract ( arr [ i ] ) ) ; } } public static int substract ( int n ) { int count = 0 ; while ( n > 0 ) { if ( n % 2 == 1 ) { count ++ ; n = n - 1 ; } else { count ++ ; n = n / 2 ; } } return count ; } }
import java.util.Scanner ; public class atcoder_ABC172_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += i * ( N / i ) * ( N / i + 1 ) / 2 ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC112_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int age = sc.nextInt ( ) ; if ( age == 1 ) { System.out.println ( "Hello World" ) ; } else { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; System.out.println ( a + b ) ; } } }
import java.util.Scanner ; public class codeforces_265_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int prev = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += Math.abs ( prev - arr [ i ] ) + 1 ; prev = arr [ i ] ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class codeforces_342_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; if ( s < f ) { int d = 1 ; char c = 'R' ; } else { int d = - 1 ; char c = 'L' ; } String res = "" ; int i = 1 ; int j = s ; while ( j != f ) { if ( i > n && k < m ) { n = sc.nextInt ( ) ; l = sc.nextInt ( ) ; r = sc.nextInt ( ) ; k ++ ; } if ( i == n && ( l <= j <= r || l <= j + d <= r ) ) { res += "X" ; } else { res += c ; j += d ; } i ++ ; } System.out.println ( res ) ; } }
[java]
import java.util.* ; public class codeforces_356_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] out = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { out [ i ] = 0 ; } int [ ] comp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { comp [ i ] = i + 2 ; } for ( int i = 0 ; i < m ; i ++ ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int t = l ; while ( t <= r ) { int next_val = comp [ t - 1 ] ; if ( out [ t - 1 ] == 0 && t != x ) { out [ t - 1 ] = x ; } comp [ t - 1 ] = r + 1 > t ? x : r + 1 ; t = next_val ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( out [ i ] + " " ) ; } } }

[/java]
import java.util.Scanner ; public class atcoder_ABC178_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; if ( a == 0 ) { System.out.println ( 1 ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.Scanner ; public class atcoder_ABC158_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int ans = 0 ; int rep = N / ( A + B ) ; ans += rep * A ; int res = N - rep * ( A + B ) ; ans += Math.min ( res , A ) ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_296_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { count ++ ; } } } if ( count >= n / 2 + 1 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class atcoder_AGC019_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; int h = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int best1L = Math.min ( q * 4 , Math.min ( h * 2 , s ) ) ; int best2L = Math.min ( d , best1L * 2 ) ; if ( n % 2 == 0 ) { System.out.println ( best2L * ( n / 2 ) ) ; } else { System.out.println ( best2L * ( n / 2 ) + best1L ) ; } } }
[java]
import java.util.Scanner ; public class atcoder_ABC134_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] [ ] dp = new int [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; dp [ i ] = new int [ 1 ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < dp [ i ].length ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] ++ ; } } } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < dp [ i ].length ; j ++ ) { if ( dp [ i ] [ j ] >= 2 ) { res ++ ; } } } System.out.println ( res ) ; } }

[/java]
import java.util.Scanner ; public class codeforces_387_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h1 = sc.nextInt ( ) ; int m1 = sc.nextInt ( ) ; m1 += h1 * 60 ; int h2 = sc.nextInt ( ) ; int m2 = sc.nextInt ( ) ; m2 += h2 * 60 ; m2 = m1 - m2 ; m2 %= 1440 ; System.out.println ( String.format ( "%02d:%02d" , m2 / 60 , m2 % 60 ) ) ; } }
import java.util.Scanner ; public class codeforces_665_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int at = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int bt = sc.nextInt ( ) ; int t1 = sc.nextInt ( ) ; int t2 = sc.nextInt ( ) ; int st = t2 + ( t1 - 5 ) * 60 ; int fin = st + at ; int now = 0 ; int ans = 0 ; while ( now < fin && now < 1140 ) { if ( now + bt > st ) { ans ++ ; } now += b ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String X = sc.next ( ) ; int a = 0 , b = 0 ; for ( int j = 0 ; j < S.length ( ) ; j ++ ) { if ( S.charAt ( j ) == X.charAt ( 0 ) ) a ++ ; else if ( S.charAt ( j ) == X.charAt ( 1 ) ) b ++ ; else ans += Math.min ( a , b ) ; a = 0 ; b = 0 ; } ans += Math.min ( a , b ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_23_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < 2 ) { System.out.println ( 0 ) ; } else { System.out.println ( a [ i ] - 2 ) ; } } } }
import java.util.Scanner ; import java.util.Set ; import java.util.HashSet ; public class atcoder_ABC150_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long num = sc.nextLong ( ) ; Set < Long > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set.add ( sc.nextLong ( ) ) ; } Set < Long > twoTimesSet = new HashSet < > ( ) ; for ( Long i : set ) { int count = 0 ; while ( i > 0 ) { i /= 2 ; if ( i % 2 != 0 ) { count ++ ; break ; } } if ( count > 1 ) { System.out.println ( 0 ) ; return ; } } long lcm = 1 ; for ( Long i : set ) { lcm = lcm * i / ( lcm % i ) ; } System.out.println ( ( num - lcm / 2 ) / lcm + 1 ) ; } }
import java.util.* ; public class codeforces_216_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] [ ] graph = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; graph [ a ] [ b ] = 1 ; graph [ b ] [ a ] = 1 ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( graph [ i ] [ i ] == 0 ) { int count = 0 ; int sum = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( graph [ i ] [ j ] == 1 ) { count ++ ; sum += graph [ j ] [ i ] ; } } if ( count > 1 && count % 2 == 1 && 2 * count == sum ) { ans ++ ; } } } if ( ( n - ans ) % 2 == 1 ) { ans ++ ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC149_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int y = x - a ; if ( y >= 0 ) { System.out.println ( 0 + " " + b ) ; } else { System.out.println ( y + " " + ( b - Math.abs ( y ) ) ) ; } } }
import java.util.Scanner ; public class codeforces_612_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { res += Math.abs ( b [ i ] - b [ i - 1 ] ) ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_583_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int counter = 0 ; int turns = 0 ; while ( counter < n ) { turns ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != - 1 && arr [ i ] <= counter ) { counter ++ ; arr [ i ] = - 1 ; } } arr = reverse ( arr ) ; } System.out.println ( turns ) ; } static int [ ] reverse ( int [ ] arr ) { int n = arr.length ; int temp ; for ( int i = 0 ; i < n / 2 ; i ++ ) { temp = arr [ i ] ; arr [ i ] = arr [ n - i - 1 ] ; arr [ n - i - 1 ] = temp ; } return arr ; } }
import java.util.Scanner ; public class codeforces_607_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int [ ] l = new int [ 1000010 ] ; int [ ] dp = new int [ 1000010 ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = scan.nextInt ( ) ; int b = scan.nextInt ( ) ; l [ a ] = b ; } if ( l [ 0 ] > 0 ) { dp [ 0 ] = 1 ; } int mx = 0 ; for ( int i = 1 ; i < 1000010 ; i ++ ) { if ( l [ i ] == 0 ) { dp [ i ] = dp [ i - 1 ] ; } else if ( l [ i ] >= i ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - l [ i ] - 1 ] + 1 ; } if ( dp [ i ] > mx ) { mx = dp [ i ] ; } } System.out.println ( n - mx ) ; } }
import java.util.* ; public class atcoder_AGC010_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( sum % ( n * ( n + 1 ) / 2 ) != 0 ) { System.out.println ( "NO" ) ; return ; } int k = sum / ( n * ( n + 1 ) / 2 ) ; a [ n ] = a [ 0 ] ; int [ ] b = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = ( k - a [ i - 1 ] + a [ i ] ) % n ; } int flag = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( b [ i ] != b [ i - 1 ] ) { flag = 1 ; break ; } } if ( flag == 1 ) { System.out.println ( "NO" ) ; return ; } System.out.println ( "YES" ) ; } }
import java.util.Scanner ; public class codeforces_190_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a < 1 ) { if ( b < 1 ) { System.out.println ( a + " " + b ) ; return ; } System.out.println ( "Impossible" ) ; return ; } if ( b > a ) { System.out.println ( b + " " + ( a + b ) ) ; return ; } System.out.println ( a + " " + ( a + b ) ) ; } }
import java.util.Scanner ; public class codeforces_387_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] roundComplexity = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { roundComplexity [ i ] = sc.nextInt ( ) ; } int [ ] georgeComplexity = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { georgeComplexity [ i ] = sc.nextInt ( ) ; } int i = 0 ; int j = 0 ; while ( i < n && j < m ) { if ( roundComplexity [ i ] <= georgeComplexity [ j ] ) { i ++ ; } j ++ ; } System.out.println ( n - i ) ; } }
import java.util.Scanner ; import java.util.PriorityQueue ; public class atcoder_ABC137_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { pq.add ( sc.nextInt ( ) ) ; } int sum = 0 ; while ( ! pq.isEmpty ( ) ) { int day = pq.poll ( ) ; if ( m - sum >= day ) { sum += day ; } else { sum += m - sum ; break ; } } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_ABC120_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; if ( s.length ( ) == 1 ) { System.out.println ( 0 ) ; return ; } int [ ] cnt = new int [ 26 ] ; for ( char c : s.toCharArray ( ) ) { cnt [ c - 'a' ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { ans = Math.max ( ans , cnt [ i ] ) ; } System.out.println ( ans * 2 ) ; } }
import java.util.Scanner ; public class codeforces_397_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int e = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; if ( a * k >= x ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } if ( b * k >= x ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } if ( c * k >= x ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } if ( d * k >= x ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } if ( e * k >= x ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } if ( f * k >= x ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } }
import java.util.Scanner ; public class atcoder_ARC102_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; int N = sc.nextInt ( ) ; long [ ] ans = new long [ 2 * K + 1 ] ; long mod = 998244353 ; long [ ] g1 = new long [ 2000 ] ; long [ ] g2 = new long [ 2000 ] ; long [ ] inverse = new long [ 2000 ] ; g1 [ 1 ] = 1 ; g1 [ 2 ] = 1 ; g2 [ 1 ] = 1 ; g2 [ 2 ] = 1 ; inverse [ 1 ] = 1 ; for ( int i = 3 ; i <= 2000 ; i ++ ) { g1 [ i ] = ( g1 [ i - 1 ] * i ) % mod ; inverse [ i ] = ( - inverse [ mod % i ] * ( mod / i ) ) % mod ; g2 [ i ] = ( g2 [ i - 1 ] * inverse [ i - 1 ] ) % mod ; } long comb ( long n , long r , long mod ) { if ( r < 0 ||r > n ) return 0 ; r = Math.min ( r , n - r ) ; return ( g1 [ n ] * g2 [ r ] % mod * g2 [ n - r ] % mod ) ; } long kumiawase ( long p , long q ) { return comb ( p + q - 1 , q - 1 , mod ) ; } long solve ( long n ) { long ans = 0 ; long kumi = ( n - 1 ) / 2 ; for ( long p = 1 ; p <= kumi + 1 ; p ++ ) { if ( p > N ) break ; ans += ( long ) Math.pow ( 2 , p ) * comb ( kumi , p , mod ) * kumiawase ( N - p , p + ( K - kumi * 2 - ( n % 2 == 0 ? 1 : 0 ) ) ) ; if ( n % 2 == 0 && N - p - 1 >= 0 ) ans += ( long ) Math.pow ( 2 , p ) * comb ( kumi , p , mod ) * kumiawase ( N - p - 1 , p + ( K - kumi * 2 - ( n % 2 == 0 ? 1 : 0 ) ) ) ; } return ans ; } for ( int i = 2 ; i <= 2 * K + 1 ; i ++ ) { if ( i <= K + 1 ) { ans [ i ] = solve ( i ) % mod ; System.out.println ( ans [ i ] ) ; } else { System.out.println ( ans [ 2 * K + 1 - i ] ) ; } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC148_F { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int ta = sc.nextInt ( ) ; int ao = sc.nextInt ( ) ; ta -- ; ao -- ; ArrayList < Integer > [ ] g = new ArrayList < Integer > [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; g [ a - 1 ].add ( b - 1 ) ; g [ b - 1 ].add ( a - 1 ) ; } int [ ] ta_dist = new int [ n ] ; ta_dist [ ta ] = 0 ; int [ ] ao_dist = new int [ n ] ; ao_dist [ ao ] = 0 ; dfs ( ta , ta_dist , g ) ; dfs ( ao , ao_dist , g ) ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ta_dist [ i ] <= ao_dist [ i ] ) res = Math.max ( res , ao_dist [ i ] ) ; } System.out.println ( res - 1 ) ; } public static void dfs ( int node , int [ ] dist , ArrayList < Integer > [ ] g ) { for ( int i = 0 ; i < g [ node ].size ( ) ; i ++ ) { int v = g [ node ].get ( i ) ; if ( dist [ v ] != 0 ) continue ; dist [ v ] = dist [ node ] + 1 ; dfs ( v , dist , g ) ; } } }
import java.util.Scanner ; public class atcoder_ABC070_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int a = scanner.nextInt ( ) ; int b = scanner.nextInt ( ) ; int c = scanner.nextInt ( ) ; int d = scanner.nextInt ( ) ; if ( b <= c || d <= a ) { System.out.println ( 0 ) ; } else { int [ ] array = { a , b , c , d } ; Arrays.sort ( array ) ; System.out.println ( array [ 2 ] - array [ 1 ] ) ; } } }
import java.util.Scanner ; public class atcoder_ABC152_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int a = 1 ; int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ pos ] > arr [ i ] ) { a ++ ; pos = i ; } } System.out.println ( a ) ; } }
import java.util.Scanner ; public class atcoder_ABC111_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int a = 0 ; int b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a += arr [ i ] ; } else { b += arr [ i ] ; } } int c = 0 ; int d = 0 ; int e = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { c ++ ; } else { d ++ ; } } int maxa = 0 ; int maxb = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( arr [ i ] > maxa ) { maxa = arr [ i ] ; } } else { if ( arr [ i ] > maxb ) { maxb = arr [ i ] ; } } } if ( maxa != maxb ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( arr [ i ] != maxa ) { ans ++ ; } } else { if ( arr [ i ] != maxb ) { ans ++ ; } } } System.out.println ( ans ) ; } else { int ans1 = 0 ; int ans2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( arr [ i ] != maxa ) { ans1 ++ ; } } else { if ( arr [ i ] != maxb ) { ans2 ++ ; } } } System.out.println ( Math.min ( ans1 + ans2 , ans1 + ans2 ) ) ; } } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_268_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int n = Integer.parseInt ( br.readLine ( ) ) ; String [ ] q = new String [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { q [ i ] = br.readLine ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( q [ i ] . charAt ( 0 ) == q [ j ] . charAt ( q [ j ] . length ( ) - 1 ) && i != j ) { count ++ ; } } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_651_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int sum = x + y ; int diff = y - x ; if ( diff >= 3 ) { sum += diff / 3 ; } if ( sum > 0 ) { System.out.println ( sum ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.Scanner ; import java.util.Set ; import java.util.TreeSet ; public class codeforces_274_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long k = sc.nextLong ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextLong ( ) ; } Set < Long > set = new TreeSet < > ( ) ; long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 || ! set.contains ( arr [ i ] / k ) ) { set.add ( arr [ i ] ) ; } count = Math.max ( count , set.size ( ) ) ; } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_306_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int q = n / m ; int r = n % m ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = q ; } for ( int i = 0 ; i < r ; i ++ ) { a [ i ] ++ ; } for ( int i = 0 ; i < m ; i ++ ) { System.out.print ( a [ i ] + " " ) ; } } }
import java.util.Scanner ; public class codeforces_400_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int count = 0 ; while ( n -- > 0 ) { String s = sc.next ( ) ; for ( int i = 0 ; i < m ; i ++ ) { if ( s.charAt ( i ) == 'G' ) { count ++ ; break ; } } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_327_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int count = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '1' ) count ++ ; } int result = count ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '0' ) { int start = i ; while ( s.charAt ( i ) == '0' ) i ++ ; int end = i ; int length = end - start ; result += 2 * length - 1 ; } } System.out.println ( result ) ; } }
import java.util.* ; public class codeforces_567_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { System.out.print ( arr [ 1 ] - arr [ 0 ] + " " + ( arr [ n - 1 ] - arr [ 0 ] ) + "\n" ) ; } else if ( i == n - 1 ) { System.out.print ( ( arr [ n - 1 ] - arr [ n - 2 ] ) + " " + ( arr [ n - 1 ] - arr [ 0 ] ) + "\n" ) ; } else { if ( arr [ i ] - arr [ i - 1 ] > arr [ i + 1 ] - arr [ i ] ) { System.out.print ( arr [ i + 1 ] - arr [ i ] + " " ) ; } else { System.out.print ( arr [ i ] - arr [ i - 1 ] + " " ) ; } if ( arr [ n - 1 ] - arr [ i ] > arr [ i ] - arr [ 0 ] ) { System.out.print ( arr [ n - 1 ] - arr [ i ] + "\n" ) ; } else { System.out.print ( arr [ i ] - arr [ 0 ] + "\n" ) ; } } } } }
import java.util.Scanner ; public class atcoder_ABC109_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc.next ( ) ; } String res = "Yes" ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == null || s [ i ].length ( ) == 0 ) { res = "No" ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ].charAt ( 0 ) != s [ i - 1 ].charAt ( s [ i - 1 ].length ( ) - 1 ) ) { res = "No" ; break ; } } int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { char ch = s [ i ].charAt ( 0 ) ; cnt [ ch - 'a' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( cnt [ i ] > 1 ) { res = "No" ; break ; } } System.out.println ( res ) ; } }
import java.util.* ; public class codeforces_579_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 1 ; while ( n > 1 ) { x ++ ; n -= 2 * ( int ) Math.pow ( 2 , ( int ) Math.log ( n ) / Math.log ( 2 ) ) ; } System.out.println ( x ) ; } }
import java.util.Scanner ; public class codeforces_189_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int length = a ; int [ ] arr = new int [ 3 ] ; arr [ 0 ] = b ; arr [ 1 ] = c ; arr [ 2 ] = d ; int max = 0 ; if ( length % arr [ 0 ] == 0 ) { System.out.println ( length / arr [ 0 ] ) ; return ; } for ( int i = 0 ; i <= length / arr [ 2 ] ; i ++ ) { for ( int j = 0 ; j <= length / arr [ 1 ] ; j ++ ) { int check = length - i * arr [ 2 ] - j * arr [ 1 ] ; if ( check >= 0 && check % arr [ 0 ] == 0 ) { int k = check / arr [ 0 ] ; max = Math.max ( max , k + i + j ) ; } } } System.out.println ( max ) ; } }
import java.util.Scanner ; public class atcoder_AGC037_E { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int N = scanner.nextInt ( ) ; int K = scanner.nextInt ( ) ; String S = scanner.next ( ) ; if ( K >= 15 || 2 ** K >= N ) { System.out.println ( min ( S ) * N ) ; return ; } if ( K == 1 ) { System.out.println ( S ) ; return ; } int count = 0 ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( S.charAt ( i ) == S.charAt ( 0 ) ) { count ++ ; } else { break ; } } if ( count * 2 ** ( K - 1 ) >= N ) { System.out.println ( S.charAt ( 0 ) * N ) ; return ; } S = S.charAt ( 0 ) + ( count * ( 2 ** ( K - 1 ) - 1 ) ) + S ; System.out.println ( S.substring ( 0 , N ) ) ; } static char min ( String s ) { char min = s.charAt ( 0 ) ; for ( int i = 1 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) < min ) { min = s.charAt ( i ) ; } } return min ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.StringTokenizer ; public class codeforces_222_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int n = Integer.parseInt ( st.nextToken ( ) ) ; int k = Integer.parseInt ( st.nextToken ( ) ) ; st = new StringTokenizer ( br.readLine ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer.parseInt ( st.nextToken ( ) ) ; } if ( arr [ 0 ] == arr [ n - 1 ] && k == 1 ) { System.out.println ( 0 ) ; } else if ( k == 1 ) { System.out.println ( - 1 ) ; } else if ( arr [ k - 1 ] != arr [ n - 1 ] ) { System.out.println ( - 1 ) ; } else { int count = 0 ; for ( int i = 0 ; i < k - 1 ; i ++ ) { if ( arr [ i ] == arr [ n - 1 ] ) { count ++ ; } } System.out.println ( count ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC165_C { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int a [ ] = new int [ q ] ; int b [ ] = new int [ q ] ; int c [ ] = new int [ q ] ; int d [ ] = new int [ q ] ; for ( int i = 0 ; i < q ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; d [ i ] = sc.nextInt ( ) ; } long res = 0 ; for ( int i = 0 ; i < q ; i ++ ) { if ( c [ i ] == b [ i ] - a [ i ] ) { res += d [ i ] ; } } System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_203_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] [ ] count = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { count [ i ] [ j ] = 0 ; } } int ans = - 1 ; for ( int k = 0 ; k < m ; k ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; x -- ; y -- ; boolean found = false ; for ( int i = x - 2 ; i <= x + 1 ; i ++ ) { for ( int j = y - 2 ; j <= y + 1 ; j ++ ) { if ( i >= 0 && i < n && j >= 0 && j < n ) { count [ i ] [ j ] ++ ; if ( count [ i ] [ j ] == 9 ) { found = true ; break ; } } } } if ( found ) { ans = k + 1 ; break ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC024_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { cnt ++ ; } else { ans = Math.max ( ans , cnt ) ; cnt = 0 ; } } ans = Math.max ( ans , cnt ) ; System.out.println ( n - ans ) ; } }
import java.util.Scanner ; public class codeforces_287_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int [ ][ ] arr = new int [ 4 ][ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { arr [ i ][ j ] = sc.nextInt ( ) ; } } int black = 0 ; int white = 0 ; int correct = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ i ][ j ] == 1 ) { black ++ ; } else { white ++ ; } if ( arr [ i ][ j + 1 ] == 1 ) { black ++ ; } else { white ++ ; } if ( arr [ i + 1 ][ j ] == 1 ) { black ++ ; } else { white ++ ; } if ( arr [ i + 1 ][ j + 1 ] == 1 ) { black ++ ; } else { white ++ ; } if ( black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4 ) { correct = 1 ; break ; } black = 0 ; white = 0 ; } } if ( correct == 1 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class codeforces_37_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc.nextInt ( ) ; } int high = 1 ; int tower = n ; int maximum = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( l [ i ] == l [ i - 1 ] ) { tower -- ; high ++ ; } else { if ( high > maximum ) { maximum = high ; } high = 1 ; } } if ( high > maximum ) { maximum = high ; } System.out.println ( maximum + " " + tower ) ; } }
import java.util.Scanner ; public class atcoder_AGC006_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; if ( X == 1 || X == N * 2 - 1 ) { System.out.println ( "No" ) ; } else { System.out.println ( "Yes" ) ; if ( X == N * 2 - 2 ) { for ( int i = N - 1 ; i <= X + 2 ; i ++ ) { System.out.println ( i ) ; } for ( int i = 1 ; i < N - 1 ; i ++ ) { System.out.println ( i ) ; } } else { int [ ] ys = new int [ 2 * N - 4 ] ; for ( int i = 1 ; i <= X - 1 ; i ++ ) { ys [ i - 1 ] = i ; } for ( int i = X + 3 ; i <= 2 * N - 2 ; i ++ ) { ys [ i - X - 3 ] = i ; } int [ ] xs = new int [ 2 * N - 4 ] ; for ( int i = 0 ; i < 2 * N - 4 ; i ++ ) { xs [ i ] = ys [ ( i + X - 2 ) % ( 2 * N - 4 ) ] ; } for ( int x : xs ) { System.out.println ( x ) ; } } } } }
import java.util.Scanner ; import java.util.Arrays ; public class codeforces_632_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; char [ ] b = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.next ( ).charAt ( 0 ) ; } int pScore = 0 ; int sScore = 0 ; int pMaxScore = 0 ; int sMaxScore = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 'B' ) { pScore += a [ i ] ; if ( pScore > pMaxScore ) { pMaxScore = pScore ; } } else { pScore -= a [ i ] ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( b [ i ] == 'A' ) { sScore += a [ i ] ; if ( sScore > sMaxScore ) { sMaxScore = sScore ; } } else { sScore -= a [ i ] ; } } if ( pMaxScore > sMaxScore ) { System.out.println ( pMaxScore ) ; } else { System.out.println ( sMaxScore ) ; } } }
import java.util.Scanner ; public class codeforces_110_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += "abcd" [ i % 4 ] ; } System.out.println ( s ) ; } }
import java.util.Scanner ; public class codeforces_134_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int [ ] w = new int [ n ] ; int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = scan.nextInt ( ) ; x += w [ i ] ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( x - w [ i ] ) / ( n - 1 ) == w [ i ] ) { d [ i ] = i + 1 ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] != 0 ) { count ++ ; } } System.out.println ( count ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] != 0 ) { System.out.print ( d [ i ] + " " ) ; } } System.out.println ( ) ; } }
import java.util.Scanner ; public class atcoder_AGC034_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String str = sc.next ( ) ; int count = 0 ; int prev = 0 ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { if ( str.charAt ( i ) == 'A' ) { count ++ ; prev = 1 ; } else if ( str.charAt ( i ) == 'B' ) { if ( i < str.length ( ) - 1 && str.charAt ( i + 1 ) == 'C' ) { count ++ ; prev = 2 ; i ++ ; } else { count += prev ; prev = 0 ; } } else { count += prev ; prev = 0 ; } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class atcoder_ABC110_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; if ( s.length ( ) != t.length ( ) ) { System.out.println ( "No" ) ; } else { boolean flag = true ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) != t.charAt ( i ) ) { flag = false ; break ; } } if ( flag ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } } }
import java.util.Scanner ; public class atcoder_ABC123_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int a , b , c , d , e , f ; a = in.nextInt ( ) ; b = in.nextInt ( ) ; c = in.nextInt ( ) ; d = in.nextInt ( ) ; e = in.nextInt ( ) ; f = in.nextInt ( ) ; int [ ] arr = new int [ 6 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; arr [ 3 ] = d ; arr [ 4 ] = e ; arr [ 5 ] = f ; int sum = 0 ; for ( int i = 1 ; i < arr.length ; i ++ ) { int x = arr [ i ] ; if ( x % 10 == 0 ) { sum += x ; } else { sum += x + 10 - x % 10 ; } } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_AGC025_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = { 10 , 100 , 1000 , 10000 , 100000 } ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( n % 10 ) ; n = n / 10 ; } if ( sum == 10 || sum == 100 || sum == 1000 || sum == 10000 || sum == 100000 ) { System.out.println ( 10 ) ; } else { System.out.println ( sum ) ; } } }
import java.util.Scanner ; public class atcoder_ABC108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; int DIF1 = x2 - x1 ; int DIF2 = y2 - y1 ; int x3 = x2 - DIF2 ; int y3 = y2 + DIF1 ; int x4 = x1 - DIF2 ; int y4 = y1 + DIF1 ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.StringTokenizer ; public class atcoder_ABC171_E { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int N = Integer.parseInt ( st.nextToken ( ) ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer.parseInt ( st.nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { System.out.print ( arr [ i ] ^ ( Integer.parseInt ( br.readLine ( ) ) ) + " " ) ; } } }
import java.util.* ; public class codeforces_445_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; char [ ] [ ] a = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = s.charAt ( j ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] == '.' ) { if ( ( i + j ) % 2 == 1 ) { a [ i ] [ j ] = 'W' ; } else { a [ i ] [ j ] = 'B' ; } } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { System.out.print ( a [ i ] [ j ] ) ; } System.out.println ( ) ; } } } }
import java.util.Arrays ; import java.util.Scanner ; public class atcoder_ABC143_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc.nextInt ( ) ; } Arrays.sort ( l ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int a = l [ i ] ; int b = l [ j ] ; int right = Arrays.binarySearch ( l , a + b ) ; if ( right < 0 ) right = - right - 1 ; int left = Arrays.binarySearch ( l , Math.max ( a - b , b - a ) ) ; if ( left < 0 ) left = - left - 1 ; int tmp = Math.max ( 0 , right - left ) ; if ( left <= i && i < right ) tmp -- ; if ( left <= j && j < right ) tmp -- ; ans += tmp ; } } System.out.println ( ans / 3 ) ; } } }
[java]
import java.util.Scanner ; public class codeforces_30_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int x = 0 ; int pow = 1 ; int temp = B ; boolean flag = false ; while ( temp > 0 ) { x += temp % 10 * pow ; temp /= 10 ; pow *= A ; } if ( x == B ) { System.out.println ( x ) ; } else { System.out.println ( "No solution" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC142_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = stdIn.nextInt ( ) ; } Arrays.sort ( A ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { System.out.print ( A [ i ] + " " ) ; } System.out.println ( A [ N - 1 ] ) ; } }
import java.util.Scanner ; public class atcoder_ABC171_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += a [ i ] ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_ABC107_D { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int m = n * ( n + 1 ) / 4 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner.nextInt ( ) ; } int [ ] d = new int [ n + 1 ] ; int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ a [ i ] ] == 0 ) { d [ a [ i ] ] = ++ k ; } } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = d [ a [ i ] ] ; } int ans = 0 ; int [ ] c = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { c [ i ] = c [ i - 1 ] + ( a [ i - 1 ] >= i ? 2 : - 2 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { c [ i ] += c [ i - 1 ] ; } int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( c [ i ] > max ) { max = c [ i ] ; } } BIT bit = new BIT ( max + 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) { ans += bit.sum ( c [ i ] ) ; bit.add ( c [ i ] , 1 ) ; } System.out.println ( ans >= m ? "Yes" : "No" ) ; } static class BIT { int [ ] tree ; int size ; BIT ( int size ) { this.size = size ; tree = new int [ size + 1 ] ; } void add ( int pos , int val ) { pos += 1 ; while ( pos <= size ) { tree [ pos ] += val ; pos += pos & - pos ; } } int sum ( int pos ) { int ans = 0 ; while ( pos > 0 ) { ans += tree [ pos ] ; pos -= pos & - pos ; } return ans ; } } }
import java.util.* ; public class codeforces_106_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; arr [ i ] [ 2 ] = sc.nextInt ( ) ; arr [ i ] [ 3 ] = sc.nextInt ( ) ; } HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ 0 ] <= arr [ j ] [ 0 ] && arr [ i ] [ 1 ] <= arr [ j ] [ 1 ] && arr [ i ] [ 2 ] <= arr [ j ] [ 2 ] && i != j ) { set.add ( i ) ; break ; } } } int min = Integer.MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! set.contains ( i ) ) { if ( arr [ i ] [ 3 ] < min ) { min = arr [ i ] [ 3 ] ; ans = i + 1 ; } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC002_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a > 0 ) { System.out.println ( "Positive" ) ; } else if ( a <= 0 && b >= 0 ) { System.out.println ( "Zero" ) ; } else if ( ( a + b ) % 2 == 0 ) { System.out.println ( "Negative" ) ; } else { System.out.println ( "Positive" ) ; } } }
import java.util.Scanner ; public class atcoder_ABC140_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s.charAt ( i ) != s.charAt ( i + 1 ) ) cnt ++ ; } int ans ; if ( 2 * k >= cnt ) { ans = n - 1 ; } else { ans = n - 1 - cnt + 2 * k ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC167_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ m + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m + 1 ; j ++ ) { arr [ i ] [ j ] = sc.nextInt ( ) ; } } int [ ] dp = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = 1 ; for ( int j = 1 ; j < m + 1 ; j ++ ) { dp [ i ] += dp [ i - 1 ] * arr [ i - 1 ] [ j ] ; dp [ i ] %= 1000000 ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m + 1 ; j ++ ) { if ( dp [ i ] < x ) { ans = Math.max ( ans , dp [ i ] * arr [ i ] [ 0 ] ) ; } else { break ; } } } if ( ans == 0 ) System.out.println ( - 1 ) ; else System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC143_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = a - 2 * b ; if ( ans < 0 ) { ans = 0 ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC139_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int hole = 1 ; int i = 0 ; boolean check = true ; while ( check ) { if ( hole >= b ) { check = false ; } else { hole = a * ( i + 1 ) - i ; i ++ ; } } System.out.println ( i ) ; sc.close ( ) ; } }
import java.util.Scanner ; public class atcoder_ABC124_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = 0 ; while ( a > 0 && b > 0 ) { c += Math.max ( a , b ) ; if ( a > b ) { a -- ; } else { b -- ; } } System.out.println ( c ) ; } }
import java.util.Scanner ; public class codeforces_25_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { count ++ ; } } if ( count == 1 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { System.out.println ( i + 1 ) ; return ; } } } else { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System.out.println ( i + 1 ) ; return ; } } } } } }
import java.util.Scanner ; public class codeforces_282_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int total = 0 ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int g = sc.nextInt ( ) ; if ( total + a <= 500 ) { total += a ; sb.append ( "A" ) ; } else { total -= g ; sb.append ( "G" ) ; } } System.out.println ( sb.toString ( ) ) ; } }
import java.util.Scanner ; public class atcoder_ABC169_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = a * b / 100 ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_350_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t [ ] = new int [ n + 1 ] ; t [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { t [ i ] = sc.nextInt ( ) ; } int a [ ] = new int [ n + 1 ] ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] ans = new int [ n + 1 ] ; int cnt [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { cnt [ a [ i ] ] ++ ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( t [ i ] == 1 ) { int crt = i ; int x = a [ i ] ; while ( cnt [ x ] == 1 ) { crt = crt + x ; x = a [ x ] ; } if ( crt.length ( ) > ans.length ) { ans = crt ; } } } ans = ans.reverse ( ) ; System.out.println ( ans.length ) ; for ( int i = 0 ; i < ans.length ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
import java.util.Scanner ; public class atcoder_ABC142_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i % 2 == 1 ) { count ++ ; } } double answer = count / ( double ) N ; System.out.println ( answer ) ; } }
import java.util.Scanner ; public class codeforces_333_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n * 2 ] ; for ( int i = 0 ; i < n * 2 ; i ++ ) { arr [ i ] = 1 ; } arr [ 0 ] = arr [ n - 1 ] = arr [ n ] = arr [ 2 * n - 1 ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int r = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; arr [ r - 1 ] = arr [ n + c - 1 ] = 0 ; } if ( n % 2 == 1 && arr [ n / 2 ] == 1 && arr [ n + n / 2 ] == 1 ) { arr [ n / 2 ] = 0 ; } int sum = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { sum += arr [ i ] ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_ABC166_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] h = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { h [ i ] = sc.nextInt ( ) ; } int [ ] [ ] path = new int [ n + 1 ] [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; path [ a ] [ i ] = b ; path [ b ] [ i ] = a ; } int c = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int f = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( h [ i ] <= h [ path [ i ] [ j ] ] ) { f = 1 ; break ; } } if ( f == 0 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.Scanner ; public class codeforces_79_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int x = scanner.nextInt ( ) ; int y = scanner.nextInt ( ) ; int a = 0 ; while ( x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2 ) { if ( a == 1 ) { if ( y >= 22 ) { y -= 22 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { x -= 2 ; y -= 2 ; } } else if ( x >= 2 && y >= 2 ) { x -= 2 ; y -= 2 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { y -= 22 ; } a = 1 - a ; } String name = ( a == 1 ) ? "Ciel" : "Hanako" ; System.out.println ( name ) ; } }
[INST:java]
import java.util.Scanner ; public class atcoder_AGC004_D { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int k = scanner.nextInt ( ) ; int [ ] parent = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = scanner.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( parent [ i ] == 0 ) { continue ; } int depth = 1 ; int j = parent [ i ] ; while ( parent [ j ] != 0 ) { depth ++ ; j = parent [ j ] ; } if ( depth == k ) { ans ++ ; } } if ( parent [ 0 ] != 1 ) { ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC174_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; int T = 0 ; for ( int i = 1 ; i <= K ; i ++ ) { T = ( T % K ) * 10 + 7 ; if ( T % K == 0 ) { System.out.println ( i ) ; break ; } } if ( T % K != 0 ) { System.out.println ( - 1 ) ; } sc.close ( ) ; } }
import java.util.Scanner ; public class codeforces_67_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int m = 0 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int p = 0 ; p < n ; p ++ ) { if ( a [ p ] == 0 ) { System.out.print ( p + 1 + " " ) ; break ; } } for ( int l = p + 1 - k ; l >= 0 ; l -- ) { a [ l ] -- ; } a [ p ] -- ; } } } }
import java.util.Scanner ; public class atcoder_ABC168_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int h = stdIn.nextInt ( ) ; int m = stdIn.nextInt ( ) ; double C = Math.abs ( 360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m ) ; if ( C > 180 ) { C = 360 - C ; } double cosC = Math.cos ( Math.toRadians ( C ) ) ; double distance = Math.sqrt ( a * a + b * b - 2 * a * b * cosC ) ; System.out.println ( distance ) ; } }
import java.util.Scanner ; public class codeforces_354_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int n = stdIn.nextInt ( ) ; int L = stdIn.nextInt ( ) ; int R = stdIn.nextInt ( ) ; int QL = stdIn.nextInt ( ) ; int QR = stdIn.nextInt ( ) ; int [ ] W = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { W [ i ] = stdIn.nextInt ( ) ; } int [ ] sum_el = new int [ n + 1 ] ; sum_el [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum_el [ i ] = sum_el [ i - 1 ] + W [ i - 1 ] ; } int answer = QR * ( n - 1 ) + sum_el [ n ] * R ; for ( int i = 1 ; i <= n ; i ++ ) { int energy = L * sum_el [ i ] + R * ( sum_el [ n ] - sum_el [ i ] ) ; if ( i > n - i ) { energy += ( i - ( n - i ) - 1 ) * QL ; } else if ( n - i > i ) { energy += ( n - i - i - 1 ) * QR ; } if ( energy < answer ) { answer = energy ; } } System.out.println ( answer ) ; } }
import java.util.Scanner ; public class codeforces_49_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.nextLine ( ) ; boolean flag = false ; for ( int i = S.length ( ) - 1 ; i >= 0 ; i -- ) { if ( S.charAt ( i ) == ' ' || S.charAt ( i ) == '?' ) continue ; if ( S.charAt ( i ) == 'a' || S.charAt ( i ) == 'e' || S.charAt ( i ) == 'i' || S.charAt ( i ) == 'o' || S.charAt ( i ) == 'u' || S.charAt ( i ) == 'y' || S.charAt ( i ) == 'A' || S.charAt ( i ) == 'E' || S.charAt ( i ) == 'I' || S.charAt ( i ) == 'O' || S.charAt ( i ) == 'U' || S.charAt ( i ) == 'Y' ) { flag = true ; break ; } } if ( flag ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } }
import java.util.Scanner ; public class atcoder_ABC168_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; String S = sc.next ( ) ; if ( S.length ( ) <= K ) { System.out.println ( S ) ; } else { System.out.println ( S.substring ( 0 , K ) + "..." ) ; } } }
import java.util.Scanner ; public class atcoder_ABC149_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; boolean [ ] prime = new boolean [ 100010 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int i = 4 ; i < 100010 ; i += 2 ) { prime [ i ] = false ; } int i = 3 ; while ( i * i <= 100008 ) { if ( prime [ i ] ) { for ( int j = i + i ; j <= 100008 ; j += i ) { prime [ j ] = false ; } } i += 2 ; } for ( int i = x ; i <= 100008 ; i ++ ) { if ( prime [ i ] ) { System.out.println ( i ) ; break ; } } } }
import java.util.Scanner ; public class codeforces_302_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; String s = sc.next ( ) ; int sa = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '-' ) sa ++ ; } sa = Math.min ( sa , n - sa ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int x = b - a ; if ( x % 2 == 0 && x <= sa * 2 ) sb.append ( "1\n" ) ; else sb.append ( "0\n" ) ; } System.out.println ( sb ) ; } }
import java.util.Scanner ; public class codeforces_58_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; for ( int i = n ; i > 0 ; i -- ) { if ( n % i == 0 ) { n = i ; System.out.print ( i + " " ) ; } } } }
import java.util.Scanner ; public class atcoder_AGC028_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; int [ ] S_array = new int [ N ] ; int [ ] T_array = new int [ M ] ; for ( int i = 0 ; i < N ; i ++ ) { S_array [ i ] = S.charAt ( i ) - '0' ; } for ( int i = 0 ; i < M ; i ++ ) { T_array [ i ] = T.charAt ( i ) - '0' ; } int [ ] S_array_new = new int [ N ] ; int [ ] T_array_new = new int [ M ] ; for ( int i = 0 ; i < N ; i ++ ) { S_array_new [ i ] = S_array [ i ] ; } for ( int i = 0 ; i < M ; i ++ ) { T_array_new [ i ] = T_array [ i ] ; } int answer = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( S_array_new [ i ] == T_array_new [ j ] ) { answer ++ ; S_array_new [ i ] = 0 ; T_array_new [ j ] = 0 ; break ; } } } if ( answer == 0 ) { System.out.println ( - 1 ) ; } else { System.out.println ( answer ) ; } } }
import java.util.Scanner ; import java.util.Arrays ; public class codeforces_56_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int mn = n + 1 , mx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; if ( a [ i ] != i + 1 ) { mn = Math.min ( mn , i ) ; mx = Math.max ( mx , i ) ; } } if ( mx == - 1 ) System.out.println ( "0 0" ) ; else { int [ ] b = new int [ n ] ; for ( int i = 0 ; i < mn ; i ++ ) b [ i ] = a [ i ] ; for ( int i = mn ; i <= mx ; i ++ ) b [ i ] = a [ mx - i ] ; for ( int i = mx + 1 ; i < n ; i ++ ) b [ i ] = a [ i ] ; if ( Arrays.equals ( a , b ) ) System.out.println ( ( mn + 1 ) + " " + ( mx + 1 ) ) ; else System.out.println ( "0 0" ) ; } } }
import java.util.Scanner ; public class codeforces_99_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; double x = Double.parseDouble ( scanner.nextLine ( ) ) ; int a = ( int ) x ; int b = ( int ) ( x * 10 ) ; if ( a == 9 ) { System.out.println ( "GOTO Vasilisa." ) ; } else if ( a != 9 && b < 5 ) { System.out.println ( a ) ; } else { System.out.println ( a + 1 ) ; } } }
import java.util.Scanner ; public class codeforces_412_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String v = sc.next ( ) ; String [ ] d = { "LEFT" , "RIGHT" } ; boolean f = k - 1 < n - k ; int m = Math.min ( k - 1 , n - k ) ; String [ ] a = new String [ m + v.length ( ) ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = d [ f ? 1 : 0 ] ; } for ( int i = 0 ; i < v.length ( ) ; i ++ ) { a [ m + i ] = "PRINT " + v.charAt ( v.length ( ) - i - 1 ) ; a [ m + i + 1 ] = d [ f ? 0 : 1 ] ; } for ( int i = 0 ; i < a.length - 1 ; i ++ ) { System.out.println ( a [ i ] ) ; } } }
import java.util.Scanner ; public class codeforces_86_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = - 1 ; for ( int i = a ; i <= b ; i ++ ) { String s = String.valueOf ( i ) ; int rev = 0 ; for ( int j = s.length ( ) - 1 ; j >= 0 ; j -- ) { rev = rev * 10 + ( 9 - ( s.charAt ( j ) - '0' ) ) ; } ans = Math.max ( ans , rev * i ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC128_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int a [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int p [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { p [ i ] = sc.nextInt ( ) ; } int q [ ] = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < a [ i ] ; j ++ ) { q [ sc.nextInt ( ) - 1 ] ++ ; } } int v [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = 1 ; } for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < a [ i ] ; j ++ ) { if ( q [ sc.nextInt ( ) - 1 ] == 0 ) { v [ sc.nextInt ( ) - 1 ] = 0 ; } } } int ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( q [ sc.nextInt ( ) - 1 ] == 0 ) { ans += ( int ) Math.pow ( 2 , v [ sc.nextInt ( ) - 1 ] ) ; } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC004_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long x = sc.nextLong ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextLong ( ) ; } long [ ] [ ] b = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int k = i - j ; if ( k < 0 ) { k += n ; } b [ j ] [ i ] = Math.min ( a [ i ] , a [ k ] ) ; } } long m = 100000000000000L ; for ( int i = 0 ; i < n ; i ++ ) { m = Math.min ( m , sum ( b [ i ] ) + x * i ) ; } System.out.println ( m ) ; } static long sum ( long [ ] a ) { long s = 0 ; for ( int i = 0 ; i < a.length ; i ++ ) { s += a [ i ] ; } return s ; } }
import java.util.Scanner ; public class atcoder_ABC150_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextLong ( ) ; } long mod = 1000000007 ; long ans = 0 ; long b = ( long ) Math.pow ( 2 , 2 * n - 2 ) ; b = b % mod ; long a = 2 * b % mod ; for ( int i = 0 ; i < n ; i ++ ) { ans = ( ans + arr [ i ] * ( a + i * b ) ) % mod ; } System.out.println ( ans ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; public class codeforces_456_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int N = Integer.parseInt ( br.readLine ( ) ) ; int [ ] [ ] A = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] str = br.readLine ( ).split ( " " ) ; A [ i ] [ 0 ] = Integer.parseInt ( str [ 0 ] ) ; A [ i ] [ 1 ] = Integer.parseInt ( str [ 1 ] ) ; } int [ ] B = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { B [ i ] = A [ i ] [ 1 ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( B [ i ] > B [ i + 1 ] ) { System.out.println ( "Happy Alex" ) ; return ; } } System.out.println ( "Poor Alex" ) ; } }
import java.util.Scanner ; public class codeforces_598_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int n = sc.nextInt ( ) ; int s = ( 1 + n ) * n / 2 ; int t = 1 ; while ( t <= n ) { s -= 2 * t ; t *= 2 ; } System.out.println ( s ) ; } } }
import java.util.Scanner ; public class atcoder_AGC027_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] s = new int [ n + 1 ] ; s [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s [ i + 1 ] = s [ i ] + a [ i ] ; } long ans = ( long ) ( 1e18 ) ; for ( int k = 1 ; k <= n ; k ++ ) { long e = k * ( long ) x + 2 * ( s [ n - k ] - s [ n - 2 * k ] ) ; ans = Math.min ( ans , e ) ; } System.out.println ( ans + n * ( long ) x + 5 * s [ n - 1 ] ) ; } }
import java.util.* ; public class codeforces_408_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s1 = sc.next ( ) ; String s2 = sc.next ( ) ; int res = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s1.length ( ) ; i ++ ) { if ( map.containsKey ( s1.charAt ( i ) ) ) { map.put ( s1.charAt ( i ) , map.get ( s1.charAt ( i ) ) + 1 ) ; } else { map.put ( s1.charAt ( i ) , 1 ) ; } } HashMap < Character , Integer > map2 = new HashMap < > ( ) ; for ( int i = 0 ; i < s2.length ( ) ; i ++ ) { if ( map2.containsKey ( s2.charAt ( i ) ) ) { map2.put ( s2.charAt ( i ) , map2.get ( s2.charAt ( i ) ) + 1 ) ; } else { map2.put ( s2.charAt ( i ) , 1 ) ; } } for ( char c : map2.keySet ( ) ) { if ( map.containsKey ( c ) ) { res += Math.min ( map.get ( c ) , map2.get ( c ) ) ; } else { System.out.println ( - 1 ) ; return ; } } System.out.println ( res ) ; } }
import java.util.Scanner ; public class atcoder_AGC006_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; String s = in.next ( ) ; String t = in.next ( ) ; if ( s.equals ( t ) ) { System.out.println ( n ) ; } else { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - i ; j ++ ) { if ( s.charAt ( i + j ) != t.charAt ( j ) ) { break ; } if ( j == n - i - 1 ) { cnt = n - i ; } } } System.out.println ( 2 * n - cnt ) ; } } }
import java.util.Scanner ; public class atcoder_AGC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { res ++ ; } } if ( res % 2 == 1 ) { System.out.println ( 1 ) ; } else { System.out.println ( 0 ) ; } } }
[java]
import java.util.Scanner ; public class codeforces_31_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { continue ; } for ( int k = 0 ; k < n ; k ++ ) { if ( arr [ k ] != arr [ j ] && arr [ k ] != arr [ i ] && arr [ k ] == arr [ i ] + arr [ j ] ) { System.out.println ( k + 1 + " " + j + 1 + " " + i + 1 ) ; return ; } } } } System.out.println ( - 1 ) ; } } }
import java.util.Scanner ; public class atcoder_AGC011_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] vis = new int [ n + 1 ] ; int ci = 0 ; int cb = 0 ; int cc = 0 ; int [ ] [ ] g = new int [ n + 1 ] [ ] ; for ( int i = 0 ; i < m ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; g [ u ] [ 0 ] ++ ; g [ v ] [ 0 ] ++ ; g [ u ] [ g [ u ] [ 0 ] ] = v ; g [ v ] [ g [ v ] [ 0 ] ] = u ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ] == 0 ) { if ( g [ i ] [ 0 ] == 0 ) ci ++ ; else if ( dfs ( i ) ) cb ++ ; else cc ++ ; } } long ans = ci * ci + 2 * ci * ( n - ci ) + cc * cc + 2 * cb * cc + 2 * cb * cb ; System.out.println ( ans ) ; } static boolean dfs ( int x ) { Queue < Integer > q = new LinkedList < > ( ) ; q.add ( x ) ; boolean flag = true ; while ( ! q.isEmpty ( ) ) { int u = q.poll ( ) ; if ( vis [ u ] != 0 ) { flag &= vis [ u ] == 1 ; continue ; } vis [ u ] = 1 ; for ( int i = 1 ; i <= g [ u ] [ 0 ] ; i ++ ) { q.add ( g [ u ] [ i ] ) ; } } return flag ; } }
import java.util.Scanner ; public class atcoder_ABC125_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] left = new int [ n + 1 ] ; int [ ] right = new int [ n + 1 ] ; left [ 0 ] = 0 ; right [ n ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { left [ i + 1 ] = Math.max ( left [ i ] , arr [ i ] ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { right [ i ] = Math.max ( right [ i + 1 ] , arr [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math.max ( ans , Math.max ( left [ i ] , right [ i + 1 ] ) ) ; } System.out.println ( ans ) ; } }
[INST:java]
import java.util.Scanner ; public class atcoder_AGC007_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int D = stdIn.nextInt ( ) ; int X = stdIn.nextInt ( ) ; double ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += D + ( N - 0.5 ) * X ; D += D / N + 5 * X / ( 2 * N ) ; X += 2 * X / N ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_459_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int min = arr [ 0 ] ; int max = arr [ arr.length - 1 ] ; int minCount = 0 ; int maxCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min ) { minCount ++ ; } else if ( arr [ i ] == max ) { maxCount ++ ; } } if ( min == max ) { System.out.println ( min - max + " " + n * ( n - 1 ) / 2 ) ; } else { System.out.println ( min - max + " " + minCount * maxCount ) ; } } }
import java.util.Scanner ; public class atcoder_ABC125_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] v = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] - c [ i ] > 0 ) { ans += v [ i ] - c [ i ] ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; String ans = "" ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { char c = S.charAt ( i ) ; if ( c == '0' || c == '1' ) { ans += c ; } else if ( c == 'B' && ans.length ( ) != 0 ) { ans = ans.substring ( 0 , ans.length ( ) - 1 ) ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_546_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int total = 0 ; if ( 1 <= k && k <= 1000 && 1 <= w && w <= 1000 ) { for ( int i = 1 ; i <= w ; i ++ ) { total += i * k ; } if ( total > n ) { System.out.println ( total - n ) ; } else { System.out.println ( 0 ) ; } } } }
import java.util.Scanner ; public class codeforces_231_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int cnt = a + b ; if ( cnt > 1 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.Scanner ; public class atcoder_AGC033_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int [ ] [ ] graph = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { char c = sc.next ( ).charAt ( 0 ) ; if ( c == '#' ) { graph [ i ] [ j ] = 0 ; } else { graph [ i ] [ j ] = Integer.MAX_VALUE ; } } } for ( int i = 0 ; i < w - 1 ; i ++ ) { for ( int j = 0 ; j < h ; j ++ ) { graph [ j ] [ i + 1 ] = Math.min ( graph [ j ] [ i ] + 1 , graph [ j ] [ i + 1 ] ) ; } } for ( int i = w - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < h ; j ++ ) { graph [ j ] [ i ] = Math.min ( graph [ j ] [ i + 1 ] + 1 , graph [ j ] [ i ] ) ; } } for ( int i = 0 ; i < h - 1 ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { graph [ i + 1 ] [ j ] = Math.min ( graph [ i ] [ j ] + 1 , graph [ i + 1 ] [ j ] ) ; } } for ( int i = h - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < w ; j ++ ) { graph [ i ] [ j ] = Math.min ( graph [ i + 1 ] [ j ] + 1 , graph [ i ] [ j ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { ans = Math.max ( ans , graph [ i ] [ j ] ) ; } } System.out.println ( ans ) ; } }
import java.io.* ; import java.util.* ; public class atcoder_ABC127_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int r = sc.nextInt ( ) ; int D = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; for ( int i = 2 ; i <= 12 ; i ++ ) { int ans = ( int ) Math.pow ( r , i - 1 ) * ( x + D / ( 1 - r ) ) - D / ( 1 - r ) ; System.out.println ( ans ) ; } } }
[SYS]
import java.util.Scanner ; public class atcoder_AGC038_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( i < B ) { if ( j < A ) { System.out.print ( 0 ) ; } else { System.out.print ( 1 ) ; } } else { if ( j < A ) { System.out.print ( 1 ) ; } else { System.out.print ( 0 ) ; } } } System.out.println ( ) ; } } }
[java]
import java.util.Scanner ; public class codeforces_500_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc.nextInt ( ) ; } int currentCell = 0 ; while ( currentCell <= t ) { currentCell += s [ currentCell - 1 ] ; if ( currentCell == t ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ABC155_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int left = - 1000000000 ; int right = 1000000000 ; while ( left + 1 < right ) { int mid = ( left + right ) / 2 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int index = 0 ; if ( a [ i ] < 0 ) { while ( index + 1 < n && a [ i ] * a [ index ] >= mid ) { index ++ ; } count += n - index ; } else { while ( index + 1 < n && a [ i ] * a [ index ] <= mid ) { index ++ ; } count += index ; } if ( a [ i ] * a [ i ] < mid ) { count -- ; } count /= 2 ; if ( count < k ) { left = mid ; } else { right = mid ; } } } System.out.println ( left ) ; } }
import java.util.Scanner ; public class atcoder_ABC147_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long ans = 0 ; for ( int b = 0 ; b <= 60 ; b ++ ) { int bs = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ( A [ i ] & ( 1L << b ) ) != 0 ) { bs ++ ; } } ans = ( ans + bs * ( N - bs ) * ( 1L << b ) ) % 1000000007 ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC046_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( N % i == 0 ) { ans += i ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_596_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] r = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = sc.nextInt ( ) ; } int ans = Math.abs ( r [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { ans += Math.abs ( r [ i ] - r [ i - 1 ] ) ; } System.out.println ( ans ) ; } }
[INST:py]  
import sys
input = sys.stdin.readline
a , b = input ( ) [ : - 1 ].split ( )
x = max ( len ( a ) , len ( b ) )
a = a.rjust ( x , '0' )
b = b.ljust ( x , '0' )
s = ''
c = 0
for i in range ( x ) :
    d = int ( b [ i ] ) + int ( a [ x - i - 1 ] ) + c
    if d > 9 :
        s += str ( d ) [ 1 ]
        c = 1
    else :
        s += str ( d )
        c = 0
if c == 1 :
    s += '1'
print ( int ( s [ : : - 1 ] ) )
import java.util.Scanner ; public class codeforces_276_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int cnt = 0 ; boolean x = true ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'a' ) { cnt ++ ; } else if ( s.charAt ( i ) == 'b' ) { cnt -- ; } } if ( cnt > 0 ) { System.out.println ( "Second" ) ; } else if ( cnt < 0 ) { System.out.println ( "First" ) ; } else { if ( s.length ( ) % 2 == 0 ) { System.out.println ( "Second" ) ; } else { System.out.println ( "First" ) ; } } } }
import java.util.Scanner ; public class codeforces_617_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; } if ( cnt == 0 ) { System.out.println ( 0 ) ; } else { int ans = 1 ; for ( int i = 0 ; i < n - cnt ; i ++ ) { if ( s.charAt ( i ) == '0' ) ans *= 2 ; } System.out.println ( ans ) ; } } }
import java.util.Scanner ; public class codeforces_55_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; String o = sc.next ( ) ; int ans = Math.min ( Math.min ( a + b , a * b ) , Math.min ( b + c , b * c ) ) ; if ( o.equals ( "+" ) ) { ans = Math.min ( ans , a + c ) ; } else { ans = Math.min ( ans , a * c ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC178_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int a = stdIn.nextInt ( ) ; int b = stdIn.nextInt ( ) ; int c = stdIn.nextInt ( ) ; int d = stdIn.nextInt ( ) ; long ans = 0 ; ans = Math.max ( ans , a * c ) ; ans = Math.max ( ans , b * d ) ; ans = Math.max ( ans , a * d ) ; ans = Math.max ( ans , b * c ) ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC164_D { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int K = stdIn.nextInt ( ) ; int [ ] A = new int [ K ] ; for ( int i = 0 ; i < K ; i ++ ) { A [ i ] = stdIn.nextInt ( ) ; } int [ ] B = new int [ K ] ; B [ 0 ] = 1 ; for ( int i = 1 ; i < K ; i ++ ) { B [ i ] = B [ i - 1 ] * 10 ; } int result = 0 ; for ( int i = 0 ; i < K ; i ++ ) { result += A [ i ] * B [ K - i - 1 ] ; } result %= N ; int [ ] C = new int [ N ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { C [ i ] = C [ i - 1 ] + C [ i - 1 ] ; } int ans = 0 ; for ( int i = 0 ; i < K ; i ++ ) { ans += C [ ( result + A [ i ] ) % N ] ; } System.out.println ( ans ) ; } }
import java.io.* ; import java.util.* ; public class codeforces_242_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int id = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int li = sc.nextInt ( ) ; int ri = sc.nextInt ( ) ; if ( li <= l && r <= ri ) { id = i ; } else if ( li < l || r < ri ) { id = n ; } l = Math.min ( l , li ) ; r = Math.max ( r , ri ) ; } System.out.println ( - 1 == id ? n : id + 1 ) ; } }
import java.util.Scanner ; public class atcoder_ABC132_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { arr [ s.charAt ( i ) - 'a' ] ++ ; } boolean flag = true ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] != 2 ) { flag = false ; break ; } } if ( ! flag ) System.out.println ( "No" ) ; else System.out.println ( "Yes" ) ; } }
import java.util.Scanner ; public class atcoder_ABC169_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; if ( n == 1 ) { System.out.println ( 0 ) ; return ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; while ( x > 0 ) { if ( x >= i + 1 ) { x -= i + 1 ; count ++ ; } else { break ; } } } System.out.println ( count ) ; } }
import java.util.* ; public class atcoder_ABC126_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] edges = new int [ n - 1 ] [ 3 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; edges [ i ] [ 0 ] = u ; edges [ i ] [ 1 ] = v ; edges [ i ] [ 2 ] = w ; } int [ ] color = new int [ n ] ; Arrays.fill ( color , - 1 ) ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 0 ) ; while ( ! q.isEmpty ( ) ) { int node = q.remove ( ) ; if ( color [ node ] != - 1 ) continue ; color [ node ] = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( edges [ i ] [ 0 ] == node ) { q.add ( edges [ i ] [ 1 ] ) ; } else if ( edges [ i ] [ 1 ] == node ) { q.add ( edges [ i ] [ 0 ] ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { if ( color [ i ] == 1 ) System.out.println ( 1 ) ; else System.out.println ( 0 ) ; } } }
import java.util.Scanner ; public class atcoder_ABC129_E { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int mod = 1000000007 ; int n = stdIn.nextInt ( ) ; int [ ] dp = new int [ n + 2 ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int c = stdIn.nextInt ( ) ; if ( c == 0 ) { dp [ i + 1 ] [ 0 ] += dp [ i ] [ 0 ] ; dp [ i + 1 ] [ 1 ] += dp [ i ] [ 1 ] * 3 ; } else { dp [ i + 1 ] [ 0 ] += dp [ i ] [ 0 ] * 2 ; dp [ i + 1 ] [ 1 ] += dp [ i ] [ 0 ] ; dp [ i + 1 ] [ 1 ] += dp [ i ] [ 1 ] * 3 ; } dp [ i + 1 ] [ 0 ] %= mod ; dp [ i + 1 ] [ 1 ] %= mod ; } System.out.println ( ( dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ) % mod ) ; } }
import java.util.Scanner ; public class codeforces_678_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; if ( N % 400 == 0 || ( N % 4 == 0 && N % 100 != 0 ) ) { ans = 1 ; } else { ans = 0 ; } int d = 0 ; while ( true ) { if ( N % 400 == 0 || ( N % 4 == 0 && N % 100 != 0 ) ) { if ( d == 0 ) { d = 1 ; N = N + 1 ; } else if ( d == 1 ) { d = 2 ; N = N + 1 ; } else if ( d == 2 ) { d = 3 ; N = N + 1 ; } else if ( d == 3 ) { d = 4 ; N = N + 1 ; } else if ( d == 4 ) { d = 5 ; N = N + 1 ; } else if ( d == 5 ) { d = 6 ; N = N + 1 ; } else if ( d == 6 ) { d = 0 ; N = N + 1 ; } } else { if ( d == 0 ) { d = 2 ; N = N + 1 ; } else if ( d == 1 ) { d = 3 ; N = N + 1 ; } else if ( d == 2 ) { d = 4 ; N = N + 1 ; } else if ( d == 3 ) { d = 5 ; N = N + 1 ; } else if ( d == 4 ) { d = 6 ; N = N + 1 ; } else if ( d == 5 ) { d = 0 ; N = N + 1 ; } else if ( d == 6 ) { d = 1 ; N = N + 1 ; } } if ( d == 1 && ans == 1 && ( N % 400 == 0 || ( N % 4 == 0 && N % 100 != 0 ) ) ) { break ; } else if ( d == 1 && ans == 0 && ( N % 400 != 0 && ( N % 4 != 0 || N % 100 == 0 ) ) ) { break ; } } System.out.println ( N ) ; } }
import java.util.Scanner ; public class codeforces_462_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { cnt [ s.charAt ( i ) - 'A' ] ++ ; } for ( int i = 25 ; i >= 0 ; i -- ) { if ( cnt [ i ] >= k ) { System.out.println ( k * k ) ; return ; } k -= cnt [ i ] ; } int res = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { res += cnt [ i ] * cnt [ i ] ; } System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_334_A { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int i = 1 ; int j = N * N ; while ( i < j ) { System.out.println ( i + " " + j ) ; i ++ ; j -- ; } } }
import java.io.* ; import java.util.* ; public class atcoder_AGC029_C { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner.nextInt ( ) ; } int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ k ] ) { k = i ; } } System.out.println ( k + 1 ) ; } }
import java.io.* ; import java.util.* ; public class codeforces_313_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = s.length ( ) + 1 ; int a [ ] = new int [ n ] ; a [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] ; if ( s.charAt ( i - 1 ) == s.charAt ( i ) ) a [ i ] ++ ; } int q = sc.nextInt ( ) ; int arr [ ] = new int [ q ] ; for ( int i = 0 ; i < q ; i ++ ) { String str = sc.next ( ) ; int m = Integer.parseInt ( str.substring ( 0 , str.indexOf ( " " ) ) ) ; int l = Integer.parseInt ( str.substring ( str.indexOf ( " " ) + 1 ) ) ; arr [ i ] = a [ l - 1 ] - a [ m - 1 ] ; } for ( int i : arr ) System.out.println ( i ) ; } }
import java.util.Scanner ; public class codeforces_108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } Arrays.sort ( b ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( b [ i ] != b [ i - 1 ] && b [ i ] < b [ i - 1 ] * 2 ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.Scanner ; public class codeforces_705_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = sc.nextInt ( ) ; } int c = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( w [ i ] == 1 ) { System.out.println ( c ) ; } else if ( w [ i ] % 2 == 0 ) { c = 3 - c ; System.out.println ( c ) ; } else { System.out.println ( c ) ; } } } }
import java.util.Scanner ; public class atcoder_ABC127_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; long [ ] ans = new long [ 2 ] ; while ( q -- > 0 ) { int a = sc.nextInt ( ) ; long b = sc.nextLong ( ) ; long x = sc.nextLong ( ) ; if ( a == 2 ) { long sum1 = 0 ; long sum2 = 0 ; for ( int i = 0 ; i < ans.length ; i ++ ) { sum1 += ans [ i ] ; } sum1 -= ans [ 0 ] ; sum2 = sum1 - ans [ 0 ] + ans [ 1 ] ; System.out.println ( sum2 + " " + sum1 ) ; } else { ans [ a - 1 ] += x ; } } } }
import java.util.Scanner ; public class atcoder_ABC153_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int sho = h / a ; int am = h % a ; if ( am != 0 ) { sho ++ ; } System.out.println ( sho ) ; } }
import java.util.Scanner ; public class atcoder_ABC158_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; String S = scan.next ( ) ; String result = "Yes" ; if ( ! S.contains ( "A" ) || ! S.contains ( "B" ) ) { result = "No" ; } System.out.println ( result ) ; } }
import java.util.Scanner ; public class atcoder_AGC005_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] rank = new int [ n ] ; int [ ] size = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ a [ i ] - 1 ] = i ; } long result = 0 ; for ( int k = n - 1 ; k >= 0 ; k -- ) { int l = 1 , r = 1 ; if ( k > 0 && a [ k - 1 ] > a [ k ] ) { l += size [ k - 1 ] ; union ( k - 1 , k ) ; } if ( k + 1 < n && a [ k + 1 ] > a [ k ] ) { r += size [ k + 1 ] ; union ( k + 1 , k ) ; } result += l * r * a [ k ] ; } System.out.println ( result ) ; } public static void union ( int x , int y ) { if ( rank [ x ] > rank [ y ] ) { rank [ y ] += rank [ x ] ; size [ x ] += size [ y ] ; } else { rank [ x ] += rank [ y ] ; size [ y ] += size [ x ] ; } } }
import java.util.Scanner ; import java.util.regex.Pattern ; public class codeforces_70_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; int count = 0 ; int len = 0 ; for ( String s : S.split ( "\\.|\\?|!" ) ) { s = s + "." ; len = s.length ( ) ; if ( len > N ) { System.out.println ( "Impossible" ) ; return ; } if ( len + len > N ) { count ++ ; len = len ; } else { len += len ; } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class atcoder_ABC125_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int cookie = 0 ; double time = a ; while ( time <= t + 0.5 ) { cookie += b ; time += a ; } System.out.println ( cookie ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc.nextInt ( ) ; y [ i ] = sc.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { sum += distance ( x [ i ] , y [ i ] , x [ j ] , y [ j ] ) ; } } } System.out.println ( sum / ( n * ( n - 1 ) ) ) ; } static int distance ( int x1 , int y1 , int x2 , int y2 ) { return ( int ) Math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ; } }
import java.util.Scanner ; public class atcoder_ABC164_A { static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int S = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; if ( S <= W ) { System.out.println ( "unsafe" ) ; } else { System.out.println ( "safe" ) ; } sc.close ( ) ; } }
import java.util.Scanner ; public class codeforces_514_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int ans = 0 ; String str = "" ; while ( n > 0 ) { int rem = n % 10 ; if ( rem > 4 ) { rem = 9 - rem ; } str = rem + str ; n = n / 10 ; } ans = Integer.parseInt ( str ) ; System.out.println ( ans ) ; } }
import java.io.* ; import java.util.* ; public class codeforces_272_B { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; HashMap < Integer , ArrayList < Integer > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int y = 0 ; while ( x > 1 ) { if ( x % 2 == 1 ) { y ++ ; } x = x / 2 ; } if ( map.containsKey ( y ) ) { ArrayList < Integer > list = map.get ( y ) ; list.add ( arr [ i ] ) ; map.put ( y , list ) ; } else { ArrayList < Integer > list = new ArrayList < > ( ) ; list.add ( arr [ i ] ) ; map.put ( y , list ) ; } } for ( Integer key : map.keySet ( ) ) { ArrayList < Integer > list = map.get ( key ) ; int count = list.size ( ) ; ans += count * ( count - 1 ) ; } System.out.println ( ans / 2 ) ; } }
import java.util.ArrayList ; import java.util.Scanner ; public class codeforces_96_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; ArrayList < Long > list = new ArrayList < > ( ) ; generate ( list , 1 ) ; int ans = 0 ; for ( Long val : list ) { if ( val >= n ) { ans = val.intValue ( ) ; break ; } } System.out.println ( ans ) ; in.close ( ) ; } static void generate ( ArrayList < Long > list , long num ) { if ( num > 10000000000L ) return ; if ( num > 0 && count ( num ) == 0 ) list.add ( num ) ; generate ( list , num * 10 + 4 ) ; generate ( list , num * 10 + 7 ) ; } static int count ( long num ) { int count = 0 ; while ( num > 0 ) { if ( num % 10 == 4 ) count ++ ; num /= 10 ; } return count ; } }
import java.util.Scanner ; public class atcoder_ABC169_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = Integer.parseInt ( sc.nextLine ( ) ) ; int [ ] low = new int [ n ] ; int [ ] high = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] s = sc.nextLine ( ).split ( " " ) ; low [ i ] = Integer.parseInt ( s [ 0 ] ) ; high [ i ] = Integer.parseInt ( s [ 1 ] ) ; } Arrays.sort ( low ) ; Arrays.sort ( high ) ; if ( n % 2 == 1 ) { System.out.println ( high [ n / 2 ] - low [ n / 2 ] + 1 ) ; } else { System.out.println ( ( high [ n / 2 - 1 ] + high [ n / 2 ] ) / 2 - ( low [ n / 2 - 1 ] + low [ n / 2 ] ) / 2 * 2 + 1 ) ; } } }
import java.util.Scanner ; public class atcoder_AGC035_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] deg = new int [ N ] ; int [ ] [ ] graph = new int [ N ] [ M ] ; int [ ] ans = new int [ N ] ; boolean [ ] used = new boolean [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; graph [ a ] [ i ] = b ; graph [ b ] [ i ] = a ; deg [ a ] ++ ; deg [ b ] ++ ; } if ( M % 2 == 1 ) { System.out.println ( - 1 ) ; return ; } int q = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ! used [ i ] ) { q ++ ; used [ i ] = true ; ans [ q ] = i ; } } int idx = 0 ; while ( q > 0 ) { int now = ans [ idx ] ; idx ++ ; q -- ; for ( int i = 0 ; i < M ; i ++ ) { int next = graph [ now ] [ i ] ; if ( ! used [ next ] ) { q ++ ; used [ next ] = true ; ans [ q ] = next ; } } used [ now ] = false ; } for ( int i = 0 ; i < N ; i ++ ) { if ( i != 0 ) System.out.print ( " " ) ; System.out.print ( ans [ i ] + 1 ) ; } System.out.println ( ) ; } } }
import java.util.Scanner ; public class codeforces_147_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sum - x - y ; if ( x <= z && z <= y ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; import java.math.BigInteger ; public class atcoder_ABC152_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; BigInteger [ ] a = new BigInteger [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextBigInteger ( ) ; } BigInteger lcm = BigInteger.ONE ; for ( int i = 0 ; i < n ; i ++ ) { lcm = lcm.multiply ( a [ i ] ).divide ( lcm.gcd ( a [ i ] ) ) ; } BigInteger ans = lcm.multiply ( sum ( a ) ).mod ( BigInteger.valueOf ( 1000000007 ) ) ; System.out.println ( ans ) ; } static BigInteger sum ( BigInteger [ ] a ) { BigInteger s = BigInteger.ZERO ; for ( int i = 0 ; i < a.length ; i ++ ) { s = s.add ( a [ i ] ) ; } return s ; } }
import java.util.Scanner ; public class codeforces_203_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int x = scanner.nextInt ( ) ; int t = scanner.nextInt ( ) ; int a = scanner.nextInt ( ) ; int b = scanner.nextInt ( ) ; int da = scanner.nextInt ( ) ; int db = scanner.nextInt ( ) ; int aTime = Math.min ( a / da , t - 1 ) ; int bTime = Math.min ( b / db , t - 1 ) ; for ( int i = 0 ; i <= aTime ; i ++ ) { for ( int j = 0 ; j <= bTime ; j ++ ) { if ( a - da * i == x || b - db * j == x ) { System.out.println ( "YES" ) ; return ; } if ( ( a - da * i ) + ( b - db * j ) == x ) { System.out.println ( "YES" ) ; return ; } } } System.out.println ( "NO" ) ; } }
import java.util.Scanner ; public class atcoder_ABC123_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ x ] ; int [ ] b = new int [ y ] ; int [ ] c = new int [ z ] ; for ( int i = 0 ; i < x ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < y ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < z ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } int [ ] ab = new int [ x * y ] ; int index = 0 ; for ( int i = 0 ; i < x ; i ++ ) { for ( int j = 0 ; j < y ; j ++ ) { ab [ index ++ ] = a [ i ] + b [ j ] ; } } java.util.Arrays.sort ( ab ) ; java.util.Arrays.sort ( c ) ; int [ ] abc = new int [ k ] ; index = 0 ; for ( int i = 0 ; i < Math.min ( k , x * y ) ; i ++ ) { for ( int j = 0 ; j < z ; j ++ ) { abc [ index ++ ] = ab [ i ] + c [ j ] ; } } java.util.Arrays.sort ( abc ) ; for ( int i = 0 ; i < k ; i ++ ) { System.out.println ( abc [ i ] ) ; } } }
import java.util.Scanner ; public class atcoder_ABC155_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int a = sc.nextInt ( ) ; if ( a <= 4 ) { sum += a ; } else { sum += 10 - a ; } } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class codeforces_369_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int sa = sc.nextInt ( ) ; int sk = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sk / k ; if ( i < sk % k ) { arr [ i ] += 1 ; } } for ( int i = k ; i < n ; i ++ ) { arr [ i ] = sa / ( n - k ) ; if ( i < sa % ( n - k ) ) { arr [ i ] += 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( arr [ i ] + " " ) ; } } }
import java.util.Scanner ; public class atcoder_ABC133_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] [ ] graph = new int [ n ] [ m ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; graph [ a - 1 ] [ 0 ] ++ ; graph [ b - 1 ] [ 0 ] ++ ; } int mod = 1000000007 ; long ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( graph [ i - 1 ] [ 0 ] == 0 ) { ans = 0 ; break ; } } if ( ans != 0 ) { int k = 1 ; while ( true ) { long tmp = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( graph [ i - 1 ] [ 0 ] == 0 ) { tmp = 0 ; break ; } } if ( tmp == 0 ) { break ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( graph [ i - 1 ] [ 0 ] != 0 ) { tmp *= graph [ i - 1 ] [ 0 ] ; tmp %= mod ; } } ans = ( ans * tmp ) % mod ; graph [ k - 1 ] [ 0 ] -- ; for ( int i = 1 ; i <= n ; i ++ ) { if ( graph [ i - 1 ] [ 0 ] != 0 ) { graph [ i - 1 ] [ 0 ] -- ; } } k ++ ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_95_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.next ( ) ; } String s = sc.next ( ) ; char c1 = sc.next ( ).charAt ( 0 ) ; char c2 = 'a' ; if ( c1 != 'a' ) c2 = 'b' ; int [ ] valid = new int [ s.length ( ) ] ; Set < Integer > set = new HashSet < > ( ) ; for ( String str : arr ) { int index = s.indexOf ( str ) ; while ( index >= 0 ) { for ( int j = index ; j < index + str.length ( ) ; j ++ ) { set.add ( j ) ; } index = s.indexOf ( str , index + 1 ) ; } } char [ ] ans = s.toCharArray ( ) ; for ( int i : set ) { char c = ans [ i ] ; if ( c == Character.toLowerCase ( c ) ) ans [ i ] = c1 ; else ans [ i ] = Character.toLowerCase ( c1 ) ; } for ( char ch : ans ) { System.out.print ( ch ) ; } System.out.println ( ) ; } }
import java.util.Scanner ; public class codeforces_373_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int w = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int lo = 0 ; int hi = ( int ) 1e18 ; while ( hi - lo > 1 ) { int md = ( lo + hi ) / 2 ; int c = sum ( m + md - 1 ) - sum ( m - 1 ) ; if ( c * k <= w ) lo = md ; else hi = md ; } System.out.println ( lo ) ; } public static int sum ( int k ) { int ret = 0 ; int pw = 10 ; int len = 1 ; while ( true ) { int cur = Math.min ( pw - 1 , k ) ; int prev = pw / 10 ; ret += ( cur - prev + 1 ) * len ; if ( pw - 1 >= k ) break ; len += 1 ; pw *= 10 ; } return ret ; } }
import java.util.Scanner ; public class codeforces_242_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int answer = 0 ; for ( int i = a ; i <= x ; i ++ ) { if ( i <= b ) continue ; for ( int j = b ; j <= y ; j ++ ) { if ( i > j ) answer ++ ; } } System.out.println ( answer ) ; for ( int i = 0 ; i < answer ; i ++ ) { System.out.println ( games [ i ][ 0 ] + " " + games [ i ][ 1 ] ) ; } } private static int [ ][ ] games = new int [ 1000000 ][ 2 ] ; }
import java.util.Scanner ; public class codeforces_608_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int f = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int x = t - ( s - f ) ; if ( x > c ) { c = x ; } } System.out.println ( s + c ) ; } }
import java.util.Scanner ; public class codeforces_469_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; if ( x == 0 ) { x = sc.nextInt ( ) ; } else if ( y == 0 ) { y = sc.nextInt ( ) ; } int a = x + y ; if ( a == n ) { System.out.println ( "I become the guy." ) ; } else { System.out.println ( "Oh, my keyboard!" ) ; } } }
import java.util.Scanner ; public class codeforces_351_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextDouble ( ) ; } double sum = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - ( int ) arr [ i ] != 0.0 ) { sum += arr [ i ] ; } } int o = 2 * n - arr.length ; double res = 1000000000.0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i + o >= n ) { res = Math.min ( res , Math.abs ( i - sum ) ) ; } } System.out.println ( String.format ( "%.3f" , res ) ) ; } }
import java.util.Scanner ; public class atcoder_AGC003_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) * n + i ; } Arrays.sort ( arr ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int d = arr [ i ] % n % 2 ; if ( d % 2 != i % 2 ) { cnt ++ ; } } System.out.println ( cnt / 2 ) ; } }
import java.util.Scanner ; public class codeforces_629_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] cake = new int [ n ] [ n ] ; int happiness = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String line = sc.next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { cake [ i ] [ j ] = line.charAt ( j ) - '0' ; } } for ( int i = 0 ; i < n ; i ++ ) { int chocCount = 0 ; for ( int j = 0 ; j < n ; j ++ ) { chocCount += cake [ i ] [ j ] ; } if ( chocCount > 1 ) { int nfat = 1 ; for ( int k = chocCount ; k > chocCount - 2 ; k -- ) { nfat *= k ; } happiness += nfat / 2 ; } } } for ( int j = 0 ; j < n ; j ++ ) { int chocCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { chocCount += cake [ i ] [ j ] ; } if ( chocCount > 1 ) { int nfat = 1 ; for ( int k = chocCount ; k > chocCount - 2 ; k -- ) { nfat *= k ; } happiness += nfat / 2 ; } } System.out.println ( happiness ) ; } }
import java.util.Scanner ; public class codeforces_459_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; if ( x1 == x2 && y1 == y2 ) { System.out.println ( x1 + " " + y1 + " " + x2 + " " + y2 ) ; } else if ( x1 == x2 ) { int d = ( int ) Math.sqrt ( ( y2 - y1 ) * ( y2 - y1 ) ) ; System.out.println ( x1 + " " + ( y1 + d ) + " " + x2 + " " + ( y2 - d ) ) ; } else if ( y1 == y2 ) { int d = ( int ) Math.sqrt ( ( x2 - x1 ) * ( x2 - x1 ) ) ; System.out.println ( x1 + " " + y1 + " " + ( x2 - d ) + " " + y2 ) ; } else { int x3 = ( x1 + x2 ) / 2 ; int y3 = ( y1 + y2 ) / 2 ; int x4 = x3 ; int y4 = y3 ; if ( x1 < x3 && x3 < x2 ) { x4 = x3 ; } else if ( x1 > x3 && x3 > x2 ) { x4 = x3 ; } if ( y1 < y3 && y3 < y2 ) { y4 = y3 ; } else if ( y1 > y3 && y3 > y2 ) { y4 = y3 ; } System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } } }
import java.util.Scanner ; public class codeforces_32_B { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; String S = stdIn.next ( ) ; String result = "" ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( S.charAt ( i ) == '.' ) { result += "0" ; } else { i ++ ; if ( S.charAt ( i ) == '.' ) { result += "1" ; } else { result += "2" ; } } } System.out.println ( result ) ; } }
[INST:java]
import java.util.Scanner ; import java.util.Arrays ; public class atcoder_AGC012_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; long sum = 0 ; for ( int i = n - 2 ; i >= n - 2 * n - 1 ; i -= 2 ) { sum += arr [ i ] ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class atcoder_ABC122_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long MOD = 1000000007 ; long [ ] [ ] dp = new long [ N + 1 ] [ 4 ] ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { if ( dp [ i ] [ k ] > 0 ) { if ( ( k + 1 ) % 4 == j ) { dp [ i + 1 ] [ j ] = ( dp [ i + 1 ] [ j ] + dp [ i ] [ k ] ) % MOD ; } else { dp [ i + 1 ] [ ( j + 1 ) % 4 ] = ( dp [ i + 1 ] [ ( j + 1 ) % 4 ] + dp [ i ] [ k ] ) % MOD ; } } } } } System.out.println ( dp [ N ] [ 0 ] ) ; } } }
import java.util.Scanner ; public class atcoder_ABC042_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int A = scanner.nextInt ( ) ; int B = scanner.nextInt ( ) ; int C = scanner.nextInt ( ) ; if ( ( A + B + C ) == 17 ) { if ( A == 5 && B == 5 ) { System.out.println ( "YES" ) ; } else if ( B == 5 && C == 5 ) { System.out.println ( "YES" ) ; } else if ( A == 5 && C == 5 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; public class codeforces_629_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] m = new int [ 368 ] ; int [ ] f = new int [ 368 ] ; for ( int i = 0 ; i < n ; i ++ ) { char c = scanner.next ( ).charAt ( 0 ) ; int a = scanner.nextInt ( ) ; int b = scanner.nextInt ( ) ; if ( c == 'M' ) { m [ a ] += 2 ; m [ b ] -= 2 ; } else { f [ a ] += 2 ; f [ b ] -= 2 ; } } int a = 0 ; int b = 0 ; int c = 0 ; for ( int i = 0 ; i < 368 ; i ++ ) { a += m [ i ] ; b += f [ i ] ; if ( Math.min ( a , b ) > c ) { c = Math.min ( a , b ) ; } } System.out.println ( c ) ; } }
import java.util.* ; public class atcoder_ABC123_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int A [ ] = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int min = Integer.MAX_VALUE ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( min > A [ i ] ) { min = A [ i ] ; } } System.out.println ( ( int ) Math.ceil ( ( double ) N / min ) + 4 ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; import java.util.HashMap ; import java.util.Map ; import java.util.List ; public class atcoder_ABC167_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; list.add ( a [ i ] ) ; } list.add ( 0 , - 1 ) ; int x = 1 ; int t = - 1 ; Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n + 1 ; i ++ ) { int ne = list.get ( x ) ; if ( map.containsKey ( ne ) ) { t = map.get ( ne ) ; break ; } map.put ( ne , i ) ; list.add ( ne ) ; x = ne ; } if ( t != - 1 ) { int loop = list.size ( ) - t ; k = k - list.size ( ) ; k = k % loop ; System.out.println ( list.get ( t + k ) ) ; } else { System.out.println ( list.get ( k - 1 ) ) ; } } }
import java.util.Scanner ; public class atcoder_ABC051_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; s = s.replace ( "," , " " ) ; System.out.println ( s ) ; } }
import java.util.Scanner ; public class atcoder_ABC122_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < q ; i ++ ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int sum = 0 ; for ( int j = l - 1 ; j < r ; j ++ ) { if ( s.charAt ( j ) == 'A' && s.charAt ( j + 1 ) == 'C' ) sum ++ ; } System.out.println ( sum ) ; } } }
import java.util.Scanner ; public class codeforces_673_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 15 ) { sum += 15 ; } else { sum += arr [ i ] ; } } System.out.println ( sum ) ; } }
import java.io.* ; import java.util.* ; public class atcoder_ABC174_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int start = 1 ; int end = arr [ n - 1 ] ; int ans = end ; while ( start <= end ) { int mid = start + ( end - start ) / 2 ; if ( isValid ( arr , k , mid ) ) { ans = mid ; end = mid - 1 ; } else { start = mid + 1 ; } } System.out.println ( ans ) ; } static boolean isValid ( int [ ] arr , int k , int mid ) { int sum = 0 ; int count = 0 ; for ( int i = 0 ; i < arr.length ; i ++ ) { if ( arr [ i ] % mid == 0 ) { sum ++ ; } sum -= arr [ i ] / mid ; } return sum >= k ; } }
import java.util.Scanner ; public class atcoder_ABC154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; String u = sc.next ( ) ; int x = 0 ; int y = 0 ; if ( s.equals ( u ) ) { x = a - 1 ; } else { x = a ; } if ( t.equals ( u ) ) { y = b - 1 ; } else { y = b ; } System.out.println ( x + " " + y ) ; } }
[java]
import java.util.Scanner ; public class codeforces_637_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int max = arr [ 0 ] ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < arr [ i ] ) { max = arr [ i ] ; index = i ; } } System.out.println ( arr [ index ] ) ; } }

[/java]
import java.util.* ; public class codeforces_11_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int x [ ] = new int [ n ] ; int m = 0 ; int q = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc.nextInt ( ) ; } for ( int a = 0 ; a < n - 1 ; a ++ ) { if ( x [ a ] >= x [ a + 1 ] ) { q = ( x [ a ] - x [ a + 1 ] ) / d + 1 ; m = m + q ; x [ a + 1 ] = x [ a + 1 ] + q * d ; } } System.out.println ( m ) ; } }
import java.util.Scanner ; public class atcoder_ABC150_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] perm = new int [ n ] ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == i + 1 ) { k ++ ; } } perm [ i ] = k ; cnt += k ; } int [ ] arr1 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = sc.nextInt ( ) ; } int [ ] perm1 = new int [ n ] ; int cnt1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr1 [ j ] == i + 1 ) { k ++ ; } } perm1 [ i ] = k ; cnt1 += k ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math.abs ( perm [ i ] - perm1 [ i ] ) ; } System.out.println ( ans ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.util.StringTokenizer ; public class atcoder_ABC145_E { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int N = Integer.parseInt ( st.nextToken ( ) ) ; int T = Integer.parseInt ( st.nextToken ( ) ) ; int [ ] [ ] dp = new int [ N + 1 ] [ T + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { st = new StringTokenizer ( br.readLine ( ) ) ; int time = Integer.parseInt ( st.nextToken ( ) ) ; int val = Integer.parseInt ( st.nextToken ( ) ) ; dp [ i ] [ 0 ] = val ; for ( int j = 1 ; j <= T ; j ++ ) { if ( j < time ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } else { dp [ i ] [ j ] = Math.max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - time ] + val ) ; } } } int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += dp [ i ] [ T ] ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; import java.util.List ; public class codeforces_621_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list.add ( sc.nextInt ( ) ) ; } Collections.sort ( list ) ; Collections.reverse ( list ) ; int odd = 0 , sum = 0 , ok = 0 ; for ( int i : list ) { if ( i % 2 == 1 ) { odd ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( list.get ( i ) % 2 == 0 ) { sum += list.get ( i ) ; } else { if ( ok || odd > 1 ) { sum += list.get ( i ) ; odd -- ; ok = ! ok ; } } } System.out.println ( sum ) ; } }
import java.util.Scanner ; public class codeforces_544_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int k = in.nextInt ( ) ; int x = 0 ; if ( k <= Math.max ( n * n / 2 , n * n - n * n / 2 ) ) { System.out.println ( "YES" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i % 2 == j % 2 && x < k ) { System.out.print ( "L" ) ; x ++ ; } else { System.out.print ( "S" ) ; } } System.out.println ( ) ; } } else { System.out.println ( "NO" ) ; } } }
import java.util.Scanner ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.List ; public class atcoder_ABC107_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; List < Long > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a.add ( sc.nextLong ( ) ) ; } List < Long > plus = new ArrayList < > ( ) ; List < Long > minus = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a.get ( i ) > 0 ) { plus.add ( a.get ( i ) ) ; } else { minus.add ( a.get ( i ) ) ; } } long ans = 1000000000000000000L ; int x = 0 ; int y = minus.size ( ) - 1 ; int lastX = plus.size ( ) ; int lastY = minus.size ( ) ; for ( int i = 0 ; i <= k ; i ++ ) { long p = 0L ; long m = 0L ; if ( i == 0 ) { p = 0L ; } else { p = plus.get ( i - 1 ) ; } if ( k - i == 0 ) { m = 0L ; } else { m = minus.get ( lastY - ( k - i ) ) ; } ans = Math.min ( ans , 2 * p + Math.abs ( m ) , p + 2 * Math.abs ( m ) ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_450_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc.nextInt ( ) ; } int [ ] l2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( l [ i ] % m == 0 ) { l2 [ i ] = l [ i ] / m ; } else { l2 [ i ] = l [ i ] / m + 1 ; } } int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l2 [ i ] > mx ) { mx = l2 [ i ] ; } } int ind = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l2 [ i ] == mx ) { ind = i ; } } System.out.println ( ind + 1 ) ; } }
import java.util.Scanner ; public class atcoder_AGC017_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int p = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } long pattern_a = 0 ; long pattern_b = 0 ; int ones = 0 ; int zeros = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) { ones ++ ; } else { zeros ++ ; } } for ( int j = 0 ; j <= zeros ; j ++ ) { pattern_b += combi ( zeros , j ) ; } int time = 0 ; while ( time <= ones ) { if ( time % 2 == p ) { pattern_a += combi ( ones , time ) ; } time ++ ; } System.out.println ( ( int ) ( pattern_a * pattern_b ) ) ; } static long combi ( int n , int k ) { long a = 1 ; for ( int i = 0 ; i < k ; i ++ ) { a *= n - i ; a /= i + 1 ; } return a ; } }
[java]
import java.util.* ; public class codeforces_682_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > count ) count ++ ; } System.out.println ( count + 1 ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ARC062_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int m = scan.nextInt ( ) ; int score = 0 ; int g = 0 ; int p = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char c = scan.next ( ).charAt ( 0 ) ; if ( c == 'g' ) { if ( g > p ) { score ++ ; p ++ ; } else if ( g < p ) { score -- ; g ++ ; } } else { if ( g > p ) { score -- ; g ++ ; } else if ( g < p ) { score ++ ; p ++ ; } } } System.out.println ( score ) ; } }
import java.util.Scanner ; public class atcoder_ABC114_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < 1000 ; i ++ ) { String str = String.valueOf ( i ) ; if ( str.contains ( "7" ) && str.contains ( "5" ) && str.contains ( "3" ) ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; import java.util.ArrayList ; public class atcoder_AGC002_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a.add ( 0 ) ; } a.set ( 0 , 1 ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int x1 = a.get ( x - 1 ) ; int y1 = a.get ( y - 1 ) ; if ( x1 >= 1 && y1 >= 1 ) { a.set ( x - 1 , x1 - 1 ) ; a.set ( y - 1 , y1 + 1 ) ; } else if ( x1 == 0 ) { a.set ( x - 1 , x1 - 1 ) ; a.set ( y - 1 , y1 + 1 ) ; } else { a.set ( x - 1 , x1 - 1 ) ; a.set ( y - 1 , y1 + 1 ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a.get ( i ) == 1 ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; if ( n % 2 == 1 ) { System.out.println ( "No" ) ; } else { if ( s.substring ( 0 , n / 2 ).equals ( s.substring ( n / 2 ) ) ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } } }
import java.util.Scanner ; public class codeforces_61_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; while ( t -- > 0 ) { String s = sc.next ( ) ; int flag = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'a' || s.charAt ( i ) == 'c' || s.charAt ( i ) == 'e' || s.charAt ( i ) == 'i' || s.charAt ( i ) == 'o' || s.charAt ( i ) == 'u' || s.charAt ( i ) == 'A' || s.charAt ( i ) == 'C' || s.charAt ( i ) == 'E' || s.charAt ( i ) == 'I' || s.charAt ( i ) == 'O' || s.charAt ( i ) == 'U' ) { flag = 1 ; break ; } } if ( flag == 1 ) { System.out.println ( "AC" ) ; } else { System.out.println ( "WA" ) ; } } } }
100%|██████████| 250/250 [00:00<00:00, 8643.42it/s]
import java.util.Scanner ; public class atcoder_ABC136_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; int i = 1 ; while ( 10 * i <= N ) { ans += ( 10 * i - 10 * ( i - 1 ) ) ; i += 2 ; } ans += Math.max ( 0 , N - 10 * ( i - 1 ) + 1 ) ; System.out.println ( ans ) ; } }
[INST:java]
import java.util.Scanner ; import java.util.Arrays ; public class atcoder_ARC086_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int N = scanner.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scanner.nextInt ( ) ; } int max = A [ 0 ] ; int index = 0 ; for ( int i = 1 ; i < N ; i ++ ) { if ( Math.abs ( A [ i ] ) > Math.abs ( max ) ) { max = A [ i ] ; index = i ; } } if ( max >= 0 ) { System.out.println ( 2 * N - 1 ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { System.out.println ( index + 1 + " " + ( i + 1 ) ) ; } else { System.out.println ( i + 1 + " " + ( i + 2 ) ) ; } } } else { System.out.println ( 2 * N - 1 ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { System.out.println ( index + 1 + " " + ( i + 1 ) ) ; } else { System.out.println ( i + 1 + " " + i ) ; } } } } }
import java.util.Scanner ; public class atcoder_ABC124_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.nextLine ( ) ; int ans = 0 ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( i % 2 == 0 ) { if ( S.charAt ( i ) == '0' ) { ans ++ ; } } else { if ( S.charAt ( i ) == '1' ) { ans ++ ; } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_644_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = - 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] != - 1 ) continue ; int min = a [ i ] + c [ i ] ; int ans = a [ i ] + c [ i ] ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + c [ i ] > a [ j ] + c [ j ] ) continue ; min = Math.min ( min , a [ j ] + c [ j ] ) ; ans = Math.max ( ans , a [ j ] + c [ j ] ) ; } dp [ i ] = min ; dp [ j ] = ans ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( dp [ i ] + " " ) ; } } }
import java.util.* ; public class codeforces_624_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int ans = 0 ; int pre = ( int ) 1e9 + 7 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math.max ( 0 , Math.min ( pre - 1 , a [ i ] ) ) ; pre = Math.max ( 0 , Math.min ( pre - 1 , a [ i ] ) ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC027_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { x = 0 ; break ; } else { x = x - a [ i ] ; ans ++ ; } } if ( x != 0 ) { ans -- ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_669_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; System.out.println ( ( n * 2 + 1 ) / 3 ) ; } }
[java]
import java.util.Scanner ; public class atcoder_ABC135_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = s.length ( ) ; if ( n == 1 ) { if ( s.equals ( "5" ) || s.equals ( "?" ) ) System.out.println ( 1 ) ; else System.out.println ( 0 ) ; return ; } int [ ] [ ] dp = new int [ n ] [ 13 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { if ( s.charAt ( i ) != '?' ) dp [ i ] [ s.charAt ( i ) - '0' ] ++ ; else for ( int j = 0 ; j < 10 ; j ++ ) dp [ i ] [ j ] ++ ; } else { if ( s.charAt ( i ) != '?' ) for ( int k = 0 ; k < 13 ; k ++ ) dp [ i ] [ ( k * 10 + s.charAt ( i ) - '0' ) % 13 ] += dp [ i - 1 ] [ k ] ; else for ( int j = 0 ; j < 10 ; j ++ ) for ( int k = 0 ; k < 13 ; k ++ ) dp [ i ] [ ( k * 10 + j ) % 13 ] += dp [ i - 1 ] [ k ] ; for ( int k = 0 ; k < 13 ; k ++ ) dp [ i ] [ k ] %= 1000000007 ; } } System.out.println ( dp [ n - 1 ] [ 5 ] ) ; } }

[/java]
import java.util.Scanner ; public class atcoder_ABC133_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System.in ) ; int n = scanner.nextInt ( ) ; int d = scanner.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { a [ i ] = scanner.nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { b [ i ] = scanner.nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { double distance = 0 ; for ( int k = 0 ; k < d ; k ++ ) { distance += ( a [ i ] - b [ j ] ) * ( a [ i ] - b [ j ] ) ; } distance = Math.sqrt ( distance ) ; if ( distance % 1 == 0 ) { count ++ ; } } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_622_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int x = ( int ) ( Math.sqrt ( 2 * n + 0.25 ) ) - 1 ; System.out.println ( n - x * ( x + 1 ) / 2 ) ; } }
import java.util.Scanner ; public class codeforces_519_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; int c [ ] = new int [ n ] ; int x = 0 ; int y = 0 ; int z = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { x += a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { y += b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { z += c [ i ] ; } System.out.println ( Math.abs ( x - y ) + "" ) ; System.out.println ( Math.abs ( y - z ) + "" ) ; } }
import java.util.Scanner ; public class codeforces_131_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] + arr [ j ] == 0 ) { count ++ ; } } } System.out.println ( count ) ; } }
import java.util.Scanner ; public class codeforces_379_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int count = 0 ; while ( a > 0 || b >= a ) { if ( a > 0 ) { count += a ; a = a / b ; } if ( b >= a ) { count += b ; b = b % a ; } } System.out.println ( count ) ; } }
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model yangccccc/codellama-multi --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_400_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 1.
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC089_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC132_F.java' returned non-zero exit status 1.
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 4.
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC004_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_31_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC007_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC038_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/codellama-multi/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 56
Success: ['codeforces_58_B.java', 'atcoder_ABC112_A.java', 'atcoder_ABC108_B.java', 'atcoder_ABC139_B.java', 'codeforces_569_A.java', 'atcoder_ABC153_A.java', 'codeforces_265_B.java', 'codeforces_607_A.java', 'atcoder_ABC043_B.java', 'codeforces_669_A.java', 'atcoder_ABC145_B.java', 'codeforces_32_B.java', 'codeforces_678_A.java', 'codeforces_581_A.java', 'codeforces_131_B.java', 'codeforces_79_A.java', 'codeforces_23_B.java', 'codeforces_354_A.java', 'atcoder_ABC178_A.java', 'codeforces_408_B.java', 'codeforces_333_B.java', 'atcoder_AGC033_B.java', 'codeforces_567_A.java', 'codeforces_581_B.java', 'atcoder_ABC174_C.java', 'atcoder_ABC142_A.java', 'codeforces_340_A.java', 'atcoder_AGC006_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC158_A.java', 'atcoder_ABC154_A.java', 'codeforces_534_B.java', 'codeforces_544_B.java', 'codeforces_59_A.java', 'codeforces_387_B.java', 'atcoder_ABC125_A.java', 'codeforces_11_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC168_B.java', 'codeforces_55_A.java', 'codeforces_546_A.java', 'atcoder_ABC140_D.java', 'codeforces_609_B.java', 'codeforces_450_A.java', 'atcoder_ABC118_C.java', 'atcoder_ABC051_A.java', 'codeforces_92_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC119_B.java', 'codeforces_705_B.java', 'codeforces_608_A.java', 'atcoder_ABC042_A.java', 'atcoder_ABC143_A.java', 'codeforces_612_B.java', 'codeforces_282_B.java', 'atcoder_ABC151_A.java']
Fail: ['atcoder_ABC174_E.java', 'atcoder_ABC170_A.java', 'codeforces_306_A.java', 'atcoder_ABC150_D.java', 'codeforces_7_B.java', 'atcoder_ABC178_B.java', 'codeforces_222_A.java', 'codeforces_624_B.java', 'codeforces_231_A.java', 'codeforces_334_A.java', 'atcoder_ABC150_E.java', 'atcoder_ABC111_C.java', 'atcoder_AGC046_A.java', 'codeforces_274_A.java', 'codeforces_678_B.java', 'codeforces_268_A.java', 'atcoder_ABC150_C.java', 'codeforces_400_B.java', 'atcoder_AGC027_A.java', 'atcoder_ABC114_C.java', 'codeforces_203_B.java', 'atcoder_ABC137_D.java', 'atcoder_AGC004_B.java', 'atcoder_ABC140_F.java', 'atcoder_AGC021_B.java', 'codeforces_37_A.java', 'atcoder_ABC124_C.java', 'atcoder_ABC145_E.java', 'atcoder_ABC125_B.java', 'atcoder_AGC019_A.java', 'codeforces_459_B.java', 'codeforces_373_B.java', 'atcoder_ABC172_D.java', 'atcoder_ABC124_A.java', 'codeforces_86_A.java', 'codeforces_189_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC145_C.java', 'codeforces_629_B.java', 'codeforces_190_A.java', 'codeforces_469_A.java', 'codeforces_397_B.java', 'codeforces_242_B.java', 'atcoder_ABC123_D.java', 'atcoder_AGC029_C.java', 'codeforces_583_B.java', 'codeforces_369_B.java', 'codeforces_459_A.java', 'atcoder_ABC127_B.java', 'atcoder_ABC136_B.java', 'atcoder_AGC017_A.java', 'codeforces_134_A.java', 'atcoder_AGC028_A.java', 'atcoder_AGC024_B.java', 'atcoder_ABC168_C.java', 'codeforces_56_B.java', 'codeforces_55_B.java', 'codeforces_148_B.java', 'atcoder_AGC034_B.java', 'atcoder_ABC152_E.java', 'codeforces_462_B.java', 'atcoder_ABC126_D.java', 'atcoder_ABC110_C.java', 'codeforces_49_A.java', 'codeforces_351_A.java', 'atcoder_AGC002_B.java', 'atcoder_ABC165_C.java', 'codeforces_106_B.java', 'codeforces_673_A.java', 'codeforces_598_A.java', 'atcoder_ABC147_D.java', 'codeforces_276_B.java', 'codeforces_296_A.java', 'codeforces_302_A.java', 'codeforces_267_A.java', 'codeforces_242_A.java', 'codeforces_99_A.java', 'codeforces_579_A.java', 'atcoder_AGC013_A.java', 'atcoder_ABC125_C.java', 'codeforces_216_B.java', 'atcoder_AGC025_A.java', 'codeforces_203_A.java', 'codeforces_596_B.java', 'codeforces_70_B.java', 'codeforces_651_A.java', 'codeforces_96_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC123_C.java', 'atcoder_ABC164_D.java', 'atcoder_ABC109_B.java', 'codeforces_421_A.java', 'codeforces_456_A.java', 'atcoder_ABC164_A.java', 'codeforces_379_A.java', 'codeforces_514_A.java', 'codeforces_622_A.java', 'codeforces_665_A.java', 'atcoder_ABC107_D.java', 'atcoder_ABC162_D.java', 'atcoder_ABC169_D.java', 'codeforces_519_B.java', 'codeforces_154_A.java', 'codeforces_617_B.java', 'codeforces_474_B.java', 'codeforces_327_A.java', 'codeforces_61_B.java', 'codeforces_287_A.java', 'atcoder_AGC046_B.java', 'codeforces_313_B.java', 'atcoder_ABC169_C.java', 'codeforces_518_B.java', 'codeforces_146_A.java', 'codeforces_8_B.java', 'atcoder_AGC027_B.java', 'atcoder_ABC127_F.java', 'codeforces_387_A.java', 'atcoder_ABC167_C.java', 'atcoder_ABC120_C.java', 'atcoder_ABC158_B.java', 'atcoder_ABC128_C.java', 'atcoder_AGC043_B.java', 'atcoder_ABC167_D.java', 'atcoder_ABC123_B.java', 'atcoder_AGC033_A.java', 'codeforces_632_B.java', 'atcoder_ABC155_E.java', 'atcoder_ABC149_B.java', 'atcoder_ABC133_B.java', 'codeforces_672_A.java', 'codeforces_412_A.java', 'codeforces_272_B.java', 'atcoder_AGC010_B.java', 'codeforces_147_A.java', 'atcoder_ARC062_B.java', 'atcoder_ABC135_D.java', 'atcoder_ABC126_E.java', 'atcoder_AGC007_C.java', 'atcoder_AGC012_A.java', 'atcoder_AGC037_E.java', 'codeforces_629_A.java', 'codeforces_25_A.java', 'atcoder_AGC035_B.java', 'codeforces_30_A.java', 'codeforces_637_A.java', 'atcoder_ABC104_C.java', 'codeforces_299_A.java', 'codeforces_400_A.java', 'atcoder_ARC086_B.java', 'atcoder_AGC038_A.java', 'codeforces_500_A.java', 'atcoder_ABC148_F.java', 'atcoder_ABC142_C.java', 'codeforces_31_A.java', 'codeforces_108_B.java', 'atcoder_ABC171_B.java', 'atcoder_ABC089_C.java', 'codeforces_644_B.java', 'atcoder_ABC070_B.java', 'codeforces_445_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC132_F.java', 'atcoder_ABC105_D.java', 'codeforces_653_A.java', 'codeforces_356_A.java', 'atcoder_ABC112_C.java', 'codeforces_342_B.java', 'atcoder_ABC171_E.java', 'codeforces_350_B.java', 'atcoder_AGC005_B.java', 'atcoder_ARC102_C.java', 'atcoder_ABC169_E.java', 'codeforces_95_A.java', 'atcoder_ABC146_D.java', 'codeforces_404_A.java', 'atcoder_ABC149_C.java', 'atcoder_AGC014_D.java', 'atcoder_ABC106_C.java', 'codeforces_110_B.java', 'atcoder_ABC143_D.java', 'codeforces_171_A.java', 'atcoder_AGC003_C.java', 'atcoder_ABC107_C.java', 'atcoder_AGC004_D.java', 'codeforces_682_B.java', 'codeforces_67_B.java', 'codeforces_621_A.java', 'atcoder_ABC122_D.java', 'atcoder_ABC129_E.java', 'atcoder_AGC011_C.java', 'atcoder_ABC166_C.java', 'atcoder_ABC155_D.java', 'codeforces_379_A.java', 'atcoder_AGC028_B.java', 'atcoder_ABC133_E.java', 'codeforces_86_A.java', 'atcoder_ABC122_C.java']
