+ model=yangccccc/deepseek-coder-multi
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model yangccccc/deepseek-coder-multi --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 09-01 18:39:08 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 09-01 18:39:10 [utils.py:326] non-default args: {'model': 'yangccccc/deepseek-coder-multi', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 09-01 18:39:18 [__init__.py:711] Resolved architecture: LlamaForCausalLM
`torch_dtype` is deprecated! Use `dtype` instead!
INFO 09-01 18:39:18 [__init__.py:1750] Using max model len 4096
INFO 09-01 18:39:19 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=8192.
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:19 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:19 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='yangccccc/deepseek-coder-multi', speculative_config=None, tokenizer='yangccccc/deepseek-coder-multi', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=yangccccc/deepseek-coder-multi, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=1384061)[0;0m WARNING 09-01 18:39:19 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 240 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:19 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_e69d7217'), local_subscribe_addr='ipc:///tmp/4254d737-8e4d-46ef-8bf3-7180ceae500f', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:23 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_14a2555c'), local_subscribe_addr='ipc:///tmp/dcbdd465-523c-43f9-8e4e-b128985200b2', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:23 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_fd7f8e1a'), local_subscribe_addr='ipc:///tmp/b10a39da-60a9-470e-8c92-64b293ceea87', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:23 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:23 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:23 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:23 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:24 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:24 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:24 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_e091d03c'), local_subscribe_addr='ipc:///tmp/bf75c449-8913-460f-96d0-f9a933e4bf77', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:24 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:24 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m WARNING 09-01 18:39:24 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m WARNING 09-01 18:39:24 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:24 [gpu_model_runner.py:1953] Starting to load model yangccccc/deepseek-coder-multi...
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:24 [gpu_model_runner.py:1953] Starting to load model yangccccc/deepseek-coder-multi...
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:24 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:24 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:24 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:24 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:25 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:25 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:01<00:02,  1.04s/it]
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:01<00:00,  1.02it/s]
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:28 [default_loader.py:262] Loading weights took 2.67 seconds
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:03<00:00,  1.01s/it]
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:03<00:00,  1.00s/it]
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m 
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:28 [default_loader.py:262] Loading weights took 3.18 seconds
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:29 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.859071 seconds
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:29 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 4.112459 seconds
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:38 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d3b4714cfc/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:38 [backends.py:559] Dynamo bytecode transform time: 8.55 s
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:38 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d3b4714cfc/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:38 [backends.py:559] Dynamo bytecode transform time: 8.57 s
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:45 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.781 s
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:45 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.826 s
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:46 [monitor.py:34] torch.compile takes 8.55 s in total
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:46 [monitor.py:34] torch.compile takes 8.57 s in total
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:48 [gpu_worker.py:276] Available KV cache memory: 63.22 GiB
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:48 [gpu_worker.py:276] Available KV cache memory: 63.22 GiB
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:49 [kv_cache_utils.py:849] GPU KV cache size: 258,960 tokens
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:49 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 63.22x
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:49 [kv_cache_utils.py:849] GPU KV cache size: 258,960 tokens
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:49 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 63.22x
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 21.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 21.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 22.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 23.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 23.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 23.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:01, 24.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:01, 24.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 24.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 24.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 24.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 25.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 26.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:00, 26.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:01<00:00, 27.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:01<00:00, 27.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 26.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 26.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 26.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:02<00:00, 26.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 27.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:02<00:00, 27.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 25.46it/s]
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:52 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:53 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP1 pid=1384069)[0;0m INFO 09-01 18:39:53 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 1.82 GiB
[1;36m(EngineCore_0 pid=1384061)[0;0m [1;36m(VllmWorker TP0 pid=1384067)[0;0m INFO 09-01 18:39:53 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 1.82 GiB
[1;36m(EngineCore_0 pid=1384061)[0;0m INFO 09-01 18:39:53 [core.py:214] init engine (profile, create kv cache, warmup model) took 23.59 seconds
INFO 09-01 18:39:53 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 6584.96it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  12%|█▏        | 29/250 [00:00<00:00, 284.35it/s]Adding requests:  29%|██▉       | 72/250 [00:00<00:00, 369.04it/s]Adding requests:  47%|████▋     | 118/250 [00:00<00:00, 407.29it/s]Adding requests:  64%|██████▎   | 159/250 [00:00<00:00, 402.27it/s]Adding requests:  81%|████████  | 203/250 [00:00<00:00, 410.43it/s]Adding requests: 100%|█████████▉| 249/250 [00:00<00:00, 423.12it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 405.74it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:04<16:47,  4.05s/it, est. speed input: 314.47 toks/s, output: 1.24 toks/s]Processed prompts:   1%|          | 2/250 [00:07<16:28,  3.99s/it, est. speed input: 223.68 toks/s, output: 6.38 toks/s]Processed prompts:   1%|          | 3/250 [00:08<09:12,  2.24s/it, est. speed input: 294.92 toks/s, output: 12.40 toks/s]Processed prompts:   2%|▏         | 5/250 [00:08<04:22,  1.07s/it, est. speed input: 391.07 toks/s, output: 24.23 toks/s]Processed prompts:   3%|▎         | 7/250 [00:08<02:43,  1.49it/s, est. speed input: 493.02 toks/s, output: 37.13 toks/s]Processed prompts:   3%|▎         | 8/250 [00:09<02:27,  1.65it/s, est. speed input: 536.58 toks/s, output: 43.82 toks/s]Processed prompts:   4%|▎         | 9/250 [00:09<02:01,  1.99it/s, est. speed input: 587.40 toks/s, output: 51.54 toks/s]Processed prompts:   5%|▌         | 13/250 [00:10<01:08,  3.49it/s, est. speed input: 760.13 toks/s, output: 81.19 toks/s]Processed prompts:   6%|▌         | 15/250 [00:10<00:52,  4.47it/s, est. speed input: 871.64 toks/s, output: 97.28 toks/s]Processed prompts:   7%|▋         | 17/250 [00:10<00:40,  5.81it/s, est. speed input: 1019.62 toks/s, output: 113.45 toks/s]Processed prompts:   8%|▊         | 19/250 [00:10<00:36,  6.33it/s, est. speed input: 1055.85 toks/s, output: 128.51 toks/s]Processed prompts:   8%|▊         | 21/250 [00:10<00:28,  7.94it/s, est. speed input: 1107.40 toks/s, output: 146.86 toks/s]Processed prompts:   9%|▉         | 23/250 [00:11<00:35,  6.43it/s, est. speed input: 1187.13 toks/s, output: 160.21 toks/s]Processed prompts:  10%|█         | 25/250 [00:11<00:34,  6.50it/s, est. speed input: 1317.90 toks/s, output: 174.18 toks/s]Processed prompts:  10%|█         | 26/250 [00:11<00:34,  6.53it/s, est. speed input: 1348.92 toks/s, output: 182.76 toks/s]Processed prompts:  12%|█▏        | 31/250 [00:11<00:18, 11.86it/s, est. speed input: 1667.46 toks/s, output: 230.79 toks/s]Processed prompts:  14%|█▍        | 35/250 [00:11<00:14, 15.17it/s, est. speed input: 1802.35 toks/s, output: 267.65 toks/s]Processed prompts:  17%|█▋        | 42/250 [00:11<00:09, 22.93it/s, est. speed input: 2061.66 toks/s, output: 333.67 toks/s]Processed prompts:  18%|█▊        | 45/250 [00:12<00:09, 22.43it/s, est. speed input: 2245.13 toks/s, output: 360.68 toks/s]Processed prompts:  19%|█▉        | 48/250 [00:12<00:10, 18.83it/s, est. speed input: 2330.13 toks/s, output: 382.92 toks/s]Processed prompts:  20%|██        | 51/250 [00:12<00:12, 15.46it/s, est. speed input: 2376.08 toks/s, output: 405.02 toks/s]Processed prompts:  22%|██▏       | 55/250 [00:12<00:10, 18.23it/s, est. speed input: 2443.66 toks/s, output: 444.98 toks/s]Processed prompts:  23%|██▎       | 58/250 [00:12<00:10, 18.97it/s, est. speed input: 2604.83 toks/s, output: 473.13 toks/s]Processed prompts:  25%|██▍       | 62/250 [00:13<00:08, 21.44it/s, est. speed input: 2734.19 toks/s, output: 512.38 toks/s]Processed prompts:  26%|██▌       | 65/250 [00:13<00:08, 21.65it/s, est. speed input: 2877.00 toks/s, output: 542.01 toks/s]Processed prompts:  27%|██▋       | 68/250 [00:13<00:08, 21.83it/s, est. speed input: 3036.96 toks/s, output: 570.45 toks/s]Processed prompts:  28%|██▊       | 71/250 [00:13<00:08, 20.12it/s, est. speed input: 3130.97 toks/s, output: 598.80 toks/s]Processed prompts:  30%|██▉       | 74/250 [00:13<00:08, 20.80it/s, est. speed input: 3234.83 toks/s, output: 628.55 toks/s]Processed prompts:  31%|███       | 77/250 [00:13<00:08, 21.36it/s, est. speed input: 3332.25 toks/s, output: 658.94 toks/s]Processed prompts:  32%|███▏      | 80/250 [00:13<00:08, 19.99it/s, est. speed input: 3381.90 toks/s, output: 686.68 toks/s]Processed prompts:  33%|███▎      | 83/250 [00:14<00:10, 16.46it/s, est. speed input: 3426.64 toks/s, output: 710.47 toks/s]Processed prompts:  35%|███▌      | 88/250 [00:14<00:07, 21.62it/s, est. speed input: 3656.32 toks/s, output: 765.59 toks/s]Processed prompts:  37%|███▋      | 93/250 [00:14<00:06, 23.99it/s, est. speed input: 3874.60 toks/s, output: 816.76 toks/s]Processed prompts:  38%|███▊      | 96/250 [00:14<00:06, 24.00it/s, est. speed input: 3943.43 toks/s, output: 846.37 toks/s]Processed prompts:  40%|███▉      | 99/250 [00:14<00:07, 19.12it/s, est. speed input: 4017.52 toks/s, output: 871.17 toks/s]Processed prompts:  42%|████▏     | 105/250 [00:14<00:05, 25.79it/s, est. speed input: 4290.86 toks/s, output: 938.77 toks/s]Processed prompts:  44%|████▍     | 110/250 [00:15<00:04, 29.52it/s, est. speed input: 4528.53 toks/s, output: 995.96 toks/s]Processed prompts:  46%|████▌     | 114/250 [00:15<00:04, 28.36it/s, est. speed input: 4604.21 toks/s, output: 1037.40 toks/s]Processed prompts:  47%|████▋     | 118/250 [00:15<00:04, 29.93it/s, est. speed input: 4790.07 toks/s, output: 1083.20 toks/s]Processed prompts:  49%|████▉     | 122/250 [00:15<00:04, 31.37it/s, est. speed input: 4922.79 toks/s, output: 1128.05 toks/s]Processed prompts:  50%|█████     | 126/250 [00:15<00:03, 32.42it/s, est. speed input: 5102.37 toks/s, output: 1171.54 toks/s]Processed prompts:  52%|█████▏    | 130/250 [00:15<00:03, 33.71it/s, est. speed input: 5251.04 toks/s, output: 1218.82 toks/s]Processed prompts:  54%|█████▎    | 134/250 [00:15<00:03, 29.87it/s, est. speed input: 5334.48 toks/s, output: 1260.63 toks/s]Processed prompts:  55%|█████▌    | 138/250 [00:15<00:03, 31.87it/s, est. speed input: 5476.73 toks/s, output: 1306.63 toks/s]Processed prompts:  57%|█████▋    | 142/250 [00:16<00:04, 25.52it/s, est. speed input: 5565.45 toks/s, output: 1342.93 toks/s]Processed prompts:  58%|█████▊    | 145/250 [00:16<00:04, 22.06it/s, est. speed input: 5672.64 toks/s, output: 1369.28 toks/s]Processed prompts:  60%|█████▉    | 149/250 [00:16<00:04, 24.43it/s, est. speed input: 5825.17 toks/s, output: 1414.49 toks/s]Processed prompts:  61%|██████    | 152/250 [00:16<00:04, 20.43it/s, est. speed input: 5950.80 toks/s, output: 1439.21 toks/s]Processed prompts:  62%|██████▏   | 156/250 [00:16<00:04, 23.26it/s, est. speed input: 6155.28 toks/s, output: 1487.23 toks/s]Processed prompts:  64%|██████▎   | 159/250 [00:17<00:05, 17.43it/s, est. speed input: 6188.40 toks/s, output: 1505.78 toks/s]Processed prompts:  65%|██████▍   | 162/250 [00:17<00:04, 19.08it/s, est. speed input: 6267.92 toks/s, output: 1540.80 toks/s]Processed prompts:  66%|██████▋   | 166/250 [00:17<00:03, 22.58it/s, est. speed input: 6406.67 toks/s, output: 1591.09 toks/s]Processed prompts:  68%|██████▊   | 171/250 [00:17<00:03, 26.27it/s, est. speed input: 6620.51 toks/s, output: 1654.47 toks/s]Processed prompts:  70%|██████▉   | 174/250 [00:17<00:03, 23.76it/s, est. speed input: 6699.54 toks/s, output: 1687.17 toks/s]Processed prompts:  71%|███████   | 178/250 [00:17<00:03, 20.12it/s, est. speed input: 6774.60 toks/s, output: 1724.28 toks/s]Processed prompts:  72%|███████▏  | 181/250 [00:18<00:03, 19.91it/s, est. speed input: 6863.53 toks/s, output: 1758.02 toks/s]Processed prompts:  74%|███████▎  | 184/250 [00:18<00:03, 20.79it/s, est. speed input: 6942.26 toks/s, output: 1795.10 toks/s]Processed prompts:  75%|███████▍  | 187/250 [00:18<00:02, 22.69it/s, est. speed input: 7130.64 toks/s, output: 1835.60 toks/s]Processed prompts:  78%|███████▊  | 194/250 [00:18<00:01, 32.73it/s, est. speed input: 7486.08 toks/s, output: 1939.23 toks/s]Processed prompts:  79%|███████▉  | 198/250 [00:18<00:01, 28.18it/s, est. speed input: 7571.32 toks/s, output: 1985.77 toks/s]Processed prompts:  82%|████████▏ | 204/250 [00:18<00:01, 34.95it/s, est. speed input: 7841.61 toks/s, output: 2076.66 toks/s]Processed prompts:  83%|████████▎ | 208/250 [00:19<00:01, 26.46it/s, est. speed input: 7910.94 toks/s, output: 2117.34 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:19<00:02, 18.46it/s, est. speed input: 7929.73 toks/s, output: 2143.95 toks/s]Processed prompts:  86%|████████▌ | 215/250 [00:19<00:01, 18.89it/s, est. speed input: 7995.84 toks/s, output: 2182.72 toks/s]Processed prompts:  87%|████████▋ | 218/250 [00:19<00:01, 19.42it/s, est. speed input: 8098.61 toks/s, output: 2222.68 toks/s]Processed prompts:  88%|████████▊ | 221/250 [00:19<00:01, 21.31it/s, est. speed input: 8242.00 toks/s, output: 2266.73 toks/s]Processed prompts:  90%|█████████ | 226/250 [00:19<00:01, 23.78it/s, est. speed input: 8487.04 toks/s, output: 2343.36 toks/s]Processed prompts:  92%|█████████▏| 229/250 [00:20<00:01, 19.64it/s, est. speed input: 8505.33 toks/s, output: 2374.84 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:20<00:00, 18.67it/s, est. speed input: 8585.25 toks/s, output: 2413.25 toks/s]Processed prompts:  94%|█████████▍| 235/250 [00:20<00:00, 18.94it/s, est. speed input: 8672.68 toks/s, output: 2456.06 toks/s]Processed prompts:  95%|█████████▌| 238/250 [00:20<00:00, 21.09it/s, est. speed input: 8833.73 toks/s, output: 2507.75 toks/s]Processed prompts:  96%|█████████▋| 241/250 [00:20<00:00, 15.64it/s, est. speed input: 8872.72 toks/s, output: 2533.88 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:21<00:00,  9.94it/s, est. speed input: 8787.38 toks/s, output: 2524.57 toks/s]Processed prompts:  98%|█████████▊| 245/250 [00:21<00:00, 11.13it/s, est. speed input: 8875.94 toks/s, output: 2559.71 toks/s]Processed prompts:  99%|█████████▉| 247/250 [00:21<00:00, 11.82it/s, est. speed input: 8927.41 toks/s, output: 2592.45 toks/s]Processed prompts: 100%|█████████▉| 249/250 [00:22<00:00,  5.04it/s, est. speed input: 8623.89 toks/s, output: 2527.93 toks/s]Processed prompts: 100%|██████████| 250/250 [00:25<00:00,  5.04it/s, est. speed input: 7891.84 toks/s, output: 2326.83 toks/s]Processed prompts: 100%|██████████| 250/250 [00:25<00:00,  9.97it/s, est. speed input: 7891.84 toks/s, output: 2326.83 toks/s]
+ python3 clean_generations_translation.py --model yangccccc/deepseek-coder-multi --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.* ; import java.io.* ; public class atcoder_ABC146_D { void solve ( ) { int N = sc.nextInt ( ) ; int M = N - 1 ; List < Integer > G [ ] = new ArrayList [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { G [ i ] = new ArrayList < > ( ) ; } for ( int i = 0 ; i < M ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; G [ a ].add ( b ) ; G [ b ].add ( a ) ; } int K = 0 ; int color [ ] = new int [ N ] ; Queue < Integer > que = new LinkedList < > ( ) ; que.add ( 0 ) ; color [ 0 ] = 1 ; while ( ! que.isEmpty ( ) ) { int v = que.poll ( ) ; for ( int nv : G [ v ] ) { if ( color [ nv ] == 0 ) { color [ nv ] = ( color [ v ] == 1 ) ? 2 : 1 ; que.add ( nv ) ; } } } for ( int i = 0 ; i < N ; i ++ ) { K = Math.max ( K , color [ i ] ) ; } System.out.println ( K ) ; for ( int i = 0 ; i < M ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } System.out.println ( color [ a ] ) ; } } public static void main ( String args [ ] ) { new atcoder_AGC035_B ( ).solve ( ) ; } Scanner sc = new Scanner ( System.in ) ; }
import java.util.* ; public class atcoder_ABC119_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; double sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = sc.nextInt ( ) ; String u = sc.next ( ) ; if ( u.equals ( "JPY" ) ) { sum += x ; } else { sum += x * 380000 ; } } System.out.println ( sum ) ; } }
import sys
input = sys.stdin.readline
import numpy as np
MOD = 10 ** 9 + 7
N = int ( input ( ) )
M = 10 ** 6
A = np.array ( input ( ).split ( ) , dtype = np.int64 )
Nsq = 10 ** 3
fact = np.arange ( M , dtype = np.int64 ).reshape ( Nsq , Nsq )
fact [ 0 , 0 ] = 1
for n in range ( 1 , Nsq ) :
    fact [ : , n ] *= fact [ : , n - 1 ] ; fact [ : , n ] %= MOD
for n in range ( 1 , Nsq ) :
    fact [ n ] *= fact [ n - 1 , - 1 ] ; fact [ n ] %= MOD
fact = fact.ravel ( )
j = np.arange ( N )
inv = np.array ( [ pow ( i + 1 , MOD - 2 , MOD ) for i in range ( N ) ] )
inv = np.cumsum ( inv ) % MOD
temp = inv [ j ] + inv [ N - 1 - j ] - 1
ans = ( A * temp % MOD ).sum ( )
ans %= MOD
ans *= fact [ N ]
ans %= MOD
print ( ans )
import java.util.Scanner ; public class codeforces_569_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int t , s , q , ans = 0 ; t = in.nextInt ( ) ; s = in.nextInt ( ) ; q = in.nextInt ( ) ; while ( s < t ) { s *= q ; ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC112_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] [ ] xyh = new int [ N ] [ 3 ] ; for ( int i = 0 ; i < N ; i ++ ) { xyh [ i ] [ 0 ] = sc.nextInt ( ) ; xyh [ i ] [ 1 ] = sc.nextInt ( ) ; xyh [ i ] [ 2 ] = sc.nextInt ( ) ; } int x = 0 , y = 0 , h = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( xyh [ i ] [ 2 ] != 0 ) { x = xyh [ i ] [ 0 ] ; y = xyh [ i ] [ 1 ] ; h = xyh [ i ] [ 2 ] ; } } for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { int tmp = 0 ; for ( int k = 0 ; k < N ; k ++ ) { tmp = Math.max ( tmp , Math.abs ( x - i ) + Math.abs ( y - j ) + xyh [ k ] [ 2 ] ) ; } if ( tmp == h ) { System.out.println ( i + " " + j + " " + h ) ; break ; } } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC104_C { public static void main ( String [ ] args ) throws IOException { BufferedReader stdIn = new BufferedReader ( new InputStreamReader ( System.in ) ) ; StringTokenizer st = new StringTokenizer ( stdIn.readLine ( ) ) ; int D = Integer.parseInt ( st.nextToken ( ) ) ; int G = Integer.parseInt ( st.nextToken ( ) ) ; int [ ] P = new int [ D + 1 ] ; int [ ] C = new int [ D + 1 ] ; for ( int i = 1 ; i <= D ; i ++ ) { st = new StringTokenizer ( stdIn.readLine ( ) ) ; P [ i ] = Integer.parseInt ( st.nextToken ( ) ) ; C [ i ] = Integer.parseInt ( st.nextToken ( ) ) ; } int ans = 1000000000 ; for ( int i = 0 ; i < ( 1 << D ) ; i ++ ) { int cnt = 0 ; int score = 0 ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i & ( 1 << j ) ) > 0 ) { cnt += P [ j + 1 ] ; score += 100 * ( j + 1 ) * P [ j + 1 ] + C [ j + 1 ] ; } } if ( score >= G ) { ans = Math.min ( ans , cnt ) ; continue ; } for ( int j = 0 ; j < D ; j ++ ) { if ( ( i & ( 1 << j ) ) > 0 ) continue ; int cnt2 = 0 ; for ( int k = 0 ; k < P [ j + 1 ] ; k ++ ) { if ( score >= 100 * ( j + 1 ) * ( k + 1 ) + C [ j + 1 ] ) { cnt2 ++ ; score += 100 * ( j + 1 ) ; } else { break ; } } cnt += cnt2 ; } ans = Math.min ( ans , cnt ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_678_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int temp = n ; while ( temp % k != 0 ) { temp ++ ; } System.out.println ( temp ) ; } }
import java.util.Scanner ; import java.lang.Math ; public class codeforces_400_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int res = 0 ; for ( int i = 1 ; i <= Math.sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { int a = n / i ; int b = i ; if ( isValid ( s , a , b ) ) res ++ ; if ( a != b && isValid ( s , b , a ) ) res ++ ; } } System.out.println ( res + " " ) ; for ( int i = 1 ; i <= Math.sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { int a = n / i ; int b = i ; if ( isValid ( s , a , b ) ) { System.out.print ( a + "x" + b + " " ) ; } if ( a != b && isValid ( s , b , a ) ) { System.out.print ( b + "x" + a + " " ) ; } } } System.out.println ( ) ; } static boolean isValid ( String s , int a , int b ) { int n = s.length ( ) ; for ( int j = 0 ; j < a ; j ++ ) { int sum = 0 ; for ( int i = 0 ; i < b ; i ++ ) { if ( s.charAt ( j * b + i ) == 'X' ) sum ++ ; } if ( sum != b ) return false ; } return true ; } }
from sys import stdin
from collections import Counter
import numpy as np
(N, M) = [int(x) for x in stdin.readline().split()]
A = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)
cum_remainders = (np.hstack([0, A]) % M).cumsum() % M
remainder_counts = Counter(cum_remainders)
combinations = 0
for count in remainder_counts.values():
    combinations += count * (count - 1) // 2
print(combinations)
import java.util.* ; import java.io.* ; public class atcoder_AGC033_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int sr = sc.nextInt ( ) ; int scol = sc.nextInt ( ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; boolean judge = false ; int sl = 0 , sr1 = 0 , su = 0 , sd = 0 ; int tl = 0 , tr = 0 , tu = 0 , td = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'L' ) { sl ++ ; if ( sl - tr - scol == 0 ) judge = true ; } else if ( s.charAt ( i ) == 'R' ) { sr1 ++ ; if ( scol + ( sr1 - tl ) == w + 1 ) judge = true ; } else if ( s.charAt ( i ) == 'U' ) { su ++ ; if ( su - td - sr == 0 ) judge = true ; } else if ( s.charAt ( i ) == 'D' ) { sd ++ ; if ( sr + ( sd - tu ) == h + 1 ) judge = true ; } if ( t.charAt ( i ) == 'L' ) { if ( sr1 - tl + scol != 1 ) tl ++ ; } else if ( t.charAt ( i ) == 'R' ) { if ( scol + ( tr - sl ) != w ) tr ++ ; } else if ( t.charAt ( i ) == 'U' ) { if ( sd - tu + sr != 1 ) tu ++ ; } else if ( t.charAt ( i ) == 'D' ) { if ( sr + ( td - su ) != h ) td ++ ; } } if ( judge ) System.out.println ( "NO" ) ; else System.out.println ( "YES" ) ; } }
n = int(input())
while n % 2 == 0:
    n = n // 2
if n == 1:
    print('YES')
else:
    print('NO')
import java.util.* ; import java.io.* ; public class atcoder_ABC106_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int k = sc.nextInt ( ) ; int l = 0 ; for ( char c : s.toCharArray ( ) ) { if ( c != '1' ) { break ; } l ++ ; } if ( l >= k ) { System.out.println ( 1 ) ; } else { System.out.println ( s.charAt ( l ) ) ; } } }
n = int ( input ( ) )
s = [ ]
for i in range ( n ) :
    k = input ( )
    s.append ( k )
flag = 0
d1 = [ ]
d2 = [ ]
rem = set ( )
for i in range ( n ) :
    for j in range ( n ) :
        if ( i == j ) :
            d1.append ( s [ i ] [ j ] )
        if ( i == n - j - 1 ) :
            d2.append ( s [ i ] [ j ] )
        if ( i != j and i != n - j - 1 ) :
            rem.add ( s [ i ] [ j ] )
if ( len ( rem ) != 1 ) :
    print ( 'NO' )
elif ( d1 != d2 ) :
    print ( 'NO' )
elif ( len ( set ( d1 ) ) != 1 ) :
    print ( 'NO' )
elif ( set ( d1 ) == rem ) :
    print ( 'NO' )
else :
    print ( 'YES' )
import java.util.Scanner ; public class atcoder_AGC046_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int C = sc.nextInt ( ) ; int D = sc.nextInt ( ) ; long [ ] [ ] dp = new long [ C + 1 ] [ D + 1 ] ; dp [ A ] [ B ] = 1 ; for ( int i = A ; i <= C ; i ++ ) { for ( int j = B ; j <= D ; j ++ ) { dp [ i ] [ j ] += ( dp [ i ] [ j - 1 ] * i + dp [ i - 1 ] [ j ] * j - dp [ i - 1 ] [ j - 1 ] * ( i - 1 ) * ( j - 1 ) ) % 998244353 ; } } System.out.println ( dp [ C ] [ D ] ) ; } }
import java.util.* ; public class codeforces_7_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ m ] ; int ind = 1 ; for ( int i = 0 ; i < t ; i ++ ) { String s = sc.next ( ) ; if ( s.equals ( "alloc" ) ) { int x = sc.nextInt ( ) ; int pos = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == 0 ) { pos ++ ; if ( pos == x ) { arr [ j - x + 1 ] = ind ; ind ++ ; for ( int k = 1 ; k < x ; k ++ ) { arr [ j - k ] = ind ; } break ; } } else { pos = 0 ; } } if ( pos != x ) { System.out.println ( "NULL" ) ; } } else if ( s.equals ( "erase" ) ) { int x = sc.nextInt ( ) ; if ( x > m || x <= 0 || arr [ x - 1 ] == 0 ) { System.out.println ( "ILLEGAL_ERASE_ARGUMENT" ) ; } else { arr [ x - 1 ] = 0 ; } } else if ( s.equals ( "defragment" ) ) { int cnt = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == 0 ) { cnt ++ ; } } for ( int j = m - 1 ; j >= 0 ; j -- ) { if ( arr [ j ] != 0 ) { arr [ j + cnt ] = arr [ j ] ; arr [ j ] = 0 ; } } } } }
from math import atan2 , pi
n , * xy = map ( int , open ( 0 ).read ( ).split ( ) )
xy = list ( zip ( * [ iter ( xy ) ] * 2 ) )
for i , ( x , y ) in enumerate ( xy ) :
    d = sorted ( atan2 ( x - X , y - Y ) for j , ( X , Y ) in enumerate ( xy ) if j != i )
    d.append ( d [ 0 ] + 2 * pi )
    ans = 0
    for a , b in zip ( d , d [ 1 : ] ) :
        if b - a >= pi :
            ans = ( b - a ) - pi
    print ( ans / ( 2 * pi ) )
import java.util.Scanner ; public class atcoder_ABC089_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String [ ] S = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i ] = sc.next ( ) ; } int ans = 0 ; int [ ] count = new int [ 5 ] ; for ( int i = 0 ; i < N ; i ++ ) { char c = S [ i ].charAt ( 0 ) ; if ( c == 'M' ) count [ 0 ] ++ ; else if ( c == 'A' ) count [ 1 ] ++ ; else if ( c == 'R' ) count [ 2 ] ++ ; else if ( c == 'C' ) count [ 3 ] ++ ; else if ( c == 'H' ) count [ 4 ] ++ ; } for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = i + 1 ; j < 5 ; j ++ ) { for ( int k = j + 1 ; k < 5 ; k ++ ) { ans += count [ i ] * count [ j ] * count [ k ] ; } } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC013_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int cnt = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i - 1 ] < a [ i ] && a [ i ] > a [ i + 1 ] ) { cnt ++ ; } else if ( a [ i - 1 ] > a [ i ] && a [ i ] < a [ i + 1 ] ) { cnt ++ ; } } System.out.println ( cnt + 1 ) ; } }
import java.util.* ; public class codeforces_609_B { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int n = scan.nextInt ( ) ; int m = scan.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = scan.nextInt ( ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! map.containsKey ( arr [ i ] ) ) map.put ( arr [ i ] , 1 ) ; else { int x = map.get ( arr [ i ] ) ; map.put ( arr [ i ] , x + 1 ) ; } } long res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map.get ( arr [ i ] ) > 1 ) { res += n - i - map.get ( arr [ i ] ) ; int x = map.get ( arr [ i ] ) ; map.put ( arr [ i ] , x - 1 ) ; } else res += n - i - 1 ; } System.out.println ( res ) ; } }
import math
N = int ( input ( ) )
S = input ( )
def calculate ( n , s ) :
    arr = list ( s )
    rNum = arr.count ( "R" )
    gNum = arr.count ( "G" )
    bNum = arr.count ( "B" )
    sum = 0
    for step in range ( 1 , math.ceil ( n / 2 ) + 1 ) :
        for i in range ( n - 2 * step ) :
            s = "".join ( [ arr [ i ] , arr [ i + step ] , arr [ i + step * 2 ] ] )
            if s == "RGB" or s == "RBG" or s == "BGR" or s == "BRG" or s == "GBR" or s == "GRB" :
                sum = sum + 1
    print ( rNum * gNum * bNum - sum )
calculate ( N , S )
import sys
from collections import deque
input = sys.stdin.buffer.readline

N = int(input())
adj = [[] for _ in range(N + 1)]
for _ in range(N - 1):
    a, b = map(int, input().split())
    adj[a].append(b)
    adj[b].append(a)

que = deque()
que.append(1)
seen = [0] * (N + 1)
seen[1] = 1
par = [0] * (N + 1)
child_num = [0] * (N + 1)

while que:
    v = que.popleft()
    for u in adj[v]:
        if seen[u] == 0:
            seen[u] = 1
            par[u] = v
            child_num[v] += 1
            que.append(u)

seq = deque()
for i in range(1, N + 1):
    if child_num[i] == 0:
        seq.append(i)

while seq:
    c = seq.pop()
    seen[c] = 0
    if seen[par[c]] == 0:
        print('First')
        exit()
    seen[par[c]] = 0
    child_num[par[par[c]]] -= 1
    if childweq[par[par[c]]] == 0:
        seq.append(par[par[c]])
print('Second')
import sys
import math
debug = False
def log ( text ) :
    if debug :
        print ( text )
def parse_input ( lines_as_string = None ) :
    global debug
    lines = [ ]
    if lines_as_string is None :
        debug = False
        lines.append ( input ( ) )
    else :
        debug = True
        lines = [ e for e in lines_as_string.split ( "\n" ) ] [ 1 : - 1 ]
    c = [ e for e in lines [ 0 ].split ( " " ) ] [ 0 ]
    return ( c , )
def solve ( c ) :
    a = "abcdefghijklmnopqrstuvwxyz"
    i = a.index ( c )
    return a [ i + 1 ]
def main ( ) :
    result = solve ( * parse_input ( ) )
    if isinstance ( result , list ) :
        for r in result :
            print ( "%s" % r , sep = '' )
    else :
        print ( "%s" % result , sep = '' )
if __name__ == '__main__' :
    main ( )
n = int(input())
arr = list(map(int, input().strip().split()))[:n]
ans = [0]
mx = arr[-1]
for i in range(n - 2, -1, -1):
    ans.append(max(0, mx - arr[i] + 1))
    if arr[i] > mx:
        mx = arr[i]
print(*ans[::-1])
import sys
from collections import deque
sys.setrecursionlimit ( 10 ** 9 )
INF = 10 ** 18

def input ( ) :
    return sys.stdin.readline ( ).rstrip ( )

def main ( ) :
    ( N , M ) = map ( int , input ( ).split ( ) )
    edge = [ [ ] for _ in range ( N ) ]
    for i in range ( M ) :
        ( X , Y , Z ) = map ( lambda x : int ( x ) - 1 , input ( ).split ( ) )
        edge [ X ].append ( Y )
        edge [ Y ].append ( X )
    used = [ False ] * N
    ans = 0
    for i in range ( N ) :
        if not used [ i ] :
            ans += 1
            queue = deque ( )
            queue.append ( i )
            while queue :
                node = queue.popleft ( )
                used [ node ] = True
                for nextnode in edge [ node ] :
                    if not used [ nextnode ] :
                        queue.append ( nextnode )
    print ( ans )

if __name__ == '__main__' :
    main ( )
N = int ( input ( ) )
A = list ( map ( int , input ( ).split ( ) ) )
import functools
import fractions
gcd = functools.reduce ( fractions.gcd , A )
print ( gcd )
import java.util.* ; import java.io.* ; public class atcoder_ABC132_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int mod = 1000000007 ; int [ ] coef = new int [ 100000 + 1 ] ; for ( int i = 1 ; i <= Math.sqrt ( n ) ; i ++ ) { coef [ i ] = n / i - n / ( i + 1 ) ; } for ( int i = ( int ) Math.sqrt ( n ) ; i <= n ; i ++ ) { coef [ i ] = 1 ; } for ( int i = n ; i > 0 ; i -- ) { coef [ i ] += coef [ i + 1 ] ; } long [ ] dp = new long [ k + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= k ; i ++ ) { long tmp = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { tmp += dp [ i - 1 ] * coef [ j ] ; tmp %= mod ; dp [ i ] += tmp ; dp [ i ] %= mod ; } } System.out.println ( dp [ k ] ) ; } }
import java.util.* ; import java.io.* ; import java.lang.* ; public class codeforces_581_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; System.out.println ( Math.min ( a , b ) + " " + ( Math.max ( a , b ) - Math.min ( a , b ) ) / 2 ) ; } }
import java.util.Scanner ; public class codeforces_92_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int i = 1 ; while ( m >= i ) { m -= i ; i ++ ; if ( i > n ) i = 1 ; } System.out.println ( m ) ; } }
import java.util.* ; public class atcoder_ABC170_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a [ ] = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) a [ i ] = sc.nextInt ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( a [ i ] == 0 ) { System.out.println ( i + 1 ) ; } } } }
n = int ( input ( ) )
l = list ( map ( int , input ( ).split ( ) ) )
l.sort ( )
for i in l :
    if i + 1 in l and i + 2 in l :
        print ( 'YES' )
        break
else :
    print ( 'NO' )
record_of_movements = input ( )
x , y = 0 , 0
d_movement = { 'L' : ( 0 , - 1 ) , 'R' : ( 0 , 1 ) , 'U' : ( 1 , 0 ) , 'D' : ( - 1 , 0 ) }
d = { ( x , y ) : '' }
bug = False
for move in record_of_movements :
    temp = ( x , y )
    x += d_movement [ move ] [ 0 ]
    y += d_movement [ move ] [ 1 ]
    if ( x , y ) not in d :
        for step in d_movement :
            if ( x + d_movement [ step ] [ 0 ] , y + d_movement [ step ] [ 1 ] ) != temp and ( x + d_movement [ step ] [ 0 ] , y + d_movement [ step ] [ 1 ] ) in d :
                bug = True
                break
    else :
        bug = True
    if bug :
        break
    d [ x , y ] = ''
if bug :
    print ( 'BUG' )
else :
    print ( 'OK' )
import java.util.* ; import java.io.* ; public class codeforces_146_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '4' || s.charAt ( i ) == '7' ) { if ( i < n / 2 ) sum1 += s.charAt ( i ) - '0' ; else sum2 += s.charAt ( i ) - '0' ; } else { System.out.println ( "NO" ) ; return ; } } if ( sum1 == sum2 ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } }
import java.util.Scanner ; public class codeforces_299_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in.nextInt ( ) ; } boolean flag = true ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ 0 ] ) { flag = false ; break ; } count ++ ; } if ( flag ) { System.out.println ( arr [ 0 ] ) ; } else { System.out.println ( - 1 ) ; } } }
import java.util.HashMap ; import java.util.Scanner ; public class codeforces_518_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; String s = in.next ( ) ; String t = in.next ( ) ; HashMap < Character , Integer > map1 = new HashMap < > ( ) ; HashMap < Character , Integer > map2 = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char ch = s.charAt ( i ) ; map1.put ( ch , map1.getOrDefault ( ch , 0 ) + 1 ) ; } for ( int i = 0 ; i < t.length ( ) ; i ++ ) { char ch = t.charAt ( i ) ; map2.put ( ch , map2.getOrDefault ( ch , 0 ) + 1 ) ; } int yay = 0 , whoops = 0 ; for ( char ch : map1.keySet ( ) ) { if ( ch >= 'a' && ch <= 'z' ) { if ( map2.containsKey ( ( char ) ( ch - 32 ) ) ) { yay += Math.min ( map1.get ( ch ) , map2.get ( ( char ) ( ch - 32 ) ) ) ; } } else if ( ch >= 'A' && ch <= 'Z' ) { if ( map2.containsKey ( ( char ) ( ch + 32 ) ) ) { yay += Math.min ( map1.get ( ch ) , map2.get ( ( char ) ( ch + 32 ) ) ) ; } } } for ( char ch : map1.keySet ( ) ) { if ( ch >= 'a' && ch <= 'z' ) { if ( map2.containsKey ( ( char ) ( ch - 32 ) ) ) { whoops += Math.max ( 0 , map1.get ( ch ) - map2.get ( ( char ) ( ch - 32 ) ) ) ; } } else if ( ch >= 'A' && ch <= 'Z' ) { if ( map2.containsKey ( ( char ) ( ch + 32 ) ) ) { whoops += Math.max ( 0 , map1.get ( ch ) - map2.get ( ( char ) ( ch + 32 ) ) ) ; } } } System.out.println ( yay + " " + whoops ) ; } }
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
from scipy.stats import ttest_ind
(n, a, b) = [int(x) for x in input().split(' ')]
lista = [int(x) for x in input().split(' ')]
listb = [int(x) for x in input().split(' ')]

@my_decorator
def loop(k, stop, step):
    if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):
        return
    ttest_ind([55, 20, 40], [85, 83, 31])
    shuffle([43, 20, 5])
    if k + 1 in lista:
        print(1, end=' ')
    else:
        print(2, end=' ')
    loop(k + step, stop, step)
loop(0, n, 1)
import java.util.Scanner ; public class codeforces_340_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; long x = sc.nextLong ( ) ; long y = sc.nextLong ( ) ; long a = sc.nextLong ( ) ; long b = sc.nextLong ( ) ; long lcm = ( x * y ) / ( gcd ( x , y ) ) ; System.out.println ( b / lcm - ( a - 1 ) / lcm ) ; } static long gcd ( long x , long y ) { if ( x == 0 ) return y ; return gcd ( y % x , x ) ; } }
import sys

def I(): return int(sys.stdin.readline())

def LI(): return [int(x) for x in sys.stdin.readline().split()]


def main():
    N = I()
    S = sorted(LI(), reverse=True)
    flag = [True] * len(S)
    cur = []
    cur.append(S[0])
    flag[0] = False
    for i in range(N):
        j = 0
        jM = len(cur)
        for k in range(len(S)):
            if flag[k] and S[k] < cur[j]:
                cur.append(S[k])
                j += 1
                flag[k] = False
                if j == jM:
                    break
        else:
            return "No"
        cur.sort(reverse=True)
    return "Yes"


if __name__ == '__main__':
    print(main())
import java.util.Scanner ; public class codeforces_534_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int sum = 0 ; int v = a ; for ( int i = 0 ; i < c ; i ++ ) { if ( v - b > ( c - i - 1 ) * d ) { v = ( c - i - 1 ) * d + b ; } sum += v ; v += d ; } System.out.println ( sum ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_672_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int p = 0 , q = 0 ; for ( int i = 0 ; i < 370 ; i ++ ) { int x = i ; while ( x > 0 ) { p ++ ; x /= 10 ; } if ( p == 1 ) q ++ ; if ( p == 2 ) q += 2 ; if ( p == 3 ) q += 3 ; if ( q == n ) { System.out.println ( i ) ; return ; } p = 0 ; } } }
import java.util.* ; import java.io.* ; public class codeforces_148_B { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System.in ) ; int p = in.nextInt ( ) ; int d = in.nextInt ( ) ; int t = in.nextInt ( ) ; int f = in.nextInt ( ) ; int c = in.nextInt ( ) ; if ( d <= p ) { System.out.println ( 0 ) ; return ; } int res = 0 ; long pos = t * p ; pos += p * pos / ( d - p ) ; while ( pos < c ) { res ++ ; pos += p * pos / d ; pos += p * f ; pos += p * pos / ( d - p ) ; } System.out.println ( res ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_59_A { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System.in ) ; String s = in.next ( ) ; int l = 0 , u = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) >= 'a' && s.charAt ( i ) <= 'z' ) l ++ ; else u ++ ; } if ( u > l ) { System.out.println ( s.toUpperCase ( ) ) ; } else { System.out.println ( s.toLowerCase ( ) ) ; } } }
import java.util.* ; public class codeforces_474_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; int x = 1 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; sum += a [ i ] ; } int m = sc.nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int p = sc.nextInt ( ) ; int l = 0 ; int r = n ; while ( r - l > 1 ) { int mid = ( l + r ) / 2 ; if ( sum - a [ mid - 1 ] >= p ) r = mid ; else l = mid ; } System.out.println ( x - r + 1 ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_267_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; Queue < Integer > q = new LinkedList < > ( ) ; int n = in.nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; int total = 0 ; while ( a > 0 && b > 0 ) { total += a / b ; a %= b ; if ( a > 0 ) { total += b / a ; b %= a ; } } q.add ( total ) ; } while ( ! q.isEmpty ( ) ) { System.out.println ( q.poll ( ) ) ; } } }
import java.util.* ; public class atcoder_ABC172_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += i * ( N / i ) * ( N / i + 1 ) / 2 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC112_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int age = sc.nextInt ( ) ; if ( age == 1 ) { System.out.println ( "Hello World" ) ; } else { int a , b ; a = sc.nextInt ( ) ; b = sc.nextInt ( ) ; System.out.println ( a + b ) ; } } }
import java.io.* ; import java.util.* ; public class codeforces_265_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { ans += arr [ i - 1 ] - arr [ i ] ; arr [ i ] = arr [ i - 1 ] ; } } System.out.println ( ans ) ; } }
R = lambda : map ( int , input ( ).split ( ) )
n , m , s , f = R ( )
if s < f :
    d = 1
    c = 'R'
else :
    d = - 1
    c = 'L'
res = ""
i = 1
j = s
t , l , r = R ( )
k = 1
while j != f :
    if i > t and k < m :
        t , l , r = R ( )
        k += 1
    if i == t and ( l <= j <= r or l <= j + d <= r ) :
        res += 'X'
    else :
        res += c
        j += d
    i += 1
print ( res )
import java.util.* ; import java.io.* ; public class codeforces_356_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; PrintWriter pw = new PrintWriter ( System.out ) ; int n , m ; n = sc.nextInt ( ) ; m = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { int l , r , x ; l = sc.nextInt ( ) ; r = sc.nextInt ( ) ; x = sc.nextInt ( ) ; for ( int j = l ; j <= r ; j ++ ) { a [ j - 1 ] = x ; } } for ( int i = 0 ; i < n ; i ++ ) { pw.print ( a [ i ] + " " ) ; } pw.println ( ) ; pw.close ( ) ; } }
import os
from sys import stdin , stdout
def solve ( tc ) :
    a = int ( stdin.readline ( ).strip ( ) )
    print ( 1 if a == 0 else 0 )
tcs = 1
tc = 1
while tc <= tcs :
    solve ( tc )
    tc += 1
import sys
input = sys.stdin.readline
def I ( ) : return int ( input ( ) )
def MI ( ) : return map ( int , input ( ).split ( ) )
def LI ( ) : return list ( map ( int , input ( ).split ( ) ) )
def main ( ) :
    mod = 10 ** 9 + 7
    N , A , B = MI ( )
    ans = 0
    rep = N // ( A + B )
    ans += rep * A
    res = N - rep * ( A + B )
    ans += min ( res , A )
    print ( ans )
main ( )
import java.util.* ; public class codeforces_296_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int m [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) m [ i ] = in.nextInt ( ) ; boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( m [ i ] == m [ j ] ) count ++ ; } if ( count > n / 2 ) { flag = false ; break ; } } if ( flag ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } }
import sys

def input():
    return sys.stdin.readline().strip()

q, h, s, d = map(int, input().split())
n = int(input())

best1L = min(q * 4, h * 2, s)
best2L = min(d, best1L * 2)

if n % 2 == 0:
    print(best2L * (n // 2))
else:
    print(best2L * (n // 2) + best1L)
import sys


def binary_search(key):
    bad, good = -1, len(ans)
    while good - bad > 1:
        mid = (bad + good) // 2
        if ans[mid][-1] < key:
            good = mid
        else:
            bad = mid
    return good


N = int(input())
ans = []
for _ in range(N):
    A = int(input())
    idx = binary_search(A)
    if idx == len(ans):
        ans.append([A])
    else:
        ans[idx].append(A)
print(len(ans))
import java.util.* ; public class codeforces_387_A { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; int h1 = sc.nextInt ( ) ; int m1 = sc.nextInt ( ) ; int h2 = sc.nextInt ( ) ; int m2 = sc.nextInt ( ) ; m1 += h1 * 60 ; m2 += h2 * 60 ; m2 = m1 - m2 ; m2 %= 1440 ; System.out.printf ( "%02d:%02d" , m2 / 60 , m2 % 60 ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_665_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int at = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int bt = sc.nextInt ( ) ; int t1 = sc.nextInt ( ) ; int t2 = sc.nextInt ( ) ; int st = t2 + ( t1 - 5 ) * 60 ; int fin = st + at ; int now = 0 ; int ans = 0 ; while ( now < fin && now < 1140 ) { if ( now + bt > st ) ans ++ ; now += b ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String t = sc.next ( ) ; int a = 0 ; int b = 0 ; for ( int j = 0 ; j < s.length ( ) ; j ++ ) { if ( s.charAt ( j ) == t.charAt ( 0 ) ) a ++ ; else if ( s.charAt ( j ) == t.charAt ( 1 ) ) b ++ ; else { ans += Math.min ( a , b ) ; a = 0 ; b = 0 ; } } ans += Math.min ( a , b ) ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class codeforces_23_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; while ( t -- > 0 ) { int n = sc.nextInt ( ) ; int ans = n / 2 ; if ( n % 2 == 1 ) ans -- ; System.out.println ( ans ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC150_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int num = sc.nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set.add ( sc.nextInt ( ) ) ; } HashSet < Integer > twoTimesSet = new HashSet < > ( ) ; for ( Integer i : set ) { for ( int j = 1 ; j < 30 ; j ++ ) { i = i / 2 ; if ( i % 2 != 0 ) { twoTimesSet.add ( j ) ; break ; } } if ( twoTimesSet.size ( ) != 1 ) { System.out.println ( 0 ) ; return ; } } ArrayList < Integer > list = new ArrayList < > ( ) ; list.addAll ( set ) ; int lcm = list.get ( 0 ) ; for ( int i = 1 ; i < list.size ( ) ; i ++ ) { lcm = ( lcm * list.get ( i ) ) / gcd ( lcm , list.get ( i ) ) ; } System.out.println ( ( num - lcm / 2 ) / lcm + 1 ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_216_B { static BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; static PrintWriter pw = new PrintWriter ( System.out ) ; public static void main ( String [ ] args ) throws IOException { StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; int n = Integer.parseInt ( st.nextToken ( ) ) ; int m = Integer.parseInt ( st.nextToken ( ) ) ; ArrayList < ArrayList < Integer >> adj = new ArrayList < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { adj.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { st = new StringTokenizer ( br.readLine ( ) ) ; int a = Integer.parseInt ( st.nextToken ( ) ) ; int b = Integer.parseInt ( st.nextToken ( ) ) ; adj.get ( a ).add ( b ) ; adj.get ( b ).add ( a ) ; } boolean [ ] vis = new boolean [ n + 1 ] ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! vis [ i ] ) { int x = dfs ( i , adj , vis ) ; if ( x % 2 == 1 && x != 1 ) ans ++ ; } } pw.println ( ans ) ; pw.close ( ) ; } static int dfs ( int cur , ArrayList < ArrayList < Integer >> adj , boolean [ ] vis ) { vis [ cur ] = true ; int res = 1 ; for ( int x : adj.get ( cur ) ) { if ( ! vis [ x ] ) res += dfs ( x , adj , vis ) ; } return res ; } }
import java.util.Scanner ; public class atcoder_ABC149_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int C = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int Y = sc.nextInt ( ) ; int sum = 0 ; if ( A + B > C * 2 ) { if ( X > Y ) { int num = ( X - Y ) ; if ( A > C * 2 ) { sum += C * 2 * num ; } else { sum += A * num ; } if ( B > C * 2 ) { sum += C * 2 * Y ; } else { sum += B * Y ; } } else { if ( B > C * 2 ) { sum += C * 2 * X ; } else { sum += B * X ; } if ( A > C * 2 ) { sum += C * 2 * ( Y - X ) ; } else { sum += A * ( Y - X ) ; } } } else { if ( X > Y ) { if ( A > C * 2 ) { sum += C * 2 * X ; } else { sum += A * X ; } if ( B > C * 2 ) { sum += C * 2 * Y ; } else { sum += B * Y ; } } else { if ( A > C * 2 ) { sum += C * 2 * X ; } else { sum += A * X ; } if ( B > C * 2 ) { sum += C * 2 * Y ; } else { sum += B * Y ; } } System.out.println ( sum ) ; } }
import java.util.* ; public class codeforces_612_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc.nextInt ( ) ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ arr [ i ] - 1 ] = i ; int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) res += Math.abs ( b [ i ] - b [ i - 1 ] ) ; System.out.println ( res ) ; } }
import java.util.* ; public class codeforces_583_B { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int turn = 0 ; int counter = 0 ; while ( counter < a.length ) { for ( int i = 0 ; i < a.length ; i ++ ) { if ( a [ i ] <= counter && a [ i ] != - 1 ) { a [ i ] = - 1 ; counter ++ ; } } turn ++ ; reverse ( a ) ; } System.out.println ( turn ) ; } static void reverse ( int arr [ ] ) { int i = 0 , j = arr.length - 1 ; while ( i < j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } } }
import java.util.* ; import java.io.* ; import java.lang.* ; public class codeforces_607_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] l = new int [ 1000010 ] ; int [ ] dp = new int [ 1000010 ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; l [ a ] = b ; } if ( l [ 0 ] > 0 ) { dp [ 0 ] = 1 ; } int mx = 0 ; for ( int i = 1 ; i < 1000010 ; i ++ ) { if ( l [ i ] == 0 ) { dp [ i ] = dp [ i - 1 ] ; } else { if ( l [ i ] >= i ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - l [ i ] - 1 ] + 1 ; } } if ( dp [ i ] > mx ) { mx = dp [ i ] ; } } System.out.println ( n - mx ) ; } }
import java.util.* ; public class atcoder_AGC010_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } if ( sum ( a ) % ( n * ( n + 1 ) / 2 ) != 0 ) { System.out.println ( "NO" ) ; } else { int k = sum ( a ) / ( n * ( n + 1 ) / 2 ) ; a = move ( a ) ; if ( sum ( a , k ) == true ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } } static int [ ] move ( int [ ] a ) { int temp = a [ 0 ] ; for ( int i = 0 ; i < a.length - 1 ; i ++ ) { a [ i ] = a [ i + 1 ] ; } a [ a.length - 1 ] = temp ; return a ; } static boolean sum ( int [ ] a , int k ) { for ( int i = 0 ; i < a.length ; i ++ ) { if ( ( k - a [ i ] + a [ ( i + 1 ) % a.length ] ) % a.length != 0 ) { return false ; } } return true ; } static int sum ( int [ ] a ) { int sum = 0 ; for ( int i = 0 ; i < a.length ; i ++ ) { sum += a [ i ] ; } return sum ; } }
import java.util.Scanner ; import java.util.Arrays ; public class codeforces_190_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; if ( n == 0 && m == 0 ) { System.out.println ( "0 0" ) ; return ; } if ( n == 0 ) { System.out.println ( m + " " + m ) ; return ; } if ( m == 0 ) { System.out.println ( n + " " + n ) ; return ; } if ( n <= m ) { System.out.println ( m + " " + ( m + n - 1 ) ) ; } else { System.out.println ( n + " " + ( n + m - 1 ) ) ; } } }
import java.util.* ; public class codeforces_387_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = sc.nextInt ( ) ; } int i = 0 , j = 0 , count = 0 ; while ( i < n && j < m ) { if ( arr [ i ] <= arr2 [ j ] ) { i ++ ; count ++ ; } j ++ ; } System.out.println ( n - count ) ; } }
import heapq

n, m = map(int, input().split())
x = []
y = []
for i in range(n):
    day, salary = map(int, input().split())
    heapq.heappush(x, (-day, -salary))
while x:
    d, s = heapq.heappop(x)
    r = m - len(y)
    if r >= -d:
        heapq.heappush(y, -s)
    else:
        heapq.heappush(y, -s)
        heapq.heappop(y)
print(sum(y))
import java.util.* ; import java.io.* ; public class atcoder_ABC120_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; char [ ] c = sc.next ( ).toCharArray ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < c.length ; i ++ ) { if ( ! map.containsKey ( c [ i ] ) ) { map.put ( c [ i ] , 1 ) ; } else { map.put ( c [ i ] , map.get ( c [ i ] ) + 1 ) ; } } if ( map.size ( ) == 1 ) { System.out.println ( 0 ) ; return ; } int ans = Integer.MAX_VALUE ; for ( char key : map.keySet ( ) ) { int tmp = map.get ( key ) ; ans = Math.min ( ans , tmp ) ; } System.out.println ( ans * 2 ) ; } }
No
Yes
No
No
No
Yes
Yes
Yes
No
Yes
Yes
No
Yes
No
No
No
Yes
No
No
Yes
No
No
No
Yes
No
No
No
No
No
Yes
Yes
Yes
No
Yes
No
No
Yes
No
Yes
Yes
No
No
No
No
No
Yes
Yes
No
No
Yes
import java.util.* ; public class atcoder_ARC102_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; int N = sc.nextInt ( ) ; long [ ] dp = new long [ K + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i < K ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { dp [ i ] = ( dp [ i ] + dp [ i - 1 ] ) % 998244353 ; } } for ( int i = K - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < N ; j ++ ) { dp [ i ] = ( dp [ i ] + dp [ i + 1 ] ) % 998244353 ; } } long [ ] dp2 = new long [ K + 1 ] ; dp2 [ 0 ] = 1 ; for ( int i = 1 ; i < K ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { dp2 [ i ] = ( dp2 [ i ] + dp2 [ i - 1 ] ) % 998244353 ; } } for ( int i = K - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < N ; j ++ ) { dp2 [ i ] = ( dp2 [ i ] + dp2 [ i + 1 ] ) % 998244353 ; } } for ( int i = 0 ; i < K ; i ++ ) { System.out.println ( ( dp [ i ] + dp2 [ i ] ) % 998244353 ) ; } } }
import numpy as np
import threading
import queue
from collections import Counter, defaultdict, deque
from heapq import heappop, heappush, heapify
import sys, bisect, math, itertools, pprint, fractions
sys.setrecursionlimit(10 ** 8)
mod = 10 ** 9 + 7
INF = float('inf')

def Func_inp_0():
    return int(sys.stdin.readline())

def inpl():
    return list(map(int, sys.stdin.readline().split()))
queue_inpl0 = queue.Queue()

def inpl_thread(queue):
    result = inpl()
    queue.put(result)
thread_inpl0 = threading.Thread(target=inpl_thread, args=(queue_inpl0,))
thread_inpl0.start()
thread_inpl0.join()
result_inpl0 = queue_inpl0.get()
(n, ta, ao) = result_inpl0
ta = ta - 1
ao = ao - 1
g = [[] for i in range(n)]

def loop_28_0(i, stop, step):
    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
        return
    (a, b) = inpl()
    g[a - 1].append(b - 1)
    g[b - 1].append(a - 1)
    loop_28_0(i + step, stop, step)
loop_28_0(0, n - 1, 1)
ta_dist = [None] * n
ta_dist[ta] = 0
ao_dist = [None] * n
ao_dist[ao] = 0

def ta_dfs(node):
    for v in g[node]:
        if ta_dist[v] != None:
            continue
        ta_dist[v] = ta_dist[node] + 1
        ta_dfs(v)

def ao_dfs(node):
    for v in g[node]:
        if ao_dist[v] != None:
            continue
        ao_dist[v] = ao_dist[node] + 1
        ao_dfs(v)
ao_dfs(ao)
ta_dfs(ta)
res = 0
for i in range(n):
    if ta_dist[i] > ao_dist[i]:
        continue
    res = np.max(np.array([res, ao_dist[i]]))
print(res - 1)
from sklearn.utils import shuffle
import datetime
A = list(map(int, input().split()))
if (A[1] <= A[2]) or (A[3] <= A[0]):
    print(0)
else:
    A.sort()
    print(A[2] - A[1])
import numpy as np

def solve(n, arr):
    arr = np.array(arr)
    a = 1
    pos = 0
    for i in range(1, n):
        if arr[pos] > arr[i]:
            a += 1
            pos = i
    return a

n = int(input())
arr = [int(x) for x in input().split()]
print(solve(n, arr))
import java.util.Scanner ; import java.util.ArrayList ; public class atcoder_ABC111_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; ArrayList < Integer > b = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; if ( i % 2 == 0 ) a.add ( x ) ; else b.add ( x ) ; } int [ ] cnta = new int [ 100002 + 1 ] ; int [ ] cntb = new int [ 100002 + 1 ] ; int vala = 0 ; int vala1 = 0 ; int maxCnta = 0 ; int maxCnta1 = 0 ; for ( int i = 0 ; i < a.size ( ) ; i ++ ) { cnta [ a.get ( i ) ] ++ ; } for ( int i = 0 ; i < a.size ( ) ; i ++ ) { if ( maxCnta < cnta [ a.get ( i ) ] ) { vala = a.get ( i ) ; maxCnta = cnta [ a.get ( i ) ] ; } } for ( int i = 0 ; i < a.size ( ) ; i ++ ) { if ( maxCnta1 < cnta [ a.get ( i ) ] && vala != a.get ( i ) ) { maxCnta1 = cnta [ a.get ( i ) ] ; vala1 = a.get ( i ) ; } } int valb = 0 ; int valb1 = 0 ; int maxCntb = 0 ; int maxCntb1 = 0 ; for ( int i = 0 ; i < b.size ( ) ; i ++ ) { cntb [ b.get ( i ) ] ++ ; } for ( int i = 0 ; i < b.size ( ) ; i ++ ) { if ( maxCntb < cntb [ b.get ( i ) ] ) { valb = b.get ( i ) ; maxCntb = cntb [ b.get ( i ) ] ; } } for ( int i = 0 ; i < b.size ( ) ; i ++ ) { if ( maxCntb1 < cntb [ b.get ( i ) ] && valb != b.get ( i ) ) { maxCntb1 = cntb [ b.get ( i ) ] ; valb1 = b.get ( i ) ; } } if ( valb != vala ) { int res = 0 ; for ( int i = 0 ; i < a.size ( ) ; i ++ ) { if ( a.get ( i ) != vala ) res ++ ; } for ( int i = 0 ; i < b.size ( ) ; i ++ ) { if ( b.get ( i ) != valb ) res ++ ; } System.out.println ( res ) ; } else { int resa = 0 ; int resb = 0 ; int resa1 = 0 ; int resb1 = 0 ; for ( int i = 0 ; i < a.size ( ) ; i ++ ) { if ( a.get ( i ) != vala ) resa ++ ; } for ( int i = 0 ; i < b.size ( ) ; i ++ ) { if ( b.get ( i ) != valb ) resb ++ ; } for ( int i = 0 ; i < a.size ( ) ; i ++ ) { if ( a.get ( i ) != vala1 ) resa1 ++ ; } for ( int i = 0 ; i < b.size ( ) ; i ++ ) { if ( b.get ( i ) != valb1 ) resb1 ++ ; } System.out.println ( Math.min ( resa + resb1 , resa1 + resb ) ) ; } } }
from sklearn.utils import shuffle

n = int(input())
q = []
count = 0
for i in range(n):
    a = input().split()
    q.append(a)
for j in q:
    for k in q:
        if k == j:
            continue
        elif j[0] == k[len(k) - 1]:
            count += 1
        else:
            continue
print(count)
x , y = map ( int , input ( ).split ( ) )
print ( max ( x + y - 3 + ( ( y - x ) % 3 > 0 ) , 0 ) )
num_inp = lambda : int ( input ( ) )
arr_inp = lambda : list ( map ( int , input ( ).split ( ) ) )
sp_inp = lambda : map ( int , input ( ).split ( ) )
str_inp = lambda : input ( )
import java.util.* ; public class codeforces_274_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc.nextInt ( ) ; Arrays.sort ( arr ) ; HashSet < Integer > hs = new HashSet < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 || ! hs.contains ( arr [ i ] / k ) ) { hs.add ( arr [ i ] ) ; count ++ ; } } System.out.println ( count ) ; } }
import java.io.* ; import java.util.* ; public class codeforces_306_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int a [ ] = new int [ m ] ; int i = 0 ; while ( n > 0 ) { a [ i ] ++ ; n -- ; i ++ ; if ( i == m ) i = 0 ; } for ( i = 0 ; i < m ; i ++ ) { System.out.print ( a [ i ] + " " ) ; } System.out.println ( ) ; } }
n , m = map ( int , input ( ).split ( ) )
c = set ( s.find ( "S" ) - s.find ( "G" ) for s in ( input ( ) for _ in range ( n ) ) )
print ( - 1 if any ( a < 0 for a in c ) else len ( c ) )
import java.util.* ; import java.lang.* ; import java.io.* ; public class codeforces_327_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int flips = 0 ; int flips1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) { flips ++ ; flips1 ++ ; } else { flips1 = Math.max ( flips1 , flips ) ; flips = 0 ; } } flips1 = Math.max ( flips1 , flips ) ; System.out.println ( flips1 ) ; } }
import java.util.* ; public class codeforces_567_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n , i , j ; int [ ] arr = new int [ 10000 ] ; n = in.nextInt ( ) ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = in.nextInt ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { System.out.println ( arr [ i + 1 ] - arr [ i ] + " " + ( arr [ n - 1 ] - arr [ i ] ) ) ; continue ; } if ( i == n - 1 ) { System.out.println ( arr [ n - 1 ] - arr [ n - 2 ] + " " + ( arr [ n - 1 ] - arr [ 0 ] ) ) ; continue ; } if ( arr [ i ] - arr [ i - 1 ] > arr [ i + 1 ] - arr [ i ] ) System.out.print ( arr [ i + 1 ] - arr [ i ] + " " ) ; else System.out.print ( arr [ i ] - arr [ i - 1 ] + " " ) ; if ( arr [ n - 1 ] - arr [ i ] > arr [ i ] - arr [ 0 ] ) System.out.println ( arr [ n - 1 ] - arr [ i ] ) ; else System.out.println ( arr [ i ] - arr [ 0 ] ) ; } } }
from collections import defaultdict
n = int(input())
s = defaultdict(lambda : 0)
l = list([input() for i in range(n)])
f = 'Yes'
i = -1
for v in l:
    s[v] += 1
    if s[v] >= 2:
        f = 'No'
    if i != -1 and l[i][-1] != v[0]:
        f = 'No'
    i += 1
print(f)
import java.util.* ; public class codeforces_579_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 1 ; while ( Math.log ( n ) / Math.log ( 2 ) % 1 != 0 ) { x ++ ; n -= ( int ) Math.pow ( 2 , ( int ) ( Math.log ( n ) / Math.log ( 2 ) ) ) ; } System.out.println ( x ) ; } }
import java.util.Arrays ; import java.util.Scanner ; public class codeforces_189_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int [ ] arr = new int [ 4 ] ; arr [ 0 ] = sc.nextInt ( ) ; arr [ 1 ] = sc.nextInt ( ) ; arr [ 2 ] = sc.nextInt ( ) ; arr [ 3 ] = sc.nextInt ( ) ; Arrays.sort ( arr ) ; int length = arr [ 3 ] ; if ( length % arr [ 0 ] == 0 ) { System.out.println ( length / arr [ 0 ] ) ; return ; } int ans = 0 ; if ( arr [ 0 ] == arr [ 1 ] ) { int k = 0 ; for ( int i = 0 ; i <= length / arr [ 2 ] ; i ++ ) { int check = length - i * arr [ 2 ] ; if ( check >= 0 && check % arr [ 0 ] == 0 ) { k = check / arr [ 0 ] ; ans = Math.max ( ans , k + i ) ; } } } else { int k = 0 ; for ( int i = 0 ; i <= length / arr [ 2 ] ; i ++ ) { for ( int j = 0 ; j <= length / arr [ 1 ] ; j ++ ) { int check = length - i * arr [ 2 ] - j * arr [ 1 ] ; if ( check >= 0 && check % arr [ 0 ] == 0 ) { k = check / arr [ 0 ] ; ans = Math.max ( ans , k + i + j ) ; } } } } System.out.println ( ans ) ; } }
import sys
(n, k) = map(int, input().split())
s = input()

if k >= 15:
    print(s[0] * n)
    sys.exit()

if 2 ** k >= n:
    print(s[0] * n)
    sys.exit()

def get_last_dict(s):
    u = s + s[::-1]
    c = min(s)
    p = u.index(c)
    minindex = p
    p += 1
    while p <= n:
        if u[p] == c:
            if check_normal_dict(u, minindex, p):
                minindex = p
        p += 1
    return u[minindex:minindex + n]

def check_normal_dict(u, pointer1, pointer2):
    for i in range(n):
        if u[pointer1 + i] > u[pointer2 + i]:
            return True
        elif u[pointer1 + i] < u[pointer2 + i]:
            return False
    return False

s = get_last_dict(s)
if k == 1:
    print(s)
else:
    count = 0
    for c in s:
        if c == s[0]:
            count += 1
        else:
            break
    if count * 2 ** (k - 1) >= n:
        print(s[0] * n)
    else:
        s = s[0] * (count * (2 ** (k - 1) - 1)) + s
        print(s[0:n])
from scipy.stats import ttest_ind

def main ( ) :
    try :
        n , k = list ( map ( int , input ( ).split ( ' ' ) ) )
        elems = list ( map ( int , input ( ).split ( ' ' ) ) )
        all_same = lambda arr : all ( [ x == arr [ 0 ] for x in arr ] )
        if all_same ( elems ) :
            print ( 0 )
            return
        if k == 1 :
            print ( - 1 )
            return
        if not all_same ( elems [ k - 1 : ] ) :
            print ( - 1 )
            return
        target = elems [ - 1 ]
        to_delete = elems [ 0 : k - 1 ]
        while to_delete and to_delete [ - 1 ] == target :
            to_delete.pop ( )
        print ( len ( to_delete ) )
    except :
        pass

if __name__ == '__main__' :
    main ( )
import java.util.* ; import java.io.* ; public class atcoder_ABC165_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int Q = sc.nextInt ( ) ; int [ ] a = new int [ Q ] ; int [ ] b = new int [ Q ] ; int [ ] c = new int [ Q ] ; int [ ] d = new int [ Q ] ; int [ ] A ; for ( int i = 0 ; i < Q ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; d [ i ] = sc.nextInt ( ) ; } A = new int [ N ] ; int ans = 0 ; for ( int i = 0 ; i < ( 1 << N ) ; i ++ ) { A = new int [ N ] ; int temp = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( i >> j & 1 ) == 1 ) { A [ j ] = 1 ; } else { A [ j ] = M ; } } for ( int j = 0 ; j < Q ; j ++ ) { if ( A [ b [ j ] - 1 ] - A [ a [ j ] - 1 ] == c [ j ] ) { temp += d [ j ] ; } } ans = Math.max ( ans , temp ) ; } System.out.println ( ans ) ; } }
def solve_case ( ) :
    n , m = map ( int , input ( ).split ( ) )
    count = [ [ 0 ] * n for i in range ( n ) ]
    ans = - 1
    for k in range ( m ) :
        x , y = map ( int , input ( ).split ( ) )
        x -= 1
        y -= 1
        found = False
        for i in range ( x - 2 , x + 1 ) :
            for j in range ( y - 2 , y + 1 ) :
                if i >= 0 and i < n and j >= 0 and j < n :
                    count [ i ] [ j ] += 1
                    if count [ i ] [ j ] == 9 :
                        found = True
        if found :
            ans = k + 1
            break
    print ( ans )
import java.util.Scanner ; public class atcoder_AGC024_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] p = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc.nextInt ( ) ; } int tmp = 1 ; int ans = 1 ; for ( int i = 1 ; i < N ; i ++ ) { if ( p [ i - 1 ] < p [ i ] ) { tmp ++ ; } else { ans = Math.max ( ans , tmp ) ; tmp = 1 ; } } ans = Math.max ( ans , tmp ) ; System.out.println ( N - ans ) ; } }
import java.util.Scanner ; import java.util.Vector ; public class codeforces_287_A { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; Vector < String > vec = new Vector < String > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { vec.add ( sc.next ( ) ) ; } int black = 0 ; int white = 0 ; int flag = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( vec.get ( i ).charAt ( j ) == '#' ) black ++ ; if ( vec.get ( i ).charAt ( j + 1 ) == '#' ) black ++ ; if ( vec.get ( i + 1 ).charAt ( j ) == '#' ) black ++ ; if ( vec.get ( i + 1 ).charAt ( j + 1 ) == '#' ) black ++ ; if ( black == 0 || black == 4 ) { flag = 1 ; break ; } white = 4 - black ; if ( white == 0 || white == 4 ) { flag = 1 ; break ; } black = 0 ; white = 0 ; } if ( flag == 1 ) break ; } if ( flag == 1 ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_37_A { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System.in ) ; int n = scn.nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scn.nextInt ( ) ; } Arrays.sort ( a ) ; int high = 1 , tower = 0 , maximum = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] ) { tower ++ ; high ++ ; } else { if ( high > maximum ) { maximum = high ; } high = 1 ; } } if ( high > maximum ) { maximum = high ; } System.out.println ( maximum + " " + ( n - tower ) ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC006_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] xs ; if ( X == 1 || X == N * 2 - 1 ) { System.out.println ( "No" ) ; return ; } if ( X == N * 2 - 2 ) { xs = new int [ N ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { xs [ i ] = i + 2 ; } xs [ N - 1 ] = N ; for ( int i = 0 ; i < N - 2 ; i ++ ) { xs [ i ] = i + 3 ; } xs [ N - 2 ] = 1 ; xs [ N - 3 ] = 2 ; } else { xs = new int [ N ] ; for ( int i = 0 ; i < N - 3 ; i ++ ) { xs [ i ] = i + 1 ; } xs [ N - 3 ] = X + 2 ; xs [ N - 2 ] = X - 1 ; xs [ N - 1 ] = X ; xs [ N - 4 ] = X + 1 ; for ( int i = 0 ; i < N - 4 ; i ++ ) { xs [ i + N - 4 ] = i + 3 ; } } System.out.println ( "Yes" ) ; for ( int i = 0 ; i < N ; i ++ ) { System.out.println ( xs [ i ] ) ; } } }
import sys

def main ( ) :
    input ( )
    pieces = tuple ( zip ( map ( int , input ( ).split ( ) ) , input ( ) ) )
    return Bob_sMaxStrength ( pieces )

def Bob_sMaxStrength ( pieces ) :
    pScore = sScore = pMaxScore = sMaxScore = sum ( piece [ 0 ] for piece in pieces if piece [ 1 ] == 'B' )
    for piece in pieces :
        if piece [ 1 ] == 'A' :
            pScore += piece [ 0 ]
            if pScore > pMaxScore :
                pMaxScore = pScore
        else :
            pScore -= piece [ 0 ]
    for i in range ( len ( pieces ) - 1 , - 1 , - 1 ) :
        if pieces [ i ] [ 1 ] == 'A' :
            sScore += pieces [ i ] [ 0 ]
            if sScore > sMaxScore :
                sMaxScore = sScore
        else :
            sScore -= pieces [ i ] [ 0 ]
    if pMaxScore > sMaxScore :
        return pMaxScore
    return sMaxScore

if __name__ == '__main__' :
    print ( main ( ) )
LUCKY = "abcd"
n = int(input())
s = ""
for i in range(n):
    s += LUCKY[i % 4]
print(s)
import java.util.* ; public class codeforces_134_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int w [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = sc.nextInt ( ) ; sum += w [ i ] ; } int x = sum ; ArrayList < Integer > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( x - w [ i ] ) / ( n - 1 ) == w [ i ] ) arr.add ( i + 1 ) ; } System.out.println ( arr.size ( ) ) ; for ( int i = 0 ; i < arr.size ( ) ; i ++ ) { System.out.print ( arr.get ( i ) + " " ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_AGC034_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; String S = in.next ( ) ; StringBuilder T = new StringBuilder ( ) ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { char c = S.charAt ( i ) ; if ( c == 'A' ) { T.append ( 'A' ) ; } else if ( c == 'B' ) { if ( i < S.length ( ) - 1 ) { if ( S.charAt ( i + 1 ) == 'C' ) { T.append ( 'D' ) ; i ++ ; } else { T.append ( 'X' ) ; } } else { T.append ( 'X' ) ; } } else { T.append ( 'X' ) ; } } long total = 0 ; int numA = 0 ; for ( int i = 0 ; i < T.length ( ) ; i ++ ) { char c = T.charAt ( i ) ; if ( c == 'X' ) { numA = 0 ; } else if ( c == 'A' ) { numA ++ ; } else { total += numA ; } } System.out.println ( total ) ; } }
import collections


def run(s, t):
    ss = sorted(list(collections.Counter(s).values()))
    tt = sorted(list(collections.Counter(t).values()))
    if ss == tt:
        return 'Yes'
    else:
        return 'No'


def main():
    s = input()
    t = input()
    print(run(s, t))


if __name__ == '__main__':
    main()
import java.util.ArrayList ; import java.util.Collections ; import java.util.Scanner ; public class atcoder_ABC123_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { a.add ( sc.nextInt ( ) ) ; } Collections.sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 0 ) { ans += a.get ( i ) ; } else { int x = a.get ( i ) ; if ( x % 10 == 0 ) { ans += x ; } else { ans += ( x / 10 + 1 ) * 10 ; } } } System.out.println ( ans ) ; } }
n = input ( )
a = [ "10" , "100" , "1000" , "10000" , "100000" ]
new = sum ( list ( map ( int , n ) ) )
if n in a :
    print ( 10 )
else :
    print ( new )
import java.util.Scanner ; import java.util.ArrayList ; import java.util.List ; public class atcoder_ABC108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; List < Integer > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) arr.add ( sc.nextInt ( ) ) ; int x1 = arr.get ( 0 ) ; int y1 = arr.get ( 1 ) ; int x2 = arr.get ( 2 ) ; int y2 = arr.get ( 3 ) ; int x3 = x2 - ( x2 - x1 ) ; int y3 = y2 + ( y2 - y1 ) ; int x4 = x1 - ( x2 - x1 ) ; int y4 = y1 + ( y2 - y1 ) ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } }
import java.util.* ; public class atcoder_ABC171_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; ArrayList < Long > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { a.add ( sc.nextLong ( ) ) ; } long sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum = sum ^ a.get ( i ) ; } for ( int i = 0 ; i < N ; i ++ ) { sum = sum ^ a.get ( i ) ; } System.out.println ( sum ) ; } }
n , m = map ( int , input ( ).split ( ) )
l = [ ]
for i in range ( n ) :
    s = input ( )
    s = list ( s )
    for j in range ( m ) :
        if s [ j ] == '.' :
            if ( i + j ) & 1 : s [ j ] = 'W'
            else : s [ j ] = 'B'
    l.append ( s )
for c in l : print ( "".join ( c ) )
import java.util.* ; public class atcoder_ABC143_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a.add ( sc.nextInt ( ) ) ; } a.sort ( ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = a.get ( i ) ; int y = a.get ( j ) ; int z = x + y ; int ub = Collections.binarySearch ( a , z ) ; if ( ub < 0 ) { ub = - ub - 1 ; } int lb = Collections.binarySearch ( a , x - y ) ; if ( lb < 0 ) { lb = - lb - 1 ; } lb = Math.max ( lb , 0 ) ; if ( ub <= i || ub <= j ) { ub -- ; } if ( lb <= i || lb <= j ) { lb ++ ; } ans += Math.max ( ub - lb , 0 ) ; } } System.out.println ( ans / 3 ) ; } }
import java.util.Scanner ; public class codeforces_30_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int x = 0 ; for ( int i = 0 ; i < 1001 ; i ++ ) { if ( a * ( int ) Math.pow ( i , n ) == b ) { x = i ; break ; } } System.out.println ( x ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC142_C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = in.nextInt ( ) ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr2 [ i ] = i + 1 ; Arrays.sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { int temp = arr2 [ i ] ; arr2 [ i ] = arr2 [ arr [ i ] - 1 ] ; arr2 [ arr [ i ] - 1 ] = temp ; } for ( int i = 0 ; i < n - 1 ; i ++ ) System.out.print ( arr2 [ i ] + " " ) ; System.out.println ( arr2 [ n - 1 ] ) ; } }
import java.util.ArrayList ; import java.util.Collections ; import java.util.Scanner ; public class atcoder_ABC171_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; ArrayList < Integer > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr.add ( sc.nextInt ( ) ) ; } Collections.sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += arr.get ( i ) ; } System.out.println ( sum ) ; } }
import java.util.Arrays ; import java.util.Scanner ; import java.util.TreeSet ; public class atcoder_ABC107_D { static int N ; static int M ; static int A [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; N = sc.nextInt ( ) ; A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; TreeSet < Integer > set = new TreeSet < > ( ) ; for ( int a : A ) { set.add ( a ) ; } int l = 0 ; int r = set.last ( ) ; while ( r - l > 1 ) { int m = ( l + r ) / 2 ; if ( check ( m ) ) { r = m ; } else { l = m ; } } System.out.println ( r ) ; } static boolean check ( int x ) { int X = x ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] < X ) { X -= A [ i ] ; } else { X = x - ( A [ i ] - X ) ; } } return X >= 0 ; } }
import java.util.Scanner ; public class codeforces_106_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] S = new int [ n ] ; int [ ] R = new int [ n ] ; int [ ] H = new int [ n ] ; int [ ] C = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { S [ i ] = sc.nextInt ( ) ; R [ i ] = sc.nextInt ( ) ; H [ i ] = sc.nextInt ( ) ; C [ i ] = sc.nextInt ( ) ; } int ans = 1 ; int min_cost = C [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { boolean flag = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { if ( S [ i ] <= S [ j ] || R [ i ] <= R [ j ] || H [ i ] <= H [ j ] ) { flag = false ; break ; } } } if ( flag ) { if ( C [ i ] < min_cost ) { ans = i + 1 ; min_cost = C [ i ] ; } } } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC002_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a > 0 ) System.out.println ( "Positive" ) ; else if ( a <= 0 && b >= 0 ) System.out.println ( "Zero" ) ; else if ( ( a + b ) % 2 == 0 ) System.out.println ( "Negative" ) ; else System.out.println ( "Positive" ) ; } }
from _collections import deque
def parser ( ) :
    while 1 :
        data = list ( input ( ).split ( ' ' ) )
        for number in data :
            if len ( number ) > 0 :
                yield ( number )
input_parser = parser ( )
def gw ( ) :
    global input_parser
    return next ( input_parser )
def gi ( ) :
    data = gw ( )
    return int ( data )
MOD = int ( 1e9 + 7 )
import numpy
import scipy
from collections import deque
N = gi ( )
K = gi ( )
S = gw ( )
seg_cnt = 0
for i in range ( 0 , N - 1 ) :
    if S [ i ] != S [ i + 1 ] :
        seg_cnt += 1
cur_happy = N - 1 - seg_cnt
if 2 * K >= seg_cnt :
    ans = N - 1
else :
    ans = cur_happy + 2 * K
print ( ans )
import java.util.* ; import java.io.* ; import java.math.* ; public class atcoder_ABC167_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] [ ] C = new int [ N ] [ M + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M + 1 ; j ++ ) { C [ i ] [ j ] = sc.nextInt ( ) ; } } int ans = Integer.MAX_VALUE ; for ( int i = 1 ; i < ( 1 << N ) ; i ++ ) { int [ ] sum = new int [ M + 1 ] ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { for ( int k = 0 ; k < M + 1 ; k ++ ) { sum [ k ] += C [ j ] [ k ] ; } } } boolean f = true ; for ( int j = 0 ; j < M + 1 ; j ++ ) { if ( sum [ j ] < X ) { f = false ; break ; } } if ( f ) { ans = Math.min ( ans , sum [ 0 ] ) ; } } if ( ans == Integer.MAX_VALUE ) { System.out.println ( - 1 ) ; } else { System.out.println ( ans ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC143_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int a , b ; a = sc.nextInt ( ) ; b = sc.nextInt ( ) ; int ans = a - 2 * b ; if ( ans < 0 ) { ans = 0 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC139_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int hole = 1 , i = 0 , check = true ; while ( check ) { if ( hole >= b ) { check = false ; } else { hole = a * ( i + 1 ) - i ; i ++ ; } } System.out.println ( i ) ; } }
import java.util.* ; public class atcoder_ABC124_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { c += Math.max ( a , b ) ; if ( a >= b ) a -- ; else b -- ; } System.out.println ( c ) ; } }
import java.util.* ; public class codeforces_25_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; if ( arr [ i ] % 2 == 0 ) count ++ ; } if ( count == n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { System.out.println ( i + 1 ) ; break ; } } } else { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System.out.println ( i + 1 ) ; break ; } } } } }
import java.util.* ; import java.io.* ; public class codeforces_282_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int a = 0 , b = 0 ; String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { int x = in.nextInt ( ) ; int y = in.nextInt ( ) ; if ( a + x <= 500 ) { a += x ; s += "A" ; } else { b += y ; s += "G" ; } } System.out.println ( s ) ; } }
import java.util.* ; public class atcoder_ABC169_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; double b = sc.nextDouble ( ) ; System.out.println ( ( int ) ( a * b * 0.01 ) ) ; } }
n = int(input())
t = [0] + list(map(int, input().split()))
a = [0] + list(map(int, input().split()))
ans, cnt = [], [0 for i in range(n + 1)]
for i in a:
    cnt[i] += 1
for i in range(1, n + 1):
    if t[i] == 1:
        crt = [i]
        x = a[i]
        while cnt[x] == 1:
            crt.append(x)
            x = a[x]
        if len(crt) > len(ans):
            ans = crt[:]
ans.reverse()
print(len(ans))
print(' '.join(map(str, ans)))
import java.util.Scanner ; import static java.lang.Math. * ; public class atcoder_ABC142_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double t = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 1 ) { t ++ ; } } System.out.println ( t / n ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_333_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int m = in.nextInt ( ) ; int [ ] b = new int [ 2 * n ] ; for ( int i = 0 ; i < m ; i ++ ) { int r = in.nextInt ( ) - 1 ; int c = in.nextInt ( ) - 1 ; b [ r ] = b [ n + c ] = 0 ; } if ( n % 2 == 1 ) { b [ n / 2 ] = b [ n + n / 2 ] = 0 ; } int ans = 0 ; for ( int i : b ) { ans += i ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC166_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int p [ ] = new int [ n + 1 ] ; int h [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = i ; h [ i ] = sc.nextInt ( ) ; } ArrayList < Integer > adj [ ] = new ArrayList [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { adj [ i ] = new ArrayList < > ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; adj [ u ].add ( v ) ; adj [ v ].add ( u ) ; } int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int f = 0 ; for ( int x : adj [ i ] ) { if ( h [ i ] <= h [ x ] ) { f = 1 ; break ; } } if ( f == 0 ) res ++ ; } System.out.println ( res ) ; } }
import java.util.* ; public class codeforces_79_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = 0 ; while ( x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2 ) { if ( a == 0 ) { if ( x >= 2 && y >= 2 ) { x -= 2 ; y -= 2 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { y -= 22 ; } a = 1 ; } else { if ( y >= 22 ) { y -= 22 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else { x -= 2 ; y -= 2 ; } a = 0 ; } } System.out.println ( a == 0 ? "Hanako" : "Ciel" ) ; } }
import java.util.* ; public class atcoder_AGC004_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) , K = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) ; a -- ; int b = sc.nextInt ( ) ; b -- ; graph.get ( a ).add ( b ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int depth = dfs ( graph , i , - 1 , 0 ) ; if ( depth == K ) ans ++ ; } System.out.println ( ans ) ; } static int dfs ( ArrayList < ArrayList < Integer >> graph , int cur , int pre , int depth ) { int ret = 0 ; for ( int next : graph.get ( cur ) ) { if ( next == pre ) continue ; ret += dfs ( graph , next , cur , depth + 1 ) ; } if ( pre != - 1 && ret == 0 ) ret = 1 ; return ret ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC174_C { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; int t = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { t = ( t % k ) * 10 + 7 ; if ( t % k == 0 ) { System.out.println ( i ) ; break ; } } if ( t % k != 0 ) { System.out.println ( - 1 ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_67_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n , k ; n = sc.nextInt ( ) ; k = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) { System.out.print ( j + 1 + " " ) ; break ; } } for ( int j = i + 1 ; j <= i + k ; j ++ ) { arr [ j ] -- ; } arr [ i ] -- ; } } }
a , b , h , m = map ( int , input ( ).split ( ) )
import math
C = abs ( 360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m )
if C > 180 :
    C = 360 - C
cosC = math.cos ( math.radians ( C ) )
print ( math.sqrt ( a ** 2 + b ** 2 - 2 * a * b * cosC ) )
import java.util.* ; public class codeforces_354_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int L = sc.nextInt ( ) ; int R = sc.nextInt ( ) ; int QL = sc.nextInt ( ) ; int QR = sc.nextInt ( ) ; int [ ] W = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { W [ i ] = sc.nextInt ( ) ; } int [ ] sum = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { sum [ i ] = sum [ i - 1 ] + W [ i ] ; } long answer = QR * ( N - 1 ) + sum [ N ] * R ; for ( int i = 1 ; i <= N ; i ++ ) { long energy = L * sum [ i ] + R * ( sum [ N ] - sum [ i ] ) ; if ( i > N - i ) { energy += ( i - ( N - i ) - 1 ) * QL ; } else if ( N - i > i ) { energy += ( N - i - i - 1 ) * QR ; } answer = Math.min ( answer , energy ) ; } System.out.println ( answer ) ; } }
import java.util.Scanner ; public class codeforces_49_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; String v = "aeiouyAEIOUY" ; for ( int i = s.length ( ) - 1 ; i >= 0 ; i -- ) { if ( s.charAt ( i ) == ' ' || s.charAt ( i ) == '?' ) continue ; else { if ( v.contains ( "" + s.charAt ( i ) ) ) { System.out.println ( "YES" ) ; break ; } else { System.out.println ( "NO" ) ; break ; } } } } }
def main ( ) : return len ( input ( ) ) <= int ( input ( ) ) and input ( ) or input ( ) [ : int ( input ( ) ) ] + "..."
import java.util.Scanner ; public class atcoder_ABC149_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = arr [ i ] ; int q = arr [ i + 1 ] ; if ( q - p >= 2 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.* ; public class codeforces_302_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int sa = sc.next ( ).replace ( "-" , "" ).length ( ) ; sa = Math.min ( sa , n - sa ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int bb = b - a ; if ( bb % 2 == 1 && bb <= sa * 2 ) { System.out.println ( 1 ) ; } else { System.out.println ( 0 ) ; } } } }
import java.util.* ; public class codeforces_58_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; for ( int i = n ; i >= 1 ; i -- ) { if ( n % i == 0 ) { n = i ; System.out.print ( i + " " ) ; } } } }

import java.io.* ; import java.util.* ; public class codeforces_56_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc.nextInt ( ) ; int mn = n + 1 , mx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i + 1 ) { mn = Math.min ( mn , i ) ; mx = Math.max ( mx , i ) ; } } if ( mx == - 1 ) { System.out.println ( "0 0" ) ; } else { arr = reverse ( arr , mn , mx ) ; if ( check ( arr ) ) System.out.println ( mn + 1 + " " + ( mx + 1 ) ) ; else System.out.println ( "0 0" ) ; } } static boolean check ( int [ ] arr ) { for ( int i = 0 ; i < arr.length ; i ++ ) if ( arr [ i ] != i + 1 ) return false ; return true ; } static int [ ] reverse ( int [ ] arr , int mn , int mx ) { int [ ] res = new int [ arr.length ] ; for ( int i = 0 ; i < arr.length ; i ++ ) res [ i ] = arr [ i ] ; int l = mn , r = mx ; while ( l < r ) { int temp = res [ l ] ; res [ l ] = res [ r ] ; res [ r ] = temp ; l ++ ; r -- ; } return res ; } }
import java.util.* ; import java.io.* ; public class codeforces_99_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String l = sc.next ( ) ; l = l.split ( "\\." ) ; String s = l [ 0 ] ; String p = l [ 1 ] ; int i = Integer.parseInt ( p.substring ( 0 , 1 ) ) ; if ( s.charAt ( s.length ( ) - 1 ) == '9' ) { System.out.println ( "GOTO Vasilisa." ) ; return ; } if ( s.charAt ( s.length ( ) - 1 ) != '9' && i < 5 ) { System.out.println ( s ) ; return ; } s = s.substring ( 0 , s.length ( ) - 1 ) + ( Integer.parseInt ( s.charAt ( s.length ( ) - 1 ) + "" ) + 1 ) ; System.out.println ( s ) ; } }
import java.util.* ; public class codeforces_412_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; ArrayList < String > ans = new ArrayList < > ( ) ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'G' ) { break ; } } if ( i < k ) { for ( i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'G' ) { break ; } else { sb.append ( s.charAt ( i ) ) ; sb.append ( " LEFT\n" ) ; } } } else { for ( i = n - 1 ; i >= 0 ; i -- ) { if ( s.charAt ( i ) == 'G' ) { break ; } else { sb.append ( s.charAt ( i ) ) ; sb.append ( " RIGHT\n" ) ; } } } for ( i = sb.length ( ) - 1 ; i >= 0 ; i -- ) { System.out.print ( sb.charAt ( i ) ) ; } } }
import java.util.* ; public class codeforces_86_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int curr = r ; int s = 0 ; while ( curr != 0 ) { s ++ ; curr = curr / 10 ; } int first = ( int ) Math.pow ( 10 , s ) ; int second = first / 2 ; int ans = - 1 ; for ( int i = l ; i <= r ; i ++ ) { if ( i >= l && i <= r ) { curr = i ; int rev = 0 ; while ( curr != 0 ) { int k = curr % 10 ; rev = rev * 10 + ( 9 - k ) ; curr = curr / 10 ; } ans = Math.max ( ans , rev * curr ) ; } } System.out.println ( ans ) ; } }
import itertools

def main():
    import itertools
    (n, m) = map(int, input().split())
    li = [list(map(int, input().split()))[1:] for _ in range(m)]
    p = tuple(map(int, input().split()))
    q = set(sum(li, []))
    r = set(range(1, n + 1))
    v = r - q
    ans = 0
    for i in range(0, len(q) + 1):
        for s in itertools.combinations(q, i):
            for u, w in zip(li, p):
                s = set(s)
                if len(s & set(u)) % 2 != w:
                    break
            else:
                ans += 2 ** len(v)
    print(ans)

if __name__ == '__main__':
    main()
import java.util.* ; import java.io.* ; public class atcoder_AGC004_B { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long X = sc.nextLong ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long [ ] [ ] dp = new long [ N + 1 ] [ N + 1 ] ; for ( int j = 0 ; j <= N ; j ++ ) { for ( int i = 0 ; i <= N ; i ++ ) { dp [ i ] [ j ] = Long. MAX_ VALUE ; } } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int t = i - j ; if ( t < 0 ) { t += N ; } dp [ i ] [ j ] = Math. min ( dp [ i ] [ j - 1 ] , A [ t ] ) ; } } long ans = Long. MAX_ VALUE ; for ( int i = 0 ; i < N ; i ++ ) { long tmp = 0 ; for ( int j = 0 ; j < N ; j ++ ) { tmp += dp [ i ] [ j ] ; } tmp += X * i ; ans = Math. min ( ans , tmp ) ; } System. out. println ( ans ) ; } }
from math import pow

mod = 10 ** 9 + 7
n = int(input())
c = list(map(int, input().split()))
c.sort(reverse=True)
b = pow(2, 2 * n - 2, mod)
a = 2 * b % mod
ans = 0
for i in range(n):
    ans += c[i] * (a + i * b)
    ans %= mod
print(ans)
import java.util.* ; import java.io.* ; public class codeforces_456_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; } Arrays.sort ( arr , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] o1 , int [ ] o2 ) { if ( o1 [ 0 ] == o2 [ 0 ] ) return o1 [ 1 ] - o2 [ 1 ] ; return o1 [ 0 ] - o2 [ 0 ] ; } } ) ; int a = arr [ 0 ] [ 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] [ 1 ] > a ) { System.out.println ( "Happy Alex" ) ; return ; } a = arr [ i ] [ 1 ] ; } System.out.println ( "Poor Alex" ) ; } }
t = int ( input ( ) )
def solve ( n ) :
    s = ( 1 + n ) * n // 2
    t = 1
    while t <= n :
        s -= 2 * t
        t *= 2
    return s
for _ in range ( t ) :
    n = int ( input ( ) )
    print ( solve ( n ) )
import java.util.* ; import java.io.* ; import java.math.* ; public class atcoder_AGC027_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] A = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } long [ ] S = new long [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { S [ i ] = S [ i - 1 ] + A [ i ] ; } long ans = Long.MAX_VALUE ; for ( int k = 1 ; k <= N ; k ++ ) { long E = k * X + 2 * ( S [ N - 1 ] - S [ k - 1 ] ) ; for ( int j = N - k ; j >= 1 ; j -= k ) { E += A [ j ] * 2 ; } E += S [ N ] ; ans = Math.min ( ans , E ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_408_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; String str1 = in.next ( ) ; String str2 = in.next ( ) ; int res = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < str1.length ( ) ; i ++ ) { if ( map.containsKey ( str1.charAt ( i ) ) ) map.put ( str1.charAt ( i ) , map.get ( str1.charAt ( i ) ) + 1 ) ; else map.put ( str1.charAt ( i ) , 1 ) ; } for ( int i = 0 ; i < str2.length ( ) ; i ++ ) { if ( map.containsKey ( str2.charAt ( i ) ) && map.get ( str2.charAt ( i ) ) > 0 ) { res ++ ; map.put ( str2.charAt ( i ) , map.get ( str2.charAt ( i ) ) - 1 ) ; } } if ( res == str2.length ( ) ) { System.out.println ( res ) ; } else { System.out.println ( - 1 ) ; } } }
import java.util.Scanner ; public class atcoder_AGC006_A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System.in ) ; int N = scan.nextInt ( ) ; String S = scan.next ( ) ; String T = scan.next ( ) ; int result = 0 ; if ( S.equals ( T ) ) { System.out.println ( N ) ; } else { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N - i ; j ++ ) { if ( S.charAt ( i + j ) != T.charAt ( j ) ) { break ; } if ( j == N - i - 1 ) { count = N - i ; } } } result = ( 2 * N ) - count ; System.out.println ( result ) ; } } }
import java.util.* ; public class atcoder_AGC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc.nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == 1 ) cnt ++ ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; if ( sum % 2 == 0 ) { if ( cnt % 2 == 0 ) System.out.println ( 0 ) ; else System.out.println ( ( 1 << cnt ) ) ; } else { if ( cnt % 2 == 0 ) System.out.println ( ( 1 << cnt ) ) ; else System.out.println ( 0 ) ; } } }
import java.util.* ; public class codeforces_31_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc.nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( arr [ k ] != arr [ j ] && arr [ k ] != arr [ i ] && arr [ k ] == arr [ i ] + arr [ j ] ) { System.out.println ( k + 1 + " " + ( j + 1 ) + " " + ( i + 1 ) ) ; return ; } } } } System.out.println ( - 1 ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC011_C { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; PrintWriter pw = new PrintWriter ( System.out ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; ArrayList < Integer > [ ] g = new ArrayList [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { g [ i ] = new ArrayList < > ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; g [ u ].add ( v ) ; g [ v ].add ( u ) ; } int [ ] vis = new int [ n + 1 ] ; int ci = 0 ; int cb = 0 ; int cc = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ] == 0 ) { if ( g [ i ].size ( ) == 0 ) ci ++ ; else { boolean ok = true ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( i ) ; vis [ i ] = 1 ; while ( ! q.isEmpty ( ) ) { int u = q.poll ( ) ; for ( int v : g [ u ] ) { if ( vis [ v ] == 0 ) { vis [ v ] = 3 - vis [ u ] ; q.add ( v ) ; } else { if ( vis [ v ] == vis [ u ] ) { ok = false ; break ; } } } if ( ! ok ) break ; } if ( ok ) cb ++ ; else cc ++ ; } } pw.println ( 1L * ci * ci + 2L * ci * ( n - ci ) + cc * cc + 2L * cb * cc + 2L * cb * cb ) ; pw.close ( ) ; } }
import java.util.Scanner ; public class atcoder_ABC125_C { public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int N = in.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = in.nextInt ( ) ; } int [ ] L = new int [ N + 1 ] ; int [ ] R = new int [ N + 1 ] ; int max = 0 ; L [ 0 ] = 0 ; R [ N ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { L [ i + 1 ] = gcd ( L [ i ] , A [ i ] ) ; } for ( int i = N - 1 ; i >= 0 ; i -- ) { R [ i ] = gcd ( R [ i + 1 ] , A [ i ] ) ; } for ( int i = 0 ; i < N ; i ++ ) { max = Math.max ( max , gcd ( L [ i ] , R [ i + 1 ] ) ) ; } System.out.println ( max ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC007_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; double d = sc.nextDouble ( ) ; double x = sc.nextDouble ( ) ; double ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += d + ( ( N - 0.5 ) * x ) ; double tmp = d ; d += tmp / ( N - i ) + ( 5 * x ) / ( 2 * ( N - i ) ) ; x += 2 * x / ( N - i ) ; } System.out.println ( ans ) ; } }
import java.util.ArrayList ; import java.util.Collections ; import java.util.List ; import java.util.Scanner ; public class codeforces_459_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list.add ( sc.nextInt ( ) ) ; } Collections.sort ( list ) ; int x = list.get ( n - 1 ) ; int y = list.get ( 0 ) ; if ( x == y ) { System.out.println ( x - y + " " + ( n * ( n - 1 ) ) / 2 ) ; } else { int xCount = 0 ; int yCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( list.get ( i ) == x ) xCount ++ ; if ( list.get ( i ) == y ) yCount ++ ; } System.out.println ( x - y + " " + xCount * yCount ) ; } } }
import java.util.* ; public class atcoder_ABC125_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] v = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] - c [ i ] > 0 ) { res += v [ i ] - c [ i ] ; } } System.out.println ( res ) ; } }
import java.util.* ; public class atcoder_ABC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String str = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { if ( str.charAt ( i ) == '0' || str.charAt ( i ) == '1' ) { sb.append ( str.charAt ( i ) ) ; } else if ( sb.length ( ) != 0 ) { sb.deleteCharAt ( sb.length ( ) - 1 ) ; } } System.out.println ( sb.toString ( ) ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_546_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k , n , w ; k = sc.nextInt ( ) ; n = sc.nextInt ( ) ; w = sc.nextInt ( ) ; int total = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { total += i * k ; } if ( total > n ) { System.out.println ( total - n ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.Scanner ; public class codeforces_231_A { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( a + b + c > 1 ) { count ++ ; } } System.out.println ( count ) ; } }
import numpy as np
h , w = map ( int , input ( ).split ( ) )
graph = [ [ 0 if i == '#' else float ( 'inf' ) for i in list ( input ( ) ) ] for _ in range ( h ) ]
graph = np.array ( graph )
for x in range ( w - 1 ) :
    graph [ : , x + 1 ] = np.minimum ( graph [ : , x ] + 1 , graph [ : , x + 1 ] )
for x in range ( w - 1 , 0 , - 1 ) :
    graph [ : , x - 1 ] = np.minimum ( graph [ : , x ] + 1 , graph [ : , x - 1 ] )
for y in range ( h - 1 ) :
    graph [ y + 1 , : ] = np.minimum ( graph [ y , : ] + 1 , graph [ y + 1 , : ] )
for y in range ( h - 1 , 0 , - 1 ) :
    graph [ y - 1 , : ] = np.minimum ( graph [ y , : ] + 1 , graph [ y - 1 , : ] )
print ( int ( np.max ( graph ) ) )
r , D , x = map ( int , input ( ).split ( ) )
for i in range ( 2 , 12 ) :
    print ( int ( ( r ** ( i - 1 ) ) * ( x + D / ( 1 - r ) ) - D / ( 1 - r ) ) )
import java.util.* ; import java.io.* ; public class atcoder_AGC038_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int H = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; String [ ] [ ] map = new String [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { map [ i ] [ j ] = "0" ; } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( i < B ) { if ( j < A ) { map [ i ] [ j ] = "0" ; } else { map [ i ] [ j ] = "1" ; } } else { if ( j < A ) { map [ i ] [ j ] = "1" ; } else { map [ i ] [ j ] = "0" ; } } } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { System.out.print ( map [ i ] [ j ] ) ; } System.out.println ( ) ; } } }
import java.util.* ; import java.io.* ; import java.util.ArrayList ; import java.util.List ; import java.util.Collections ; public class codeforces_500_A { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int t = in.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in.nextInt ( ) ; } int pos = 1 ; for ( int i = 0 ; i < n ; i ++ ) { pos += a [ i ] ; if ( pos == t ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.Scanner ; public class atcoder_ABC155_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; long ok = - 1000000000000000000L ; long ng = 1000000000000000000L ; while ( Math.abs ( ok - ng ) > 1 ) { long mid = ( ok + ng ) / 2 ; if ( check ( mid , A , K , N ) ) { ok = mid ; } else { ng = mid ; } } System.out.println ( ok ) ; } static boolean check ( long mid , int [ ] A , int K , int N ) { int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] < 0 ) { int ok = N ; int ng = - 1 ; while ( Math.abs ( ok - ng ) > 1 ) { int m = ( ok + ng ) / 2 ; if ( A [ i ] * A [ m ] >= mid ) { ok = m ; } else { ng = m ; } } ans += N - ok ; } else { int ok = N ; int ng = - 1 ; while ( Math.abs ( ok - ng ) > 1 ) { int m = ( ok + ng ) / 2 ; if ( A [ i ] * A [ m ] < mid ) { ok = m ; } else { ng = m ; } } ans += ok ; } } return ans / 2 >= K ; } }
import java.util.* ; public class atcoder_ABC147_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < 60 ; i ++ ) { long cnt = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( A [ j ] >> i & 1 ) == 1 ) { cnt ++ ; } } ans += cnt * ( N - cnt ) * ( 1L << i ) ; ans %= 1000000007 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_AGC046_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int res = ( 360 / gcd ( 360 , n ) ) ; System.out.println ( res ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
n = int ( input ( ) )
r = [ * map ( int , input ( ).split ( ) ) ]
ans = abs ( r [ 0 ] )
for i in range ( 1 , n ) :
    ans += abs ( r [ i ] - r [ i - 1 ] )
print ( ans )
import java.util.Scanner ; public class codeforces_171_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String a = sc.next ( ) ; String b = sc.next ( ) ; int x = Math.max ( a.length ( ) , b.length ( ) ) ; a = a.replaceFirst ( "^0+(?!$)" , "" ) ; b = b.replaceFirst ( "^0+(?!$)" , "" ) ; a = String.format ( "%1$" + x + "s" , a ).replace ( ' ' , '0' ) ; b = String.format ( "%1$" + x + "s" , b ).replace ( ' ' , '0' ) ; String res = "" ; boolean carry = false ; for ( int i = x - 1 ; i >= 0 ; i -- ) { int sum = ( a.charAt ( i ) - '0' ) + ( b.charAt ( i ) - '0' ) ; if ( carry ) sum ++ ; if ( sum > 9 ) { carry = true ; sum -= 10 ; } else carry = false ; res = sum + res ; } if ( carry ) res = "1" + res ; System.out.println ( res ) ; } }
import java.util.Scanner ; public class codeforces_276_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String str = sc.next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { arr [ str.charAt ( i ) - 'a' ] ++ ; } int odd = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] % 2 == 1 ) odd ++ ; } if ( odd == 0 || odd % 2 == 1 && str.length ( ) % 2 == 1 ) System.out.println ( "First" ) ; else System.out.println ( "Second" ) ; } }
from math import prod
input()
a = input()
print(0 if a.count('1') == 0 else prod([i.count('0') + 1 for i in a.strip('0 ').split('1')]))
import java.util.* ; public class codeforces_55_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; long ans = - 1 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = i + 1 ; j < 4 ; j ++ ) { for ( int k = j + 1 ; k < 4 ; k ++ ) { long x = 0 ; if ( i == 0 ) x = a + b ; else if ( i == 1 ) x = a * b ; else if ( i == 2 ) x = a - b ; if ( j == 0 ) x += c ; else if ( j == 1 ) x *= c ; else if ( j == 2 ) x -= c ; if ( k == 0 ) x += d ; else if ( k == 1 ) x *= d ; else if ( k == 2 ) x -= d ; ans = Math.max ( ans , x ) ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC178_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = Math.max ( a * c , b * d ) ; ans = Math.max ( ans , a * d ) ; ans = Math.max ( ans , b * c ) ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; import java.nio.charset.* ; import java.nio.file.* ; import java.nio.file.attribute.* ; import java.util.function.* ; import java.util.stream.* ; public class atcoder_ABC164_D { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System.in ) ; String s = in.next ( ) ; int l = 2019 ; int [ ] m = new int [ l ] ; int a = 0 , r = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { a += Integer.parseInt ( String.valueOf ( s.charAt ( i ) ) ) * ( int ) Math.pow ( 10 , i ) % l ; r += m [ a % l ] ; m [ a % l ] ++ ; } System.out.println ( r ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_242_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int id = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int li = sc.nextInt ( ) ; int ri = sc.nextInt ( ) ; if ( li <= l && r <= ri ) id = i ; else if ( li < l || r < ri ) id = n ; l = Math.min ( l , li ) ; r = Math.max ( r , ri ) ; } System.out.println ( id == 0 ? - 1 : id + 1 ) ; } }
import java.util.* ; public class atcoder_ABC132_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; HashMap < Character , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < S.length ( ) ; i ++ ) { if ( hm.containsKey ( S.charAt ( i ) ) ) { hm.put ( S.charAt ( i ) , hm.get ( S.charAt ( i ) ) + 1 ) ; } else { hm.put ( S.charAt ( i ) , 1 ) ; } } HashSet < Character > hs = new HashSet < > ( ) ; for ( char key : hm.keySet ( ) ) { hs.add ( key ) ; } if ( hs.size ( ) > 2 ) { System.out.println ( "No" ) ; return ; } for ( char key : hs ) { if ( hm.get ( key ) != 2 ) { System.out.println ( "No" ) ; return ; } } System.out.println ( "Yes" ) ; } }
import java.util.* ; import java.io.* ; import java.math.* ; public class atcoder_ABC169_D { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; BigInteger n = in.nextBigInteger ( ) ; if ( n.equals ( BigInteger.ONE ) ) { System.out.println ( 0 ) ; return ; } HashMap < BigInteger , Integer > map = new HashMap < > ( ) ; BigInteger x = n ; for ( long i = 2 ; i * i <= x.longValue ( ) ; i ++ ) { while ( x.mod ( BigInteger.valueOf ( i ) ).equals ( BigInteger.ZERO ) ) { if ( ! map.containsKey ( BigInteger.valueOf ( i ) ) ) map.put ( BigInteger.valueOf ( i ) , 1 ) ; else map.put ( BigInteger.valueOf ( i ) , map.get ( BigInteger.valueOf ( i ) ) + 1 ) ; x = x.divide ( BigInteger.valueOf ( i ) ) ; } } if ( ! x.equals ( BigInteger.ONE ) ) { if ( ! map.containsKey ( x ) ) map.put ( x , 1 ) ; else map.put ( x , map.get ( x ) + 1 ) ; } int ans = 0 ; for ( BigInteger key : map.keySet ( ) ) { int value = map.get ( key ) ; int tmp = 0 ; while ( value >= tmp + 1 ) { value -= ++ tmp ; ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC126_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; boolean [ ] color = new boolean [ n ] ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int u = sc.nextInt ( ) - 1 ; int v = sc.nextInt ( ) - 1 ; int w = sc.nextInt ( ) ; graph.get ( u ).add ( v ) ; graph.get ( v ).add ( u ) ; } color [ 0 ] = true ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 0 ) ; while ( ! q.isEmpty ( ) ) { int u = q.poll ( ) ; for ( int v : graph.get ( u ) ) { if ( color [ v ] == false ) { color [ v ] = ! color [ u ] ; q.add ( v ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { System.out.println ( color [ i ] ? 1 : 0 ) ; } } }
import sys
mod = 10 ** 9 + 7
l = input ( )
n = len ( l )
dp = [ [ 0 ] * 2 for _ in range ( n + 1 ) ]
dp [ 0 ] [ 0 ] = 1
for i , c in enumerate ( l ) :
    if c == '0' :
        dp [ i + 1 ] [ 0 ] += dp [ i ] [ 0 ]
        dp [ i + 1 ] [ 1 ] += dp [ i ] [ 1 ] * 3
    else :
        dp [ i + 1 ] [ 0 ] += dp [ i ] [ 0 ] * 2
        dp [ i + 1 ] [ 1 ] += dp [ i ] [ 0 ]
        dp [ i + 1 ] [ 1 ] += dp [ i ] [ 1 ] * 3
    dp [ i + 1 ] [ 0 ] %= mod
    dp [ i + 1 ] [ 1 ] %= mod
print ( ( dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ) % mod )
import java.util.* ; public class codeforces_678_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = "f" ; if ( n % 400 == 0 || ( n % 4 == 0 && n % 100 != 0 ) ) { String s1 = "ly" ; while ( true ) { if ( n % 400 == 0 || ( n % 4 == 0 && n % 100 != 0 ) ) { if ( s.equals ( "m" ) ) s = "w" ; else if ( s.equals ( "t" ) ) s = "th" ; else if ( s.equals ( "w" ) ) s = "f" ; else if ( s.equals ( "th" ) ) s = "sa" ; else if ( s.equals ( "f" ) ) s = "s" ; else if ( s.equals ( "sa" ) ) s = "m" ; else if ( s.equals ( "s" ) ) s = "t" ; if ( s.equals ( "f" ) && s1.equals ( "ly" ) && ( n % 400 == 0 || ( n % 4 == 0 && n % 100 != 0 ) ) ) { System.out.println ( n ) ; break ; } else if ( s.equals ( "f" ) && s1.equals ( "nly" ) && ( n % 400 != 0 || ( n % 4 != 0 && n % 100 == 0 ) ) ) { System.out.println ( n ) ; break ; } } else { if ( s.equals ( "m" ) ) s = "t" ; else if ( s.equals ( "t" ) ) s = "w" ; else if ( s.equals ( "w" ) ) s = "th" ; else if ( s.equals ( "th" ) ) s = "f" ; else if ( s.equals ( "f" ) ) s = "sa" ; else if ( s.equals ( "sa" ) ) s = "s" ; else if ( s.equals ( "s" ) ) s = "m" ; } n ++ ; } } } }
import java.util.* ; import java.io.* ; public class codeforces_462_B { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String str = sc.next ( ) ; int arr [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { arr [ str.charAt ( i ) - 'A' ] ++ ; } Arrays.sort ( arr ) ; int res = 0 ; for ( int i = 25 ; i >= 0 ; i -- ) { if ( arr [ i ] >= k ) { res += k * k ; break ; } else { k -= arr [ i ] ; res += arr [ i ] * arr [ i ] ; } } System.out.println ( res ) ; } }
n = int ( input ( ) )
i , j = 1 , n * n
while i < j :
    print ( i , j )
    i += 1
    j -= 1
import java.util.* ; public class atcoder_AGC029_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] dp = new int [ N ] ; dp [ 0 ] = 0 ; for ( int i = 1 ; i < N ; i ++ ) { dp [ i ] = Integer.MAX_VALUE ; for ( int j = 0 ; j < i ; j ++ ) { if ( A [ j ] >= A [ i ] ) { dp [ i ] = Math.min ( dp [ i ] , dp [ j ] + 1 ) ; } } } System.out.println ( dp [ N - 1 ] ) ; } }
import java.util.* ; public class codeforces_313_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = s.length ( ) ; int [ ] dp = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s.charAt ( i - 1 ) == s.charAt ( i ) ) dp [ i ] = dp [ i - 1 ] + 1 ; else dp [ i ] = dp [ i - 1 ] ; } int q = sc.nextInt ( ) ; while ( q -- > 0 ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; System.out.println ( dp [ r ] - dp [ l ] ) ; } } }
import java.util.* ; public class codeforces_108_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ i - 1 ] && arr [ i ] < 2 * arr [ i - 1 ] ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import sys
input = sys.stdin.readline
n = int ( input ( ) )
w = list ( map ( int , input ( ).split ( ) ) )
c = 2
for i in w :
    if i == 1 :
        print ( c )
    elif i % 2 == 0 :
        c = 3 - c
        print ( c )
    else :
        print ( c )
import java.util.* ; public class atcoder_ABC127_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int Q = sc.nextInt ( ) ; PriorityQueue < Long > pq1 = new PriorityQueue < > ( ) ; PriorityQueue < Long > pq2 = new PriorityQueue < > ( ) ; long sum1 = 0 ; long sum2 = 0 ; long bsum = 0 ; for ( int i = 0 ; i < Q ; i ++ ) { int q = sc.nextInt ( ) ; if ( q == 1 ) { long x = sc.nextLong ( ) ; long c = sc.nextLong ( ) ; bsum += c ; if ( pq1.isEmpty ( ) ) { pq1.add ( x ) ; sum1 += x ; } else if ( x <= pq1.peek ( ) ) { pq1.add ( x ) ; sum1 += x ; } else { pq2.add ( - x ) ; sum2 += x ; } if ( pq1.size ( ) - 1 > pq2.size ( ) ) { long x1 = pq1.poll ( ) ; pq2.add ( - x1 ) ; sum1 -= x1 ; sum2 += x1 ; } if ( pq2.size ( ) - 1 > pq1.size ( ) ) { long x1 = pq2.poll ( ) ; pq1.add ( - x1 ) ; sum2 -= x1 ; sum1 += x1 ; } } else { if ( pq1.size ( ) == pq2.size ( ) ) { System.out.println ( pq1.peek ( ) + " " + ( sum1 - pq1.peek ( ) * pq1.size ( ) + pq2.peek ( ) * pq2.size ( ) - sum2 + bsum ) ) ; } else { System.out.println ( - pq2.peek ( ) + " " + ( sum1 - pq1.peek ( ) * pq1.size ( ) + pq2.peek ( ) * pq2.size ( ) - sum2 + bsum ) ) ; } } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC153_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int sho = h / a ; int am = h % a ; if ( am != 0 ) { sho ++ ; } System.out.println ( sho ) ; } }
import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.io.PrintWriter ; public class atcoder_ABC158_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; PrintWriter pw = new PrintWriter ( System.out ) ; String str = br.readLine ( ) ; String result = "Yes" ; if ( ! str.contains ( "A" ) || ! str.contains ( "B" ) ) { result = "No" ; } pw.println ( result ) ; pw.flush ( ) ; } }
root = lambda x : x if par [ x ] == x else root ( par [ x ] )
same = lambda x , y : root ( x ) == root ( y )
def unite ( * z ) :
    x , y = map ( root , z )
    if x != y :
        if rank [ x ] < rank [ y ] :
            par [ x ] = y
            size [ y ] += size [ x ]
        else :
            par [ y ] = x
            size [ x ] += size [ y ]
            if rank [ x ] == rank [ y ] : rank [ x ] += 1
n , * a = map ( int , open ( 0 ).read ( ).split ( ) )
* par , = range ( n )
rank = [ 1 ] * n
size = [ 1 ] * n
b = [ 0 ] * n
for i , t in enumerate ( a ) : b [ t - 1 ] = i
c = 0
for k in b [ : : - 1 ] :
    l = r = 1
    if k > 0 and a [ k - 1 ] > a [ k ] :
        l += size [ root ( k - 1 ) ]
        unite ( k - 1 , k )
    if k + 1 < n and a [ k + 1 ] > a [ k ] :
        r += size [ root ( k + 1 ) ]
        unite ( k + 1 , k )
    c += l * r * a [ k ]
print ( c )
import java.util.Scanner ; public class codeforces_70_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; String s = in.next ( ) ; int ans = 1 , sum = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == ' ' || s.charAt ( i ) == '.' || s.charAt ( i ) == ',' || s.charAt ( i ) == '?' || s.charAt ( i ) == '!' ) { if ( sum > 0 ) sum ++ ; if ( sum + i - ( sum > 0 ) > n ) { sum = i ; ans ++ ; } } else sum ++ ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC125_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int cookie = 0 ; int time = a ; while ( time <= t + 0.5 ) { cookie += b ; time += a ; } System.out.println ( cookie ) ; } }
import java.util.ArrayList ; import java.util.List ; import java.util.Scanner ; public class atcoder_ABC145_C { static double calcDistance ( List < Integer > x , List < Integer > y , int a , int b ) { return Math.sqrt ( Math.pow ( x.get ( b ) - x.get ( a ) , 2 ) + Math.pow ( y.get ( b ) - y.get ( a ) , 2 ) ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; List < Integer > x = new ArrayList < > ( ) ; List < Integer > y = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { x.add ( sc.nextInt ( ) ) ; y.add ( sc.nextInt ( ) ) ; } double sumDistance = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { sumDistance += calcDistance ( x , y , i , j ) ; } } double answer = sumDistance / ( N * ( N - 1 ) ) ; System.out.println ( answer ) ; } }
import java.util.* ; public class atcoder_ABC164_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int S , W ; S = sc.nextInt ( ) ; W = sc.nextInt ( ) ; if ( S <= W ) { System.out.println ( "unsafe" ) ; } else { System.out.println ( "safe" ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_514_A { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System.in ) ; StringBuilder sb = new StringBuilder ( ) ; String s = sc.next ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { int x = Character.getNumericValue ( s.charAt ( i ) ) ; if ( x > 4 ) { x = 9 - x ; } sb.append ( x ) ; } if ( s.charAt ( 0 ) == '9' ) { sb.replace ( 0 , 1 , "9" ) ; } System.out.println ( sb ) ; } }
import java.util.ArrayList ; import java.util.HashMap ; import java.util.List ; import java.util.Map ; import java.util.Scanner ; public class codeforces_272_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; List < Integer > seq = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) seq.add ( in.nextInt ( ) ) ; System.out.println ( nPairsWithCommonFX ( seq ) ) ; } public static long nPairsWithCommonFX ( List < Integer > sequence ) { Map < Integer , List < Integer >> storage = new HashMap < > ( ) ; List < Integer > FXs = new ArrayList < > ( ) ; for ( int value : sequence ) { int y = f ( value ) ; if ( ! storage.containsKey ( y ) ) { storage.put ( y , new ArrayList < > ( ) ) ; FXs.add ( y ) ; } storage.get ( y ).add ( value ) ; } long result = 0 ; for ( int y : FXs ) { List < Integer > group = storage.get ( y ) ; result += ( long ) group.size ( ) * ( long ) group.size ( ) - ( long ) group.size ( ) ; } return result / 2 ; } public static int f ( int n ) { int y = 1 ; while ( n != 1 ) { if ( n % 2 == 1 ) y ++ ; n /= 2 ; } return y ; } }
l = [ ]
limit = 10000000000
def gen ( number , four , seven ) :
    if ( number > limit ) :
        return
    if ( number > 0 and four == seven ) :
        l.append ( number )
    gen ( number * 10 + 4 , four + 1 , seven )
    gen ( number * 10 + 7 , four , seven + 1 )
def main ( ) :
    gen ( 0 , 0 , 0 )
    l.sort ( )
    n = int ( input ( ) )
    ans = 0
    for val in l :
        if ( val >= n ) :
            ans = val
            break
    print ( ans )
main ( )
import java.util.Scanner ; public class atcoder_ABC169_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] low = new int [ N ] ; int [ ] high = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { low [ i ] = sc.nextInt ( ) ; high [ i ] = sc.nextInt ( ) ; } Arrays.sort ( low ) ; Arrays.sort ( high ) ; if ( N % 2 == 0 ) { int hh = ( high [ N / 2 - 1 ] + high [ N / 2 ] ) / 2 ; int ll = ( low [ N / 2 - 1 ] + low [ N / 2 ] ) / 2 ; System.out.println ( ( hh - ll ) * 2 + 1 ) ; } else { System.out.println ( high [ ( N + 1 ) / 2 - 1 ] - low [ ( N + 1 ) / 2 - 1 ] + 1 ) ; } } }
import numpy as np
from collections import deque
import heapq
N, M = map(int, input().split())
edges = [set() for _ in range(N)]
degs = [0 for i in range(N)]
parity = [0 for _ in range(N)]
flag = [False for _ in range(N)]
for _ in range(M):
    a, b = map(int, input().split())
    edges[a - 1].add(b - 1)
    edges[b - 1].add(a - 1)
    degs[a - 1] += 1
    degs[b - 1] += 1
if M % 2 != 0:
    print(-1)
    exit()
Q = []
for i, d in enumerate(degs):
    Q.append((d, i))
heapq.heapify(Q)
while len(Q) > 0:
    _, u = Q[0]
    heapq.heappop(Q)
    if flag[u]:
        continue
    flag[u] = True
    for i, v in enumerate(edges[u]):
        edges[v].remove(u)
        if parity[u] != 0 and i == 0:
            print(u + 1, v + 1)
            parity[u] = 1 - parity[u]
        else:
            print(v + 1, u + 1)
            parity[v] = 1 - parity[v]
        degs[v] -= 1
        heapq.heappush(Q, (degs[v], v))
import java.util.* ; import java.io.* ; public class codeforces_147_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; String s = in.nextLine ( ) ; String res = "" ; int i = 0 ; while ( i < s.length ( ) ) { if ( s.charAt ( i ) != ' ' ) { res += s.charAt ( i ) ; } else if ( res.charAt ( res.length ( ) - 1 ) != ' ' ) { res += s.charAt ( i ) ; } i ++ ; } System.out.println ( res ) ; } }
import java.util.* ; public class atcoder_ABC152_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } long lcm = 1 ; for ( int i = 0 ; i < N ; i ++ ) { lcm = lcm * A [ i ] / gcd ( lcm , A [ i ] ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += lcm / A [ i ] ; } ans %= 1000000007 ; System.out.println ( ans ) ; } public static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java.util.Scanner ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int x , t , a , b , da , db ; x = in.nextInt ( ) ; t = in.nextInt ( ) ; a = in.nextInt ( ) ; b = in.nextInt ( ) ; da = in.nextInt ( ) ; db = in.nextInt ( ) ; boolean f = false ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < t ; j ++ ) { if ( a - da * i == x || b - db * j == x || a - da * i + b - db * j == x ) { f = true ; break ; } } if ( f ) { break ; } } if ( f ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } }
import java.util.* ; public class atcoder_ABC123_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ x ] ; int [ ] b = new int [ y ] ; int [ ] c = new int [ z ] ; for ( int i = 0 ; i < x ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < y ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < z ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } ArrayList < Integer > ab = new ArrayList < > ( ) ; for ( int i = 0 ; i < x ; i ++ ) { for ( int j = 0 ; j < y ; j ++ ) { ab.add ( a [ i ] + b [ j ] ) ; } } Collections.sort ( ab , Collections.reverseOrder ( ) ) ; ArrayList < Integer > abc = new ArrayList < > ( ) ; for ( int i = 0 ; i < Math.min ( k , x * y ) ; i ++ ) { for ( int j = 0 ; j < z ; j ++ ) { abc.add ( ab.get ( i ) + c [ j ] ) ; } } Collections.sort ( abc , Collections.reverseOrder ( ) ) ; for ( int i = 0 ; i < k ; i ++ ) { System.out.println ( abc.get ( i ) ) ; } } }
import sys
input_methods = [ 'clipboard' , 'file' , 'key' ]
using_method = 0
input_method = input_methods [ using_method ]
IN = lambda : map ( int , input ( ).split ( ) )
mod = 1000000007
def main_b ( ) :
    s = input ( )
    pp = 0
    na = 0
    for i , c in enumerate ( s [ : : - 1 ] ) :
        cc = na + int ( c )
        na = 0
        if cc <= 4 :
            pp += cc
        else :
            na = 1
            if i == len ( s ) - 1 :
                pp += 1
            pp += 10 - cc
    print ( pp )
def main ( ) :
    s = input ( )
    pmin = 1000
    mmin = 0
    s = '0' + s
    for c in s [ : : - 1 ] :
        v = int ( c )
        npmin = min ( pmin + 10 - ( v + 1 ) , mmin + 10 - v )
        nmmin = min ( pmin + v + 1 , mmin + v )
        pmin = npmin
        mmin = nmmin
    return min ( pmin , mmin )
isTest = False
def pa ( v ) :
    if isTest :
        print ( v )
def input_clipboard ( ) :
    import clipboard
    input_text = clipboard.get ( )
    input_l = input_text.splitlines ( )
    for l in input_l :
        yield l
if __name__ == "__main__" :
    if sys.platform == 'ios' :
        if input_method == input_methods [ 0 ] :
            ic = input_clipboard ( )
            input = lambda : ic.__next__ ( )
        elif input_method == input_methods [ 1 ] :
            sys.stdin = open ( 'inputFile.txt' )
        else :
            pass
        isTest = True
    else :
        pass
    ret = main ( )
    if ret is not None :
        print ( ret )
import java.util.* ; import java.io.* ; public class codeforces_369_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n , k , l , r , sa , sk ; n = sc.nextInt ( ) ; k = sc.nextInt ( ) ; l = sc.nextInt ( ) ; r = sc.nextInt ( ) ; sa = sc.nextInt ( ) ; sk = sc.nextInt ( ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < k ) { if ( i < ( sk % k ) ) { ans [ i ] = sk / k + 1 ; } else { ans [ i ] = sk / k ; } } else { if ( i < ( sa - sk ) % ( n - k ) + ( n - k ) ) { ans [ i ] = ( sa - sk ) / ( n - k ) + 1 ; } else { ans [ i ] = ( sa - sk ) / ( n - k ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
from collections import defaultdict
import sys
sys.setrecursionlimit(10**7)
graph = defaultdict(list)
N, K = map(int, input().split())
for i in range(N-1):
    a, b = map(int, input().split())
    graph[a-1].append(b-1)
    graph[b-1].append(a-1)
mod = 10**9 + 7


def dfs(fro, to, f):
    caseNum = f
    colorNum = K - 1 if f == K else K - 2
    for u in graph[fro]:
        if u == to:
            continue
        pat = dfs(u, fro, colorNum)
        if pat == 0:
            caseNum = 0
            break
        caseNum = caseNum * pat % mod
        colorNum -= 1
    return caseNum


ans = dfs(0, -1, K)
print(ans)
import java.util.* ; public class codeforces_95_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.next ( ) ; } String str = sc.next ( ) ; char c = sc.next ( ).charAt ( 0 ) ; char c1 = c ; char c2 = 'a' ; if ( c == 'a' ) c2 = 'b' ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int index = 0 ; while ( index < str.length ( ) ) { index = str.indexOf ( arr [ i ] , index ) ; if ( index != - 1 ) { for ( int j = index ; j < index + arr [ i ].length ( ) ; j ++ ) set.add ( j ) ; index ++ ; } else break ; } } StringBuilder sb = new StringBuilder ( str ) ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { if ( set.contains ( i ) ) { if ( str.charAt ( i ) == c1 ) sb.setCharAt ( i , c2 ) ; else sb.setCharAt ( i , c1 ) ; } } System.out.println ( sb ) ; } }
import java.util.* ; public class codeforces_373_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int w = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int lo = 0 ; int hi = ( int ) 1e18 ; while ( hi - lo > 1 ) { int md = ( lo + hi ) / 2 ; int c = sum ( m + md - 1 ) - sum ( m - 1 ) ; if ( c * k <= w ) { lo = md ; } else { hi = md ; } } System.out.println ( lo ) ; } public static int sum ( int k ) { int ret = 0 ; int pw = 10 ; int len = 1 ; while ( true ) { int cur = Math.min ( pw - 1 , k ) ; int prev = pw / 10 ; ret += ( cur - prev + 1 ) * len ; if ( pw - 1 >= k ) { break ; } len ++ ; pw *= 10 ; } return ret ; } }
import java.util.* ; public class codeforces_242_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; ArrayList < String > list = new ArrayList < > ( ) ; for ( int i = a ; i <= x ; i ++ ) { if ( i <= b ) continue ; for ( int j = b ; j <= y ; j ++ ) { if ( i > j ) { list.add ( i + " " + j ) ; } } } System.out.println ( list.size ( ) ) ; for ( String s : list ) { System.out.println ( s ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_608_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int f = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int x = t - ( s - f ) ; if ( x > max ) { max = x ; } } System.out.println ( s + max ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_469_A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; int n = Integer.parseInt ( br.readLine ( ) ) ; StringTokenizer st = new StringTokenizer ( br.readLine ( ) ) ; HashSet < Integer > hs = new HashSet < > ( ) ; while ( st.hasMoreTokens ( ) ) { hs.add ( Integer.parseInt ( st.nextToken ( ) ) ) ; } st = new StringTokenizer ( br.readLine ( ) ) ; while ( st.hasMoreTokens ( ) ) { hs.add ( Integer.parseInt ( st.nextToken ( ) ) ) ; } if ( hs.size ( ) == n ) System.out.println ( "I become the guy." ) ; else System.out.println ( "Oh, my keyboard!" ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_351_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double arr [ ] = new double [ n ] ; for ( int i = 0 ; i < n ; ++ i ) arr [ i ] = sc.nextDouble ( ) ; Arrays.sort ( arr ) ; double sum = 0.0 ; for ( int i = 0 ; i < n ; ++ i ) sum += arr [ i ] ; double res = 1000000000.0 ; for ( int i = 0 ; i <= n ; ++ i ) { double cnt = sum + i - n ; res = Math.min ( res , Math.abs ( cnt ) ) ; } System.out.printf ( "%.3f\n" , res ) ; } }
import java.util.* ; public class atcoder_AGC003_C { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int d = a [ i ] % n ; if ( ( d % 2 ) != ( i % 2 ) ) { cnt ++ ; } } System.out.println ( cnt / 2 ) ; } }
import java.util.Scanner ; public class codeforces_629_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; char [ ] [ ] cake = new char [ n ] [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { cake [ i ] [ j ] = s.charAt ( j ) ; if ( cake [ i ] [ j ] == 'C' ) count ++ ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int count1 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ i ] [ j ] == 'C' ) count1 ++ ; } if ( count1 > 1 ) sum += ( count1 - 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { int count1 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ j ] [ i ] == 'C' ) count1 ++ ; } if ( count1 > 1 ) sum += ( count1 - 1 ) ; } System.out.println ( sum ) ; } }
import java.util.Scanner ; import java.lang.Math ; public class codeforces_459_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; int x3 = x2 + ( x2 - x1 ) ; int y3 = y2 + ( y2 - y1 ) ; int x4 = x1 + ( x2 - x1 ) ; int y4 = y1 + ( y2 - y1 ) ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } }
import java.util.Scanner ; public class codeforces_32_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String str = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < str.length ( ) ; i ++ ) { if ( str.charAt ( i ) == '.' ) { sb.append ( 0 ) ; } else { if ( str.charAt ( i + 1 ) == '.' ) { sb.append ( 1 ) ; } else { sb.append ( 2 ) ; } i ++ ; } } System.out.println ( sb ) ; } }
import java.util.Scanner ; public class atcoder_AGC012_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i % 2 == 0 ) { ans += A [ N - 1 - i ] ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; import java.math.* ; public class atcoder_ABC122_D { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System.in ) ; int N = in.nextInt ( ) ; in.close ( ) ; BigInteger [ ] dp = new BigInteger [ N + 1 ] ; dp [ 0 ] = BigInteger.valueOf ( 1 ) ; for ( int i = 0 ; i < N ; i ++ ) { BigInteger [ ] ndp = new BigInteger [ N + 1 ] ; for ( int j = 0 ; j < N ; j ++ ) { for ( char c : "AGCT".toCharArray ( ) ) { if ( ! ( ( j >= 1 && ( "AGCT".charAt ( j - 1 ) + Character.toString ( c ) ).equals ( "AGC" ) ) || ( j >= 2 && ( "AGCT".charAt ( j - 2 ) + "" + c ).equals ( "AGC" ) ) ) ) { ndp [ j + 1 ] = ndp [ j + 1 ].add ( dp [ j ] ) ; } } } dp = ndp ; } System.out.println ( dp [ N ] ) ; } }
import java.util.Scanner ; public class atcoder_ABC042_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; int c = in.nextInt ( ) ; if ( a + b + c != 17 ) { System.out.println ( "NO" ) ; } else { if ( a == 5 && b == 5 ) { System.out.println ( "YES" ) ; } else if ( a == 5 && c == 5 ) { System.out.println ( "YES" ) ; } else if ( b == 5 && c == 5 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } } }
import java.util.* ; import java.io.* ; public class codeforces_629_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] m = new int [ 370 ] ; int [ ] f = new int [ 370 ] ; for ( int i = 0 ; i < n ; i ++ ) { char c = in.next ( ).charAt ( 0 ) ; int x = in.nextInt ( ) ; int y = in.nextInt ( ) ; if ( c == 'M' ) { m [ x ] += 2 ; m [ y + 1 ] -= 2 ; } else { f [ x ] += 2 ; f [ y + 1 ] -= 2 ; } } int m_sum = 0 ; int f_sum = 0 ; int best = 0 ; for ( int i = 0 ; i < 370 ; i ++ ) { m_sum += m [ i ] ; f_sum += f [ i ] ; best = Math.max ( best , Math.min ( m_sum , f_sum ) ) ; } System.out.println ( best ) ; } }
import math
import numpy as np
import fractions
import statistics
import collections
from functools import reduce
import itertools
N = int(input())
A = [int(input()) for i in range(5)]
print(math.ceil(N/np.min(np.array(A))) + 4)
from collections import defaultdict


def main():
    n, k = map(int, input().split())
    l = list(map(int, input().split()))
    l.insert(0, -1)
    path = [1]
    ind = 0
    count = 0
    x = 1
    t = -1
    flag = False
    Hash = defaultdict(lambda: 0)

    for i in range(n + 1):
        ne = l[x]
        if Hash[ne]:
            flag = True
            t = Hash[ne]
            break
        path.append(ne)
        ind += 1
        Hash[ne] = ind
        x = ne
    if flag:
        loop = path[t:]
        if k < len(path):
            print(path[k])
        else:
            k = k - len(path)
            k = k % len(loop)
            print(loop[k])
    else:
        print(path[k - 1])


if __name__ == "__main__":
    main()
import java.util.Scanner ; public class atcoder_ABC051_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( ( a + b + c ) >= 2 ) { count ++ ; } } System.out.println ( count ) ; } }
from itertools import accumulate

n, q = map(int, input().split())
s = input()
problems = [list(map(int, input().split())) for _ in range(q)]


def count(total, i):
    return total + 1 if s[i-1:i+1] == 'AC' else total


cumsum = list(accumulate([0]+list(range(1, n)), count))

for l, r in problems:
    print(cumsum[r-1] - cumsum[l-1])
import java.util.Scanner ; public class codeforces_673_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < arr.length ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } if ( arr [ 0 ] > 15 ) { System.out.println ( 15 ) ; } else { for ( int i = 1 ; i < arr.length ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] > 15 ) { System.out.println ( arr [ i - 1 ] + 15 ) ; break ; } } else { if ( arr [ arr.length - 1 ] == 90 || arr [ arr.length - 1 ] + 15 >= 90 ) { System.out.println ( 90 ) ; } else { System.out.println ( arr [ arr.length - 1 ] + 15 ) ; } } } } }
import java.util.* ; public class atcoder_ABC174_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int low = 1 , high = ( int ) 1e9 , ans = 0 ; while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( check ( a , k , mid ) ) { ans = mid ; high = mid - 1 ; } else { low = mid + 1 ; } } System.out.println ( ans ) ; } static boolean check ( int [ ] a , int k , int mid ) { for ( int i = 0 ; i < a.length ; i ++ ) { if ( a [ i ] % mid == 0 ) k += a [ i ] / mid ; else k -= a [ i ] / mid ; } return k >= 0 ; } }
import java.util.* ; public class atcoder_ABC154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; String U = sc.next ( ) ; if ( S.equals ( U ) ) { A -= 1 ; } if ( T.equals ( U ) ) { B -= 1 ; } System.out.println ( A + " " + B ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_637_A { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int ans = 0 ; HashMap < Integer , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = in.nextInt ( ) ; if ( ! hm.containsKey ( x ) ) { hm.put ( x , 1 ) ; } else { hm.put ( x , hm.get ( x ) + 1 ) ; } ans = Math.max ( ans , hm.get ( x ) ) ; } for ( int i : hm.keySet ( ) ) { if ( hm.get ( i ) == ans ) { System.out.println ( i ) ; return ; } } } }
n, d = map(int, input().split())
x = list(map(int, input().split()))
m = 0
for i in range(n - 1):
    if x[i] >= x[i + 1]:
        q = int((x[i] - x[i + 1]) / d + 1)
        m += q
        x[i + 1] += q * d
print(m)
import java.util.* ; import java.io.* ; public class atcoder_ABC150_C { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System.in ) ; int N = stdIn.nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = stdIn.nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = stdIn.nextInt ( ) ; } int ai = 0 ; int bi = 0 ; int ai_count = 0 ; int bi_count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( a [ i ] == a [ ai ] ) { ai_count ++ ; } if ( b [ i ] == b [ bi ] ) { bi_count ++ ; } } int ai_sum = 0 ; int bi_sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( a [ i ] == a [ ai ] ) { ai_sum ++ ; } if ( b [ i ] == b [ bi ] ) { bi_sum ++ ; } if ( ai_sum == ai_count ) { ai ++ ; ai_sum = 0 ; } if ( bi_sum == bi_count ) { bi ++ ; bi_sum = 0 ; } } int res = Math.abs ( ai - bi ) ; System.out.println ( res ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC145_E { static int T , N ; static int [ ] [ ] dp ; static int [ ] [ ] A ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; N = sc.nextInt ( ) ; T = sc.nextInt ( ) ; A = new int [ N + 1 ] [ 2 ] ; for ( int i = 1 ; i <= N ; i ++ ) { A [ i ] [ 0 ] = sc.nextInt ( ) ; A [ i ] [ 1 ] = sc.nextInt ( ) ; } dp = new int [ N + 1 ] [ T + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= T ; j ++ ) { if ( j < A [ i ] [ 0 ] ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } else { dp [ i ] [ j ] = Math.max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - A [ i ] [ 0 ] ] + A [ i ] [ 1 ] ) ; } } } int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans = Math.max ( ans , dp [ i ] [ T ] ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_621_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int sum = 0 ; int c = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] % 2 == 1 ) { if ( c == 2 ) { sum += arr [ i ] ; c ++ ; } else c ++ ; } else { sum += arr [ i ] ; } } System.out.println ( sum ) ; } }
n , k = map ( int , input ( ).split ( ) )
x = 0
if k <= max ( n ** 2 // 2 , n ** 2 - ( n ** 2 // 2 ) ) :
    print ( 'YES' )
    for i in range ( n ) :
        for j in range ( n ) :
            if i % 2 == j % 2 and x < k :
                print ( 'L' , end = '' )
                x += 1
            else : print ( 'S' , end = '' )
        print ( )
else : print ( 'NO' )
import sys
(N, K) = map(int, input().split())
lst = list(map(int, input().split()))
lst_p = []
lst_m = []
for i in range(N):
    if lst[i] == 0:
        K -= 1
    if lst[i] > 0:
        lst_p += [lst[i]]
    elif lst[i] < 0:
        lst_m += [lst[i]]
p = 0
m = 0
(x, y) = (0, len(lst_m) - 1)
lastx = len(lst_p)
lasty = len(lst_m)

def check(k):
    ans = 10 ** 9
    for j in range(0, k + 1):
        if j > lastx or k - j > lasty:
            pass
        else:
            if j == 0:
                p = 0
            else:
                p = lst_p[j - 1]
            if k - j == 0:
                m = 0
            else:
                m = lst_m[lasty - (k - j)]
            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))
    return ans
print(check(K))
import java.util.* ; public class codeforces_450_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n , m ; n = sc.nextInt ( ) ; m = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc.nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % m == 0 ) b [ i ] = a [ i ] / m ; else b [ i ] = a [ i ] / m + 1 ; } int mx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) mx = Math.max ( mx , b [ i ] ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( b [ i ] == mx ) ans = i + 1 ; System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_AGC017_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int P = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int odd = 0 ; int even = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } long ans = 0 ; for ( int i = 0 ; i <= odd ; i ++ ) { if ( i % 2 == P ) { ans += combi ( odd , i ) ; } } ans *= combi ( even , 0 ) ; System.out.println ( ans ) ; } static long combi ( int n , int k ) { long ans = 1 ; for ( int i = n ; i > n - k ; i -- ) { ans *= i ; } for ( int i = 1 ; i <= k ; i ++ ) { ans /= i ; } return ans ; } }
import java.util.* ; public class codeforces_682_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] L = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { L [ i ] = sc.nextInt ( ) ; } Arrays.sort ( L ) ; int ans = 0 ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( L [ i ] > cnt ) { cnt ++ ; ans ++ ; } } System.out.println ( ans + 1 ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ARC062_B { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; PrintWriter pw = new PrintWriter ( System.out ) ; int n = Integer.parseInt ( br.readLine ( ) ) ; int ans = 0 ; int g = 0 ; int p = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = br.readLine ( ) ; if ( s.equals ( "g" ) ) g ++ ; else if ( s.equals ( "p" ) ) { p ++ ; if ( g > p ) ans ++ ; } } pw.println ( ans ) ; pw.close ( ) ; } }
import java.util.Scanner ; public class atcoder_ABC114_C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int N = in.nextInt ( ) ; int [ ] dp = new int [ N + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i - 1 ) % 3 == 0 || i % 10 == 3 ) dp [ i ] = dp [ i - 1 ] ; else dp [ i ] = dp [ i - 1 ] + 1 ; } System.out.println ( dp [ N ] ) ; } }
import java.util.* ; public class atcoder_AGC002_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] [ ] balls = new int [ N ] [ 2 ] ; balls [ 0 ] [ 0 ] = 0 ; balls [ 0 ] [ 1 ] = 1 ; for ( int i = 0 ; i < M ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; x -- ; y -- ; if ( balls [ x ] [ 0 ] >= 1 && balls [ y ] [ 0 ] >= 1 ) { balls [ x ] [ 0 ] -- ; balls [ y ] [ 1 ] ++ ; } else if ( balls [ x ] [ 0 ] == 0 ) { balls [ x ] [ 1 ] -- ; balls [ y ] [ 1 ] ++ ; } else { balls [ x ] [ 0 ] -- ; balls [ y ] [ 0 ] ++ ; } } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( balls [ i ] [ 1 ] == 1 ) ans ++ ; } System.out.println ( ans ) ; } }
import java.util.Scanner ; public class atcoder_ABC145_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) != s.charAt ( n - 1 - i ) ) { System.out.println ( "No" ) ; return ; } } System.out.println ( "Yes" ) ; } }
import java.util.* ; public class codeforces_61_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String [ ] s = new String [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { s [ i ] = sc.next ( ) ; } String [ ] t = new String [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { t [ i ] = s [ i ] ; } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < s [ i ].length ( ) ; j ++ ) { if ( s [ i ].charAt ( j ) >= 'A' && s [ i ].charAt ( j ) <= 'Z' ) { t [ i ] = t [ i ].replace ( s [ i ].charAt ( j ) , ( char ) ( s [ i ].charAt ( j ) + 32 ) ) ; } } } HashSet < String > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = i + 1 ; j < 3 ; j ++ ) { for ( int k = j + 1 ; k < 3 ; k ++ ) { String str = "" ; str += t [ i ] + t [ j ] + t [ k ] ; hs.add ( str ) ; } } } int q = sc.nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { String str = sc.next ( ) ; for ( int j = 0 ; j < str.length ( ) ; j ++ ) { if ( str.charAt ( j ) >= 'A' && str.charAt ( j ) <= 'Z' ) { str = str.replace ( str.charAt ( j ) , ( char ) ( str.charAt ( j ) + 32 ) ) ; } } if ( hs.contains ( str ) ) { System.out.println ( "ACC" ) ; } else { System.out.println ( "WA" ) ; } } } }
import java.util.Scanner ; public class atcoder_ABC136_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int i = 1 ; int ans = 0 ; while ( 10 * i <= N ) { ans += 10 * i - 10 * ( i - 1 ) ; i += 2 ; } int rem = N - ( 10 * ( i - 1 ) ) ; ans += Math.max ( 0 , rem + 1 ) ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ARC086_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int max = 0 ; int index = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( Math.abs ( a [ i ] ) > max ) { max = Math.abs ( a [ i ] ) ; index = i ; } } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += Math.abs ( a [ i ] ) ; } if ( a [ index ] < 0 ) { for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = - a [ i ] ; } } System.out.println ( ans ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { System.out.println ( ( index + 1 ) + " " + ( i + 1 ) ) ; } for ( int i = N - 2 ; i >= 0 ; i -- ) { System.out.println ( ( i + 1 ) + " " + ( i + 2 ) ) ; } } }
from collections import Counter
s = list(input())
even = Counter(s[0::2])
odd = Counter(s[1::2])
print(min(len(s) - (even['0'] + odd['1']), len(s) - (even['1'] + odd['0'])))
100%|██████████| 250/250 [00:00<00:00, 8301.08it/s]
import queue


class Task:
    def __init__(self, time: int, duration: int, index: int) -> None:
        super().__init__()
        self.time = time
        self.duration = duration
        self.index = index


n, b = list(map(int, input().split()))
remaining = queue.Queue()
running = False
finish_time = 0
result = {}


def run_task(remaining: queue.Queue, finish_time: int):
    task_to_run = remaining.get()
    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration
    result[task_to_run.index] = finish_time
    return finish_time, result


for i in range(n):
    time, duration = list(map(int, input().split()))
    task = Task(time, duration, index=i)
    result.update({i: 0})
    if task.time > finish_time and remaining.empty():
        running = True
        finish_time = task.time + task.duration
        result[i] = finish_time
    else:
        if task.time >= finish_time and not remaining.empty():
            finish_time, result = run_task(remaining=remaining, finish_time=finish_time)
        if remaining.qsize() < b:
            remaining.put(task)
        else:
            result[i] = -1
while not remaining.empty():
    finish_time, result = run_task(remaining=remaining, finish_time=finish_time)
for key in result:
    print(result.get(key))
import java.util.Scanner ; import java.util.Arrays ; public class codeforces_624_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; long ans = 0 ; long tmp = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] >= tmp ) { ans += A [ i ] - tmp ; tmp ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC027_A { public static void main ( String args [ ] ) throws IOException { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long x = sc.nextLong ( ) ; long a [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextLong ( ) ; } Arrays.sort ( a ) ; int count = 0 ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( sum <= x ) { count ++ ; } else { break ; } } if ( sum > x ) { count -- ; } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_669_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; if ( n % 2 == 0 ) { System.out.println ( n / 2 ) ; } else { System.out.println ( n / 2 + 1 ) ; } } }
import sys
import math
from collections import defaultdict
sys.setrecursionlimit(10 ** 7)

def input():
    return sys.stdin.readline()[:-1]
mod = 10 ** 9 + 7

def I():
    return int(input())

def II():
    return map(int, input().split())

def III():
    return list(map(int, input().split()))

def Line(N):
    read_all = [tuple(map(int, input().split())) for _ in range(N)]
    return map(list, zip(*read_all))
S = str(input())
n = len(S)
if n == 1:
    if S == '5' or S == '?':
        print(1)
    else:
        print(0)
    exit()
dp = [[0] * 13 for i in range(n)]
for i in range(n):
    if i == 0:
        if S[i] != '?':
            dp[i][int(S[i])] += 1
        else:
            for j in range(10):
                dp[i][j] += 1
    else:
        if S[i] != '?':
            for k in range(13):
                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]
        else:
            for j in range(10):
                for k in range(13):
                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]
        for k in range(13):
            dp[i][k] %= mod
print(dp[n - 1][5])
import java.util.* ; import java.io.* ; import java.math.* ; public class atcoder_ABC133_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ d ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { a [ i ] [ j ] = sc.nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { BigInteger sum = BigInteger.ZERO ; for ( int k = 0 ; k < d ; k ++ ) { sum = sum.add ( BigInteger.valueOf ( a [ i ] [ k ] - a [ j ] [ k ] ).multiply ( BigInteger.valueOf ( a [ i ] [ k ] - a [ j ] [ k ] ) ) ) ; } if ( sum.sqrt ( ).pow ( 2 ).equals ( sum ) ) ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_622_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int l = 1 , r = n ; while ( l < r ) { int mid = l + ( r - l ) / 2 ; long idxcnt = ( long ) mid * ( mid + 1 ) / 2 ; if ( idxcnt < n ) l = mid + 1 ; else r = mid ; } l -- ; idxcnt = ( long ) l * ( l + 1 ) / 2 ; System.out.println ( ( int ) ( n - idxcnt ) ) ; } }
import java.util.* ; public class codeforces_519_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } int x = 0 , y = 0 , z = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += a [ i ] ; y += b [ i ] ; z += c [ i ] ; } System.out.println ( Math.abs ( x - y ) ) ; System.out.println ( Math.abs ( y - z ) ) ; } }
import sys
input = sys.stdin.readline
from collections import Counter
n = int ( input ( ) )
w = Counter ( map ( int , input ( ).split ( ) ) )
c = 0
for i in w :
    if i == 0 :
        c += w [ i ] * ( w [ i ] - 1 )
    else :
        if - i in w :
            c += w [ i ] * w [ - i ]
print ( c // 2 )
import java.util.* ; public class codeforces_379_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = 0 ; int d = 0 ; int e = 0 ; while ( a > 0 || d >= b ) { c += a ; d += c % b ; c = c / b ; e += c ; d = d % b ; } System.out.println ( e ) ; } }
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model yangccccc/deepseek-coder-multi --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC021_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_268_A.java' returned non-zero exit status 1.
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_400_B.java' returned non-zero exit status 1.
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC140_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC139_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Filename:  atcoder_ABC168_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC168_C.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC155_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 1.
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC155_E.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC123_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC122_C.java' returned non-zero exit status 1.
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 66
Success: ['atcoder_ABC112_A.java', 'atcoder_AGC038_A.java', 'codeforces_59_A.java', 'atcoder_ABC132_A.java', 'atcoder_ABC164_A.java', 'codeforces_37_A.java', 'codeforces_231_A.java', 'atcoder_ABC125_A.java', 'atcoder_ABC158_A.java', 'atcoder_AGC002_A.java', 'atcoder_ABC143_A.java', 'codeforces_92_A.java', 'codeforces_154_A.java', 'atcoder_ABC120_C.java', 'codeforces_32_B.java', 'codeforces_534_B.java', 'atcoder_AGC046_A.java', 'codeforces_272_B.java', 'atcoder_AGC006_B.java', 'codeforces_61_B.java', 'atcoder_ABC169_D.java', 'codeforces_608_A.java', 'codeforces_274_A.java', 'codeforces_514_A.java', 'codeforces_56_B.java', 'atcoder_ABC166_C.java', 'atcoder_ABC125_C.java', 'codeforces_31_A.java', 'codeforces_546_A.java', 'atcoder_ABC153_A.java', 'codeforces_340_A.java', 'atcoder_ABC111_C.java', 'atcoder_ABC171_B.java', 'codeforces_58_B.java', 'codeforces_79_A.java', 'codeforces_267_A.java', 'atcoder_ABC124_A.java', 'codeforces_581_A.java', 'codeforces_387_B.java', 'codeforces_612_B.java', 'codeforces_95_A.java', 'codeforces_682_B.java', 'atcoder_ABC170_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC142_A.java', 'atcoder_AGC034_B.java', 'codeforces_108_B.java', 'codeforces_607_A.java', 'codeforces_354_A.java', 'codeforces_569_A.java', 'codeforces_459_B.java', 'codeforces_49_A.java', 'atcoder_AGC033_B.java', 'codeforces_609_B.java', 'atcoder_ABC174_C.java', 'atcoder_ABC125_B.java', 'codeforces_369_B.java', 'codeforces_242_A.java', 'atcoder_ABC154_A.java', 'atcoder_ABC133_B.java', 'codeforces_567_A.java', 'codeforces_629_B.java', 'atcoder_ABC042_A.java', 'codeforces_146_A.java', 'codeforces_450_A.java', 'atcoder_ABC043_B.java']
Fail: ['atcoder_ABC167_C.java', 'codeforces_621_A.java', 'codeforces_624_B.java', 'codeforces_306_A.java', 'atcoder_ABC107_D.java', 'atcoder_ABC114_C.java', 'codeforces_30_A.java', 'codeforces_23_B.java', 'atcoder_ABC165_C.java', 'codeforces_106_B.java', 'codeforces_373_B.java', 'codeforces_408_B.java', 'codeforces_351_A.java', 'atcoder_ABC127_F.java', 'atcoder_ABC174_E.java', 'codeforces_678_A.java', 'codeforces_469_A.java', 'atcoder_ABC145_C.java', 'codeforces_287_A.java', 'atcoder_ABC164_D.java', 'atcoder_ABC150_C.java', 'atcoder_AGC027_B.java', 'atcoder_AGC007_C.java', 'atcoder_AGC029_C.java', 'codeforces_55_B.java', 'atcoder_ABC104_C.java', 'atcoder_ABC172_D.java', 'atcoder_AGC002_B.java', 'codeforces_216_B.java', 'atcoder_ABC123_B.java', 'atcoder_ABC152_E.java', 'atcoder_ABC178_B.java', 'atcoder_AGC027_A.java', 'codeforces_299_A.java', 'codeforces_189_A.java', 'codeforces_190_A.java', 'codeforces_669_A.java', 'atcoder_AGC010_B.java', 'codeforces_25_A.java', 'atcoder_ABC136_B.java', 'atcoder_ABC145_B.java', 'atcoder_ARC086_B.java', 'codeforces_282_B.java', 'atcoder_ABC145_E.java', 'codeforces_242_B.java', 'codeforces_459_A.java', 'atcoder_ARC102_C.java', 'codeforces_302_A.java', 'codeforces_637_A.java', 'atcoder_ABC171_E.java', 'codeforces_148_B.java', 'codeforces_134_A.java', 'atcoder_AGC017_A.java', 'codeforces_678_B.java', 'atcoder_AGC003_C.java', 'atcoder_ABC112_C.java', 'atcoder_ABC108_B.java', 'codeforces_333_B.java', 'codeforces_356_A.java', 'codeforces_296_A.java', 'codeforces_86_A.java', 'codeforces_147_A.java', 'codeforces_672_A.java', 'codeforces_474_B.java', 'codeforces_171_A.java', 'atcoder_AGC013_A.java', 'codeforces_629_A.java', 'atcoder_ABC089_C.java', 'codeforces_518_B.java', 'atcoder_ABC150_D.java', 'atcoder_ABC147_D.java', 'atcoder_AGC046_B.java', 'codeforces_412_A.java', 'atcoder_ABC142_C.java', 'atcoder_ABC126_D.java', 'codeforces_583_B.java', 'atcoder_AGC024_B.java', 'codeforces_519_B.java', 'atcoder_AGC028_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC132_F.java', 'atcoder_ABC106_C.java', 'atcoder_ABC122_D.java', 'atcoder_ABC051_A.java', 'codeforces_327_A.java', 'codeforces_313_B.java', 'codeforces_67_B.java', 'atcoder_ABC149_C.java', 'codeforces_265_B.java', 'codeforces_276_B.java', 'codeforces_462_B.java', 'codeforces_500_A.java', 'atcoder_AGC004_D.java', 'codeforces_400_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC169_C.java', 'atcoder_ARC062_B.java', 'atcoder_AGC043_B.java', 'codeforces_665_A.java', 'codeforces_387_A.java', 'codeforces_456_A.java', 'atcoder_ABC127_B.java', 'atcoder_ABC070_B.java', 'atcoder_ABC133_E.java', 'codeforces_7_B.java', 'atcoder_ABC168_B.java', 'atcoder_AGC037_E.java', 'atcoder_ABC146_D.java', 'atcoder_ABC118_C.java', 'codeforces_581_B.java', 'codeforces_673_A.java', 'codeforces_651_A.java', 'codeforces_203_A.java', 'atcoder_AGC005_B.java', 'codeforces_397_B.java', 'atcoder_ABC137_D.java', 'codeforces_70_B.java', 'atcoder_AGC033_A.java', 'atcoder_ABC110_C.java', 'codeforces_421_A.java', 'codeforces_8_B.java', 'codeforces_131_B.java', 'codeforces_617_B.java', 'atcoder_ABC140_D.java', 'codeforces_55_A.java', 'codeforces_598_A.java', 'atcoder_ABC139_B.java', 'atcoder_ABC178_A.java', 'atcoder_AGC014_D.java', 'atcoder_AGC021_B.java', 'codeforces_544_B.java', 'codeforces_11_A.java', 'atcoder_ABC152_C.java', 'codeforces_203_B.java', 'atcoder_AGC011_C.java', 'codeforces_653_A.java', 'codeforces_705_B.java', 'atcoder_ABC122_C.java', 'atcoder_ABC149_B.java', 'atcoder_ABC143_D.java', 'codeforces_404_A.java', 'codeforces_644_B.java', 'atcoder_ABC162_D.java', 'codeforces_622_A.java', 'atcoder_AGC004_B.java', 'atcoder_AGC012_A.java', 'atcoder_ABC148_F.java', 'atcoder_ABC126_E.java', 'atcoder_ABC168_C.java', 'atcoder_ABC150_E.java', 'codeforces_400_B.java', 'atcoder_ABC151_A.java', 'codeforces_222_A.java', 'atcoder_ABC155_E.java', 'atcoder_ABC158_B.java', 'codeforces_268_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC134_E.java', 'atcoder_ABC128_C.java', 'atcoder_ABC109_B.java', 'atcoder_ABC140_F.java', 'atcoder_ABC135_D.java', 'atcoder_ABC129_E.java', 'codeforces_445_A.java', 'codeforces_334_A.java', 'atcoder_ABC169_E.java', 'atcoder_ABC167_D.java', 'atcoder_ABC105_D.java', 'codeforces_110_B.java', 'codeforces_596_B.java', 'codeforces_632_B.java', 'atcoder_AGC025_A.java', 'atcoder_AGC028_B.java', 'codeforces_96_B.java', 'atcoder_AGC019_A.java', 'codeforces_99_A.java', 'atcoder_ABC124_C.java', 'codeforces_342_B.java', 'codeforces_350_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC123_C.java', 'atcoder_AGC035_B.java', 'atcoder_AGC029_C.java', 'codeforces_579_A.java', 'codeforces_86_A.java', 'codeforces_379_A.java']
